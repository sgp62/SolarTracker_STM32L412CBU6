
SolarTracker_STM32L412CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800af30  0800af30  0001af30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b464  0800b464  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b464  0800b464  0001b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b46c  0800b46c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b46c  0800b46c  0001b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b470  0800b470  0001b470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f58  200001e4  0800b658  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000313c  0800b658  0002313c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca69  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a52  00000000  00000000  0003cc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  000406d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00041eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e01a  00000000  00000000  00043528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aac3  00000000  00000000  00061542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b81c0  00000000  00000000  0007c005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001341c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076f0  00000000  00000000  00134218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af14 	.word	0x0800af14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800af14 	.word	0x0800af14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9aa 	b.w	8000f98 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <vApplicationGetIdleTaskMemory+0x30>)
 8000fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000200 	.word	0x20000200
 8000fcc:	200002b4 	.word	0x200002b4

08000fd0 <GpsToDecimalDegrees>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  float v= 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  if(strlen(nmeaPos)>5)
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f8fe 	bl	80001e4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d948      	bls.n	8001080 <GpsToDecimalDegrees+0xb0>
  {
    char integerPart[3+1];
    int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff6:	d101      	bne.n	8000ffc <GpsToDecimalDegrees+0x2c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <GpsToDecimalDegrees+0x2e>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	613b      	str	r3, [r7, #16]
    memcpy(integerPart, nmeaPos, digitCount);
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f007 f89a 	bl	8008142 <memcpy>
    integerPart[digitCount]= 0;
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    nmeaPos+= digitCount;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	607b      	str	r3, [r7, #4]
    v= atoi(integerPart) + atof(nmeaPos)/60.;
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f006 ff63 	bl	8007ef2 <atoi>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa88 	bl	8000544 <__aeabi_i2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 ff57 	bl	8007eec <atof>
 800103e:	ec51 0b10 	vmov	r0, r1, d0
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <GpsToDecimalDegrees+0xc0>)
 8001048:	f7ff fc10 	bl	800086c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff f92a 	bl	80002ac <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd94 	bl	8000b8c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
    if(quadrant=='W' || quadrant=='S')
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b57      	cmp	r3, #87	; 0x57
 800106c:	d002      	beq.n	8001074 <GpsToDecimalDegrees+0xa4>
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b53      	cmp	r3, #83	; 0x53
 8001072:	d105      	bne.n	8001080 <GpsToDecimalDegrees+0xb0>
      v= -v;
 8001074:	edd7 7a05 	vldr	s15, [r7, #20]
 8001078:	eef1 7a67 	vneg.f32	s15, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return v;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	404e0000 	.word	0x404e0000

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b098      	sub	sp, #96	; 0x60
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 ff8a 	bl	8001fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f895 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 f98d 	bl	80013c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010a6:	f000 f8e7 	bl	8001278 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010aa:	f000 f929 	bl	8001300 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010ae:	f000 f957 	bl	8001360 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 12, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	210c      	movs	r1, #12
 80010b6:	2026      	movs	r0, #38	; 0x26
 80010b8:	f001 f86c 	bl	8002194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80010bc:	2026      	movs	r0, #38	; 0x26
 80010be:	f001 f885 	bl	80021cc <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <main+0x108>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a35      	ldr	r2, [pc, #212]	; (800119c <main+0x108>)
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f001 f855 	bl	800217e <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of spi_mutex */
  osMutexDef(spi_mutex);
 80010d4:	2300      	movs	r3, #0
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80010d8:	2300      	movs	r3, #0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
  spi_mutexHandle = osMutexCreate(osMutex(spi_mutex));
 80010dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fad7 	bl	8005694 <osMutexCreate>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <main+0x10c>)
 80010ea:	6013      	str	r3, [r2, #0]
//  osSemaphoreDef(external_sem);
//  external_semHandle = osSemaphoreCreate(osSemaphore(external_sem), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  spi_semHandle = xSemaphoreCreateCounting( 1, 0 );
 80010ec:	2100      	movs	r1, #0
 80010ee:	2001      	movs	r0, #1
 80010f0:	f004 fd22 	bl	8005b38 <xQueueCreateCountingSemaphore>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <main+0x110>)
 80010f8:	6013      	str	r3, [r2, #0]
  uart_semHandle = xSemaphoreCreateCounting( 1, 1 );
 80010fa:	2101      	movs	r1, #1
 80010fc:	2001      	movs	r0, #1
 80010fe:	f004 fd1b 	bl	8005b38 <xQueueCreateCountingSemaphore>
 8001102:	4603      	mov	r3, r0
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <main+0x114>)
 8001106:	6013      	str	r3, [r2, #0]
  external_semHandle = xSemaphoreCreateCounting( 1, 0 );
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f004 fd14 	bl	8005b38 <xQueueCreateCountingSemaphore>
 8001110:	4603      	mov	r3, r0
 8001112:	4a26      	ldr	r2, [pc, #152]	; (80011ac <main+0x118>)
 8001114:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 8001116:	2200      	movs	r2, #0
 8001118:	2164      	movs	r1, #100	; 0x64
 800111a:	2002      	movs	r0, #2
 800111c:	f004 fc66 	bl	80059ec <xQueueGenericCreate>
 8001120:	4603      	mov	r3, r0
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <main+0x11c>)
 8001124:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart1Task */
  osThreadDef(uart1Task, Startuart1Task, osPriorityNormal, 0, 512);
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <main+0x120>)
 8001128:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 800113a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fa5b 	bl	80055fc <osThreadCreate>
 8001146:	4603      	mov	r3, r0
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <main+0x124>)
 800114a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart2Task */
  osThreadDef(uart2Task, Startuart2Task, osPriorityNormal, 0, 512);
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <main+0x128>)
 800114e:	f107 0420 	add.w	r4, r7, #32
 8001152:	461d      	mov	r5, r3
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fa48 	bl	80055fc <osThreadCreate>
 800116c:	4603      	mov	r3, r0
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <main+0x12c>)
 8001170:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi1Task */
  osThreadDef(spi1Task, startspi1Task, osPriorityNormal, 0, 512);
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <main+0x130>)
 8001174:	1d3c      	adds	r4, r7, #4
 8001176:	461d      	mov	r5, r3
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spi1TaskHandle = osThreadCreate(osThread(spi1Task), NULL);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fa37 	bl	80055fc <osThreadCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <main+0x134>)
 8001192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001194:	f004 fa2b 	bl	80055ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x104>
 800119a:	bf00      	nop
 800119c:	40004400 	.word	0x40004400
 80011a0:	200006a0 	.word	0x200006a0
 80011a4:	200006a4 	.word	0x200006a4
 80011a8:	200006a8 	.word	0x200006a8
 80011ac:	200006ac 	.word	0x200006ac
 80011b0:	20000718 	.word	0x20000718
 80011b4:	0800af54 	.word	0x0800af54
 80011b8:	20000694 	.word	0x20000694
 80011bc:	0800af70 	.word	0x0800af70
 80011c0:	20000698 	.word	0x20000698
 80011c4:	0800af8c 	.word	0x0800af8c
 80011c8:	2000069c 	.word	0x2000069c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	; 0x58
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2244      	movs	r2, #68	; 0x44
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 ffbf 	bl	800815e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f2:	f001 f9fb 	bl	80025ec <HAL_PWREx_ControlVoltageScaling>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011fc:	f000 fc3e 	bl	8001a7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001200:	f001 f9d6 	bl	80025b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <SystemClock_Config+0xa8>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <SystemClock_Config+0xa8>)
 800120c:	f023 0318 	bic.w	r3, r3, #24
 8001210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001214:	2314      	movs	r3, #20
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fa31 	bl	8002698 <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800123c:	f000 fc1e 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fe7f 	bl	8002f5c <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001264:	f000 fc0a 	bl	8001a7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001268:	f002 fa54 	bl	8003714 <HAL_RCCEx_EnableMSIPLLMode>
}
 800126c:	bf00      	nop
 800126e:	3758      	adds	r7, #88	; 0x58
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000

08001278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_SPI1_Init+0x80>)
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <MX_SPI1_Init+0x84>)
 8001280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_SPI1_Init+0x80>)
 8001284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_SPI1_Init+0x80>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_SPI1_Init+0x80>)
 8001292:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001296:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_SPI1_Init+0x80>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012c6:	2207      	movs	r2, #7
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d6:	4808      	ldr	r0, [pc, #32]	; (80012f8 <MX_SPI1_Init+0x80>)
 80012d8:	f002 fa2c 	bl	8003734 <HAL_SPI_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 fbcb 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SSM;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <MX_SPI1_Init+0x84>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <MX_SPI1_Init+0x84>)
 80012ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000528 	.word	0x20000528
 80012fc:	40013000 	.word	0x40013000

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_USART1_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART1_UART_Init+0x58>)
 8001344:	f003 fc50 	bl	8004be8 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 fb95 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000058c 	.word	0x2000058c
 800135c:	40013800 	.word	0x40013800

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 8001366:	4a15      	ldr	r2, [pc, #84]	; (80013bc <MX_USART2_UART_Init+0x5c>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 800136c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART2_UART_Init+0x58>)
 80013a4:	f003 fc20 	bl	8004be8 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 fb65 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000610 	.word	0x20000610
 80013bc:	40004400 	.word	0x40004400

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <MX_GPIO_Init+0xe8>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <MX_GPIO_Init+0xe8>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_GPIO_Init+0xe8>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <MX_GPIO_Init+0xe8>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <MX_GPIO_Init+0xe8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <MX_GPIO_Init+0xe8>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xe8>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <MX_GPIO_Init+0xe8>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_GPIO_Init+0xe8>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2103      	movs	r1, #3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f001 f893 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f240 1101 	movw	r1, #257	; 0x101
 8001430:	481e      	ldr	r0, [pc, #120]	; (80014ac <MX_GPIO_Init+0xec>)
 8001432:	f001 f88d 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001436:	2303      	movs	r3, #3
 8001438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f000 ff0c 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001454:	f240 1301 	movw	r3, #257	; 0x101
 8001458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <MX_GPIO_Init+0xec>)
 800146e:	f000 fefd 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800147e:	2302      	movs	r3, #2
 8001480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_GPIO_Init+0xec>)
 800148a:	f000 feef 	bl	800226c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2105      	movs	r1, #5
 8001492:	2028      	movs	r0, #40	; 0x28
 8001494:	f000 fe7e 	bl	8002194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001498:	2028      	movs	r0, #40	; 0x28
 800149a:	f000 fe97 	bl	80021cc <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400

080014b0 <USART2_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <USART2_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014c8:	2208      	movs	r2, #8
 80014ca:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <USART2_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014da:	2204      	movs	r2, #4
 80014dc:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <USART2_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d036      	beq.n	800156a <USART2_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <USART2_IRQHandler+0xc4>)
 80014fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001500:	b29b      	uxth	r3, r3
 8001502:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b0d      	cmp	r3, #13
 8001508:	d002      	beq.n	8001510 <USART2_IRQHandler+0x60>
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b0a      	cmp	r3, #10
 800150e:	d119      	bne.n	8001544 <USART2_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <USART2_IRQHandler+0xc8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d028      	beq.n	800156a <USART2_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <USART2_IRQHandler+0xc8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4916      	ldr	r1, [pc, #88]	; (8001578 <USART2_IRQHandler+0xc8>)
 8001520:	600a      	str	r2, [r1, #0]
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <USART2_IRQHandler+0xcc>)
 8001524:	2100      	movs	r1, #0
 8001526:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <USART2_IRQHandler+0xd0>)
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	463a      	mov	r2, r7
 800152e:	2300      	movs	r3, #0
 8001530:	4912      	ldr	r1, [pc, #72]	; (800157c <USART2_IRQHandler+0xcc>)
 8001532:	f004 fc33 	bl	8005d9c <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <USART2_IRQHandler+0xc8>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <USART2_IRQHandler+0xd4>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 8001542:	e012      	b.n	800156a <USART2_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b24      	cmp	r3, #36	; 0x24
 8001548:	d003      	beq.n	8001552 <USART2_IRQHandler+0xa2>
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <USART2_IRQHandler+0xc8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2bc8      	cmp	r3, #200	; 0xc8
 8001550:	d102      	bne.n	8001558 <USART2_IRQHandler+0xa8>
				rx_index = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <USART2_IRQHandler+0xc8>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <USART2_IRQHandler+0xc8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	4906      	ldr	r1, [pc, #24]	; (8001578 <USART2_IRQHandler+0xc8>)
 8001560:	600a      	str	r2, [r1, #0]
 8001562:	4906      	ldr	r1, [pc, #24]	; (800157c <USART2_IRQHandler+0xcc>)
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8001568:	e7ff      	b.n	800156a <USART2_IRQHandler+0xba>
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004400 	.word	0x40004400
 8001578:	2000071c 	.word	0x2000071c
 800157c:	20000720 	.word	0x20000720
 8001580:	20000718 	.word	0x20000718
 8001584:	200004b4 	.word	0x200004b4

08001588 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_11)
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001598:	d105      	bne.n	80015a6 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  xSemaphoreGiveFromISR(external_semHandle, NULL);
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x28>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fc96 	bl	8005ed2 <xQueueGiveFromISR>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200006ac 	.word	0x200006ac

080015b4 <Startuart1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startuart1Task */
void Startuart1Task(void const * argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static int spi_gps_read_addr = 0;
	static SerialBuffer gps_ext_buffer;
	static int statusbuf[8];
	int num_messages = 4000; //Number of FRAM messages for offset 64B -> 256KB storage.
 80015bc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80015c0:	60bb      	str	r3, [r7, #8]
	//Code used for external UART write, reading SPI data
  /* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <Startuart1Task+0xe0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fdee 	bl	80061ac <xQueueSemaphoreTake>
		//Take both semaphores to keep other tasks from running (might be unnecessary bc higher priority)
		xSemaphoreTake(uart_semHandle, portMAX_DELAY);
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <Startuart1Task+0xe4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 fde7 	bl	80061ac <xQueueSemaphoreTake>
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <Startuart1Task+0xe8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f04f 31ff 	mov.w	r1, #4294967295
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fde0 	bl	80061ac <xQueueSemaphoreTake>
		spi_gps_read_addr = 0;
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <Startuart1Task+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < num_messages; i++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e03a      	b.n	800166e <Startuart1Task+0xba>

			//Read 64 bytes of data
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2101      	movs	r1, #1
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <Startuart1Task+0xf0>)
 80015fe:	f000 ffa7 	bl	8002550 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 8001602:	2201      	movs	r2, #1
 8001604:	4928      	ldr	r1, [pc, #160]	; (80016a8 <Startuart1Task+0xf4>)
 8001606:	4829      	ldr	r0, [pc, #164]	; (80016ac <Startuart1Task+0xf8>)
 8001608:	f002 f938 	bl	800387c <HAL_SPI_Transmit_IT>
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_gps_read_addr, 2);
 800160c:	2202      	movs	r2, #2
 800160e:	4924      	ldr	r1, [pc, #144]	; (80016a0 <Startuart1Task+0xec>)
 8001610:	4826      	ldr	r0, [pc, #152]	; (80016ac <Startuart1Task+0xf8>)
 8001612:	f002 f933 	bl	800387c <HAL_SPI_Transmit_IT>
			HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&gps_ext_buffer.Buffer, 3);
 8001616:	2203      	movs	r2, #3
 8001618:	4925      	ldr	r1, [pc, #148]	; (80016b0 <Startuart1Task+0xfc>)
 800161a:	4824      	ldr	r0, [pc, #144]	; (80016ac <Startuart1Task+0xf8>)
 800161c:	f002 f9bc 	bl	8003998 <HAL_SPI_Receive_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2101      	movs	r1, #1
 8001624:	481f      	ldr	r0, [pc, #124]	; (80016a4 <Startuart1Task+0xf0>)
 8001626:	f000 ff93 	bl	8002550 <HAL_GPIO_WritePin>

			spi_gps_read_addr += 64; //Increase offset to read next data value
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <Startuart1Task+0xec>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3340      	adds	r3, #64	; 0x40
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <Startuart1Task+0xec>)
 8001632:	6013      	str	r3, [r2, #0]

			// Read status register
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <Startuart1Task+0xf0>)
 800163a:	f000 ff89 	bl	8002550 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	491c      	ldr	r1, [pc, #112]	; (80016b4 <Startuart1Task+0x100>)
 8001642:	481a      	ldr	r0, [pc, #104]	; (80016ac <Startuart1Task+0xf8>)
 8001644:	f002 f91a 	bl	800387c <HAL_SPI_Transmit_IT>
			HAL_SPI_Receive_IT(&hspi1, (uint8_t *)statusbuf, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	491b      	ldr	r1, [pc, #108]	; (80016b8 <Startuart1Task+0x104>)
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <Startuart1Task+0xf8>)
 800164e:	f002 f9a3 	bl	8003998 <HAL_SPI_Receive_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	2101      	movs	r1, #1
 8001656:	4813      	ldr	r0, [pc, #76]	; (80016a4 <Startuart1Task+0xf0>)
 8001658:	f000 ff7a 	bl	8002550 <HAL_GPIO_WritePin>

			//Write NMEA message to external UART
			HAL_UART_Transmit(&huart1, (uint8_t*)&gps_ext_buffer.Buffer, 64, 100);
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	4913      	ldr	r1, [pc, #76]	; (80016b0 <Startuart1Task+0xfc>)
 8001662:	4816      	ldr	r0, [pc, #88]	; (80016bc <Startuart1Task+0x108>)
 8001664:	f003 fb0e 	bl	8004c84 <HAL_UART_Transmit>
		for(int i = 0; i < num_messages; i++){
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbc0      	blt.n	80015f8 <Startuart1Task+0x44>
		}

		//Let other tasks continue running
		xSemaphoreGive(uart_semHandle);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <Startuart1Task+0xe4>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	f004 fa8e 	bl	8005ba0 <xQueueGenericSend>
		xSemaphoreGive(spi_semHandle);
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <Startuart1Task+0xe8>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	f004 fa87 	bl	8005ba0 <xQueueGenericSend>
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 8001692:	e796      	b.n	80015c2 <Startuart1Task+0xe>
 8001694:	200006ac 	.word	0x200006ac
 8001698:	200006a8 	.word	0x200006a8
 800169c:	200006a4 	.word	0x200006a4
 80016a0:	200007ec 	.word	0x200007ec
 80016a4:	48000400 	.word	0x48000400
 80016a8:	0800afe5 	.word	0x0800afe5
 80016ac:	20000528 	.word	0x20000528
 80016b0:	200007f0 	.word	0x200007f0
 80016b4:	0800afe8 	.word	0x0800afe8
 80016b8:	20000854 	.word	0x20000854
 80016bc:	2000058c 	.word	0x2000058c

080016c0 <Startuart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startuart2Task */
void Startuart2Task(void const * argument)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	float latitude, longitude;

	char* message_id, *time, *data_valid, *raw_latitude, *raw_longitude, *latdir, *longdir;

	//Set RF Switch to 1 for external antenna:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	4856      	ldr	r0, [pc, #344]	; (8001828 <Startuart2Task+0x168>)
 80016d0:	f000 ff3e 	bl	8002550 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 80016d4:	4b55      	ldr	r3, [pc, #340]	; (800182c <Startuart2Task+0x16c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fe73 	bl	80063c4 <uxQueueMessagesWaitingFromISR>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f7      	beq.n	80016d4 <Startuart2Task+0x14>
	  {


		  xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <Startuart2Task+0x16c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4951      	ldr	r1, [pc, #324]	; (8001830 <Startuart2Task+0x170>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fc7d 	bl	8005fec <xQueueReceive>
		  //Fill and check header
		  for(int c = 0; c < 6; c++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f6:	e00b      	b.n	8001710 <Startuart2Task+0x50>
			  nmea_header[c] = SerialBufferReceived.Buffer[c];
 80016f8:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <Startuart2Task+0x170>)
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	4413      	add	r3, r2
 80016fe:	7819      	ldrb	r1, [r3, #0]
 8001700:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <Startuart2Task+0x174>)
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	4413      	add	r3, r2
 8001706:	460a      	mov	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
		  for(int c = 0; c < 6; c++){
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	3301      	adds	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001712:	2b05      	cmp	r3, #5
 8001714:	ddf0      	ble.n	80016f8 <Startuart2Task+0x38>
		  }
		  if(!strcmp(nmea_header, "$GPRMC")){
 8001716:	4948      	ldr	r1, [pc, #288]	; (8001838 <Startuart2Task+0x178>)
 8001718:	4846      	ldr	r0, [pc, #280]	; (8001834 <Startuart2Task+0x174>)
 800171a:	f7fe fd59 	bl	80001d0 <strcmp>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d17d      	bne.n	8001820 <Startuart2Task+0x160>
			  if(SerialBufferReceived.Buffer[18] == 'V'){
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <Startuart2Task+0x170>)
 8001726:	7c9b      	ldrb	r3, [r3, #18]
 8001728:	2b56      	cmp	r3, #86	; 0x56
 800172a:	d105      	bne.n	8001738 <Startuart2Task+0x78>
				  //No fix, turn on LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2101      	movs	r1, #1
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f000 ff0c 	bl	8002550 <HAL_GPIO_WritePin>

			  }
			  if(SerialBufferReceived.Buffer[18] == 'A'){
 8001738:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <Startuart2Task+0x170>)
 800173a:	7c9b      	ldrb	r3, [r3, #18]
 800173c:	2b41      	cmp	r3, #65	; 0x41
 800173e:	d16f      	bne.n	8001820 <Startuart2Task+0x160>
				  //Got a fix, turn off LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2101      	movs	r1, #1
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f000 ff02 	bl	8002550 <HAL_GPIO_WritePin>

				  message_id = SerialBufferReceived.Buffer;
 800174c:	4b38      	ldr	r3, [pc, #224]	; (8001830 <Startuart2Task+0x170>)
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
				  time = FIND_AND_NUL(message_id, time, ',');
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001754:	f006 fe75 	bl	8008442 <strchr>
 8001758:	6278      	str	r0, [r7, #36]	; 0x24
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	3301      	adds	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
				  data_valid = FIND_AND_NUL(time, data_valid, ',');
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800176a:	f006 fe6a 	bl	8008442 <strchr>
 800176e:	6238      	str	r0, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	3301      	adds	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
				  raw_latitude = FIND_AND_NUL(data_valid, raw_latitude, ',');
 800177c:	212c      	movs	r1, #44	; 0x2c
 800177e:	6a38      	ldr	r0, [r7, #32]
 8001780:	f006 fe5f 	bl	8008442 <strchr>
 8001784:	61f8      	str	r0, [r7, #28]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3301      	adds	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
				  latdir = FIND_AND_NUL(raw_latitude, latdir, ',');
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	69f8      	ldr	r0, [r7, #28]
 8001796:	f006 fe54 	bl	8008442 <strchr>
 800179a:	61b8      	str	r0, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
				  raw_longitude = FIND_AND_NUL(latdir, raw_longitude, ',');
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	69b8      	ldr	r0, [r7, #24]
 80017ac:	f006 fe49 	bl	8008442 <strchr>
 80017b0:	6178      	str	r0, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
				  longdir = FIND_AND_NUL(raw_longitude, longdir, ',');
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	6978      	ldr	r0, [r7, #20]
 80017c2:	f006 fe3e 	bl	8008442 <strchr>
 80017c6:	6138      	str	r0, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3301      	adds	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]

				  latitude = GpsToDecimalDegrees(raw_latitude, *latdir);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	69f8      	ldr	r0, [r7, #28]
 80017dc:	f7ff fbf8 	bl	8000fd0 <GpsToDecimalDegrees>
 80017e0:	ed87 0a03 	vstr	s0, [r7, #12]
				  longitude = GpsToDecimalDegrees(raw_longitude, *longdir);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff fbf0 	bl	8000fd0 <GpsToDecimalDegrees>
 80017f0:	ed87 0a02 	vstr	s0, [r7, #8]


				  if(tim1_counter > 1000){ //Post SPI write semaphore every 1s there is a valid message
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <Startuart2Task+0x17c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fc:	d910      	bls.n	8001820 <Startuart2Task+0x160>
					  xSemaphoreGive(spi_semHandle);
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <Startuart2Task+0x180>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	f004 f9ca 	bl	8005ba0 <xQueueGenericSend>
					  tim1_counter = 0;
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <Startuart2Task+0x17c>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
					  xSemaphoreTake(uart_semHandle, portMAX_DELAY); //Wait until SPI is posted
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <Startuart2Task+0x184>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f04f 31ff 	mov.w	r1, #4294967295
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fcc6 	bl	80061ac <xQueueSemaphoreTake>
//					  //osSemaphoreRelease(SPI_semHandle);
//
//				  }
			  }
		  }
		  got_nmea=0;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <Startuart2Task+0x188>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8001826:	e755      	b.n	80016d4 <Startuart2Task+0x14>
 8001828:	48000400 	.word	0x48000400
 800182c:	20000718 	.word	0x20000718
 8001830:	200006b0 	.word	0x200006b0
 8001834:	200004b8 	.word	0x200004b8
 8001838:	0800afa8 	.word	0x0800afa8
 800183c:	20000714 	.word	0x20000714
 8001840:	200006a4 	.word	0x200006a4
 8001844:	200006a8 	.word	0x200006a8
 8001848:	200004b4 	.word	0x200004b4

0800184c <startspi1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startspi1Task */
void startspi1Task(void const * argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startspi1Task */
	HAL_StatusTypeDef response = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]

	//SPI Initialization **************************
	//Write CS Pin high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2101      	movs	r1, #1
 800185c:	486d      	ldr	r0, [pc, #436]	; (8001a14 <startspi1Task+0x1c8>)
 800185e:	f000 fe77 	bl	8002550 <HAL_GPIO_WritePin>
	// Enable write enable latch (allow write operations)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	486b      	ldr	r0, [pc, #428]	; (8001a14 <startspi1Task+0x1c8>)
 8001868:	f000 fe72 	bl	8002550 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	496a      	ldr	r1, [pc, #424]	; (8001a18 <startspi1Task+0x1cc>)
 8001870:	486a      	ldr	r0, [pc, #424]	; (8001a1c <startspi1Task+0x1d0>)
 8001872:	f002 f803 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	4866      	ldr	r0, [pc, #408]	; (8001a14 <startspi1Task+0x1c8>)
 800187c:	f000 fe68 	bl	8002550 <HAL_GPIO_WritePin>

	// Test bytes to write to EEPROM
	spi_mout_buf[0] = 0xAB;
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <startspi1Task+0x1d4>)
 8001882:	22ab      	movs	r2, #171	; 0xab
 8001884:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0xCD;
 8001886:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <startspi1Task+0x1d4>)
 8001888:	22cd      	movs	r2, #205	; 0xcd
 800188a:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0xEF;
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <startspi1Task+0x1d4>)
 800188e:	22ef      	movs	r2, #239	; 0xef
 8001890:	709a      	strb	r2, [r3, #2]

	// Write 3 bytes starting at given address
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	485f      	ldr	r0, [pc, #380]	; (8001a14 <startspi1Task+0x1c8>)
 8001898:	f000 fe5a 	bl	8002550 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WRITE, 1);
 800189c:	2201      	movs	r2, #1
 800189e:	4961      	ldr	r1, [pc, #388]	; (8001a24 <startspi1Task+0x1d8>)
 80018a0:	485e      	ldr	r0, [pc, #376]	; (8001a1c <startspi1Task+0x1d0>)
 80018a2:	f001 ffeb 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 80018a6:	2202      	movs	r2, #2
 80018a8:	495f      	ldr	r1, [pc, #380]	; (8001a28 <startspi1Task+0x1dc>)
 80018aa:	485c      	ldr	r0, [pc, #368]	; (8001a1c <startspi1Task+0x1d0>)
 80018ac:	f001 ffe6 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)spi_mout_buf, 3);
 80018b0:	2203      	movs	r2, #3
 80018b2:	495b      	ldr	r1, [pc, #364]	; (8001a20 <startspi1Task+0x1d4>)
 80018b4:	4859      	ldr	r0, [pc, #356]	; (8001a1c <startspi1Task+0x1d0>)
 80018b6:	f001 ffe1 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2101      	movs	r1, #1
 80018be:	4855      	ldr	r0, [pc, #340]	; (8001a14 <startspi1Task+0x1c8>)
 80018c0:	f000 fe46 	bl	8002550 <HAL_GPIO_WritePin>
	//IO Driver for output pin enable

	// Clear buffer
	spi_mout_buf[0] = 0;
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <startspi1Task+0x1d4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0;
 80018ca:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <startspi1Task+0x1d4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0;
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <startspi1Task+0x1d4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	709a      	strb	r2, [r3, #2]

	// Wait until WIP bit is cleared
	spi_wip = 1;
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <startspi1Task+0x1e0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 80018dc:	e02b      	b.n	8001936 <startspi1Task+0xea>
	{
	 // Read status register
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	484c      	ldr	r0, [pc, #304]	; (8001a14 <startspi1Task+0x1c8>)
 80018e4:	f000 fe34 	bl	8002550 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	4951      	ldr	r1, [pc, #324]	; (8001a30 <startspi1Task+0x1e4>)
 80018ec:	484b      	ldr	r0, [pc, #300]	; (8001a1c <startspi1Task+0x1d0>)
 80018ee:	f001 ffc5 	bl	800387c <HAL_SPI_Transmit_IT>
	 response = HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	494a      	ldr	r1, [pc, #296]	; (8001a20 <startspi1Task+0x1d4>)
 80018f6:	4849      	ldr	r0, [pc, #292]	; (8001a1c <startspi1Task+0x1d0>)
 80018f8:	f002 f84e 	bl	8003998 <HAL_SPI_Receive_IT>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
	 if (response == HAL_OK) {
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <startspi1Task+0xc8>
	  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <startspi1Task+0x1d4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	4849      	ldr	r0, [pc, #292]	; (8001a34 <startspi1Task+0x1e8>)
 800190e:	f006 fcc3 	bl	8008298 <iprintf>
 8001912:	e004      	b.n	800191e <startspi1Task+0xd2>
	 } else {
	  printf("Got error response as %d\r\n", response);
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	4619      	mov	r1, r3
 8001918:	4847      	ldr	r0, [pc, #284]	; (8001a38 <startspi1Task+0x1ec>)
 800191a:	f006 fcbd 	bl	8008298 <iprintf>
	 }
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2101      	movs	r1, #1
 8001922:	483c      	ldr	r0, [pc, #240]	; (8001a14 <startspi1Task+0x1c8>)
 8001924:	f000 fe14 	bl	8002550 <HAL_GPIO_WritePin>

	 // Mask out WIP bit
	 spi_wip = spi_mout_buf[0] & 0b00000001;
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <startspi1Task+0x1d4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <startspi1Task+0x1e0>)
 8001934:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <startspi1Task+0x1e0>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1cf      	bne.n	80018de <startspi1Task+0x92>
	}

	// Read the 3 bytes back
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2101      	movs	r1, #1
 8001942:	4834      	ldr	r0, [pc, #208]	; (8001a14 <startspi1Task+0x1c8>)
 8001944:	f000 fe04 	bl	8002550 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	493c      	ldr	r1, [pc, #240]	; (8001a3c <startspi1Task+0x1f0>)
 800194c:	4833      	ldr	r0, [pc, #204]	; (8001a1c <startspi1Task+0x1d0>)
 800194e:	f001 ff95 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 8001952:	2202      	movs	r2, #2
 8001954:	4934      	ldr	r1, [pc, #208]	; (8001a28 <startspi1Task+0x1dc>)
 8001956:	4831      	ldr	r0, [pc, #196]	; (8001a1c <startspi1Task+0x1d0>)
 8001958:	f001 ff90 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 3);
 800195c:	2203      	movs	r2, #3
 800195e:	4930      	ldr	r1, [pc, #192]	; (8001a20 <startspi1Task+0x1d4>)
 8001960:	482e      	ldr	r0, [pc, #184]	; (8001a1c <startspi1Task+0x1d0>)
 8001962:	f002 f819 	bl	8003998 <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2101      	movs	r1, #1
 800196a:	482a      	ldr	r0, [pc, #168]	; (8001a14 <startspi1Task+0x1c8>)
 800196c:	f000 fdf0 	bl	8002550 <HAL_GPIO_WritePin>

	// Read status register
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2101      	movs	r1, #1
 8001974:	4827      	ldr	r0, [pc, #156]	; (8001a14 <startspi1Task+0x1c8>)
 8001976:	f000 fdeb 	bl	8002550 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	492c      	ldr	r1, [pc, #176]	; (8001a30 <startspi1Task+0x1e4>)
 800197e:	4827      	ldr	r0, [pc, #156]	; (8001a1c <startspi1Task+0x1d0>)
 8001980:	f001 ff7c 	bl	800387c <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 1);
 8001984:	2201      	movs	r2, #1
 8001986:	4926      	ldr	r1, [pc, #152]	; (8001a20 <startspi1Task+0x1d4>)
 8001988:	4824      	ldr	r0, [pc, #144]	; (8001a1c <startspi1Task+0x1d0>)
 800198a:	f002 f805 	bl	8003998 <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800198e:	2201      	movs	r2, #1
 8001990:	2101      	movs	r1, #1
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <startspi1Task+0x1c8>)
 8001994:	f000 fddc 	bl	8002550 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
	  xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <startspi1Task+0x1f4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 fc03 	bl	80061ac <xQueueSemaphoreTake>

	  //Send over SPI to FRAM
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data

	  // Write 64 bytes starting at given address
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2101      	movs	r1, #1
 80019aa:	481a      	ldr	r0, [pc, #104]	; (8001a14 <startspi1Task+0x1c8>)
 80019ac:	f000 fdd0 	bl	8002550 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WRITE, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	491c      	ldr	r1, [pc, #112]	; (8001a24 <startspi1Task+0x1d8>)
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <startspi1Task+0x1d0>)
 80019b6:	f001 ff61 	bl	800387c <HAL_SPI_Transmit_IT>
	  HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 80019ba:	2202      	movs	r2, #2
 80019bc:	491a      	ldr	r1, [pc, #104]	; (8001a28 <startspi1Task+0x1dc>)
 80019be:	4817      	ldr	r0, [pc, #92]	; (8001a1c <startspi1Task+0x1d0>)
 80019c0:	f001 ff5c 	bl	800387c <HAL_SPI_Transmit_IT>
	  HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&SerialBufferReceived.Buffer, 64);
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	491f      	ldr	r1, [pc, #124]	; (8001a44 <startspi1Task+0x1f8>)
 80019c8:	4814      	ldr	r0, [pc, #80]	; (8001a1c <startspi1Task+0x1d0>)
 80019ca:	f001 ff57 	bl	800387c <HAL_SPI_Transmit_IT>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2101      	movs	r1, #1
 80019d2:	4810      	ldr	r0, [pc, #64]	; (8001a14 <startspi1Task+0x1c8>)
 80019d4:	f000 fdbc 	bl	8002550 <HAL_GPIO_WritePin>

	  spi_addr += 64; //Offset within destination device to hold NMEA message
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <startspi1Task+0x1dc>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	3340      	adds	r3, #64	; 0x40
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <startspi1Task+0x1dc>)
 80019e2:	801a      	strh	r2, [r3, #0]


	  xSemaphoreGive(uart_semHandle);
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <startspi1Task+0x1fc>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	f004 f8d7 	bl	8005ba0 <xQueueGenericSend>

	  //Blink LED to signal SPI write happened
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	2102      	movs	r1, #2
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f000 fda9 	bl	8002550 <HAL_GPIO_WritePin>
	  vTaskDelay( 200 / portTICK_PERIOD_MS );
 80019fe:	20c8      	movs	r0, #200	; 0xc8
 8001a00:	f004 ffd0 	bl	80069a4 <vTaskDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0c:	f000 fda0 	bl	8002550 <HAL_GPIO_WritePin>
	  xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001a10:	e7c2      	b.n	8001998 <startspi1Task+0x14c>
 8001a12:	bf00      	nop
 8001a14:	48000400 	.word	0x48000400
 8001a18:	0800afe7 	.word	0x0800afe7
 8001a1c:	20000528 	.word	0x20000528
 8001a20:	200004c0 	.word	0x200004c0
 8001a24:	0800afe6 	.word	0x0800afe6
 8001a28:	20000524 	.word	0x20000524
 8001a2c:	20000526 	.word	0x20000526
 8001a30:	0800afe8 	.word	0x0800afe8
 8001a34:	0800afb0 	.word	0x0800afb0
 8001a38:	0800afc4 	.word	0x0800afc4
 8001a3c:	0800afe5 	.word	0x0800afe5
 8001a40:	200006a4 	.word	0x200006a4
 8001a44:	200006b0 	.word	0x200006b0
 8001a48:	200006a8 	.word	0x200006a8

08001a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	tim1_counter++; //Incrementing at 1kHz (1000 in 1 second)
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8001a68:	f000 fabc 	bl	8001fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000714 	.word	0x20000714
 8001a78:	40012c00 	.word	0x40012c00

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	f06f 0001 	mvn.w	r0, #1
 8001ac6:	f000 fb65 	bl	8002194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_SPI_MspInit+0x8c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12f      	bne.n	8001b5a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_SPI_MspInit+0x90>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_SPI_MspInit+0x90>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b04:	6613      	str	r3, [r2, #96]	; 0x60
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_SPI_MspInit+0x90>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_SPI_MspInit+0x90>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_SPI_MspInit+0x90>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_SPI_MspInit+0x90>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b2a:	2338      	movs	r3, #56	; 0x38
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <HAL_SPI_MspInit+0x94>)
 8001b46:	f000 fb91 	bl	800226c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2023      	movs	r0, #35	; 0x23
 8001b50:	f000 fb20 	bl	8002194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b54:	2023      	movs	r0, #35	; 0x23
 8001b56:	f000 fb39 	bl	80021cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40013000 	.word	0x40013000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000400 	.word	0x48000400

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b098      	sub	sp, #96	; 0x60
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	f107 0318 	add.w	r3, r7, #24
 8001b8c:	2234      	movs	r2, #52	; 0x34
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f006 fae4 	bl	800815e <memset>
  if(huart->Instance==USART1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d138      	bne.n	8001c12 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 fc2b 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb8:	f7ff ff60 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc0:	4a35      	ldr	r2, [pc, #212]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f000 fb2e 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c10:	e03b      	b.n	8001c8a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_UART_MspInit+0x12c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d136      	bne.n	8001c8a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fbed 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001c34:	f7ff ff22 	bl	8001a7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c42:	6593      	str	r3, [r2, #88]	; 0x58
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c78:	2307      	movs	r3, #7
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f000 faf1 	bl	800226c <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3760      	adds	r7, #96	; 0x60
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	2019      	movs	r0, #25
 8001cb6:	f000 fa6d 	bl	8002194 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cba:	2019      	movs	r0, #25
 8001cbc:	f000 fa86 	bl	80021cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_InitTick+0x9c>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_InitTick+0x9c>)
 8001cc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cca:	6613      	str	r3, [r2, #96]	; 0x60
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_InitTick+0x9c>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd8:	f107 0210 	add.w	r2, r7, #16
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fafe 	bl	80032e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ce8:	f001 fae6 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8001cec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_InitTick+0xa0>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_InitTick+0xa4>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <HAL_InitTick+0xa8>)
 8001d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_InitTick+0xa4>)
 8001d04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <HAL_InitTick+0xa4>)
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_InitTick+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_InitTick+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <HAL_InitTick+0xa4>)
 8001d1e:	f002 fce4 	bl	80046ea <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d28:	4806      	ldr	r0, [pc, #24]	; (8001d44 <HAL_InitTick+0xa4>)
 8001d2a:	f002 fd3f 	bl	80047ac <HAL_TIM_Base_Start_IT>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3730      	adds	r7, #48	; 0x30
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	20000874 	.word	0x20000874
 8001d48:	40012c00 	.word	0x40012c00

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d7e:	f002 fd69 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000874 	.word	0x20000874

08001d8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <SPI1_IRQHandler+0x10>)
 8001d92:	f001 ff61 	bl	8003c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000528 	.word	0x20000528

08001da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001da4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001da8:	f000 fbea 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
	return 1;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_kill>:

int _kill(int pid, int sig)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dca:	f006 f897 	bl	8007efc <__errno>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2216      	movs	r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
	return -1;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_exit>:

void _exit (int status)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ffe7 	bl	8001dc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001df2:	e7fe      	b.n	8001df2 <_exit+0x12>

08001df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e00a      	b.n	8001e1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e06:	f3af 8000 	nop.w
 8001e0a:	4601      	mov	r1, r0
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	b2ca      	uxtb	r2, r1
 8001e14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbf0      	blt.n	8001e06 <_read+0x12>
	}

return len;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e009      	b.n	8001e54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3301      	adds	r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbf1      	blt.n	8001e40 <_write+0x12>
	}
	return len;
 8001e5c:	687b      	ldr	r3, [r7, #4]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_close>:

int _close(int file)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_isatty>:

int _isatty(int file)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f005 fffc 	bl	8007efc <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000a000 	.word	0x2000a000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	200008c0 	.word	0x200008c0
 8001f38:	20003140 	.word	0x20003140

08001f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff ffea 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f006 f8b1 	bl	80080f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff f87f 	bl	8001094 <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fa4:	0800b474 	.word	0x0800b474
  ldr r2, =_sbss
 8001fa8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fac:	2000313c 	.word	0x2000313c

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>

08001fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f8de 	bl	800217e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f7ff fe6c 	bl	8001ca0 <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	e001      	b.n	8001fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd4:	f7ff fd58 	bl	8001a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008
 8002008:	200008c4 	.word	0x200008c4

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200008c4 	.word	0x200008c4

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff4c 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a6:	f7ff ff61 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	6978      	ldr	r0, [r7, #20]
 80021b2:	f7ff ffb1 	bl	8002118 <NVIC_EncodePriority>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff80 	bl	80020c4 <__NVIC_SetPriority>
}
 80021c4:	bf00      	nop
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff54 	bl	8002088 <__NVIC_EnableIRQ>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d005      	beq.n	800220c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e029      	b.n	8002260 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	f003 021c 	and.w	r2, r3, #28
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
    }
  }
  return status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e14e      	b.n	800251a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8140 	beq.w	8002514 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0203 	and.w	r2, r3, #3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 809a 	beq.w	8002514 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6613      	str	r3, [r2, #96]	; 0x60
 80023ec:	4b52      	ldr	r3, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002422:	d013      	beq.n	800244c <HAL_GPIO_Init+0x1e0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a46      	ldr	r2, [pc, #280]	; (8002540 <HAL_GPIO_Init+0x2d4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00d      	beq.n	8002448 <HAL_GPIO_Init+0x1dc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a45      	ldr	r2, [pc, #276]	; (8002544 <HAL_GPIO_Init+0x2d8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d007      	beq.n	8002444 <HAL_GPIO_Init+0x1d8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_GPIO_Init+0x2dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_GPIO_Init+0x1d4>
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 8002440:	2307      	movs	r3, #7
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x1e2>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_GPIO_Init+0x2d0>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_GPIO_Init+0x2e0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_GPIO_Init+0x2e0>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_GPIO_Init+0x2e0>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_GPIO_Init+0x2e0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_GPIO_Init+0x2e0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f aea9 	bne.w	800227c <HAL_GPIO_Init+0x10>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	48000400 	.word	0x48000400
 8002544:	48000800 	.word	0x48000800
 8002548:	48000c00 	.word	0x48000c00
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800256c:	e002      	b.n	8002574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fff2 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40007000 	.word	0x40007000

080025ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fa:	d130      	bne.n	800265e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d038      	beq.n	800267c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002612:	4a1e      	ldr	r2, [pc, #120]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002618:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2232      	movs	r2, #50	; 0x32
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	3301      	adds	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002630:	e002      	b.n	8002638 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3b01      	subs	r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	d102      	bne.n	800264c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f2      	bne.n	8002632 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d110      	bne.n	800267c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e00f      	b.n	800267e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d007      	beq.n	800267c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002674:	4a05      	ldr	r2, [pc, #20]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40007000 	.word	0x40007000
 8002690:	20000000 	.word	0x20000000
 8002694:	431bde83 	.word	0x431bde83

08002698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f000 bc4f 	b.w	8002f4a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ac:	4b97      	ldr	r3, [pc, #604]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b6:	4b95      	ldr	r3, [pc, #596]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80e6 	beq.w	800289a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4c>
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	f040 808d 	bne.w	80027f6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 8089 	bne.w	80027f6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e4:	4b89      	ldr	r3, [pc, #548]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_RCC_OscConfig+0x66>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f000 bc26 	b.w	8002f4a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002702:	4b82      	ldr	r3, [pc, #520]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_RCC_OscConfig+0x80>
 800270e:	4b7f      	ldr	r3, [pc, #508]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002716:	e005      	b.n	8002724 <HAL_RCC_OscConfig+0x8c>
 8002718:	4b7c      	ldr	r3, [pc, #496]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	4293      	cmp	r3, r2
 8002726:	d224      	bcs.n	8002772 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fe0b 	bl	8003348 <RCC_SetFlashLatencyFromMSIRange>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f000 bc06 	b.w	8002f4a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273e:	4b73      	ldr	r3, [pc, #460]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b70      	ldr	r3, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	496d      	ldr	r1, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275c:	4b6b      	ldr	r3, [pc, #428]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	4968      	ldr	r1, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e025      	b.n	80027be <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002772:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	4960      	ldr	r1, [pc, #384]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002790:	4b5e      	ldr	r3, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	495b      	ldr	r1, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fdca 	bl	8003348 <RCC_SetFlashLatencyFromMSIRange>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e3c5      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027be:	f000 fccd 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	4950      	ldr	r1, [pc, #320]	; (8002910 <HAL_RCC_OscConfig+0x278>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027de:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fa5c 	bl	8001ca0 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d052      	beq.n	8002898 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	e3a9      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d032      	beq.n	8002864 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a42      	ldr	r2, [pc, #264]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800280a:	f7ff fbff 	bl	800200c <HAL_GetTick>
 800280e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002812:	f7ff fbfb 	bl	800200c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e392      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a35      	ldr	r2, [pc, #212]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002836:	f043 0308 	orr.w	r3, r3, #8
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	4930      	ldr	r1, [pc, #192]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284e:	4b2f      	ldr	r3, [pc, #188]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	492b      	ldr	r1, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
 8002862:	e01a      	b.n	800289a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002870:	f7ff fbcc 	bl	800200c <HAL_GetTick>
 8002874:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002878:	f7ff fbc8 	bl	800200c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e35f      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_OscConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1e0>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d073      	beq.n	800298e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_OscConfig+0x220>
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d10e      	bne.n	80028d0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d063      	beq.n	800298c <HAL_RCC_OscConfig+0x2f4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d15f      	bne.n	800298c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e33c      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x250>
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e025      	b.n	8002934 <HAL_RCC_OscConfig+0x29c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d114      	bne.n	800291c <HAL_RCC_OscConfig+0x284>
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <HAL_RCC_OscConfig+0x274>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a02      	ldr	r2, [pc, #8]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0x29c>
 800290c:	40021000 	.word	0x40021000
 8002910:	0800afec 	.word	0x0800afec
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004
 800291c:	4b8f      	ldr	r3, [pc, #572]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a8e      	ldr	r2, [pc, #568]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a8b      	ldr	r2, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7ff fb66 	bl	800200c <HAL_GetTick>
 8002940:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff fb62 	bl	800200c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e2f9      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002956:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x2ac>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff fb52 	bl	800200c <HAL_GetTick>
 8002968:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7ff fb4e 	bl	800200c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e2e5      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297e:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x2d4>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d060      	beq.n	8002a5c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d005      	beq.n	80029ac <HAL_RCC_OscConfig+0x314>
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d119      	bne.n	80029da <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d116      	bne.n	80029da <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ac:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x32c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e2c2      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	4962      	ldr	r1, [pc, #392]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	e040      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d023      	beq.n	8002a2a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e2:	4b5e      	ldr	r3, [pc, #376]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5d      	ldr	r2, [pc, #372]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7ff fb0d 	bl	800200c <HAL_GetTick>
 80029f2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f6:	f7ff fb09 	bl	800200c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e2a0      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a08:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	494e      	ldr	r1, [pc, #312]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
 8002a28:	e018      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4b      	ldr	r2, [pc, #300]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7ff fae9 	bl	800200c <HAL_GetTick>
 8002a3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7ff fae5 	bl	800200c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e27c      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8082 	beq.w	8002b6e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d05f      	beq.n	8002b32 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002a72:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a78:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d037      	beq.n	8002af8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e254      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aba:	f7ff faa7 	bl	800200c <HAL_GetTick>
 8002abe:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff faa3 	bl	800200c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b11      	cmp	r3, #17
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e23a      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae8:	f023 0210 	bic.w	r2, r3, #16
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	491a      	ldr	r1, [pc, #104]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff fa80 	bl	800200c <HAL_GetTick>
 8002b0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7ff fa7c 	bl	800200c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e213      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x478>
 8002b30:	e01d      	b.n	8002b6e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7ff fa63 	bl	800200c <HAL_GetTick>
 8002b46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff fa5f 	bl	800200c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b11      	cmp	r3, #17
 8002b56:	d903      	bls.n	8002b60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1f6      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
 8002b5c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b60:	4ba9      	ldr	r3, [pc, #676]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ed      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80bd 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b82:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10e      	bne.n	8002bac <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	4a9d      	ldr	r2, [pc, #628]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9a:	4b9b      	ldr	r3, [pc, #620]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bac:	4b97      	ldr	r3, [pc, #604]	; (8002e0c <HAL_RCC_OscConfig+0x774>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d118      	bne.n	8002bea <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x774>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a93      	ldr	r2, [pc, #588]	; (8002e0c <HAL_RCC_OscConfig+0x774>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fa22 	bl	800200c <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7ff fa1e 	bl	800200c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1b5      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x774>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002bf6:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	497f      	ldr	r1, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c1c:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	4a79      	ldr	r2, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c2c:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3c:	e018      	b.n	8002c70 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	4a70      	ldr	r2, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c50:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d016      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7ff f9c8 	bl	800200c <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7ff f9c4 	bl	800200c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e159      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c96:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ed      	beq.n	8002c80 <HAL_RCC_OscConfig+0x5e8>
 8002ca4:	e01d      	b.n	8002ce2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7ff f9b1 	bl	800200c <HAL_GetTick>
 8002caa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7ff f9ad 	bl	800200c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e142      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ed      	bne.n	8002cae <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a4b      	ldr	r2, [pc, #300]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d03c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d10:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f977 	bl	800200c <HAL_GetTick>
 8002d1e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d22:	f7ff f973 	bl	800200c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e10a      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0ef      	beq.n	8002d22 <HAL_RCC_OscConfig+0x68a>
 8002d42:	e01b      	b.n	8002d7c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7ff f95a 	bl	800200c <HAL_GetTick>
 8002d58:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d5c:	f7ff f956 	bl	800200c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0ed      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ef      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80e1 	beq.w	8002f48 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	f040 80b5 	bne.w	8002efa <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0203 	and.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d124      	bne.n	8002dee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	3b01      	subs	r3, #1
 8002db0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11b      	bne.n	8002dee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d113      	bne.n	8002dee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d05f      	beq.n	8002eae <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d05a      	beq.n	8002eaa <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <HAL_RCC_OscConfig+0x770>)
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e00:	f7ff f904 	bl	800200c <HAL_GetTick>
 8002e04:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e06:	e00c      	b.n	8002e22 <HAL_RCC_OscConfig+0x78a>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7ff f8fc 	bl	800200c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e093      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e22:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2e:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x8c0>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e48:	0212      	lsls	r2, r2, #8
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e50:	0852      	lsrs	r2, r2, #1
 8002e52:	3a01      	subs	r2, #1
 8002e54:	0552      	lsls	r2, r2, #21
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e5c:	0852      	lsrs	r2, r2, #1
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	0652      	lsls	r2, r2, #25
 8002e62:	430a      	orrs	r2, r1
 8002e64:	493b      	ldr	r1, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a39      	ldr	r2, [pc, #228]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e74:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	4a36      	ldr	r2, [pc, #216]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e80:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e82:	f7ff f8c3 	bl	800200c <HAL_GetTick>
 8002e86:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7ff f8bf 	bl	800200c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e056      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea8:	e04e      	b.n	8002f48 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e04d      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d146      	bne.n	8002f48 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a25      	ldr	r2, [pc, #148]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed2:	f7ff f89b 	bl	800200c <HAL_GetTick>
 8002ed6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7ff f897 	bl	800200c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e02e      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x842>
 8002ef8:	e026      	b.n	8002f48 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d021      	beq.n	8002f44 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff f87e 	bl	800200c <HAL_GetTick>
 8002f10:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7ff f87a 	bl	800200c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e011      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_RCC_OscConfig+0x8bc>)
 8002f38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	60d3      	str	r3, [r2, #12]
 8002f42:	e001      	b.n	8002f48 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	f99f808c 	.word	0xf99f808c

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0e7      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b72      	ldr	r3, [pc, #456]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4970      	ldr	r1, [pc, #448]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b6e      	ldr	r3, [pc, #440]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cf      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4960      	ldr	r1, [pc, #384]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04c      	beq.n	8003074 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d121      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0a6      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e09a      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003012:	4b4e      	ldr	r3, [pc, #312]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e08e      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e086      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b46      	ldr	r3, [pc, #280]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4943      	ldr	r1, [pc, #268]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe ffe2 	bl	800200c <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe ffde 	bl	800200c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e06e      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b3a      	ldr	r3, [pc, #232]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308c:	429a      	cmp	r2, r3
 800308e:	d208      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	492b      	ldr	r1, [pc, #172]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d210      	bcs.n	80030d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	4923      	ldr	r1, [pc, #140]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e036      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4918      	ldr	r1, [pc, #96]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4910      	ldr	r1, [pc, #64]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003110:	f000 f824 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	490b      	ldr	r1, [pc, #44]	; (8003150 <HAL_RCC_ClockConfig+0x1f4>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1f8>)
 800312e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1fc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fdb3 	bl	8001ca0 <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	72fb      	strb	r3, [r7, #11]

  return status;
 800313e:	7afb      	ldrb	r3, [r7, #11]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	0800afec 	.word	0x0800afec
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d121      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d11e      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003190:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e005      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031b8:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d102      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_GetSysClockFreq+0x110>)
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e004      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_RCC_GetSysClockFreq+0x114>)
 80031e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d134      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0xa6>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d003      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xac>
 8003200:	e005      	b.n	800320e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCC_GetSysClockFreq+0x110>)
 8003204:	617b      	str	r3, [r7, #20]
      break;
 8003206:	e005      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_GetSysClockFreq+0x114>)
 800320a:	617b      	str	r3, [r7, #20]
      break;
 800320c:	e002      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	617b      	str	r3, [r7, #20]
      break;
 8003212:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	3301      	adds	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0e5b      	lsrs	r3, r3, #25
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	3301      	adds	r3, #1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003254:	69bb      	ldr	r3, [r7, #24]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	0800b004 	.word	0x0800b004
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	; (80032b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	0800affc 	.word	0x0800affc

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032bc:	f7ff ffda 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0adb      	lsrs	r3, r3, #11
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	0800affc 	.word	0x0800affc

080032e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	220f      	movs	r2, #15
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_GetClockConfig+0x5c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_RCC_GetClockConfig+0x60>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0207 	and.w	r2, r3, #7
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	40022000 	.word	0x40022000

08003348 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003360:	f7ff f936 	bl	80025d0 <HAL_PWREx_GetVoltageRange>
 8003364:	6178      	str	r0, [r7, #20]
 8003366:	e014      	b.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	4a24      	ldr	r2, [pc, #144]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003372:	6593      	str	r3, [r2, #88]	; 0x58
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003380:	f7ff f926 	bl	80025d0 <HAL_PWREx_GetVoltageRange>
 8003384:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d10b      	bne.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d919      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2ba0      	cmp	r3, #160	; 0xa0
 80033a4:	d902      	bls.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033a6:	2302      	movs	r3, #2
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	e013      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ac:	2301      	movs	r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	e010      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d902      	bls.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033b8:	2303      	movs	r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e00a      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d102      	bne.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c4:	2302      	movs	r3, #2
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e004      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b70      	cmp	r3, #112	; 0x70
 80033ce:	d101      	bne.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 0207 	bic.w	r2, r3, #7
 80033dc:	4909      	ldr	r1, [pc, #36]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	40022000 	.word	0x40022000

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003410:	2300      	movs	r3, #0
 8003412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003414:	2300      	movs	r3, #0
 8003416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 809e 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	4a3f      	ldr	r2, [pc, #252]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344a:	6593      	str	r3, [r2, #88]	; 0x58
 800344c:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003458:	2301      	movs	r3, #1
 800345a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a39      	ldr	r2, [pc, #228]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003468:	f7fe fdd0 	bl	800200c <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003470:	f7fe fdcc 	bl	800200c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d902      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	74fb      	strb	r3, [r7, #19]
        break;
 8003482:	e005      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003484:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ef      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d15a      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d019      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fd8c 	bl	800200c <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	e00b      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fd88 	bl	800200c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d902      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	74fb      	strb	r3, [r7, #19]
            break;
 800350e:	e006      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ec      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800353a:	e009      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003550:	7c7b      	ldrb	r3, [r7, #17]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b6e      	ldr	r3, [pc, #440]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	4a6d      	ldr	r2, [pc, #436]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356e:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 0203 	bic.w	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4964      	ldr	r1, [pc, #400]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003590:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 020c 	bic.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	495c      	ldr	r1, [pc, #368]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035b2:	4b57      	ldr	r3, [pc, #348]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4953      	ldr	r1, [pc, #332]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035d4:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	494b      	ldr	r1, [pc, #300]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f6:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4942      	ldr	r1, [pc, #264]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	493a      	ldr	r1, [pc, #232]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363a:	4b35      	ldr	r3, [pc, #212]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4931      	ldr	r1, [pc, #196]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800365c:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	4929      	ldr	r1, [pc, #164]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4920      	ldr	r1, [pc, #128]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f6:	d105      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003704:	7cbb      	ldrb	r3, [r7, #18]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e095      	b.n	8003872 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003756:	d009      	beq.n	800376c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	61da      	str	r2, [r3, #28]
 800375e:	e005      	b.n	800376c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe f9a6 	bl	8001ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ac:	d902      	bls.n	80037b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e002      	b.n	80037ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037c2:	d007      	beq.n	80037d4 <HAL_SPI_Init+0xa0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037cc:	d002      	beq.n	80037d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	ea42 0103 	orr.w	r1, r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	0c1b      	lsrs	r3, r3, #16
 8003830:	f003 0204 	and.w	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003850:	ea42 0103 	orr.w	r1, r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_SPI_Transmit_IT+0x20>
 8003898:	2302      	movs	r3, #2
 800389a:	e072      	b.n	8003982 <HAL_SPI_Transmit_IT+0x106>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_SPI_Transmit_IT+0x34>
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d102      	bne.n	80038b6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038b4:	e060      	b.n	8003978 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038c6:	e057      	b.n	8003978 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2203      	movs	r2, #3
 80038cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800390c:	d903      	bls.n	8003916 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_SPI_Transmit_IT+0x114>)
 8003912:	651a      	str	r2, [r3, #80]	; 0x50
 8003914:	e002      	b.n	800391c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_SPI_Transmit_IT+0x118>)
 800391a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003924:	d10f      	bne.n	8003946 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003954:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d008      	beq.n	8003976 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e000      	b.n	8003978 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8003976:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
}
 8003982:	4618      	mov	r0, r3
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	080041cb 	.word	0x080041cb
 8003994:	08004185 	.word	0x08004185

08003998 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d110      	bne.n	80039d4 <HAL_SPI_Receive_IT+0x3c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ba:	d10b      	bne.n	80039d4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2204      	movs	r2, #4
 80039c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f894 	bl	8003af8 <HAL_SPI_TransmitReceive_IT>
 80039d0:	4603      	mov	r3, r0
 80039d2:	e089      	b.n	8003ae8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_SPI_Receive_IT+0x4a>
 80039de:	2302      	movs	r3, #2
 80039e0:	e082      	b.n	8003ae8 <HAL_SPI_Receive_IT+0x150>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039fa:	e070      	b.n	8003ade <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Receive_IT+0x70>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a0c:	e067      	b.n	8003ade <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2204      	movs	r2, #4
 8003a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a52:	d90b      	bls.n	8003a6c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a62:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <HAL_SPI_Receive_IT+0x158>)
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a6a:	e00a      	b.n	8003a82 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a7a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_SPI_Receive_IT+0x15c>)
 8003a80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8a:	d10f      	bne.n	8003aac <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aaa:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003aba:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d008      	beq.n	8003adc <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e000      	b.n	8003ade <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003adc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	08004139 	.word	0x08004139
 8003af4:	080040e9 	.word	0x080040e9

08003af8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_SPI_TransmitReceive_IT+0x20>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e091      	b.n	8003c3c <HAL_SPI_TransmitReceive_IT+0x144>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b26:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b2e:	7dbb      	ldrb	r3, [r7, #22]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d00d      	beq.n	8003b50 <HAL_SPI_TransmitReceive_IT+0x58>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d106      	bne.n	8003b4a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <HAL_SPI_TransmitReceive_IT+0x52>
 8003b44:	7dbb      	ldrb	r3, [r7, #22]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d002      	beq.n	8003b50 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b4e:	e070      	b.n	8003c32 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b66:	e064      	b.n	8003c32 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d003      	beq.n	8003b7c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2205      	movs	r2, #5
 8003b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	887a      	ldrh	r2, [r7, #2]
 8003b92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	887a      	ldrh	r2, [r7, #2]
 8003b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	887a      	ldrh	r2, [r7, #2]
 8003ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb2:	d906      	bls.n	8003bc2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <HAL_SPI_TransmitReceive_IT+0x150>)
 8003bb8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <HAL_SPI_TransmitReceive_IT+0x154>)
 8003bbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003bc0:	e005      	b.n	8003bce <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003bc6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003bcc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd6:	d802      	bhi.n	8003bde <HAL_SPI_TransmitReceive_IT+0xe6>
 8003bd8:	887b      	ldrh	r3, [r7, #2]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d908      	bls.n	8003bf0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e007      	b.n	8003c00 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d008      	beq.n	8003c30 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e000      	b.n	8003c32 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003c30:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	08004023 	.word	0x08004023
 8003c4c:	08004089 	.word	0x08004089
 8003c50:	08003ed3 	.word	0x08003ed3
 8003c54:	08003f91 	.word	0x08003f91

08003c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
    return;
 8003c9a:	e0d7      	b.n	8003e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_SPI_IRQHandler+0x66>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
    return;
 8003cbc:	e0c6      	b.n	8003e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_SPI_IRQHandler+0x8c>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80b4 	beq.w	8003e4c <HAL_SPI_IRQHandler+0x1f4>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80ad 	beq.w	8003e4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d023      	beq.n	8003d46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d011      	beq.n	8003d2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0e:	f043 0204 	orr.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	e00b      	b.n	8003d46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
        return;
 8003d44:	e082      	b.n	8003e4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d014      	beq.n	8003d7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00c      	beq.n	8003da2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	f043 0208 	orr.w	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04f      	beq.n	8003e4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003db8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_SPI_IRQHandler+0x17e>
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d034      	beq.n	8003e40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0203 	bic.w	r2, r2, #3
 8003de4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_SPI_IRQHandler+0x1fc>)
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f9f4 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <HAL_SPI_IRQHandler+0x1fc>)
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe f9de 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e3e:	e003      	b.n	8003e48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f827 	bl	8003e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e46:	e000      	b.n	8003e4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e48:	bf00      	nop
    return;
 8003e4a:	bf00      	nop
  }
}
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	08003ea9 	.word	0x08003ea9

08003e58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ffe5 	bl	8003e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d923      	bls.n	8003f2e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b02      	subs	r3, #2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d11f      	bne.n	8003f5c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	e016      	b.n	8003f5c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f103 020c 	add.w	r2, r3, #12
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f76:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fb00 	bl	8004588 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d912      	bls.n	8003fc8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b02      	subs	r3, #2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fc6:	e012      	b.n	8003fee <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d110      	bne.n	800401a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004006:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fab7 	bl	8004588 <SPI_CloseRxTx_ISR>
    }
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	b292      	uxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fa84 	bl	8004588 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d110      	bne.n	80040e0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040cc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa54 	bl	8004588 <SPI_CloseRxTx_ISR>
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f103 020c 	add.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fa6e 	bl	800460c <SPI_CloseRx_ISR>
  }
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	b292      	uxth	r2, r2
 800414c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa48 	bl	800460c <SPI_CloseRx_ISR>
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fa55 	bl	800466c <SPI_CloseTx_ISR>
  }
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa33 	bl	800466c <SPI_CloseTx_ISR>
  }
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004220:	f7fd fef4 	bl	800200c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004230:	f7fd feec 	bl	800200c <HAL_GetTick>
 8004234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	015b      	lsls	r3, r3, #5
 800423c:	0d1b      	lsrs	r3, r3, #20
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	e054      	b.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d050      	beq.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004250:	f7fd fedc 	bl	800200c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	429a      	cmp	r2, r3
 800425e:	d902      	bls.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d13d      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427e:	d111      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	d004      	beq.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d107      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ac:	d10f      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e017      	b.n	8004312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d19b      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000000 	.word	0x20000000

08004320 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004332:	f7fd fe6b 	bl	800200c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	4413      	add	r3, r2
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004342:	f7fd fe63 	bl	800200c <HAL_GetTick>
 8004346:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004350:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	0d1b      	lsrs	r3, r3, #20
 8004360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004368:	e060      	b.n	800442c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004370:	d107      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004380:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d050      	beq.n	800442c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800438a:	f7fd fe3f 	bl	800200c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	429a      	cmp	r2, r3
 8004398:	d902      	bls.n	80043a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d13d      	bne.n	800441c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b8:	d111      	bne.n	80043de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c2:	d004      	beq.n	80043ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043cc:	d107      	bne.n	80043de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e6:	d10f      	bne.n	8004408 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004406:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e010      	b.n	800443e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3b01      	subs	r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d196      	bne.n	800436a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000000 	.word	0x20000000

0800444c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004460:	d111      	bne.n	8004486 <SPI_EndRxTransaction+0x3a>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446a:	d004      	beq.n	8004476 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004474:	d107      	bne.n	8004486 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004484:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2200      	movs	r2, #0
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff febd 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e023      	b.n	80044f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b4:	d11d      	bne.n	80044f2 <SPI_EndRxTransaction+0xa6>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044be:	d004      	beq.n	80044ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c8:	d113      	bne.n	80044f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff ff22 	bl	8004320 <SPI_WaitFifoStateUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e000      	b.n	80044f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2200      	movs	r2, #0
 8004510:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff ff03 	bl	8004320 <SPI_WaitFifoStateUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e027      	b.n	8004580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	2180      	movs	r1, #128	; 0x80
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fe68 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e014      	b.n	8004580 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff fedc 	bl	8004320 <SPI_WaitFifoStateUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004572:	f043 0220 	orr.w	r2, r3, #32
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e000      	b.n	8004580 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004590:	f7fd fd3c 	bl	800200c <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0220 	bic.w	r2, r2, #32
 80045a4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	2164      	movs	r1, #100	; 0x64
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff ffa6 	bl	80044fc <SPI_EndRxTxTransaction>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d115      	bne.n	80045f6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fc44 	bl	8003e6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80045e4:	e00e      	b.n	8004604 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fc46 	bl	8003e80 <HAL_SPI_TxRxCpltCallback>
}
 80045f4:	e006      	b.n	8004604 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fc48 	bl	8003e94 <HAL_SPI_ErrorCallback>
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004622:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004624:	f7fd fcf2 	bl	800200c <HAL_GetTick>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	2164      	movs	r1, #100	; 0x64
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ff0c 	bl	800444c <SPI_EndRxTransaction>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fc08 	bl	8003e6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800465c:	e002      	b.n	8004664 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fc18 	bl	8003e94 <HAL_SPI_ErrorCallback>
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004674:	f7fd fcca 	bl	800200c <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004688:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	2164      	movs	r1, #100	; 0x64
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff34 	bl	80044fc <SPI_EndRxTxTransaction>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fbdd 	bl	8003e94 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80046da:	e002      	b.n	80046e2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fbbb 	bl	8003e58 <HAL_SPI_TxCpltCallback>
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e049      	b.n	8004790 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f841 	bl	8004798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f000 f9db 	bl	8004ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e03b      	b.n	800483c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a19      	ldr	r2, [pc, #100]	; (8004848 <HAL_TIM_Base_Start_IT+0x9c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0x4e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d004      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0x4e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <HAL_TIM_Base_Start_IT+0xa0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d115      	bne.n	8004826 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_TIM_Base_Start_IT+0xa4>)
 8004802:	4013      	ands	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d015      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x8c>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004812:	d011      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	e008      	b.n	8004838 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	e000      	b.n	800483a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004838:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40014000 	.word	0x40014000
 8004850:	00010007 	.word	0x00010007

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0202 	mvn.w	r2, #2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f905 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8f7 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f908 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8db 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8cd 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8de 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0208 	mvn.w	r2, #8
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8b1 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8a3 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8b4 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0210 	mvn.w	r2, #16
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2208      	movs	r2, #8
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f887 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f879 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f88a 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0201 	mvn.w	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd f83a 	bl	8001a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8de 	bl	8004bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d10e      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d107      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8d1 	bl	8004bd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d10e      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d107      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f838 	bl	8004ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d10e      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0220 	mvn.w	r2, #32
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f891 	bl	8004bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <TIM_Base_SetConfig+0xbc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_Base_SetConfig+0x20>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b02:	d108      	bne.n	8004b16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <TIM_Base_SetConfig+0xbc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0x52>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x52>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1e      	ldr	r2, [pc, #120]	; (8004ba4 <TIM_Base_SetConfig+0xc0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x52>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <TIM_Base_SetConfig+0xc4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <TIM_Base_SetConfig+0xbc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_Base_SetConfig+0xa0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0b      	ldr	r2, [pc, #44]	; (8004ba4 <TIM_Base_SetConfig+0xc0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0xa0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <TIM_Base_SetConfig+0xc4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d103      	bne.n	8004b8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	615a      	str	r2, [r3, #20]
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40014400 	.word	0x40014400

08004bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e040      	b.n	8004c7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc ffb0 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8c0 	bl	8004dac <UART_SetConfig>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e022      	b.n	8004c7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb0e 	bl	8005260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fb95 	bl	80053a4 <UART_CheckIdleState>
 8004c7a:	4603      	mov	r3, r0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	f040 8082 	bne.w	8004da2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_UART_Transmit+0x26>
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e07a      	b.n	8004da4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Transmit+0x38>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e073      	b.n	8004da4 <HAL_UART_Transmit+0x120>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2221      	movs	r2, #33	; 0x21
 8004cd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd2:	f7fd f99b 	bl	800200c <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d108      	bne.n	8004d04 <HAL_UART_Transmit+0x80>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	e003      	b.n	8004d0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d14:	e02d      	b.n	8004d72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fb88 	bl	8005436 <UART_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e039      	b.n	8004da4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	881a      	ldrh	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d42:	b292      	uxth	r2, r2
 8004d44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e008      	b.n	8004d60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b292      	uxth	r2, r2
 8004d58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1cb      	bne.n	8004d16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2140      	movs	r1, #64	; 0x40
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fb54 	bl	8005436 <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e005      	b.n	8004da4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e000      	b.n	8004da4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b08a      	sub	sp, #40	; 0x28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b9e      	ldr	r3, [pc, #632]	; (8005054 <UART_SetConfig+0x2a8>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a93      	ldr	r2, [pc, #588]	; (8005058 <UART_SetConfig+0x2ac>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	4313      	orrs	r3, r2
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a8a      	ldr	r2, [pc, #552]	; (800505c <UART_SetConfig+0x2b0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d126      	bne.n	8004e84 <UART_SetConfig+0xd8>
 8004e36:	4b8a      	ldr	r3, [pc, #552]	; (8005060 <UART_SetConfig+0x2b4>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d81b      	bhi.n	8004e7c <UART_SetConfig+0xd0>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0xa0>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e6d 	.word	0x08004e6d
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e75 	.word	0x08004e75
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e0ab      	b.n	8004fbc <UART_SetConfig+0x210>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e0a7      	b.n	8004fbc <UART_SetConfig+0x210>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e0a3      	b.n	8004fbc <UART_SetConfig+0x210>
 8004e74:	2308      	movs	r3, #8
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e09f      	b.n	8004fbc <UART_SetConfig+0x210>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e82:	e09b      	b.n	8004fbc <UART_SetConfig+0x210>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a76      	ldr	r2, [pc, #472]	; (8005064 <UART_SetConfig+0x2b8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d138      	bne.n	8004f00 <UART_SetConfig+0x154>
 8004e8e:	4b74      	ldr	r3, [pc, #464]	; (8005060 <UART_SetConfig+0x2b4>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	d82d      	bhi.n	8004ef8 <UART_SetConfig+0x14c>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0xf8>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004ef9 	.word	0x08004ef9
 8004eb0:	08004ef9 	.word	0x08004ef9
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004ef9 	.word	0x08004ef9
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ee1 	.word	0x08004ee1
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004ef1 	.word	0x08004ef1
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e06d      	b.n	8004fbc <UART_SetConfig+0x210>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e069      	b.n	8004fbc <UART_SetConfig+0x210>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e065      	b.n	8004fbc <UART_SetConfig+0x210>
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e061      	b.n	8004fbc <UART_SetConfig+0x210>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e05d      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a58      	ldr	r2, [pc, #352]	; (8005068 <UART_SetConfig+0x2bc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d125      	bne.n	8004f56 <UART_SetConfig+0x1aa>
 8004f0a:	4b55      	ldr	r3, [pc, #340]	; (8005060 <UART_SetConfig+0x2b4>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d016      	beq.n	8004f46 <UART_SetConfig+0x19a>
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d818      	bhi.n	8004f4e <UART_SetConfig+0x1a2>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d00a      	beq.n	8004f36 <UART_SetConfig+0x18a>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d814      	bhi.n	8004f4e <UART_SetConfig+0x1a2>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <UART_SetConfig+0x182>
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d008      	beq.n	8004f3e <UART_SetConfig+0x192>
 8004f2c:	e00f      	b.n	8004f4e <UART_SetConfig+0x1a2>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f34:	e042      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f36:	2302      	movs	r3, #2
 8004f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f3c:	e03e      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f44:	e03a      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f46:	2308      	movs	r3, #8
 8004f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4c:	e036      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f4e:	2310      	movs	r3, #16
 8004f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f54:	e032      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3f      	ldr	r2, [pc, #252]	; (8005058 <UART_SetConfig+0x2ac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d12a      	bne.n	8004fb6 <UART_SetConfig+0x20a>
 8004f60:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <UART_SetConfig+0x2b4>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f6e:	d01a      	beq.n	8004fa6 <UART_SetConfig+0x1fa>
 8004f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f74:	d81b      	bhi.n	8004fae <UART_SetConfig+0x202>
 8004f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7a:	d00c      	beq.n	8004f96 <UART_SetConfig+0x1ea>
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f80:	d815      	bhi.n	8004fae <UART_SetConfig+0x202>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <UART_SetConfig+0x1e2>
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8a:	d008      	beq.n	8004f9e <UART_SetConfig+0x1f2>
 8004f8c:	e00f      	b.n	8004fae <UART_SetConfig+0x202>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f94:	e012      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f96:	2302      	movs	r3, #2
 8004f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9c:	e00e      	b.n	8004fbc <UART_SetConfig+0x210>
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa4:	e00a      	b.n	8004fbc <UART_SetConfig+0x210>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fac:	e006      	b.n	8004fbc <UART_SetConfig+0x210>
 8004fae:	2310      	movs	r3, #16
 8004fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb4:	e002      	b.n	8004fbc <UART_SetConfig+0x210>
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <UART_SetConfig+0x2ac>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	f040 808a 	bne.w	80050dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d824      	bhi.n	800501a <UART_SetConfig+0x26e>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x22c>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	0800501b 	.word	0x0800501b
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800501b 	.word	0x0800501b
 8004fe8:	0800500b 	.word	0x0800500b
 8004fec:	0800501b 	.word	0x0800501b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800501b 	.word	0x0800501b
 8004ff8:	08005013 	.word	0x08005013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fe f946 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8005000:	61f8      	str	r0, [r7, #28]
        break;
 8005002:	e010      	b.n	8005026 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <UART_SetConfig+0x2c0>)
 8005006:	61fb      	str	r3, [r7, #28]
        break;
 8005008:	e00d      	b.n	8005026 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500a:	f7fe f8a7 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800500e:	61f8      	str	r0, [r7, #28]
        break;
 8005010:	e009      	b.n	8005026 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005016:	61fb      	str	r3, [r7, #28]
        break;
 8005018:	e005      	b.n	8005026 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8109 	beq.w	8005240 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	429a      	cmp	r2, r3
 800503c:	d305      	bcc.n	800504a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	429a      	cmp	r2, r3
 8005048:	d912      	bls.n	8005070 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005050:	e0f6      	b.n	8005240 <UART_SetConfig+0x494>
 8005052:	bf00      	nop
 8005054:	efff69f3 	.word	0xefff69f3
 8005058:	40008000 	.word	0x40008000
 800505c:	40013800 	.word	0x40013800
 8005060:	40021000 	.word	0x40021000
 8005064:	40004400 	.word	0x40004400
 8005068:	40004800 	.word	0x40004800
 800506c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2200      	movs	r2, #0
 8005074:	461c      	mov	r4, r3
 8005076:	4615      	mov	r5, r2
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	022b      	lsls	r3, r5, #8
 8005082:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005086:	0222      	lsls	r2, r4, #8
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	6849      	ldr	r1, [r1, #4]
 800508c:	0849      	lsrs	r1, r1, #1
 800508e:	2000      	movs	r0, #0
 8005090:	4688      	mov	r8, r1
 8005092:	4681      	mov	r9, r0
 8005094:	eb12 0a08 	adds.w	sl, r2, r8
 8005098:	eb43 0b09 	adc.w	fp, r3, r9
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050aa:	4650      	mov	r0, sl
 80050ac:	4659      	mov	r1, fp
 80050ae:	f7fb fdbd 	bl	8000c2c <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4613      	mov	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c0:	d308      	bcc.n	80050d4 <UART_SetConfig+0x328>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c8:	d204      	bcs.n	80050d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e0b5      	b.n	8005240 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050da:	e0b1      	b.n	8005240 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	d15d      	bne.n	80051a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80050e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d827      	bhi.n	800513e <UART_SetConfig+0x392>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x348>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005129 	.word	0x08005129
 8005100:	0800513f 	.word	0x0800513f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800513f 	.word	0x0800513f
 800510c:	0800513f 	.word	0x0800513f
 8005110:	0800513f 	.word	0x0800513f
 8005114:	08005137 	.word	0x08005137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7fe f8b8 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 800511c:	61f8      	str	r0, [r7, #28]
        break;
 800511e:	e014      	b.n	800514a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005120:	f7fe f8ca 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8005124:	61f8      	str	r0, [r7, #28]
        break;
 8005126:	e010      	b.n	800514a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005128:	4b4c      	ldr	r3, [pc, #304]	; (800525c <UART_SetConfig+0x4b0>)
 800512a:	61fb      	str	r3, [r7, #28]
        break;
 800512c:	e00d      	b.n	800514a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512e:	f7fe f815 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8005132:	61f8      	str	r0, [r7, #28]
        break;
 8005134:	e009      	b.n	800514a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513a:	61fb      	str	r3, [r7, #28]
        break;
 800513c:	e005      	b.n	800514a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d077      	beq.n	8005240 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005a      	lsls	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d916      	bls.n	800519a <UART_SetConfig+0x3ee>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005172:	d212      	bcs.n	800519a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f023 030f 	bic.w	r3, r3, #15
 800517c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	b29b      	uxth	r3, r3
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	b29a      	uxth	r2, r3
 800518a:	8afb      	ldrh	r3, [r7, #22]
 800518c:	4313      	orrs	r3, r2
 800518e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	8afa      	ldrh	r2, [r7, #22]
 8005196:	60da      	str	r2, [r3, #12]
 8005198:	e052      	b.n	8005240 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051a0:	e04e      	b.n	8005240 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d827      	bhi.n	80051fa <UART_SetConfig+0x44e>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x404>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	080051fb 	.word	0x080051fb
 80051c0:	080051eb 	.word	0x080051eb
 80051c4:	080051fb 	.word	0x080051fb
 80051c8:	080051fb 	.word	0x080051fb
 80051cc:	080051fb 	.word	0x080051fb
 80051d0:	080051f3 	.word	0x080051f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fe f85a 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 80051d8:	61f8      	str	r0, [r7, #28]
        break;
 80051da:	e014      	b.n	8005206 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051dc:	f7fe f86c 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 80051e0:	61f8      	str	r0, [r7, #28]
        break;
 80051e2:	e010      	b.n	8005206 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <UART_SetConfig+0x4b0>)
 80051e6:	61fb      	str	r3, [r7, #28]
        break;
 80051e8:	e00d      	b.n	8005206 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ea:	f7fd ffb7 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80051ee:	61f8      	str	r0, [r7, #28]
        break;
 80051f0:	e009      	b.n	8005206 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f6:	61fb      	str	r3, [r7, #28]
        break;
 80051f8:	e005      	b.n	8005206 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005204:	bf00      	nop
    }

    if (pclk != 0U)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d019      	beq.n	8005240 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	085a      	lsrs	r2, r3, #1
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b0f      	cmp	r3, #15
 8005224:	d909      	bls.n	800523a <UART_SetConfig+0x48e>
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d205      	bcs.n	800523a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e002      	b.n	8005240 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800524c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005250:	4618      	mov	r0, r3
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800525a:	bf00      	nop
 800525c:	00f42400 	.word	0x00f42400

08005260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01a      	beq.n	8005376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535e:	d10a      	bne.n	8005376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053b4:	f7fc fe2a 	bl	800200c <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d10e      	bne.n	80053e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f82d 	bl	8005436 <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e023      	b.n	800542e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d10e      	bne.n	8005412 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f817 	bl	8005436 <UART_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e00d      	b.n	800542e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b09c      	sub	sp, #112	; 0x70
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	4613      	mov	r3, r2
 8005444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005446:	e0a5      	b.n	8005594 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	f000 80a1 	beq.w	8005594 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fc fddb 	bl	800200c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <UART_WaitOnFlagUntilTimeout+0x32>
 8005462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005464:	2b00      	cmp	r3, #0
 8005466:	d13e      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800547c:	667b      	str	r3, [r7, #100]	; 0x64
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005488:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800548c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e6      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80054bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e067      	b.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d04f      	beq.n	8005594 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005502:	d147      	bne.n	8005594 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
 800552e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e6      	bne.n	800550e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	613b      	str	r3, [r7, #16]
   return(result);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	66bb      	str	r3, [r7, #104]	; 0x68
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005560:	623a      	str	r2, [r7, #32]
 8005562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	6a3a      	ldr	r2, [r7, #32]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	61bb      	str	r3, [r7, #24]
   return(result);
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e010      	b.n	80055b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4013      	ands	r3, r2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f43f af4a 	beq.w	8005448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3770      	adds	r7, #112	; 0x70
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055be:	b480      	push	{r7}
 80055c0:	b085      	sub	sp, #20
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	4603      	mov	r3, r0
 80055c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d0:	2b84      	cmp	r3, #132	; 0x84
 80055d2:	d005      	beq.n	80055e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	3303      	adds	r3, #3
 80055de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055e0:	68fb      	ldr	r3, [r7, #12]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055f2:	f001 fa0b 	bl	8006a0c <vTaskStartScheduler>
  
  return osOK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}

080055fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af04      	add	r7, sp, #16
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <osThreadCreate+0x54>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01c      	beq.n	8005650 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685c      	ldr	r4, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691e      	ldr	r6, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ffc8 	bl	80055be <makeFreeRtosPriority>
 800562e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005638:	9202      	str	r2, [sp, #8]
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	9100      	str	r1, [sp, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	4632      	mov	r2, r6
 8005642:	4629      	mov	r1, r5
 8005644:	4620      	mov	r0, r4
 8005646:	f001 f803 	bl	8006650 <xTaskCreateStatic>
 800564a:	4603      	mov	r3, r0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e01c      	b.n	800568a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685c      	ldr	r4, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800565c:	b29e      	uxth	r6, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ffaa 	bl	80055be <makeFreeRtosPriority>
 800566a:	4602      	mov	r2, r0
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9200      	str	r2, [sp, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4632      	mov	r2, r6
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	f001 f845 	bl	800670a <xTaskCreate>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005694 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4619      	mov	r1, r3
 80056aa:	2001      	movs	r0, #1
 80056ac:	f000 fa29 	bl	8005b02 <xQueueCreateMutexStatic>
 80056b0:	4603      	mov	r3, r0
 80056b2:	e003      	b.n	80056bc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80056b4:	2001      	movs	r0, #1
 80056b6:	f000 fa0c 	bl	8005ad2 <xQueueCreateMutex>
 80056ba:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0208 	add.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f103 0208 	add.w	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f103 0208 	add.w	r2, r3, #8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d103      	bne.n	8005786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e00c      	b.n	80057a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3308      	adds	r3, #8
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e002      	b.n	8005794 <vListInsert+0x2e>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d2f6      	bcs.n	800578e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d103      	bne.n	800580c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005856:	f002 f83d 	bl	80078d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	3b01      	subs	r3, #1
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	22ff      	movs	r2, #255	; 0xff
 800589a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d114      	bne.n	80058d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01a      	beq.n	80058ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3310      	adds	r3, #16
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 faf9 	bl	8006eb0 <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <xQueueGenericReset+0xcc>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	e009      	b.n	80058ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3310      	adds	r3, #16
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fef2 	bl	80056c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff feed 	bl	80056c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058ea:	f002 f823 	bl	8007934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058ee:	2301      	movs	r3, #1
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	; 0x38
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <xQueueGenericCreateStatic+0x52>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <xQueueGenericCreateStatic+0x56>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericCreateStatic+0x58>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <xQueueGenericCreateStatic+0x7e>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <xQueueGenericCreateStatic+0x82>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueGenericCreateStatic+0x84>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	61fb      	str	r3, [r7, #28]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800599a:	2348      	movs	r3, #72	; 0x48
 800599c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b48      	cmp	r3, #72	; 0x48
 80059a2:	d00a      	beq.n	80059ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61bb      	str	r3, [r7, #24]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00d      	beq.n	80059e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4613      	mov	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f83f 	bl	8005a60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3730      	adds	r7, #48	; 0x30
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3348      	adds	r3, #72	; 0x48
 8005a24:	4618      	mov	r0, r3
 8005a26:	f002 f877 	bl	8007b18 <pvPortMalloc>
 8005a2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d011      	beq.n	8005a56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3348      	adds	r3, #72	; 0x48
 8005a3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a44:	79fa      	ldrb	r2, [r7, #7]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f805 	bl	8005a60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a56:	69bb      	ldr	r3, [r7, #24]
	}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3720      	adds	r7, #32
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a8e:	2101      	movs	r1, #1
 8005a90:	69b8      	ldr	r0, [r7, #24]
 8005a92:	f7ff fecb 	bl	800582c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f86b 	bl	8005ba0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	4603      	mov	r3, r0
 8005ada:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005adc:	2301      	movs	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	6939      	ldr	r1, [r7, #16]
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff7e 	bl	80059ec <xQueueGenericCreate>
 8005af0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff ffd3 	bl	8005a9e <prvInitialiseMutex>

		return xNewQueue;
 8005af8:	68fb      	ldr	r3, [r7, #12]
	}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	4603      	mov	r3, r0
 8005b0a:	6039      	str	r1, [r7, #0]
 8005b0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	6939      	ldr	r1, [r7, #16]
 8005b20:	6978      	ldr	r0, [r7, #20]
 8005b22:	f7ff feeb 	bl	80058fc <xQueueGenericCreateStatic>
 8005b26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ffb8 	bl	8005a9e <prvInitialiseMutex>

		return xNewQueue;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	613b      	str	r3, [r7, #16]
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d90a      	bls.n	8005b7c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	60fb      	str	r3, [r7, #12]
}
 8005b78:	bf00      	nop
 8005b7a:	e7fe      	b.n	8005b7a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ff33 	bl	80059ec <xQueueGenericCreate>
 8005b86:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b94:	697b      	ldr	r3, [r7, #20]
	}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <xQueueGenericSend+0x40>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <xQueueGenericSend+0x44>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <xQueueGenericSend+0x46>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <xQueueGenericSend+0x60>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d103      	bne.n	8005c0e <xQueueGenericSend+0x6e>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <xQueueGenericSend+0x72>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <xQueueGenericSend+0x74>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c2e:	f001 faff 	bl	8007230 <xTaskGetSchedulerState>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <xQueueGenericSend+0x9e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <xQueueGenericSend+0xa2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <xQueueGenericSend+0xa4>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61fb      	str	r3, [r7, #28]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c5e:	f001 fe39 	bl	80078d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <xQueueGenericSend+0xd4>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d129      	bne.n	8005cc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7a:	f000 fbd9 	bl	8006430 <prvCopyDataToQueue>
 8005c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	3324      	adds	r3, #36	; 0x24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f90f 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c98:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	e00a      	b.n	8005cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cb0:	4b39      	ldr	r3, [pc, #228]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cc0:	f001 fe38 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e063      	b.n	8005d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cce:	f001 fe31 	bl	8007934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e05c      	b.n	8005d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cdc:	f107 0314 	add.w	r3, r7, #20
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 f947 	bl	8006f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cea:	f001 fe23 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cee:	f000 fef7 	bl	8006ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf2:	f001 fdef 	bl	80078d4 <vPortEnterCritical>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <xQueueGenericSend+0x16c>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d103      	bne.n	8005d22 <xQueueGenericSend+0x182>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d22:	f001 fe07 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 f936 	bl	8006fa0 <xTaskCheckForTimeOut>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d124      	bne.n	8005d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3c:	f000 fc70 	bl	8006620 <prvIsQueueFull>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	3310      	adds	r3, #16
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 f88a 	bl	8006e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d56:	f000 fbfb 	bl	8006550 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d5a:	f000 fecf 	bl	8006afc <xTaskResumeAll>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f af7c 	bne.w	8005c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	e772      	b.n	8005c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d7a:	f000 fbe9 	bl	8006550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d7e:	f000 febd 	bl	8006afc <xTaskResumeAll>
 8005d82:	e76c      	b.n	8005c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d86:	f000 fbe3 	bl	8006550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d8a:	f000 feb7 	bl	8006afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b090      	sub	sp, #64	; 0x40
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x3c>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <xQueueGenericSendFromISR+0x40>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <xQueueGenericSendFromISR+0x42>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSendFromISR+0x6a>
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <xQueueGenericSendFromISR+0x6e>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueGenericSendFromISR+0x70>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	623b      	str	r3, [r7, #32]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e26:	f001 fe37 	bl	8007a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61fa      	str	r2, [r7, #28]
 8005e40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <xQueueGenericSendFromISR+0xbc>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d12f      	bne.n	8005eb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e6e:	f000 fadf 	bl	8006430 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d112      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d016      	beq.n	8005eb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f811 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e007      	b.n	8005eb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	b25a      	sxtb	r2, r3
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005eb6:	e001      	b.n	8005ebc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3740      	adds	r7, #64	; 0x40
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b08e      	sub	sp, #56	; 0x38
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	623b      	str	r3, [r7, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	61fb      	str	r3, [r7, #28]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <xQueueGiveFromISR+0x58>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <xQueueGiveFromISR+0x5c>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <xQueueGiveFromISR+0x5e>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	61bb      	str	r3, [r7, #24]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f4a:	f001 fda5 	bl	8007a98 <vPortValidateInterruptPriority>
	__asm volatile
 8005f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	617a      	str	r2, [r7, #20]
 8005f64:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d22b      	bcs.n	8005fd2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d112      	bne.n	8005fbc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d016      	beq.n	8005fcc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	3324      	adds	r3, #36	; 0x24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 ff84 	bl	8006eb0 <xTaskRemoveFromEventList>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00e      	beq.n	8005fcc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e007      	b.n	8005fcc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	b25a      	sxtb	r2, r3
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd0:	e001      	b.n	8005fd6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f383 8811 	msr	BASEPRI, r3
}
 8005fe0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3738      	adds	r7, #56	; 0x38
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	; 0x30
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <xQueueReceive+0x30>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	623b      	str	r3, [r7, #32]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <xQueueReceive+0x3e>
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueReceive+0x42>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueReceive+0x44>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <xQueueReceive+0x5e>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61fb      	str	r3, [r7, #28]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800604a:	f001 f8f1 	bl	8007230 <xTaskGetSchedulerState>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <xQueueReceive+0x6e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <xQueueReceive+0x72>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueReceive+0x74>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xQueueReceive+0x8e>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	61bb      	str	r3, [r7, #24]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800607a:	f001 fc2b 	bl	80078d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01f      	beq.n	80060ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608e:	f000 fa39 	bl	8006504 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00f      	beq.n	80060c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	3310      	adds	r3, #16
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 ff02 	bl	8006eb0 <xTaskRemoveFromEventList>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060b2:	4b3d      	ldr	r3, [pc, #244]	; (80061a8 <xQueueReceive+0x1bc>)
 80060b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060c2:	f001 fc37 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e069      	b.n	800619e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d103      	bne.n	80060d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060d0:	f001 fc30 	bl	8007934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e062      	b.n	800619e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060de:	f107 0310 	add.w	r3, r7, #16
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 ff46 	bl	8006f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ec:	f001 fc22 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060f0:	f000 fcf6 	bl	8006ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f4:	f001 fbee 	bl	80078d4 <vPortEnterCritical>
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060fe:	b25b      	sxtb	r3, r3
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d103      	bne.n	800610e <xQueueReceive+0x122>
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006114:	b25b      	sxtb	r3, r3
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d103      	bne.n	8006124 <xQueueReceive+0x138>
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006124:	f001 fc06 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006128:	1d3a      	adds	r2, r7, #4
 800612a:	f107 0310 	add.w	r3, r7, #16
 800612e:	4611      	mov	r1, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f000 ff35 	bl	8006fa0 <xTaskCheckForTimeOut>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d123      	bne.n	8006184 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800613c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613e:	f000 fa59 	bl	80065f4 <prvIsQueueEmpty>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d017      	beq.n	8006178 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	3324      	adds	r3, #36	; 0x24
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4611      	mov	r1, r2
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fe89 	bl	8006e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006158:	f000 f9fa 	bl	8006550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800615c:	f000 fcce 	bl	8006afc <xTaskResumeAll>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d189      	bne.n	800607a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <xQueueReceive+0x1bc>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	e780      	b.n	800607a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800617a:	f000 f9e9 	bl	8006550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800617e:	f000 fcbd 	bl	8006afc <xTaskResumeAll>
 8006182:	e77a      	b.n	800607a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006186:	f000 f9e3 	bl	8006550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800618a:	f000 fcb7 	bl	8006afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800618e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006190:	f000 fa30 	bl	80065f4 <prvIsQueueEmpty>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	f43f af6f 	beq.w	800607a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800619c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3730      	adds	r7, #48	; 0x30
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	; 0x38
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	623b      	str	r3, [r7, #32]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61fb      	str	r3, [r7, #28]
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fc:	f001 f818 	bl	8007230 <xTaskGetSchedulerState>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <xQueueSemaphoreTake+0x60>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <xQueueSemaphoreTake+0x64>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <xQueueSemaphoreTake+0x66>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	61bb      	str	r3, [r7, #24]
}
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800622c:	f001 fb52 	bl	80078d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d024      	beq.n	8006286 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	1e5a      	subs	r2, r3, #1
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800624c:	f001 f998 	bl	8007580 <pvTaskIncrementMutexHeldCount>
 8006250:	4602      	mov	r2, r0
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00f      	beq.n	800627e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	3310      	adds	r3, #16
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fe24 	bl	8006eb0 <xTaskRemoveFromEventList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800626e:	4b54      	ldr	r3, [pc, #336]	; (80063c0 <xQueueSemaphoreTake+0x214>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800627e:	f001 fb59 	bl	8007934 <vPortExitCritical>
				return pdPASS;
 8006282:	2301      	movs	r3, #1
 8006284:	e097      	b.n	80063b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d111      	bne.n	80062b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	617b      	str	r3, [r7, #20]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062a8:	f001 fb44 	bl	8007934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e082      	b.n	80063b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062b6:	f107 030c 	add.w	r3, r7, #12
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fe5a 	bl	8006f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062c4:	f001 fb36 	bl	8007934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062c8:	f000 fc0a 	bl	8006ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062cc:	f001 fb02 	bl	80078d4 <vPortEnterCritical>
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d103      	bne.n	80062e6 <xQueueSemaphoreTake+0x13a>
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d103      	bne.n	80062fc <xQueueSemaphoreTake+0x150>
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062fc:	f001 fb1a 	bl	8007934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006300:	463a      	mov	r2, r7
 8006302:	f107 030c 	add.w	r3, r7, #12
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fe49 	bl	8006fa0 <xTaskCheckForTimeOut>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d132      	bne.n	800637a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006316:	f000 f96d 	bl	80065f4 <prvIsQueueEmpty>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d026      	beq.n	800636e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006328:	f001 fad4 	bl	80078d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 ff9b 	bl	800726c <xTaskPriorityInherit>
 8006336:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006338:	f001 fafc 	bl	8007934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	3324      	adds	r3, #36	; 0x24
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fd8f 	bl	8006e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800634a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800634c:	f000 f900 	bl	8006550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006350:	f000 fbd4 	bl	8006afc <xTaskResumeAll>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	f47f af68 	bne.w	800622c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <xQueueSemaphoreTake+0x214>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	e75e      	b.n	800622c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800636e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006370:	f000 f8ee 	bl	8006550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006374:	f000 fbc2 	bl	8006afc <xTaskResumeAll>
 8006378:	e758      	b.n	800622c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800637a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800637c:	f000 f8e8 	bl	8006550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006380:	f000 fbbc 	bl	8006afc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006386:	f000 f935 	bl	80065f4 <prvIsQueueEmpty>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	f43f af4d 	beq.w	800622c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00d      	beq.n	80063b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006398:	f001 fa9c 	bl	80078d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800639c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800639e:	f000 f82f 	bl	8006400 <prvGetDisinheritPriorityAfterTimeout>
 80063a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 f85a 	bl	8007464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063b0:	f001 fac0 	bl	8007934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3738      	adds	r7, #56	; 0x38
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80063f2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063f4:	4618      	mov	r0, r3
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1c3 0307 	rsb	r3, r3, #7
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e001      	b.n	8006422 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006422:	68fb      	ldr	r3, [r7, #12]
	}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d14d      	bne.n	80064f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 ff7c 	bl	8007358 <xTaskPriorityDisinherit>
 8006460:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	e043      	b.n	80064f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d119      	bne.n	80064a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6858      	ldr	r0, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	461a      	mov	r2, r3
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	f001 fe61 	bl	8008142 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	441a      	add	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	429a      	cmp	r2, r3
 8006498:	d32b      	bcc.n	80064f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	e026      	b.n	80064f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68d8      	ldr	r0, [r3, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	461a      	mov	r2, r3
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	f001 fe47 	bl	8008142 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	425b      	negs	r3, r3
 80064be:	441a      	add	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d207      	bcs.n	80064e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	425b      	negs	r3, r3
 80064da:	441a      	add	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d105      	bne.n	80064f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064fa:	697b      	ldr	r3, [r7, #20]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d018      	beq.n	8006548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	441a      	add	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	429a      	cmp	r2, r3
 800652e:	d303      	bcc.n	8006538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68d9      	ldr	r1, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	461a      	mov	r2, r3
 8006542:	6838      	ldr	r0, [r7, #0]
 8006544:	f001 fdfd 	bl	8008142 <memcpy>
	}
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006558:	f001 f9bc 	bl	80078d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006564:	e011      	b.n	800658a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d012      	beq.n	8006594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3324      	adds	r3, #36	; 0x24
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fc9c 	bl	8006eb0 <xTaskRemoveFromEventList>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800657e:	f000 fd71 	bl	8007064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	3b01      	subs	r3, #1
 8006586:	b2db      	uxtb	r3, r3
 8006588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800658a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800658e:	2b00      	cmp	r3, #0
 8006590:	dce9      	bgt.n	8006566 <prvUnlockQueue+0x16>
 8006592:	e000      	b.n	8006596 <prvUnlockQueue+0x46>
					break;
 8006594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800659e:	f001 f9c9 	bl	8007934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065a2:	f001 f997 	bl	80078d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ae:	e011      	b.n	80065d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3310      	adds	r3, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fc77 	bl	8006eb0 <xTaskRemoveFromEventList>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065c8:	f000 fd4c 	bl	8007064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dce9      	bgt.n	80065b0 <prvUnlockQueue+0x60>
 80065dc:	e000      	b.n	80065e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	22ff      	movs	r2, #255	; 0xff
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065e8:	f001 f9a4 	bl	8007934 <vPortExitCritical>
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065fc:	f001 f96a 	bl	80078d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	e001      	b.n	8006612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006612:	f001 f98f 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8006616:	68fb      	ldr	r3, [r7, #12]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006628:	f001 f954 	bl	80078d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	429a      	cmp	r2, r3
 8006636:	d102      	bne.n	800663e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e001      	b.n	8006642 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006642:	f001 f977 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	; 0x38
 8006654:	af04      	add	r7, sp, #16
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	623b      	str	r3, [r7, #32]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xTaskCreateStatic+0x46>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	61fb      	str	r3, [r7, #28]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006696:	23b4      	movs	r3, #180	; 0xb4
 8006698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2bb4      	cmp	r3, #180	; 0xb4
 800669e:	d00a      	beq.n	80066b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	61bb      	str	r3, [r7, #24]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01e      	beq.n	80066fc <xTaskCreateStatic+0xac>
 80066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066d6:	2300      	movs	r3, #0
 80066d8:	9303      	str	r3, [sp, #12]
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f850 	bl	8006794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066f6:	f000 f8eb 	bl	80068d0 <prvAddNewTaskToReadyList>
 80066fa:	e001      	b.n	8006700 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006700:	697b      	ldr	r3, [r7, #20]
	}
 8006702:	4618      	mov	r0, r3
 8006704:	3728      	adds	r7, #40	; 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800670a:	b580      	push	{r7, lr}
 800670c:	b08c      	sub	sp, #48	; 0x30
 800670e:	af04      	add	r7, sp, #16
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 f9fa 	bl	8007b18 <pvPortMalloc>
 8006724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00e      	beq.n	800674a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800672c:	20b4      	movs	r0, #180	; 0xb4
 800672e:	f001 f9f3 	bl	8007b18 <pvPortMalloc>
 8006732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
 8006740:	e005      	b.n	800674e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f001 fab4 	bl	8007cb0 <vPortFree>
 8006748:	e001      	b.n	800674e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d017      	beq.n	8006784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	2300      	movs	r3, #0
 8006760:	9303      	str	r3, [sp, #12]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	9302      	str	r3, [sp, #8]
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f80e 	bl	8006794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006778:	69f8      	ldr	r0, [r7, #28]
 800677a:	f000 f8a9 	bl	80068d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800677e:	2301      	movs	r3, #1
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e002      	b.n	800678a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006784:	f04f 33ff 	mov.w	r3, #4294967295
 8006788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800678a:	69bb      	ldr	r3, [r7, #24]
	}
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067ac:	3b01      	subs	r3, #1
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	617b      	str	r3, [r7, #20]
}
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01f      	beq.n	8006822 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	e012      	b.n	800680e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	7819      	ldrb	r1, [r3, #0]
 80067f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	3334      	adds	r3, #52	; 0x34
 80067f8:	460a      	mov	r2, r1
 80067fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	3301      	adds	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2b0f      	cmp	r3, #15
 8006812:	d9e9      	bls.n	80067e8 <prvInitialiseNewTask+0x54>
 8006814:	e000      	b.n	8006818 <prvInitialiseNewTask+0x84>
			{
				break;
 8006816:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006820:	e003      	b.n	800682a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2b06      	cmp	r3, #6
 800682e:	d901      	bls.n	8006834 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006830:	2306      	movs	r3, #6
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2200      	movs	r2, #0
 8006844:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	3304      	adds	r3, #4
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe ff5a 	bl	8005704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	3318      	adds	r3, #24
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe ff55 	bl	8005704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	f1c3 0207 	rsb	r2, r3, #7
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	334c      	adds	r3, #76	; 0x4c
 8006884:	2260      	movs	r2, #96	; 0x60
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fc68 	bl	800815e <memset>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <prvInitialiseNewTask+0x130>)
 8006892:	651a      	str	r2, [r3, #80]	; 0x50
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <prvInitialiseNewTask+0x134>)
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	4a0b      	ldr	r2, [pc, #44]	; (80068cc <prvInitialiseNewTask+0x138>)
 800689e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	69b8      	ldr	r0, [r7, #24]
 80068a6:	f000 fee5 	bl	8007674 <pxPortInitialiseStack>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068bc:	bf00      	nop
 80068be:	3720      	adds	r7, #32
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	0800b054 	.word	0x0800b054
 80068c8:	0800b074 	.word	0x0800b074
 80068cc:	0800b034 	.word	0x0800b034

080068d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d8:	f000 fffc 	bl	80078d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068dc:	4b2a      	ldr	r3, [pc, #168]	; (8006988 <prvAddNewTaskToReadyList+0xb8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	4a29      	ldr	r2, [pc, #164]	; (8006988 <prvAddNewTaskToReadyList+0xb8>)
 80068e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <prvAddNewTaskToReadyList+0xbc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ee:	4a27      	ldr	r2, [pc, #156]	; (800698c <prvAddNewTaskToReadyList+0xbc>)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f4:	4b24      	ldr	r3, [pc, #144]	; (8006988 <prvAddNewTaskToReadyList+0xb8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d110      	bne.n	800691e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068fc:	f000 fbd6 	bl	80070ac <prvInitialiseTaskLists>
 8006900:	e00d      	b.n	800691e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <prvAddNewTaskToReadyList+0xc0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800690a:	4b20      	ldr	r3, [pc, #128]	; (800698c <prvAddNewTaskToReadyList+0xbc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d802      	bhi.n	800691e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006918:	4a1c      	ldr	r2, [pc, #112]	; (800698c <prvAddNewTaskToReadyList+0xbc>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800691e:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <prvAddNewTaskToReadyList+0xc4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <prvAddNewTaskToReadyList+0xc4>)
 8006926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	2201      	movs	r2, #1
 800692e:	409a      	lsls	r2, r3
 8006930:	4b19      	ldr	r3, [pc, #100]	; (8006998 <prvAddNewTaskToReadyList+0xc8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4313      	orrs	r3, r2
 8006936:	4a18      	ldr	r2, [pc, #96]	; (8006998 <prvAddNewTaskToReadyList+0xc8>)
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <prvAddNewTaskToReadyList+0xcc>)
 8006948:	441a      	add	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3304      	adds	r3, #4
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f7fe fee4 	bl	800571e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006956:	f000 ffed 	bl	8007934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <prvAddNewTaskToReadyList+0xc0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00e      	beq.n	8006980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006962:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvAddNewTaskToReadyList+0xbc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	429a      	cmp	r2, r3
 800696e:	d207      	bcs.n	8006980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <prvAddNewTaskToReadyList+0xd0>)
 8006972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200009c8 	.word	0x200009c8
 800698c:	200008c8 	.word	0x200008c8
 8006990:	200009d4 	.word	0x200009d4
 8006994:	200009e4 	.word	0x200009e4
 8006998:	200009d0 	.word	0x200009d0
 800699c:	200008cc 	.word	0x200008cc
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <vTaskDelay+0x60>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <vTaskDelay+0x30>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60bb      	str	r3, [r7, #8]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069d4:	f000 f884 	bl	8006ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069d8:	2100      	movs	r1, #0
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fde4 	bl	80075a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e0:	f000 f88c 	bl	8006afc <xTaskResumeAll>
 80069e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d107      	bne.n	80069fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <vTaskDelay+0x64>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200009f0 	.word	0x200009f0
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	1d39      	adds	r1, r7, #4
 8006a1e:	f107 0308 	add.w	r3, r7, #8
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fa faba 	bl	8000f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	9202      	str	r2, [sp, #8]
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	2300      	movs	r3, #0
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2300      	movs	r3, #0
 8006a38:	460a      	mov	r2, r1
 8006a3a:	4921      	ldr	r1, [pc, #132]	; (8006ac0 <vTaskStartScheduler+0xb4>)
 8006a3c:	4821      	ldr	r0, [pc, #132]	; (8006ac4 <vTaskStartScheduler+0xb8>)
 8006a3e:	f7ff fe07 	bl	8006650 <xTaskCreateStatic>
 8006a42:	4603      	mov	r3, r0
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <vTaskStartScheduler+0xbc>)
 8006a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a48:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <vTaskStartScheduler+0xbc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e001      	b.n	8006a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d11b      	bne.n	8006a98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a74:	4b15      	ldr	r3, [pc, #84]	; (8006acc <vTaskStartScheduler+0xc0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	334c      	adds	r3, #76	; 0x4c
 8006a7a:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <vTaskStartScheduler+0xc4>)
 8006a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a7e:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <vTaskStartScheduler+0xc8>)
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295
 8006a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <vTaskStartScheduler+0xcc>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a8c:	4b13      	ldr	r3, [pc, #76]	; (8006adc <vTaskStartScheduler+0xd0>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a92:	f000 fe7d 	bl	8007790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a96:	e00e      	b.n	8006ab6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d10a      	bne.n	8006ab6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	60fb      	str	r3, [r7, #12]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <vTaskStartScheduler+0xa8>
}
 8006ab6:	bf00      	nop
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	0800afe0 	.word	0x0800afe0
 8006ac4:	0800707d 	.word	0x0800707d
 8006ac8:	200009ec 	.word	0x200009ec
 8006acc:	200008c8 	.word	0x200008c8
 8006ad0:	20000010 	.word	0x20000010
 8006ad4:	200009e8 	.word	0x200009e8
 8006ad8:	200009d4 	.word	0x200009d4
 8006adc:	200009cc 	.word	0x200009cc

08006ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <vTaskSuspendAll+0x18>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	4a03      	ldr	r2, [pc, #12]	; (8006af8 <vTaskSuspendAll+0x18>)
 8006aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	200009f0 	.word	0x200009f0

08006afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b0a:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <xTaskResumeAll+0x114>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	603b      	str	r3, [r7, #0]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b28:	f000 fed4 	bl	80078d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b2c:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <xTaskResumeAll+0x114>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	4a37      	ldr	r2, [pc, #220]	; (8006c10 <xTaskResumeAll+0x114>)
 8006b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b36:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <xTaskResumeAll+0x114>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d161      	bne.n	8006c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b3e:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <xTaskResumeAll+0x118>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d05d      	beq.n	8006c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b46:	e02e      	b.n	8006ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b48:	4b33      	ldr	r3, [pc, #204]	; (8006c18 <xTaskResumeAll+0x11c>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fe3f 	bl	80057d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fe3a 	bl	80057d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	2201      	movs	r2, #1
 8006b6a:	409a      	lsls	r2, r3
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	; (8006c1c <xTaskResumeAll+0x120>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <xTaskResumeAll+0x120>)
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4a27      	ldr	r2, [pc, #156]	; (8006c20 <xTaskResumeAll+0x124>)
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f7fe fdc6 	bl	800571e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <xTaskResumeAll+0x128>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <xTaskResumeAll+0x12c>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ba6:	4b1c      	ldr	r3, [pc, #112]	; (8006c18 <xTaskResumeAll+0x11c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1cc      	bne.n	8006b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bb4:	f000 fb1c 	bl	80071f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bb8:	4b1c      	ldr	r3, [pc, #112]	; (8006c2c <xTaskResumeAll+0x130>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d010      	beq.n	8006be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bc4:	f000 f836 	bl	8006c34 <xTaskIncrementTick>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006bce:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <xTaskResumeAll+0x12c>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f1      	bne.n	8006bc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006be0:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <xTaskResumeAll+0x130>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <xTaskResumeAll+0x12c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <xTaskResumeAll+0x134>)
 8006bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c02:	f000 fe97 	bl	8007934 <vPortExitCritical>

	return xAlreadyYielded;
 8006c06:	68bb      	ldr	r3, [r7, #8]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	200009f0 	.word	0x200009f0
 8006c14:	200009c8 	.word	0x200009c8
 8006c18:	20000988 	.word	0x20000988
 8006c1c:	200009d0 	.word	0x200009d0
 8006c20:	200008cc 	.word	0x200008cc
 8006c24:	200008c8 	.word	0x200008c8
 8006c28:	200009dc 	.word	0x200009dc
 8006c2c:	200009d8 	.word	0x200009d8
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3e:	4b4e      	ldr	r3, [pc, #312]	; (8006d78 <xTaskIncrementTick+0x144>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f040 808e 	bne.w	8006d64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c48:	4b4c      	ldr	r3, [pc, #304]	; (8006d7c <xTaskIncrementTick+0x148>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c50:	4a4a      	ldr	r2, [pc, #296]	; (8006d7c <xTaskIncrementTick+0x148>)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d120      	bne.n	8006c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c5c:	4b48      	ldr	r3, [pc, #288]	; (8006d80 <xTaskIncrementTick+0x14c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	603b      	str	r3, [r7, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <xTaskIncrementTick+0x46>
 8006c7c:	4b40      	ldr	r3, [pc, #256]	; (8006d80 <xTaskIncrementTick+0x14c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <xTaskIncrementTick+0x150>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a3e      	ldr	r2, [pc, #248]	; (8006d80 <xTaskIncrementTick+0x14c>)
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	4a3e      	ldr	r2, [pc, #248]	; (8006d84 <xTaskIncrementTick+0x150>)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	4b3d      	ldr	r3, [pc, #244]	; (8006d88 <xTaskIncrementTick+0x154>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	4a3c      	ldr	r2, [pc, #240]	; (8006d88 <xTaskIncrementTick+0x154>)
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	f000 faa9 	bl	80071f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c9e:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <xTaskIncrementTick+0x158>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d348      	bcc.n	8006d3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca8:	4b35      	ldr	r3, [pc, #212]	; (8006d80 <xTaskIncrementTick+0x14c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb2:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <xTaskIncrementTick+0x158>)
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	601a      	str	r2, [r3, #0]
					break;
 8006cba:	e03e      	b.n	8006d3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cbc:	4b30      	ldr	r3, [pc, #192]	; (8006d80 <xTaskIncrementTick+0x14c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d203      	bcs.n	8006cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cd4:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <xTaskIncrementTick+0x158>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cda:	e02e      	b.n	8006d3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe fd79 	bl	80057d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	3318      	adds	r3, #24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fd70 	bl	80057d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	4b23      	ldr	r3, [pc, #140]	; (8006d90 <xTaskIncrementTick+0x15c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <xTaskIncrementTick+0x15c>)
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <xTaskIncrementTick+0x160>)
 8006d18:	441a      	add	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7fe fcfc 	bl	800571e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <xTaskIncrementTick+0x164>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d3b9      	bcc.n	8006ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d34:	2301      	movs	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d38:	e7b6      	b.n	8006ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d3a:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <xTaskIncrementTick+0x164>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	4914      	ldr	r1, [pc, #80]	; (8006d94 <xTaskIncrementTick+0x160>)
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d901      	bls.n	8006d56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d56:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <xTaskIncrementTick+0x168>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e004      	b.n	8006d6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d64:	4b0e      	ldr	r3, [pc, #56]	; (8006da0 <xTaskIncrementTick+0x16c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	4a0d      	ldr	r2, [pc, #52]	; (8006da0 <xTaskIncrementTick+0x16c>)
 8006d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d6e:	697b      	ldr	r3, [r7, #20]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	200009f0 	.word	0x200009f0
 8006d7c:	200009cc 	.word	0x200009cc
 8006d80:	20000980 	.word	0x20000980
 8006d84:	20000984 	.word	0x20000984
 8006d88:	200009e0 	.word	0x200009e0
 8006d8c:	200009e8 	.word	0x200009e8
 8006d90:	200009d0 	.word	0x200009d0
 8006d94:	200008cc 	.word	0x200008cc
 8006d98:	200008c8 	.word	0x200008c8
 8006d9c:	200009dc 	.word	0x200009dc
 8006da0:	200009d8 	.word	0x200009d8

08006da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006daa:	4b29      	ldr	r3, [pc, #164]	; (8006e50 <vTaskSwitchContext+0xac>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006db2:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <vTaskSwitchContext+0xb0>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006db8:	e044      	b.n	8006e44 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <vTaskSwitchContext+0xb0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <vTaskSwitchContext+0xb4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	fab3 f383 	clz	r3, r3
 8006dcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	f1c3 031f 	rsb	r3, r3, #31
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	4921      	ldr	r1, [pc, #132]	; (8006e5c <vTaskSwitchContext+0xb8>)
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	607b      	str	r3, [r7, #4]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <vTaskSwitchContext+0x5a>
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4a14      	ldr	r2, [pc, #80]	; (8006e5c <vTaskSwitchContext+0xb8>)
 8006e0c:	4413      	add	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3308      	adds	r3, #8
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d104      	bne.n	8006e30 <vTaskSwitchContext+0x8c>
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <vTaskSwitchContext+0xbc>)
 8006e38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <vTaskSwitchContext+0xbc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	334c      	adds	r3, #76	; 0x4c
 8006e40:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <vTaskSwitchContext+0xc0>)
 8006e42:	6013      	str	r3, [r2, #0]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	200009f0 	.word	0x200009f0
 8006e54:	200009dc 	.word	0x200009dc
 8006e58:	200009d0 	.word	0x200009d0
 8006e5c:	200008cc 	.word	0x200008cc
 8006e60:	200008c8 	.word	0x200008c8
 8006e64:	20000010 	.word	0x20000010

08006e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <vTaskPlaceOnEventList+0x44>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3318      	adds	r3, #24
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fe fc65 	bl	8005766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	6838      	ldr	r0, [r7, #0]
 8006ea0:	f000 fb82 	bl	80075a8 <prvAddCurrentTaskToDelayedList>
}
 8006ea4:	bf00      	nop
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200008c8 	.word	0x200008c8

08006eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60fb      	str	r3, [r7, #12]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe fc79 	bl	80057d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <xTaskRemoveFromEventList+0xac>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d11c      	bne.n	8006f28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fc70 	bl	80057d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	2201      	movs	r2, #1
 8006efe:	409a      	lsls	r2, r3
 8006f00:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <xTaskRemoveFromEventList+0xb0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <xTaskRemoveFromEventList+0xb0>)
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <xTaskRemoveFromEventList+0xb4>)
 8006f18:	441a      	add	r2, r3
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4610      	mov	r0, r2
 8006f22:	f7fe fbfc 	bl	800571e <vListInsertEnd>
 8006f26:	e005      	b.n	8006f34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	480e      	ldr	r0, [pc, #56]	; (8006f68 <xTaskRemoveFromEventList+0xb8>)
 8006f30:	f7fe fbf5 	bl	800571e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <xTaskRemoveFromEventList+0xbc>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d905      	bls.n	8006f4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <xTaskRemoveFromEventList+0xc0>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e001      	b.n	8006f52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200009f0 	.word	0x200009f0
 8006f60:	200009d0 	.word	0x200009d0
 8006f64:	200008cc 	.word	0x200008cc
 8006f68:	20000988 	.word	0x20000988
 8006f6c:	200008c8 	.word	0x200008c8
 8006f70:	200009dc 	.word	0x200009dc

08006f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <vTaskInternalSetTimeOutState+0x24>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <vTaskInternalSetTimeOutState+0x28>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	605a      	str	r2, [r3, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	200009e0 	.word	0x200009e0
 8006f9c:	200009cc 	.word	0x200009cc

08006fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	613b      	str	r3, [r7, #16]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fe2:	f000 fc77 	bl	80078d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	; (800705c <xTaskCheckForTimeOut+0xbc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d102      	bne.n	8007006 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	e023      	b.n	800704e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b15      	ldr	r3, [pc, #84]	; (8007060 <xTaskCheckForTimeOut+0xc0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d007      	beq.n	8007022 <xTaskCheckForTimeOut+0x82>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	429a      	cmp	r2, r3
 800701a:	d302      	bcc.n	8007022 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e015      	b.n	800704e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	429a      	cmp	r2, r3
 800702a:	d20b      	bcs.n	8007044 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ff9b 	bl	8006f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
 8007042:	e004      	b.n	800704e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800704a:	2301      	movs	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800704e:	f000 fc71 	bl	8007934 <vPortExitCritical>

	return xReturn;
 8007052:	69fb      	ldr	r3, [r7, #28]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200009cc 	.word	0x200009cc
 8007060:	200009e0 	.word	0x200009e0

08007064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007068:	4b03      	ldr	r3, [pc, #12]	; (8007078 <vTaskMissedYield+0x14>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
}
 800706e:	bf00      	nop
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	200009dc 	.word	0x200009dc

0800707c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007084:	f000 f852 	bl	800712c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <prvIdleTask+0x28>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d9f9      	bls.n	8007084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <prvIdleTask+0x2c>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070a0:	e7f0      	b.n	8007084 <prvIdleTask+0x8>
 80070a2:	bf00      	nop
 80070a4:	200008cc 	.word	0x200008cc
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070b2:	2300      	movs	r3, #0
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	e00c      	b.n	80070d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4a12      	ldr	r2, [pc, #72]	; (800710c <prvInitialiseTaskLists+0x60>)
 80070c4:	4413      	add	r3, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fafc 	bl	80056c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3301      	adds	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b06      	cmp	r3, #6
 80070d6:	d9ef      	bls.n	80070b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070d8:	480d      	ldr	r0, [pc, #52]	; (8007110 <prvInitialiseTaskLists+0x64>)
 80070da:	f7fe faf3 	bl	80056c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070de:	480d      	ldr	r0, [pc, #52]	; (8007114 <prvInitialiseTaskLists+0x68>)
 80070e0:	f7fe faf0 	bl	80056c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070e4:	480c      	ldr	r0, [pc, #48]	; (8007118 <prvInitialiseTaskLists+0x6c>)
 80070e6:	f7fe faed 	bl	80056c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070ea:	480c      	ldr	r0, [pc, #48]	; (800711c <prvInitialiseTaskLists+0x70>)
 80070ec:	f7fe faea 	bl	80056c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070f0:	480b      	ldr	r0, [pc, #44]	; (8007120 <prvInitialiseTaskLists+0x74>)
 80070f2:	f7fe fae7 	bl	80056c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <prvInitialiseTaskLists+0x78>)
 80070f8:	4a05      	ldr	r2, [pc, #20]	; (8007110 <prvInitialiseTaskLists+0x64>)
 80070fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <prvInitialiseTaskLists+0x7c>)
 80070fe:	4a05      	ldr	r2, [pc, #20]	; (8007114 <prvInitialiseTaskLists+0x68>)
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200008cc 	.word	0x200008cc
 8007110:	20000958 	.word	0x20000958
 8007114:	2000096c 	.word	0x2000096c
 8007118:	20000988 	.word	0x20000988
 800711c:	2000099c 	.word	0x2000099c
 8007120:	200009b4 	.word	0x200009b4
 8007124:	20000980 	.word	0x20000980
 8007128:	20000984 	.word	0x20000984

0800712c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007132:	e019      	b.n	8007168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007134:	f000 fbce 	bl	80078d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007138:	4b10      	ldr	r3, [pc, #64]	; (800717c <prvCheckTasksWaitingTermination+0x50>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fb47 	bl	80057d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800714a:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <prvCheckTasksWaitingTermination+0x54>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3b01      	subs	r3, #1
 8007150:	4a0b      	ldr	r2, [pc, #44]	; (8007180 <prvCheckTasksWaitingTermination+0x54>)
 8007152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007154:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <prvCheckTasksWaitingTermination+0x58>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <prvCheckTasksWaitingTermination+0x58>)
 800715c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800715e:	f000 fbe9 	bl	8007934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f810 	bl	8007188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <prvCheckTasksWaitingTermination+0x58>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e1      	bne.n	8007134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	2000099c 	.word	0x2000099c
 8007180:	200009c8 	.word	0x200009c8
 8007184:	200009b0 	.word	0x200009b0

08007188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	334c      	adds	r3, #76	; 0x4c
 8007194:	4618      	mov	r0, r3
 8007196:	f001 f8a5 	bl	80082e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d108      	bne.n	80071b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fd81 	bl	8007cb0 <vPortFree>
				vPortFree( pxTCB );
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fd7e 	bl	8007cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071b4:	e018      	b.n	80071e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d103      	bne.n	80071c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fd75 	bl	8007cb0 <vPortFree>
	}
 80071c6:	e00f      	b.n	80071e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d00a      	beq.n	80071e8 <prvDeleteTCB+0x60>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <prvDeleteTCB+0x5e>
	}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f6:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <prvResetNextTaskUnblockTime+0x38>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d104      	bne.n	800720a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007200:	4b0a      	ldr	r3, [pc, #40]	; (800722c <prvResetNextTaskUnblockTime+0x3c>)
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007208:	e008      	b.n	800721c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720a:	4b07      	ldr	r3, [pc, #28]	; (8007228 <prvResetNextTaskUnblockTime+0x38>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a04      	ldr	r2, [pc, #16]	; (800722c <prvResetNextTaskUnblockTime+0x3c>)
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000980 	.word	0x20000980
 800722c:	200009e8 	.word	0x200009e8

08007230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007236:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <xTaskGetSchedulerState+0x34>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800723e:	2301      	movs	r3, #1
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	e008      	b.n	8007256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007244:	4b08      	ldr	r3, [pc, #32]	; (8007268 <xTaskGetSchedulerState+0x38>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800724c:	2302      	movs	r3, #2
 800724e:	607b      	str	r3, [r7, #4]
 8007250:	e001      	b.n	8007256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007252:	2300      	movs	r3, #0
 8007254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007256:	687b      	ldr	r3, [r7, #4]
	}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	200009d4 	.word	0x200009d4
 8007268:	200009f0 	.word	0x200009f0

0800726c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d05e      	beq.n	8007340 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007286:	4b31      	ldr	r3, [pc, #196]	; (800734c <xTaskPriorityInherit+0xe0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	429a      	cmp	r2, r3
 800728e:	d24e      	bcs.n	800732e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	db06      	blt.n	80072a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007298:	4b2c      	ldr	r3, [pc, #176]	; (800734c <xTaskPriorityInherit+0xe0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	f1c3 0207 	rsb	r2, r3, #7
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	6959      	ldr	r1, [r3, #20]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4a26      	ldr	r2, [pc, #152]	; (8007350 <xTaskPriorityInherit+0xe4>)
 80072b8:	4413      	add	r3, r2
 80072ba:	4299      	cmp	r1, r3
 80072bc:	d12f      	bne.n	800731e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fa88 	bl	80057d8 <uxListRemove>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	43da      	mvns	r2, r3
 80072da:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <xTaskPriorityInherit+0xe8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4013      	ands	r3, r2
 80072e0:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <xTaskPriorityInherit+0xe8>)
 80072e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072e4:	4b19      	ldr	r3, [pc, #100]	; (800734c <xTaskPriorityInherit+0xe0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	2201      	movs	r2, #1
 80072f4:	409a      	lsls	r2, r3
 80072f6:	4b17      	ldr	r3, [pc, #92]	; (8007354 <xTaskPriorityInherit+0xe8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	4a15      	ldr	r2, [pc, #84]	; (8007354 <xTaskPriorityInherit+0xe8>)
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4a10      	ldr	r2, [pc, #64]	; (8007350 <xTaskPriorityInherit+0xe4>)
 800730e:	441a      	add	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f7fe fa01 	bl	800571e <vListInsertEnd>
 800731c:	e004      	b.n	8007328 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800731e:	4b0b      	ldr	r3, [pc, #44]	; (800734c <xTaskPriorityInherit+0xe0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007328:	2301      	movs	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e008      	b.n	8007340 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <xTaskPriorityInherit+0xe0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	429a      	cmp	r2, r3
 800733a:	d201      	bcs.n	8007340 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007340:	68fb      	ldr	r3, [r7, #12]
	}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200008c8 	.word	0x200008c8
 8007350:	200008cc 	.word	0x200008cc
 8007354:	200009d0 	.word	0x200009d0

08007358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d06e      	beq.n	800744c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800736e:	4b3a      	ldr	r3, [pc, #232]	; (8007458 <xTaskPriorityDisinherit+0x100>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	429a      	cmp	r2, r3
 8007376:	d00a      	beq.n	800738e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60fb      	str	r3, [r7, #12]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60bb      	str	r3, [r7, #8]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b0:	1e5a      	subs	r2, r3, #1
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073be:	429a      	cmp	r2, r3
 80073c0:	d044      	beq.n	800744c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d140      	bne.n	800744c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fa02 	bl	80057d8 <uxListRemove>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d115      	bne.n	8007406 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	491f      	ldr	r1, [pc, #124]	; (800745c <xTaskPriorityDisinherit+0x104>)
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xTaskPriorityDisinherit+0xae>
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	2201      	movs	r2, #1
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43da      	mvns	r2, r3
 80073fc:	4b18      	ldr	r3, [pc, #96]	; (8007460 <xTaskPriorityDisinherit+0x108>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4013      	ands	r3, r2
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <xTaskPriorityDisinherit+0x108>)
 8007404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	f1c3 0207 	rsb	r2, r3, #7
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	2201      	movs	r2, #1
 8007420:	409a      	lsls	r2, r3
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <xTaskPriorityDisinherit+0x108>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4313      	orrs	r3, r2
 8007428:	4a0d      	ldr	r2, [pc, #52]	; (8007460 <xTaskPriorityDisinherit+0x108>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4a08      	ldr	r2, [pc, #32]	; (800745c <xTaskPriorityDisinherit+0x104>)
 800743a:	441a      	add	r2, r3
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe f96b 	bl	800571e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800744c:	697b      	ldr	r3, [r7, #20]
	}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200008c8 	.word	0x200008c8
 800745c:	200008cc 	.word	0x200008cc
 8007460:	200009d0 	.word	0x200009d0

08007464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d077      	beq.n	800756c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d902      	bls.n	80074aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e002      	b.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d058      	beq.n	800756c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d153      	bne.n	800756c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80074c4:	4b2b      	ldr	r3, [pc, #172]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d10a      	bne.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60bb      	str	r3, [r7, #8]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	db04      	blt.n	8007502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f1c3 0207 	rsb	r2, r3, #7
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	6959      	ldr	r1, [r3, #20]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4a19      	ldr	r2, [pc, #100]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007512:	4413      	add	r3, r2
 8007514:	4299      	cmp	r1, r3
 8007516:	d129      	bne.n	800756c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	3304      	adds	r3, #4
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe f95b 	bl	80057d8 <uxListRemove>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	2201      	movs	r2, #1
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43da      	mvns	r2, r3
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4013      	ands	r3, r2
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800753c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4313      	orrs	r3, r2
 800754c:	4a0b      	ldr	r2, [pc, #44]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4a06      	ldr	r2, [pc, #24]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800755e:	441a      	add	r2, r3
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f7fe f8d9 	bl	800571e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800756c:	bf00      	nop
 800756e:	3720      	adds	r7, #32
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	200008c8 	.word	0x200008c8
 8007578:	200008cc 	.word	0x200008cc
 800757c:	200009d0 	.word	0x200009d0

08007580 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007584:	4b07      	ldr	r3, [pc, #28]	; (80075a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007592:	3201      	adds	r2, #1
 8007594:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007596:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007598:	681b      	ldr	r3, [r3, #0]
	}
 800759a:	4618      	mov	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	200008c8 	.word	0x200008c8

080075a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075b2:	4b29      	ldr	r3, [pc, #164]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b8:	4b28      	ldr	r3, [pc, #160]	; (800765c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe f90a 	bl	80057d8 <uxListRemove>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	2201      	movs	r2, #1
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	43da      	mvns	r2, r3
 80075d8:	4b21      	ldr	r3, [pc, #132]	; (8007660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4013      	ands	r3, r2
 80075de:	4a20      	ldr	r2, [pc, #128]	; (8007660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80075e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d10a      	bne.n	8007600 <prvAddCurrentTaskToDelayedList+0x58>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d007      	beq.n	8007600 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <prvAddCurrentTaskToDelayedList+0xb4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	481a      	ldr	r0, [pc, #104]	; (8007664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80075fa:	f7fe f890 	bl	800571e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075fe:	e026      	b.n	800764e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4413      	add	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <prvAddCurrentTaskToDelayedList+0xb4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d209      	bcs.n	800762c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007618:	4b13      	ldr	r3, [pc, #76]	; (8007668 <prvAddCurrentTaskToDelayedList+0xc0>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <prvAddCurrentTaskToDelayedList+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3304      	adds	r3, #4
 8007622:	4619      	mov	r1, r3
 8007624:	4610      	mov	r0, r2
 8007626:	f7fe f89e 	bl	8005766 <vListInsert>
}
 800762a:	e010      	b.n	800764e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800762c:	4b0f      	ldr	r3, [pc, #60]	; (800766c <prvAddCurrentTaskToDelayedList+0xc4>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fe f894 	bl	8005766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	429a      	cmp	r2, r3
 8007646:	d202      	bcs.n	800764e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvAddCurrentTaskToDelayedList+0xc8>)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6013      	str	r3, [r2, #0]
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200009cc 	.word	0x200009cc
 800765c:	200008c8 	.word	0x200008c8
 8007660:	200009d0 	.word	0x200009d0
 8007664:	200009b4 	.word	0x200009b4
 8007668:	20000984 	.word	0x20000984
 800766c:	20000980 	.word	0x20000980
 8007670:	200009e8 	.word	0x200009e8

08007674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b04      	subs	r3, #4
 8007684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800768c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3b04      	subs	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076a4:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <pxPortInitialiseStack+0x64>)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b14      	subs	r3, #20
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f06f 0202 	mvn.w	r2, #2
 80076c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b20      	subs	r3, #32
 80076c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	080076dd 	.word	0x080076dd

080076dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <prvTaskExitError+0x54>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d00a      	beq.n	8007706 <prvTaskExitError+0x2a>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <prvTaskExitError+0x28>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800771a:	bf00      	nop
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0fc      	beq.n	800771c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	2000000c 	.word	0x2000000c
	...

08007740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <pxCurrentTCBConst2>)
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f380 8809 	msr	PSP, r0
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f04f 0000 	mov.w	r0, #0
 8007756:	f380 8811 	msr	BASEPRI, r0
 800775a:	4770      	bx	lr
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst2>:
 8007760:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007768:	4808      	ldr	r0, [pc, #32]	; (800778c <prvPortStartFirstTask+0x24>)
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	6800      	ldr	r0, [r0, #0]
 800776e:	f380 8808 	msr	MSP, r0
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8814 	msr	CONTROL, r0
 800777a:	b662      	cpsie	i
 800777c:	b661      	cpsie	f
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	df00      	svc	0
 8007788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800778a:	bf00      	nop
 800778c:	e000ed08 	.word	0xe000ed08

08007790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007796:	4b46      	ldr	r3, [pc, #280]	; (80078b0 <xPortStartScheduler+0x120>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a46      	ldr	r2, [pc, #280]	; (80078b4 <xPortStartScheduler+0x124>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10a      	bne.n	80077b6 <xPortStartScheduler+0x26>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077b6:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <xPortStartScheduler+0x120>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3f      	ldr	r2, [pc, #252]	; (80078b8 <xPortStartScheduler+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10a      	bne.n	80077d6 <xPortStartScheduler+0x46>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077d6:	4b39      	ldr	r3, [pc, #228]	; (80078bc <xPortStartScheduler+0x12c>)
 80077d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	22ff      	movs	r2, #255	; 0xff
 80077e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <xPortStartScheduler+0x130>)
 80077fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077fe:	4b31      	ldr	r3, [pc, #196]	; (80078c4 <xPortStartScheduler+0x134>)
 8007800:	2207      	movs	r2, #7
 8007802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007804:	e009      	b.n	800781a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007806:	4b2f      	ldr	r3, [pc, #188]	; (80078c4 <xPortStartScheduler+0x134>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3b01      	subs	r3, #1
 800780c:	4a2d      	ldr	r2, [pc, #180]	; (80078c4 <xPortStartScheduler+0x134>)
 800780e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	b2db      	uxtb	r3, r3
 8007818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d0ef      	beq.n	8007806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007826:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <xPortStartScheduler+0x134>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f1c3 0307 	rsb	r3, r3, #7
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00a      	beq.n	8007848 <xPortStartScheduler+0xb8>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007848:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <xPortStartScheduler+0x134>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <xPortStartScheduler+0x134>)
 8007850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <xPortStartScheduler+0x134>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800785a:	4a1a      	ldr	r2, [pc, #104]	; (80078c4 <xPortStartScheduler+0x134>)
 800785c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	b2da      	uxtb	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <xPortStartScheduler+0x138>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <xPortStartScheduler+0x138>)
 800786c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <xPortStartScheduler+0x138>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a14      	ldr	r2, [pc, #80]	; (80078c8 <xPortStartScheduler+0x138>)
 8007878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800787c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800787e:	f000 f8dd 	bl	8007a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007882:	4b12      	ldr	r3, [pc, #72]	; (80078cc <xPortStartScheduler+0x13c>)
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007888:	f000 f8fc 	bl	8007a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <xPortStartScheduler+0x140>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0f      	ldr	r2, [pc, #60]	; (80078d0 <xPortStartScheduler+0x140>)
 8007892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007898:	f7ff ff66 	bl	8007768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800789c:	f7ff fa82 	bl	8006da4 <vTaskSwitchContext>
	prvTaskExitError();
 80078a0:	f7ff ff1c 	bl	80076dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	e000ed00 	.word	0xe000ed00
 80078b4:	410fc271 	.word	0x410fc271
 80078b8:	410fc270 	.word	0x410fc270
 80078bc:	e000e400 	.word	0xe000e400
 80078c0:	200009f4 	.word	0x200009f4
 80078c4:	200009f8 	.word	0x200009f8
 80078c8:	e000ed20 	.word	0xe000ed20
 80078cc:	2000000c 	.word	0x2000000c
 80078d0:	e000ef34 	.word	0xe000ef34

080078d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
}
 80078ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <vPortEnterCritical+0x58>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	4a0d      	ldr	r2, [pc, #52]	; (800792c <vPortEnterCritical+0x58>)
 80078f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <vPortEnterCritical+0x58>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d10f      	bne.n	8007920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <vPortEnterCritical+0x5c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <vPortEnterCritical+0x4c>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	603b      	str	r3, [r7, #0]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <vPortEnterCritical+0x4a>
	}
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	2000000c 	.word	0x2000000c
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <vPortExitCritical+0x50>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <vPortExitCritical+0x24>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	607b      	str	r3, [r7, #4]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <vPortExitCritical+0x50>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3b01      	subs	r3, #1
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <vPortExitCritical+0x50>)
 8007960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <vPortExitCritical+0x50>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <vPortExitCritical+0x42>
 800796a:	2300      	movs	r3, #0
 800796c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	f383 8811 	msr	BASEPRI, r3
}
 8007974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
	...

08007990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007990:	f3ef 8009 	mrs	r0, PSP
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <pxCurrentTCBConst>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f01e 0f10 	tst.w	lr, #16
 80079a0:	bf08      	it	eq
 80079a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	6010      	str	r0, [r2, #0]
 80079ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079b4:	f380 8811 	msr	BASEPRI, r0
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f7ff f9f0 	bl	8006da4 <vTaskSwitchContext>
 80079c4:	f04f 0000 	mov.w	r0, #0
 80079c8:	f380 8811 	msr	BASEPRI, r0
 80079cc:	bc09      	pop	{r0, r3}
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	6808      	ldr	r0, [r1, #0]
 80079d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d6:	f01e 0f10 	tst.w	lr, #16
 80079da:	bf08      	it	eq
 80079dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079e0:	f380 8809 	msr	PSP, r0
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst>:
 80079f0:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a12:	f7ff f90f 	bl	8006c34 <xTaskIncrementTick>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <SysTick_Handler+0x40>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
}
 8007a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a40:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a46:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <vPortSetupTimerInterrupt+0x38>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <vPortSetupTimerInterrupt+0x3c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a0a      	ldr	r2, [pc, #40]	; (8007a7c <vPortSetupTimerInterrupt+0x40>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <vPortSetupTimerInterrupt+0x44>)
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <vPortSetupTimerInterrupt+0x34>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e010 	.word	0xe000e010
 8007a74:	e000e018 	.word	0xe000e018
 8007a78:	20000000 	.word	0x20000000
 8007a7c:	10624dd3 	.word	0x10624dd3
 8007a80:	e000e014 	.word	0xe000e014

08007a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a94 <vPortEnableVFP+0x10>
 8007a88:	6801      	ldr	r1, [r0, #0]
 8007a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a8e:	6001      	str	r1, [r0, #0]
 8007a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a92:	bf00      	nop
 8007a94:	e000ed88 	.word	0xe000ed88

08007a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a9e:	f3ef 8305 	mrs	r3, IPSR
 8007aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d914      	bls.n	8007ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aaa:	4a17      	ldr	r2, [pc, #92]	; (8007b08 <vPortValidateInterruptPriority+0x70>)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ab4:	4b15      	ldr	r3, [pc, #84]	; (8007b0c <vPortValidateInterruptPriority+0x74>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	7afa      	ldrb	r2, [r7, #11]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d20a      	bcs.n	8007ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <vPortValidateInterruptPriority+0x78>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007adc:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <vPortValidateInterruptPriority+0x7c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d90a      	bls.n	8007afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	603b      	str	r3, [r7, #0]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <vPortValidateInterruptPriority+0x60>
	}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	e000e3f0 	.word	0xe000e3f0
 8007b0c:	200009f4 	.word	0x200009f4
 8007b10:	e000ed0c 	.word	0xe000ed0c
 8007b14:	200009f8 	.word	0x200009f8

08007b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b24:	f7fe ffdc 	bl	8006ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b28:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <pvPortMalloc+0x180>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b30:	f000 f920 	bl	8007d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b34:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <pvPortMalloc+0x184>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8093 	bne.w	8007c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01d      	beq.n	8007b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b48:	2208      	movs	r2, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	3308      	adds	r3, #8
 8007b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <pvPortMalloc+0x6c>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	617b      	str	r3, [r7, #20]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d06e      	beq.n	8007c68 <pvPortMalloc+0x150>
 8007b8a:	4b45      	ldr	r3, [pc, #276]	; (8007ca0 <pvPortMalloc+0x188>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d869      	bhi.n	8007c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b94:	4b43      	ldr	r3, [pc, #268]	; (8007ca4 <pvPortMalloc+0x18c>)
 8007b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b98:	4b42      	ldr	r3, [pc, #264]	; (8007ca4 <pvPortMalloc+0x18c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b9e:	e004      	b.n	8007baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <pvPortMalloc+0xa4>
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f1      	bne.n	8007ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bbc:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <pvPortMalloc+0x180>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d050      	beq.n	8007c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2208      	movs	r2, #8
 8007bcc:	4413      	add	r3, r2
 8007bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	2308      	movs	r3, #8
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d91f      	bls.n	8007c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <pvPortMalloc+0xf8>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	613b      	str	r3, [r7, #16]
}
 8007c0c:	bf00      	nop
 8007c0e:	e7fe      	b.n	8007c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	1ad2      	subs	r2, r2, r3
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f000 f908 	bl	8007e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <pvPortMalloc+0x190>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d203      	bcs.n	8007c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c42:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <pvPortMalloc+0x188>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <pvPortMalloc+0x190>)
 8007c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <pvPortMalloc+0x184>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <pvPortMalloc+0x194>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <pvPortMalloc+0x194>)
 8007c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c68:	f7fe ff48 	bl	8006afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <pvPortMalloc+0x174>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	60fb      	str	r3, [r7, #12]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <pvPortMalloc+0x172>
	return pvReturn;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3728      	adds	r7, #40	; 0x28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20003114 	.word	0x20003114
 8007c9c:	20003128 	.word	0x20003128
 8007ca0:	20003118 	.word	0x20003118
 8007ca4:	2000310c 	.word	0x2000310c
 8007ca8:	2000311c 	.word	0x2000311c
 8007cac:	20003120 	.word	0x20003120

08007cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d04d      	beq.n	8007d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cc2:	2308      	movs	r3, #8
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <vPortFree+0xb8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <vPortFree+0x44>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60fb      	str	r3, [r7, #12]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <vPortFree+0x62>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <vPortFree+0xb8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01e      	beq.n	8007d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d11a      	bne.n	8007d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <vPortFree+0xb8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	401a      	ands	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d38:	f7fe fed2 	bl	8006ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <vPortFree+0xbc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4413      	add	r3, r2
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <vPortFree+0xbc>)
 8007d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f000 f874 	bl	8007e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <vPortFree+0xc0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	4a06      	ldr	r2, [pc, #24]	; (8007d70 <vPortFree+0xc0>)
 8007d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d5a:	f7fe fecf 	bl	8006afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d5e:	bf00      	nop
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20003128 	.word	0x20003128
 8007d6c:	20003118 	.word	0x20003118
 8007d70:	20003124 	.word	0x20003124

08007d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8007d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d80:	4b27      	ldr	r3, [pc, #156]	; (8007e20 <prvHeapInit+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3307      	adds	r3, #7
 8007d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <prvHeapInit+0xac>)
 8007da4:	4413      	add	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <prvHeapInit+0xb0>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <prvHeapInit+0xb0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <prvHeapInit+0xb4>)
 8007dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <prvHeapInit+0xb4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dde:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <prvHeapInit+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvHeapInit+0xb4>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <prvHeapInit+0xb8>)
 8007e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <prvHeapInit+0xbc>)
 8007e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <prvHeapInit+0xc0>)
 8007e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	200009fc 	.word	0x200009fc
 8007e24:	2000310c 	.word	0x2000310c
 8007e28:	20003114 	.word	0x20003114
 8007e2c:	2000311c 	.word	0x2000311c
 8007e30:	20003118 	.word	0x20003118
 8007e34:	20003128 	.word	0x20003128

08007e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e40:	4b28      	ldr	r3, [pc, #160]	; (8007ee4 <prvInsertBlockIntoFreeList+0xac>)
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e002      	b.n	8007e4c <prvInsertBlockIntoFreeList+0x14>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d8f7      	bhi.n	8007e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	4413      	add	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d108      	bne.n	8007e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	441a      	add	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d118      	bne.n	8007ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d00d      	beq.n	8007eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e008      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	e003      	b.n	8007ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d002      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	2000310c 	.word	0x2000310c
 8007ee8:	20003114 	.word	0x20003114

08007eec <atof>:
 8007eec:	2100      	movs	r1, #0
 8007eee:	f001 b8d9 	b.w	80090a4 <strtod>

08007ef2 <atoi>:
 8007ef2:	220a      	movs	r2, #10
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f001 b963 	b.w	80091c0 <strtol>
	...

08007efc <__errno>:
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <__errno+0x8>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000010 	.word	0x20000010

08007f08 <std>:
 8007f08:	2300      	movs	r3, #0
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f16:	6083      	str	r3, [r0, #8]
 8007f18:	8181      	strh	r1, [r0, #12]
 8007f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f1c:	81c2      	strh	r2, [r0, #14]
 8007f1e:	6183      	str	r3, [r0, #24]
 8007f20:	4619      	mov	r1, r3
 8007f22:	2208      	movs	r2, #8
 8007f24:	305c      	adds	r0, #92	; 0x5c
 8007f26:	f000 f91a 	bl	800815e <memset>
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <std+0x38>)
 8007f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f2e:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <std+0x3c>)
 8007f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <std+0x40>)
 8007f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <std+0x44>)
 8007f38:	6224      	str	r4, [r4, #32]
 8007f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	bf00      	nop
 8007f40:	080083bd 	.word	0x080083bd
 8007f44:	080083df 	.word	0x080083df
 8007f48:	08008417 	.word	0x08008417
 8007f4c:	0800843b 	.word	0x0800843b

08007f50 <_cleanup_r>:
 8007f50:	4901      	ldr	r1, [pc, #4]	; (8007f58 <_cleanup_r+0x8>)
 8007f52:	f000 b8af 	b.w	80080b4 <_fwalk_reent>
 8007f56:	bf00      	nop
 8007f58:	08009325 	.word	0x08009325

08007f5c <__sfmoreglue>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	2268      	movs	r2, #104	; 0x68
 8007f60:	1e4d      	subs	r5, r1, #1
 8007f62:	4355      	muls	r5, r2
 8007f64:	460e      	mov	r6, r1
 8007f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f6a:	f000 f921 	bl	80081b0 <_malloc_r>
 8007f6e:	4604      	mov	r4, r0
 8007f70:	b140      	cbz	r0, 8007f84 <__sfmoreglue+0x28>
 8007f72:	2100      	movs	r1, #0
 8007f74:	e9c0 1600 	strd	r1, r6, [r0]
 8007f78:	300c      	adds	r0, #12
 8007f7a:	60a0      	str	r0, [r4, #8]
 8007f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f80:	f000 f8ed 	bl	800815e <memset>
 8007f84:	4620      	mov	r0, r4
 8007f86:	bd70      	pop	{r4, r5, r6, pc}

08007f88 <__sfp_lock_acquire>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__sfp_lock_acquire+0x8>)
 8007f8a:	f000 b8d8 	b.w	800813e <__retarget_lock_acquire_recursive>
 8007f8e:	bf00      	nop
 8007f90:	2000312d 	.word	0x2000312d

08007f94 <__sfp_lock_release>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__sfp_lock_release+0x8>)
 8007f96:	f000 b8d3 	b.w	8008140 <__retarget_lock_release_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	2000312d 	.word	0x2000312d

08007fa0 <__sinit_lock_acquire>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__sinit_lock_acquire+0x8>)
 8007fa2:	f000 b8cc 	b.w	800813e <__retarget_lock_acquire_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	2000312e 	.word	0x2000312e

08007fac <__sinit_lock_release>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__sinit_lock_release+0x8>)
 8007fae:	f000 b8c7 	b.w	8008140 <__retarget_lock_release_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	2000312e 	.word	0x2000312e

08007fb8 <__sinit>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	4604      	mov	r4, r0
 8007fbc:	f7ff fff0 	bl	8007fa0 <__sinit_lock_acquire>
 8007fc0:	69a3      	ldr	r3, [r4, #24]
 8007fc2:	b11b      	cbz	r3, 8007fcc <__sinit+0x14>
 8007fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc8:	f7ff bff0 	b.w	8007fac <__sinit_lock_release>
 8007fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8007fd2:	4b13      	ldr	r3, [pc, #76]	; (8008020 <__sinit+0x68>)
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <__sinit+0x6c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	bf04      	itt	eq
 8007fde:	2301      	moveq	r3, #1
 8007fe0:	61a3      	streq	r3, [r4, #24]
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 f820 	bl	8008028 <__sfp>
 8007fe8:	6060      	str	r0, [r4, #4]
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 f81c 	bl	8008028 <__sfp>
 8007ff0:	60a0      	str	r0, [r4, #8]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f818 	bl	8008028 <__sfp>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	60e0      	str	r0, [r4, #12]
 8007ffc:	2104      	movs	r1, #4
 8007ffe:	6860      	ldr	r0, [r4, #4]
 8008000:	f7ff ff82 	bl	8007f08 <std>
 8008004:	68a0      	ldr	r0, [r4, #8]
 8008006:	2201      	movs	r2, #1
 8008008:	2109      	movs	r1, #9
 800800a:	f7ff ff7d 	bl	8007f08 <std>
 800800e:	68e0      	ldr	r0, [r4, #12]
 8008010:	2202      	movs	r2, #2
 8008012:	2112      	movs	r1, #18
 8008014:	f7ff ff78 	bl	8007f08 <std>
 8008018:	2301      	movs	r3, #1
 800801a:	61a3      	str	r3, [r4, #24]
 800801c:	e7d2      	b.n	8007fc4 <__sinit+0xc>
 800801e:	bf00      	nop
 8008020:	0800b094 	.word	0x0800b094
 8008024:	08007f51 	.word	0x08007f51

08008028 <__sfp>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	4607      	mov	r7, r0
 800802c:	f7ff ffac 	bl	8007f88 <__sfp_lock_acquire>
 8008030:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <__sfp+0x84>)
 8008032:	681e      	ldr	r6, [r3, #0]
 8008034:	69b3      	ldr	r3, [r6, #24]
 8008036:	b913      	cbnz	r3, 800803e <__sfp+0x16>
 8008038:	4630      	mov	r0, r6
 800803a:	f7ff ffbd 	bl	8007fb8 <__sinit>
 800803e:	3648      	adds	r6, #72	; 0x48
 8008040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008044:	3b01      	subs	r3, #1
 8008046:	d503      	bpl.n	8008050 <__sfp+0x28>
 8008048:	6833      	ldr	r3, [r6, #0]
 800804a:	b30b      	cbz	r3, 8008090 <__sfp+0x68>
 800804c:	6836      	ldr	r6, [r6, #0]
 800804e:	e7f7      	b.n	8008040 <__sfp+0x18>
 8008050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008054:	b9d5      	cbnz	r5, 800808c <__sfp+0x64>
 8008056:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <__sfp+0x88>)
 8008058:	60e3      	str	r3, [r4, #12]
 800805a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800805e:	6665      	str	r5, [r4, #100]	; 0x64
 8008060:	f000 f86c 	bl	800813c <__retarget_lock_init_recursive>
 8008064:	f7ff ff96 	bl	8007f94 <__sfp_lock_release>
 8008068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800806c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008070:	6025      	str	r5, [r4, #0]
 8008072:	61a5      	str	r5, [r4, #24]
 8008074:	2208      	movs	r2, #8
 8008076:	4629      	mov	r1, r5
 8008078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800807c:	f000 f86f 	bl	800815e <memset>
 8008080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008088:	4620      	mov	r0, r4
 800808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800808c:	3468      	adds	r4, #104	; 0x68
 800808e:	e7d9      	b.n	8008044 <__sfp+0x1c>
 8008090:	2104      	movs	r1, #4
 8008092:	4638      	mov	r0, r7
 8008094:	f7ff ff62 	bl	8007f5c <__sfmoreglue>
 8008098:	4604      	mov	r4, r0
 800809a:	6030      	str	r0, [r6, #0]
 800809c:	2800      	cmp	r0, #0
 800809e:	d1d5      	bne.n	800804c <__sfp+0x24>
 80080a0:	f7ff ff78 	bl	8007f94 <__sfp_lock_release>
 80080a4:	230c      	movs	r3, #12
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	e7ee      	b.n	8008088 <__sfp+0x60>
 80080aa:	bf00      	nop
 80080ac:	0800b094 	.word	0x0800b094
 80080b0:	ffff0001 	.word	0xffff0001

080080b4 <_fwalk_reent>:
 80080b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080b8:	4606      	mov	r6, r0
 80080ba:	4688      	mov	r8, r1
 80080bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080c0:	2700      	movs	r7, #0
 80080c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080c6:	f1b9 0901 	subs.w	r9, r9, #1
 80080ca:	d505      	bpl.n	80080d8 <_fwalk_reent+0x24>
 80080cc:	6824      	ldr	r4, [r4, #0]
 80080ce:	2c00      	cmp	r4, #0
 80080d0:	d1f7      	bne.n	80080c2 <_fwalk_reent+0xe>
 80080d2:	4638      	mov	r0, r7
 80080d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080d8:	89ab      	ldrh	r3, [r5, #12]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d907      	bls.n	80080ee <_fwalk_reent+0x3a>
 80080de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080e2:	3301      	adds	r3, #1
 80080e4:	d003      	beq.n	80080ee <_fwalk_reent+0x3a>
 80080e6:	4629      	mov	r1, r5
 80080e8:	4630      	mov	r0, r6
 80080ea:	47c0      	blx	r8
 80080ec:	4307      	orrs	r7, r0
 80080ee:	3568      	adds	r5, #104	; 0x68
 80080f0:	e7e9      	b.n	80080c6 <_fwalk_reent+0x12>
	...

080080f4 <__libc_init_array>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4d0d      	ldr	r5, [pc, #52]	; (800812c <__libc_init_array+0x38>)
 80080f8:	4c0d      	ldr	r4, [pc, #52]	; (8008130 <__libc_init_array+0x3c>)
 80080fa:	1b64      	subs	r4, r4, r5
 80080fc:	10a4      	asrs	r4, r4, #2
 80080fe:	2600      	movs	r6, #0
 8008100:	42a6      	cmp	r6, r4
 8008102:	d109      	bne.n	8008118 <__libc_init_array+0x24>
 8008104:	4d0b      	ldr	r5, [pc, #44]	; (8008134 <__libc_init_array+0x40>)
 8008106:	4c0c      	ldr	r4, [pc, #48]	; (8008138 <__libc_init_array+0x44>)
 8008108:	f002 ff04 	bl	800af14 <_init>
 800810c:	1b64      	subs	r4, r4, r5
 800810e:	10a4      	asrs	r4, r4, #2
 8008110:	2600      	movs	r6, #0
 8008112:	42a6      	cmp	r6, r4
 8008114:	d105      	bne.n	8008122 <__libc_init_array+0x2e>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f855 3b04 	ldr.w	r3, [r5], #4
 800811c:	4798      	blx	r3
 800811e:	3601      	adds	r6, #1
 8008120:	e7ee      	b.n	8008100 <__libc_init_array+0xc>
 8008122:	f855 3b04 	ldr.w	r3, [r5], #4
 8008126:	4798      	blx	r3
 8008128:	3601      	adds	r6, #1
 800812a:	e7f2      	b.n	8008112 <__libc_init_array+0x1e>
 800812c:	0800b46c 	.word	0x0800b46c
 8008130:	0800b46c 	.word	0x0800b46c
 8008134:	0800b46c 	.word	0x0800b46c
 8008138:	0800b470 	.word	0x0800b470

0800813c <__retarget_lock_init_recursive>:
 800813c:	4770      	bx	lr

0800813e <__retarget_lock_acquire_recursive>:
 800813e:	4770      	bx	lr

08008140 <__retarget_lock_release_recursive>:
 8008140:	4770      	bx	lr

08008142 <memcpy>:
 8008142:	440a      	add	r2, r1
 8008144:	4291      	cmp	r1, r2
 8008146:	f100 33ff 	add.w	r3, r0, #4294967295
 800814a:	d100      	bne.n	800814e <memcpy+0xc>
 800814c:	4770      	bx	lr
 800814e:	b510      	push	{r4, lr}
 8008150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008158:	4291      	cmp	r1, r2
 800815a:	d1f9      	bne.n	8008150 <memcpy+0xe>
 800815c:	bd10      	pop	{r4, pc}

0800815e <memset>:
 800815e:	4402      	add	r2, r0
 8008160:	4603      	mov	r3, r0
 8008162:	4293      	cmp	r3, r2
 8008164:	d100      	bne.n	8008168 <memset+0xa>
 8008166:	4770      	bx	lr
 8008168:	f803 1b01 	strb.w	r1, [r3], #1
 800816c:	e7f9      	b.n	8008162 <memset+0x4>
	...

08008170 <sbrk_aligned>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4e0e      	ldr	r6, [pc, #56]	; (80081ac <sbrk_aligned+0x3c>)
 8008174:	460c      	mov	r4, r1
 8008176:	6831      	ldr	r1, [r6, #0]
 8008178:	4605      	mov	r5, r0
 800817a:	b911      	cbnz	r1, 8008182 <sbrk_aligned+0x12>
 800817c:	f000 f90e 	bl	800839c <_sbrk_r>
 8008180:	6030      	str	r0, [r6, #0]
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 f909 	bl	800839c <_sbrk_r>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d00a      	beq.n	80081a4 <sbrk_aligned+0x34>
 800818e:	1cc4      	adds	r4, r0, #3
 8008190:	f024 0403 	bic.w	r4, r4, #3
 8008194:	42a0      	cmp	r0, r4
 8008196:	d007      	beq.n	80081a8 <sbrk_aligned+0x38>
 8008198:	1a21      	subs	r1, r4, r0
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f8fe 	bl	800839c <_sbrk_r>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d101      	bne.n	80081a8 <sbrk_aligned+0x38>
 80081a4:	f04f 34ff 	mov.w	r4, #4294967295
 80081a8:	4620      	mov	r0, r4
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	20003134 	.word	0x20003134

080081b0 <_malloc_r>:
 80081b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b4:	1ccd      	adds	r5, r1, #3
 80081b6:	f025 0503 	bic.w	r5, r5, #3
 80081ba:	3508      	adds	r5, #8
 80081bc:	2d0c      	cmp	r5, #12
 80081be:	bf38      	it	cc
 80081c0:	250c      	movcc	r5, #12
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	4607      	mov	r7, r0
 80081c6:	db01      	blt.n	80081cc <_malloc_r+0x1c>
 80081c8:	42a9      	cmp	r1, r5
 80081ca:	d905      	bls.n	80081d8 <_malloc_r+0x28>
 80081cc:	230c      	movs	r3, #12
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	2600      	movs	r6, #0
 80081d2:	4630      	mov	r0, r6
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	4e2e      	ldr	r6, [pc, #184]	; (8008294 <_malloc_r+0xe4>)
 80081da:	f001 fc73 	bl	8009ac4 <__malloc_lock>
 80081de:	6833      	ldr	r3, [r6, #0]
 80081e0:	461c      	mov	r4, r3
 80081e2:	bb34      	cbnz	r4, 8008232 <_malloc_r+0x82>
 80081e4:	4629      	mov	r1, r5
 80081e6:	4638      	mov	r0, r7
 80081e8:	f7ff ffc2 	bl	8008170 <sbrk_aligned>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	4604      	mov	r4, r0
 80081f0:	d14d      	bne.n	800828e <_malloc_r+0xde>
 80081f2:	6834      	ldr	r4, [r6, #0]
 80081f4:	4626      	mov	r6, r4
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	d140      	bne.n	800827c <_malloc_r+0xcc>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	4631      	mov	r1, r6
 80081fe:	4638      	mov	r0, r7
 8008200:	eb04 0803 	add.w	r8, r4, r3
 8008204:	f000 f8ca 	bl	800839c <_sbrk_r>
 8008208:	4580      	cmp	r8, r0
 800820a:	d13a      	bne.n	8008282 <_malloc_r+0xd2>
 800820c:	6821      	ldr	r1, [r4, #0]
 800820e:	3503      	adds	r5, #3
 8008210:	1a6d      	subs	r5, r5, r1
 8008212:	f025 0503 	bic.w	r5, r5, #3
 8008216:	3508      	adds	r5, #8
 8008218:	2d0c      	cmp	r5, #12
 800821a:	bf38      	it	cc
 800821c:	250c      	movcc	r5, #12
 800821e:	4629      	mov	r1, r5
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff ffa5 	bl	8008170 <sbrk_aligned>
 8008226:	3001      	adds	r0, #1
 8008228:	d02b      	beq.n	8008282 <_malloc_r+0xd2>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	442b      	add	r3, r5
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	e00e      	b.n	8008250 <_malloc_r+0xa0>
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	1b52      	subs	r2, r2, r5
 8008236:	d41e      	bmi.n	8008276 <_malloc_r+0xc6>
 8008238:	2a0b      	cmp	r2, #11
 800823a:	d916      	bls.n	800826a <_malloc_r+0xba>
 800823c:	1961      	adds	r1, r4, r5
 800823e:	42a3      	cmp	r3, r4
 8008240:	6025      	str	r5, [r4, #0]
 8008242:	bf18      	it	ne
 8008244:	6059      	strne	r1, [r3, #4]
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	bf08      	it	eq
 800824a:	6031      	streq	r1, [r6, #0]
 800824c:	5162      	str	r2, [r4, r5]
 800824e:	604b      	str	r3, [r1, #4]
 8008250:	4638      	mov	r0, r7
 8008252:	f104 060b 	add.w	r6, r4, #11
 8008256:	f001 fc3b 	bl	8009ad0 <__malloc_unlock>
 800825a:	f026 0607 	bic.w	r6, r6, #7
 800825e:	1d23      	adds	r3, r4, #4
 8008260:	1af2      	subs	r2, r6, r3
 8008262:	d0b6      	beq.n	80081d2 <_malloc_r+0x22>
 8008264:	1b9b      	subs	r3, r3, r6
 8008266:	50a3      	str	r3, [r4, r2]
 8008268:	e7b3      	b.n	80081d2 <_malloc_r+0x22>
 800826a:	6862      	ldr	r2, [r4, #4]
 800826c:	42a3      	cmp	r3, r4
 800826e:	bf0c      	ite	eq
 8008270:	6032      	streq	r2, [r6, #0]
 8008272:	605a      	strne	r2, [r3, #4]
 8008274:	e7ec      	b.n	8008250 <_malloc_r+0xa0>
 8008276:	4623      	mov	r3, r4
 8008278:	6864      	ldr	r4, [r4, #4]
 800827a:	e7b2      	b.n	80081e2 <_malloc_r+0x32>
 800827c:	4634      	mov	r4, r6
 800827e:	6876      	ldr	r6, [r6, #4]
 8008280:	e7b9      	b.n	80081f6 <_malloc_r+0x46>
 8008282:	230c      	movs	r3, #12
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	4638      	mov	r0, r7
 8008288:	f001 fc22 	bl	8009ad0 <__malloc_unlock>
 800828c:	e7a1      	b.n	80081d2 <_malloc_r+0x22>
 800828e:	6025      	str	r5, [r4, #0]
 8008290:	e7de      	b.n	8008250 <_malloc_r+0xa0>
 8008292:	bf00      	nop
 8008294:	20003130 	.word	0x20003130

08008298 <iprintf>:
 8008298:	b40f      	push	{r0, r1, r2, r3}
 800829a:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <iprintf+0x2c>)
 800829c:	b513      	push	{r0, r1, r4, lr}
 800829e:	681c      	ldr	r4, [r3, #0]
 80082a0:	b124      	cbz	r4, 80082ac <iprintf+0x14>
 80082a2:	69a3      	ldr	r3, [r4, #24]
 80082a4:	b913      	cbnz	r3, 80082ac <iprintf+0x14>
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7ff fe86 	bl	8007fb8 <__sinit>
 80082ac:	ab05      	add	r3, sp, #20
 80082ae:	9a04      	ldr	r2, [sp, #16]
 80082b0:	68a1      	ldr	r1, [r4, #8]
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	4620      	mov	r0, r4
 80082b6:	f002 f95f 	bl	800a578 <_vfiprintf_r>
 80082ba:	b002      	add	sp, #8
 80082bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c0:	b004      	add	sp, #16
 80082c2:	4770      	bx	lr
 80082c4:	20000010 	.word	0x20000010

080082c8 <cleanup_glue>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	460c      	mov	r4, r1
 80082cc:	6809      	ldr	r1, [r1, #0]
 80082ce:	4605      	mov	r5, r0
 80082d0:	b109      	cbz	r1, 80082d6 <cleanup_glue+0xe>
 80082d2:	f7ff fff9 	bl	80082c8 <cleanup_glue>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082de:	f002 b8d5 	b.w	800a48c <_free_r>
	...

080082e4 <_reclaim_reent>:
 80082e4:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <_reclaim_reent+0xb4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4283      	cmp	r3, r0
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	4604      	mov	r4, r0
 80082ee:	d051      	beq.n	8008394 <_reclaim_reent+0xb0>
 80082f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80082f2:	b143      	cbz	r3, 8008306 <_reclaim_reent+0x22>
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d14a      	bne.n	8008390 <_reclaim_reent+0xac>
 80082fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082fc:	6819      	ldr	r1, [r3, #0]
 80082fe:	b111      	cbz	r1, 8008306 <_reclaim_reent+0x22>
 8008300:	4620      	mov	r0, r4
 8008302:	f002 f8c3 	bl	800a48c <_free_r>
 8008306:	6961      	ldr	r1, [r4, #20]
 8008308:	b111      	cbz	r1, 8008310 <_reclaim_reent+0x2c>
 800830a:	4620      	mov	r0, r4
 800830c:	f002 f8be 	bl	800a48c <_free_r>
 8008310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008312:	b111      	cbz	r1, 800831a <_reclaim_reent+0x36>
 8008314:	4620      	mov	r0, r4
 8008316:	f002 f8b9 	bl	800a48c <_free_r>
 800831a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800831c:	b111      	cbz	r1, 8008324 <_reclaim_reent+0x40>
 800831e:	4620      	mov	r0, r4
 8008320:	f002 f8b4 	bl	800a48c <_free_r>
 8008324:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008326:	b111      	cbz	r1, 800832e <_reclaim_reent+0x4a>
 8008328:	4620      	mov	r0, r4
 800832a:	f002 f8af 	bl	800a48c <_free_r>
 800832e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008330:	b111      	cbz	r1, 8008338 <_reclaim_reent+0x54>
 8008332:	4620      	mov	r0, r4
 8008334:	f002 f8aa 	bl	800a48c <_free_r>
 8008338:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800833a:	b111      	cbz	r1, 8008342 <_reclaim_reent+0x5e>
 800833c:	4620      	mov	r0, r4
 800833e:	f002 f8a5 	bl	800a48c <_free_r>
 8008342:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008344:	b111      	cbz	r1, 800834c <_reclaim_reent+0x68>
 8008346:	4620      	mov	r0, r4
 8008348:	f002 f8a0 	bl	800a48c <_free_r>
 800834c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800834e:	b111      	cbz	r1, 8008356 <_reclaim_reent+0x72>
 8008350:	4620      	mov	r0, r4
 8008352:	f002 f89b 	bl	800a48c <_free_r>
 8008356:	69a3      	ldr	r3, [r4, #24]
 8008358:	b1e3      	cbz	r3, 8008394 <_reclaim_reent+0xb0>
 800835a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800835c:	4620      	mov	r0, r4
 800835e:	4798      	blx	r3
 8008360:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008362:	b1b9      	cbz	r1, 8008394 <_reclaim_reent+0xb0>
 8008364:	4620      	mov	r0, r4
 8008366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800836a:	f7ff bfad 	b.w	80082c8 <cleanup_glue>
 800836e:	5949      	ldr	r1, [r1, r5]
 8008370:	b941      	cbnz	r1, 8008384 <_reclaim_reent+0xa0>
 8008372:	3504      	adds	r5, #4
 8008374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008376:	2d80      	cmp	r5, #128	; 0x80
 8008378:	68d9      	ldr	r1, [r3, #12]
 800837a:	d1f8      	bne.n	800836e <_reclaim_reent+0x8a>
 800837c:	4620      	mov	r0, r4
 800837e:	f002 f885 	bl	800a48c <_free_r>
 8008382:	e7ba      	b.n	80082fa <_reclaim_reent+0x16>
 8008384:	680e      	ldr	r6, [r1, #0]
 8008386:	4620      	mov	r0, r4
 8008388:	f002 f880 	bl	800a48c <_free_r>
 800838c:	4631      	mov	r1, r6
 800838e:	e7ef      	b.n	8008370 <_reclaim_reent+0x8c>
 8008390:	2500      	movs	r5, #0
 8008392:	e7ef      	b.n	8008374 <_reclaim_reent+0x90>
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	bf00      	nop
 8008398:	20000010 	.word	0x20000010

0800839c <_sbrk_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d06      	ldr	r5, [pc, #24]	; (80083b8 <_sbrk_r+0x1c>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f9 fd92 	bl	8001ed0 <_sbrk>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_sbrk_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_sbrk_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	20003138 	.word	0x20003138

080083bc <__sread>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	460c      	mov	r4, r1
 80083c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c4:	f002 fb9c 	bl	800ab00 <_read_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	bfab      	itete	ge
 80083cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083ce:	89a3      	ldrhlt	r3, [r4, #12]
 80083d0:	181b      	addge	r3, r3, r0
 80083d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083d6:	bfac      	ite	ge
 80083d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80083da:	81a3      	strhlt	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__swrite>:
 80083de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e2:	461f      	mov	r7, r3
 80083e4:	898b      	ldrh	r3, [r1, #12]
 80083e6:	05db      	lsls	r3, r3, #23
 80083e8:	4605      	mov	r5, r0
 80083ea:	460c      	mov	r4, r1
 80083ec:	4616      	mov	r6, r2
 80083ee:	d505      	bpl.n	80083fc <__swrite+0x1e>
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	2302      	movs	r3, #2
 80083f6:	2200      	movs	r2, #0
 80083f8:	f001 fb40 	bl	8009a7c <_lseek_r>
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	4632      	mov	r2, r6
 800840a:	463b      	mov	r3, r7
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	f000 bedf 	b.w	80091d4 <_write_r>

08008416 <__sseek>:
 8008416:	b510      	push	{r4, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841e:	f001 fb2d 	bl	8009a7c <_lseek_r>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	bf15      	itete	ne
 8008428:	6560      	strne	r0, [r4, #84]	; 0x54
 800842a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800842e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008432:	81a3      	strheq	r3, [r4, #12]
 8008434:	bf18      	it	ne
 8008436:	81a3      	strhne	r3, [r4, #12]
 8008438:	bd10      	pop	{r4, pc}

0800843a <__sclose>:
 800843a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843e:	f000 bedb 	b.w	80091f8 <_close_r>

08008442 <strchr>:
 8008442:	b2c9      	uxtb	r1, r1
 8008444:	4603      	mov	r3, r0
 8008446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800844a:	b11a      	cbz	r2, 8008454 <strchr+0x12>
 800844c:	428a      	cmp	r2, r1
 800844e:	d1f9      	bne.n	8008444 <strchr+0x2>
 8008450:	4618      	mov	r0, r3
 8008452:	4770      	bx	lr
 8008454:	2900      	cmp	r1, #0
 8008456:	bf18      	it	ne
 8008458:	2300      	movne	r3, #0
 800845a:	e7f9      	b.n	8008450 <strchr+0xe>

0800845c <sulp>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	ec45 4b10 	vmov	d0, r4, r5
 8008466:	4616      	mov	r6, r2
 8008468:	f001 feaa 	bl	800a1c0 <__ulp>
 800846c:	ec51 0b10 	vmov	r0, r1, d0
 8008470:	b17e      	cbz	r6, 8008492 <sulp+0x36>
 8008472:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008476:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800847a:	2b00      	cmp	r3, #0
 800847c:	dd09      	ble.n	8008492 <sulp+0x36>
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008484:	2400      	movs	r4, #0
 8008486:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800848a:	4622      	mov	r2, r4
 800848c:	462b      	mov	r3, r5
 800848e:	f7f8 f8c3 	bl	8000618 <__aeabi_dmul>
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	0000      	movs	r0, r0
	...

08008498 <_strtod_l>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	ed2d 8b02 	vpush	{d8}
 80084a0:	b09d      	sub	sp, #116	; 0x74
 80084a2:	461f      	mov	r7, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	9318      	str	r3, [sp, #96]	; 0x60
 80084a8:	4ba2      	ldr	r3, [pc, #648]	; (8008734 <_strtod_l+0x29c>)
 80084aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	4604      	mov	r4, r0
 80084b2:	4618      	mov	r0, r3
 80084b4:	4688      	mov	r8, r1
 80084b6:	f7f7 fe95 	bl	80001e4 <strlen>
 80084ba:	f04f 0a00 	mov.w	sl, #0
 80084be:	4605      	mov	r5, r0
 80084c0:	f04f 0b00 	mov.w	fp, #0
 80084c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	2a2b      	cmp	r2, #43	; 0x2b
 80084ce:	d04e      	beq.n	800856e <_strtod_l+0xd6>
 80084d0:	d83b      	bhi.n	800854a <_strtod_l+0xb2>
 80084d2:	2a0d      	cmp	r2, #13
 80084d4:	d834      	bhi.n	8008540 <_strtod_l+0xa8>
 80084d6:	2a08      	cmp	r2, #8
 80084d8:	d834      	bhi.n	8008544 <_strtod_l+0xac>
 80084da:	2a00      	cmp	r2, #0
 80084dc:	d03e      	beq.n	800855c <_strtod_l+0xc4>
 80084de:	2300      	movs	r3, #0
 80084e0:	930a      	str	r3, [sp, #40]	; 0x28
 80084e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80084e4:	7833      	ldrb	r3, [r6, #0]
 80084e6:	2b30      	cmp	r3, #48	; 0x30
 80084e8:	f040 80b0 	bne.w	800864c <_strtod_l+0x1b4>
 80084ec:	7873      	ldrb	r3, [r6, #1]
 80084ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084f2:	2b58      	cmp	r3, #88	; 0x58
 80084f4:	d168      	bne.n	80085c8 <_strtod_l+0x130>
 80084f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	ab18      	add	r3, sp, #96	; 0x60
 80084fc:	9702      	str	r7, [sp, #8]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4a8d      	ldr	r2, [pc, #564]	; (8008738 <_strtod_l+0x2a0>)
 8008502:	ab19      	add	r3, sp, #100	; 0x64
 8008504:	a917      	add	r1, sp, #92	; 0x5c
 8008506:	4620      	mov	r0, r4
 8008508:	f000 ffb0 	bl	800946c <__gethex>
 800850c:	f010 0707 	ands.w	r7, r0, #7
 8008510:	4605      	mov	r5, r0
 8008512:	d005      	beq.n	8008520 <_strtod_l+0x88>
 8008514:	2f06      	cmp	r7, #6
 8008516:	d12c      	bne.n	8008572 <_strtod_l+0xda>
 8008518:	3601      	adds	r6, #1
 800851a:	2300      	movs	r3, #0
 800851c:	9617      	str	r6, [sp, #92]	; 0x5c
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 8590 	bne.w	8009048 <_strtod_l+0xbb0>
 8008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852a:	b1eb      	cbz	r3, 8008568 <_strtod_l+0xd0>
 800852c:	4652      	mov	r2, sl
 800852e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008532:	ec43 2b10 	vmov	d0, r2, r3
 8008536:	b01d      	add	sp, #116	; 0x74
 8008538:	ecbd 8b02 	vpop	{d8}
 800853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008540:	2a20      	cmp	r2, #32
 8008542:	d1cc      	bne.n	80084de <_strtod_l+0x46>
 8008544:	3301      	adds	r3, #1
 8008546:	9317      	str	r3, [sp, #92]	; 0x5c
 8008548:	e7be      	b.n	80084c8 <_strtod_l+0x30>
 800854a:	2a2d      	cmp	r2, #45	; 0x2d
 800854c:	d1c7      	bne.n	80084de <_strtod_l+0x46>
 800854e:	2201      	movs	r2, #1
 8008550:	920a      	str	r2, [sp, #40]	; 0x28
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	9217      	str	r2, [sp, #92]	; 0x5c
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1c2      	bne.n	80084e2 <_strtod_l+0x4a>
 800855c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800855e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f040 856e 	bne.w	8009044 <_strtod_l+0xbac>
 8008568:	4652      	mov	r2, sl
 800856a:	465b      	mov	r3, fp
 800856c:	e7e1      	b.n	8008532 <_strtod_l+0x9a>
 800856e:	2200      	movs	r2, #0
 8008570:	e7ee      	b.n	8008550 <_strtod_l+0xb8>
 8008572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008574:	b13a      	cbz	r2, 8008586 <_strtod_l+0xee>
 8008576:	2135      	movs	r1, #53	; 0x35
 8008578:	a81a      	add	r0, sp, #104	; 0x68
 800857a:	f001 ff2c 	bl	800a3d6 <__copybits>
 800857e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008580:	4620      	mov	r0, r4
 8008582:	f001 faeb 	bl	8009b5c <_Bfree>
 8008586:	3f01      	subs	r7, #1
 8008588:	2f04      	cmp	r7, #4
 800858a:	d806      	bhi.n	800859a <_strtod_l+0x102>
 800858c:	e8df f007 	tbb	[pc, r7]
 8008590:	1714030a 	.word	0x1714030a
 8008594:	0a          	.byte	0x0a
 8008595:	00          	.byte	0x00
 8008596:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800859a:	0728      	lsls	r0, r5, #28
 800859c:	d5c0      	bpl.n	8008520 <_strtod_l+0x88>
 800859e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80085a2:	e7bd      	b.n	8008520 <_strtod_l+0x88>
 80085a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80085a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80085b6:	e7f0      	b.n	800859a <_strtod_l+0x102>
 80085b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800873c <_strtod_l+0x2a4>
 80085bc:	e7ed      	b.n	800859a <_strtod_l+0x102>
 80085be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80085c2:	f04f 3aff 	mov.w	sl, #4294967295
 80085c6:	e7e8      	b.n	800859a <_strtod_l+0x102>
 80085c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80085ce:	785b      	ldrb	r3, [r3, #1]
 80085d0:	2b30      	cmp	r3, #48	; 0x30
 80085d2:	d0f9      	beq.n	80085c8 <_strtod_l+0x130>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0a3      	beq.n	8008520 <_strtod_l+0x88>
 80085d8:	2301      	movs	r3, #1
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085e2:	9308      	str	r3, [sp, #32]
 80085e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80085e8:	464f      	mov	r7, r9
 80085ea:	220a      	movs	r2, #10
 80085ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80085ee:	7806      	ldrb	r6, [r0, #0]
 80085f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80085f4:	b2d9      	uxtb	r1, r3
 80085f6:	2909      	cmp	r1, #9
 80085f8:	d92a      	bls.n	8008650 <_strtod_l+0x1b8>
 80085fa:	9905      	ldr	r1, [sp, #20]
 80085fc:	462a      	mov	r2, r5
 80085fe:	f002 fa9b 	bl	800ab38 <strncmp>
 8008602:	b398      	cbz	r0, 800866c <_strtod_l+0x1d4>
 8008604:	2000      	movs	r0, #0
 8008606:	4632      	mov	r2, r6
 8008608:	463d      	mov	r5, r7
 800860a:	9005      	str	r0, [sp, #20]
 800860c:	4603      	mov	r3, r0
 800860e:	2a65      	cmp	r2, #101	; 0x65
 8008610:	d001      	beq.n	8008616 <_strtod_l+0x17e>
 8008612:	2a45      	cmp	r2, #69	; 0x45
 8008614:	d118      	bne.n	8008648 <_strtod_l+0x1b0>
 8008616:	b91d      	cbnz	r5, 8008620 <_strtod_l+0x188>
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	4302      	orrs	r2, r0
 800861c:	d09e      	beq.n	800855c <_strtod_l+0xc4>
 800861e:	2500      	movs	r5, #0
 8008620:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008624:	f108 0201 	add.w	r2, r8, #1
 8008628:	9217      	str	r2, [sp, #92]	; 0x5c
 800862a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800862e:	2a2b      	cmp	r2, #43	; 0x2b
 8008630:	d075      	beq.n	800871e <_strtod_l+0x286>
 8008632:	2a2d      	cmp	r2, #45	; 0x2d
 8008634:	d07b      	beq.n	800872e <_strtod_l+0x296>
 8008636:	f04f 0c00 	mov.w	ip, #0
 800863a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800863e:	2909      	cmp	r1, #9
 8008640:	f240 8082 	bls.w	8008748 <_strtod_l+0x2b0>
 8008644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008648:	2600      	movs	r6, #0
 800864a:	e09d      	b.n	8008788 <_strtod_l+0x2f0>
 800864c:	2300      	movs	r3, #0
 800864e:	e7c4      	b.n	80085da <_strtod_l+0x142>
 8008650:	2f08      	cmp	r7, #8
 8008652:	bfd8      	it	le
 8008654:	9907      	ldrle	r1, [sp, #28]
 8008656:	f100 0001 	add.w	r0, r0, #1
 800865a:	bfda      	itte	le
 800865c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008660:	9307      	strle	r3, [sp, #28]
 8008662:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008666:	3701      	adds	r7, #1
 8008668:	9017      	str	r0, [sp, #92]	; 0x5c
 800866a:	e7bf      	b.n	80085ec <_strtod_l+0x154>
 800866c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800866e:	195a      	adds	r2, r3, r5
 8008670:	9217      	str	r2, [sp, #92]	; 0x5c
 8008672:	5d5a      	ldrb	r2, [r3, r5]
 8008674:	2f00      	cmp	r7, #0
 8008676:	d037      	beq.n	80086e8 <_strtod_l+0x250>
 8008678:	9005      	str	r0, [sp, #20]
 800867a:	463d      	mov	r5, r7
 800867c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008680:	2b09      	cmp	r3, #9
 8008682:	d912      	bls.n	80086aa <_strtod_l+0x212>
 8008684:	2301      	movs	r3, #1
 8008686:	e7c2      	b.n	800860e <_strtod_l+0x176>
 8008688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	9217      	str	r2, [sp, #92]	; 0x5c
 800868e:	785a      	ldrb	r2, [r3, #1]
 8008690:	3001      	adds	r0, #1
 8008692:	2a30      	cmp	r2, #48	; 0x30
 8008694:	d0f8      	beq.n	8008688 <_strtod_l+0x1f0>
 8008696:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800869a:	2b08      	cmp	r3, #8
 800869c:	f200 84d9 	bhi.w	8009052 <_strtod_l+0xbba>
 80086a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086a2:	9005      	str	r0, [sp, #20]
 80086a4:	2000      	movs	r0, #0
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	4605      	mov	r5, r0
 80086aa:	3a30      	subs	r2, #48	; 0x30
 80086ac:	f100 0301 	add.w	r3, r0, #1
 80086b0:	d014      	beq.n	80086dc <_strtod_l+0x244>
 80086b2:	9905      	ldr	r1, [sp, #20]
 80086b4:	4419      	add	r1, r3
 80086b6:	9105      	str	r1, [sp, #20]
 80086b8:	462b      	mov	r3, r5
 80086ba:	eb00 0e05 	add.w	lr, r0, r5
 80086be:	210a      	movs	r1, #10
 80086c0:	4573      	cmp	r3, lr
 80086c2:	d113      	bne.n	80086ec <_strtod_l+0x254>
 80086c4:	182b      	adds	r3, r5, r0
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	f105 0501 	add.w	r5, r5, #1
 80086cc:	4405      	add	r5, r0
 80086ce:	dc1c      	bgt.n	800870a <_strtod_l+0x272>
 80086d0:	9907      	ldr	r1, [sp, #28]
 80086d2:	230a      	movs	r3, #10
 80086d4:	fb03 2301 	mla	r3, r3, r1, r2
 80086d8:	9307      	str	r3, [sp, #28]
 80086da:	2300      	movs	r3, #0
 80086dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086de:	1c51      	adds	r1, r2, #1
 80086e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80086e2:	7852      	ldrb	r2, [r2, #1]
 80086e4:	4618      	mov	r0, r3
 80086e6:	e7c9      	b.n	800867c <_strtod_l+0x1e4>
 80086e8:	4638      	mov	r0, r7
 80086ea:	e7d2      	b.n	8008692 <_strtod_l+0x1fa>
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	dc04      	bgt.n	80086fa <_strtod_l+0x262>
 80086f0:	9e07      	ldr	r6, [sp, #28]
 80086f2:	434e      	muls	r6, r1
 80086f4:	9607      	str	r6, [sp, #28]
 80086f6:	3301      	adds	r3, #1
 80086f8:	e7e2      	b.n	80086c0 <_strtod_l+0x228>
 80086fa:	f103 0c01 	add.w	ip, r3, #1
 80086fe:	f1bc 0f10 	cmp.w	ip, #16
 8008702:	bfd8      	it	le
 8008704:	fb01 f909 	mulle.w	r9, r1, r9
 8008708:	e7f5      	b.n	80086f6 <_strtod_l+0x25e>
 800870a:	2d10      	cmp	r5, #16
 800870c:	bfdc      	itt	le
 800870e:	230a      	movle	r3, #10
 8008710:	fb03 2909 	mlale	r9, r3, r9, r2
 8008714:	e7e1      	b.n	80086da <_strtod_l+0x242>
 8008716:	2300      	movs	r3, #0
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	2301      	movs	r3, #1
 800871c:	e77c      	b.n	8008618 <_strtod_l+0x180>
 800871e:	f04f 0c00 	mov.w	ip, #0
 8008722:	f108 0202 	add.w	r2, r8, #2
 8008726:	9217      	str	r2, [sp, #92]	; 0x5c
 8008728:	f898 2002 	ldrb.w	r2, [r8, #2]
 800872c:	e785      	b.n	800863a <_strtod_l+0x1a2>
 800872e:	f04f 0c01 	mov.w	ip, #1
 8008732:	e7f6      	b.n	8008722 <_strtod_l+0x28a>
 8008734:	0800b270 	.word	0x0800b270
 8008738:	0800b0a4 	.word	0x0800b0a4
 800873c:	7ff00000 	.word	0x7ff00000
 8008740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008742:	1c51      	adds	r1, r2, #1
 8008744:	9117      	str	r1, [sp, #92]	; 0x5c
 8008746:	7852      	ldrb	r2, [r2, #1]
 8008748:	2a30      	cmp	r2, #48	; 0x30
 800874a:	d0f9      	beq.n	8008740 <_strtod_l+0x2a8>
 800874c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008750:	2908      	cmp	r1, #8
 8008752:	f63f af79 	bhi.w	8008648 <_strtod_l+0x1b0>
 8008756:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800875a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800875c:	9206      	str	r2, [sp, #24]
 800875e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008760:	1c51      	adds	r1, r2, #1
 8008762:	9117      	str	r1, [sp, #92]	; 0x5c
 8008764:	7852      	ldrb	r2, [r2, #1]
 8008766:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800876a:	2e09      	cmp	r6, #9
 800876c:	d937      	bls.n	80087de <_strtod_l+0x346>
 800876e:	9e06      	ldr	r6, [sp, #24]
 8008770:	1b89      	subs	r1, r1, r6
 8008772:	2908      	cmp	r1, #8
 8008774:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008778:	dc02      	bgt.n	8008780 <_strtod_l+0x2e8>
 800877a:	4576      	cmp	r6, lr
 800877c:	bfa8      	it	ge
 800877e:	4676      	movge	r6, lr
 8008780:	f1bc 0f00 	cmp.w	ip, #0
 8008784:	d000      	beq.n	8008788 <_strtod_l+0x2f0>
 8008786:	4276      	negs	r6, r6
 8008788:	2d00      	cmp	r5, #0
 800878a:	d14d      	bne.n	8008828 <_strtod_l+0x390>
 800878c:	9904      	ldr	r1, [sp, #16]
 800878e:	4301      	orrs	r1, r0
 8008790:	f47f aec6 	bne.w	8008520 <_strtod_l+0x88>
 8008794:	2b00      	cmp	r3, #0
 8008796:	f47f aee1 	bne.w	800855c <_strtod_l+0xc4>
 800879a:	2a69      	cmp	r2, #105	; 0x69
 800879c:	d027      	beq.n	80087ee <_strtod_l+0x356>
 800879e:	dc24      	bgt.n	80087ea <_strtod_l+0x352>
 80087a0:	2a49      	cmp	r2, #73	; 0x49
 80087a2:	d024      	beq.n	80087ee <_strtod_l+0x356>
 80087a4:	2a4e      	cmp	r2, #78	; 0x4e
 80087a6:	f47f aed9 	bne.w	800855c <_strtod_l+0xc4>
 80087aa:	499f      	ldr	r1, [pc, #636]	; (8008a28 <_strtod_l+0x590>)
 80087ac:	a817      	add	r0, sp, #92	; 0x5c
 80087ae:	f001 f8b5 	bl	800991c <__match>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	f43f aed2 	beq.w	800855c <_strtod_l+0xc4>
 80087b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b28      	cmp	r3, #40	; 0x28
 80087be:	d12d      	bne.n	800881c <_strtod_l+0x384>
 80087c0:	499a      	ldr	r1, [pc, #616]	; (8008a2c <_strtod_l+0x594>)
 80087c2:	aa1a      	add	r2, sp, #104	; 0x68
 80087c4:	a817      	add	r0, sp, #92	; 0x5c
 80087c6:	f001 f8bd 	bl	8009944 <__hexnan>
 80087ca:	2805      	cmp	r0, #5
 80087cc:	d126      	bne.n	800881c <_strtod_l+0x384>
 80087ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80087d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80087d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80087dc:	e6a0      	b.n	8008520 <_strtod_l+0x88>
 80087de:	210a      	movs	r1, #10
 80087e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80087e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80087e8:	e7b9      	b.n	800875e <_strtod_l+0x2c6>
 80087ea:	2a6e      	cmp	r2, #110	; 0x6e
 80087ec:	e7db      	b.n	80087a6 <_strtod_l+0x30e>
 80087ee:	4990      	ldr	r1, [pc, #576]	; (8008a30 <_strtod_l+0x598>)
 80087f0:	a817      	add	r0, sp, #92	; 0x5c
 80087f2:	f001 f893 	bl	800991c <__match>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f aeb0 	beq.w	800855c <_strtod_l+0xc4>
 80087fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087fe:	498d      	ldr	r1, [pc, #564]	; (8008a34 <_strtod_l+0x59c>)
 8008800:	3b01      	subs	r3, #1
 8008802:	a817      	add	r0, sp, #92	; 0x5c
 8008804:	9317      	str	r3, [sp, #92]	; 0x5c
 8008806:	f001 f889 	bl	800991c <__match>
 800880a:	b910      	cbnz	r0, 8008812 <_strtod_l+0x37a>
 800880c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800880e:	3301      	adds	r3, #1
 8008810:	9317      	str	r3, [sp, #92]	; 0x5c
 8008812:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008a44 <_strtod_l+0x5ac>
 8008816:	f04f 0a00 	mov.w	sl, #0
 800881a:	e681      	b.n	8008520 <_strtod_l+0x88>
 800881c:	4886      	ldr	r0, [pc, #536]	; (8008a38 <_strtod_l+0x5a0>)
 800881e:	f002 f983 	bl	800ab28 <nan>
 8008822:	ec5b ab10 	vmov	sl, fp, d0
 8008826:	e67b      	b.n	8008520 <_strtod_l+0x88>
 8008828:	9b05      	ldr	r3, [sp, #20]
 800882a:	9807      	ldr	r0, [sp, #28]
 800882c:	1af3      	subs	r3, r6, r3
 800882e:	2f00      	cmp	r7, #0
 8008830:	bf08      	it	eq
 8008832:	462f      	moveq	r7, r5
 8008834:	2d10      	cmp	r5, #16
 8008836:	9306      	str	r3, [sp, #24]
 8008838:	46a8      	mov	r8, r5
 800883a:	bfa8      	it	ge
 800883c:	f04f 0810 	movge.w	r8, #16
 8008840:	f7f7 fe70 	bl	8000524 <__aeabi_ui2d>
 8008844:	2d09      	cmp	r5, #9
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	dd13      	ble.n	8008874 <_strtod_l+0x3dc>
 800884c:	4b7b      	ldr	r3, [pc, #492]	; (8008a3c <_strtod_l+0x5a4>)
 800884e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008852:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008856:	f7f7 fedf 	bl	8000618 <__aeabi_dmul>
 800885a:	4682      	mov	sl, r0
 800885c:	4648      	mov	r0, r9
 800885e:	468b      	mov	fp, r1
 8008860:	f7f7 fe60 	bl	8000524 <__aeabi_ui2d>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4650      	mov	r0, sl
 800886a:	4659      	mov	r1, fp
 800886c:	f7f7 fd1e 	bl	80002ac <__adddf3>
 8008870:	4682      	mov	sl, r0
 8008872:	468b      	mov	fp, r1
 8008874:	2d0f      	cmp	r5, #15
 8008876:	dc38      	bgt.n	80088ea <_strtod_l+0x452>
 8008878:	9b06      	ldr	r3, [sp, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f43f ae50 	beq.w	8008520 <_strtod_l+0x88>
 8008880:	dd24      	ble.n	80088cc <_strtod_l+0x434>
 8008882:	2b16      	cmp	r3, #22
 8008884:	dc0b      	bgt.n	800889e <_strtod_l+0x406>
 8008886:	496d      	ldr	r1, [pc, #436]	; (8008a3c <_strtod_l+0x5a4>)
 8008888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800888c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008890:	4652      	mov	r2, sl
 8008892:	465b      	mov	r3, fp
 8008894:	f7f7 fec0 	bl	8000618 <__aeabi_dmul>
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	e640      	b.n	8008520 <_strtod_l+0x88>
 800889e:	9a06      	ldr	r2, [sp, #24]
 80088a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80088a4:	4293      	cmp	r3, r2
 80088a6:	db20      	blt.n	80088ea <_strtod_l+0x452>
 80088a8:	4c64      	ldr	r4, [pc, #400]	; (8008a3c <_strtod_l+0x5a4>)
 80088aa:	f1c5 050f 	rsb	r5, r5, #15
 80088ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088b2:	4652      	mov	r2, sl
 80088b4:	465b      	mov	r3, fp
 80088b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ba:	f7f7 fead 	bl	8000618 <__aeabi_dmul>
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	1b5d      	subs	r5, r3, r5
 80088c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088ca:	e7e3      	b.n	8008894 <_strtod_l+0x3fc>
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	3316      	adds	r3, #22
 80088d0:	db0b      	blt.n	80088ea <_strtod_l+0x452>
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	1b9e      	subs	r6, r3, r6
 80088d6:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <_strtod_l+0x5a4>)
 80088d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80088dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e0:	4650      	mov	r0, sl
 80088e2:	4659      	mov	r1, fp
 80088e4:	f7f7 ffc2 	bl	800086c <__aeabi_ddiv>
 80088e8:	e7d6      	b.n	8008898 <_strtod_l+0x400>
 80088ea:	9b06      	ldr	r3, [sp, #24]
 80088ec:	eba5 0808 	sub.w	r8, r5, r8
 80088f0:	4498      	add	r8, r3
 80088f2:	f1b8 0f00 	cmp.w	r8, #0
 80088f6:	dd74      	ble.n	80089e2 <_strtod_l+0x54a>
 80088f8:	f018 030f 	ands.w	r3, r8, #15
 80088fc:	d00a      	beq.n	8008914 <_strtod_l+0x47c>
 80088fe:	494f      	ldr	r1, [pc, #316]	; (8008a3c <_strtod_l+0x5a4>)
 8008900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008904:	4652      	mov	r2, sl
 8008906:	465b      	mov	r3, fp
 8008908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890c:	f7f7 fe84 	bl	8000618 <__aeabi_dmul>
 8008910:	4682      	mov	sl, r0
 8008912:	468b      	mov	fp, r1
 8008914:	f038 080f 	bics.w	r8, r8, #15
 8008918:	d04f      	beq.n	80089ba <_strtod_l+0x522>
 800891a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800891e:	dd22      	ble.n	8008966 <_strtod_l+0x4ce>
 8008920:	2500      	movs	r5, #0
 8008922:	462e      	mov	r6, r5
 8008924:	9507      	str	r5, [sp, #28]
 8008926:	9505      	str	r5, [sp, #20]
 8008928:	2322      	movs	r3, #34	; 0x22
 800892a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008a44 <_strtod_l+0x5ac>
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	f04f 0a00 	mov.w	sl, #0
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f43f adf2 	beq.w	8008520 <_strtod_l+0x88>
 800893c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800893e:	4620      	mov	r0, r4
 8008940:	f001 f90c 	bl	8009b5c <_Bfree>
 8008944:	9905      	ldr	r1, [sp, #20]
 8008946:	4620      	mov	r0, r4
 8008948:	f001 f908 	bl	8009b5c <_Bfree>
 800894c:	4631      	mov	r1, r6
 800894e:	4620      	mov	r0, r4
 8008950:	f001 f904 	bl	8009b5c <_Bfree>
 8008954:	9907      	ldr	r1, [sp, #28]
 8008956:	4620      	mov	r0, r4
 8008958:	f001 f900 	bl	8009b5c <_Bfree>
 800895c:	4629      	mov	r1, r5
 800895e:	4620      	mov	r0, r4
 8008960:	f001 f8fc 	bl	8009b5c <_Bfree>
 8008964:	e5dc      	b.n	8008520 <_strtod_l+0x88>
 8008966:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <_strtod_l+0x5a8>)
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008970:	4650      	mov	r0, sl
 8008972:	4659      	mov	r1, fp
 8008974:	4699      	mov	r9, r3
 8008976:	f1b8 0f01 	cmp.w	r8, #1
 800897a:	dc21      	bgt.n	80089c0 <_strtod_l+0x528>
 800897c:	b10b      	cbz	r3, 8008982 <_strtod_l+0x4ea>
 800897e:	4682      	mov	sl, r0
 8008980:	468b      	mov	fp, r1
 8008982:	4b2f      	ldr	r3, [pc, #188]	; (8008a40 <_strtod_l+0x5a8>)
 8008984:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008988:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800898c:	4652      	mov	r2, sl
 800898e:	465b      	mov	r3, fp
 8008990:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008994:	f7f7 fe40 	bl	8000618 <__aeabi_dmul>
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <_strtod_l+0x5ac>)
 800899a:	460a      	mov	r2, r1
 800899c:	400b      	ands	r3, r1
 800899e:	492a      	ldr	r1, [pc, #168]	; (8008a48 <_strtod_l+0x5b0>)
 80089a0:	428b      	cmp	r3, r1
 80089a2:	4682      	mov	sl, r0
 80089a4:	d8bc      	bhi.n	8008920 <_strtod_l+0x488>
 80089a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80089aa:	428b      	cmp	r3, r1
 80089ac:	bf86      	itte	hi
 80089ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008a4c <_strtod_l+0x5b4>
 80089b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80089b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80089ba:	2300      	movs	r3, #0
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	e084      	b.n	8008aca <_strtod_l+0x632>
 80089c0:	f018 0f01 	tst.w	r8, #1
 80089c4:	d005      	beq.n	80089d2 <_strtod_l+0x53a>
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fe24 	bl	8000618 <__aeabi_dmul>
 80089d0:	2301      	movs	r3, #1
 80089d2:	9a04      	ldr	r2, [sp, #16]
 80089d4:	3208      	adds	r2, #8
 80089d6:	f109 0901 	add.w	r9, r9, #1
 80089da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089de:	9204      	str	r2, [sp, #16]
 80089e0:	e7c9      	b.n	8008976 <_strtod_l+0x4de>
 80089e2:	d0ea      	beq.n	80089ba <_strtod_l+0x522>
 80089e4:	f1c8 0800 	rsb	r8, r8, #0
 80089e8:	f018 020f 	ands.w	r2, r8, #15
 80089ec:	d00a      	beq.n	8008a04 <_strtod_l+0x56c>
 80089ee:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <_strtod_l+0x5a4>)
 80089f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089f4:	4650      	mov	r0, sl
 80089f6:	4659      	mov	r1, fp
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 ff36 	bl	800086c <__aeabi_ddiv>
 8008a00:	4682      	mov	sl, r0
 8008a02:	468b      	mov	fp, r1
 8008a04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a08:	d0d7      	beq.n	80089ba <_strtod_l+0x522>
 8008a0a:	f1b8 0f1f 	cmp.w	r8, #31
 8008a0e:	dd1f      	ble.n	8008a50 <_strtod_l+0x5b8>
 8008a10:	2500      	movs	r5, #0
 8008a12:	462e      	mov	r6, r5
 8008a14:	9507      	str	r5, [sp, #28]
 8008a16:	9505      	str	r5, [sp, #20]
 8008a18:	2322      	movs	r3, #34	; 0x22
 8008a1a:	f04f 0a00 	mov.w	sl, #0
 8008a1e:	f04f 0b00 	mov.w	fp, #0
 8008a22:	6023      	str	r3, [r4, #0]
 8008a24:	e786      	b.n	8008934 <_strtod_l+0x49c>
 8008a26:	bf00      	nop
 8008a28:	0800b0a1 	.word	0x0800b0a1
 8008a2c:	0800b0b8 	.word	0x0800b0b8
 8008a30:	0800b098 	.word	0x0800b098
 8008a34:	0800b09b 	.word	0x0800b09b
 8008a38:	0800b462 	.word	0x0800b462
 8008a3c:	0800b320 	.word	0x0800b320
 8008a40:	0800b2f8 	.word	0x0800b2f8
 8008a44:	7ff00000 	.word	0x7ff00000
 8008a48:	7ca00000 	.word	0x7ca00000
 8008a4c:	7fefffff 	.word	0x7fefffff
 8008a50:	f018 0310 	ands.w	r3, r8, #16
 8008a54:	bf18      	it	ne
 8008a56:	236a      	movne	r3, #106	; 0x6a
 8008a58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008e08 <_strtod_l+0x970>
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	4650      	mov	r0, sl
 8008a60:	4659      	mov	r1, fp
 8008a62:	2300      	movs	r3, #0
 8008a64:	f018 0f01 	tst.w	r8, #1
 8008a68:	d004      	beq.n	8008a74 <_strtod_l+0x5dc>
 8008a6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008a6e:	f7f7 fdd3 	bl	8000618 <__aeabi_dmul>
 8008a72:	2301      	movs	r3, #1
 8008a74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008a78:	f109 0908 	add.w	r9, r9, #8
 8008a7c:	d1f2      	bne.n	8008a64 <_strtod_l+0x5cc>
 8008a7e:	b10b      	cbz	r3, 8008a84 <_strtod_l+0x5ec>
 8008a80:	4682      	mov	sl, r0
 8008a82:	468b      	mov	fp, r1
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	b1c3      	cbz	r3, 8008aba <_strtod_l+0x622>
 8008a88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	4659      	mov	r1, fp
 8008a94:	dd11      	ble.n	8008aba <_strtod_l+0x622>
 8008a96:	2b1f      	cmp	r3, #31
 8008a98:	f340 8124 	ble.w	8008ce4 <_strtod_l+0x84c>
 8008a9c:	2b34      	cmp	r3, #52	; 0x34
 8008a9e:	bfde      	ittt	le
 8008aa0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008aa4:	f04f 33ff 	movle.w	r3, #4294967295
 8008aa8:	fa03 f202 	lslle.w	r2, r3, r2
 8008aac:	f04f 0a00 	mov.w	sl, #0
 8008ab0:	bfcc      	ite	gt
 8008ab2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008ab6:	ea02 0b01 	andle.w	fp, r2, r1
 8008aba:	2200      	movs	r2, #0
 8008abc:	2300      	movs	r3, #0
 8008abe:	4650      	mov	r0, sl
 8008ac0:	4659      	mov	r1, fp
 8008ac2:	f7f8 f811 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d1a2      	bne.n	8008a10 <_strtod_l+0x578>
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	9908      	ldr	r1, [sp, #32]
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	463a      	mov	r2, r7
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f001 f8a9 	bl	8009c2c <__s2b>
 8008ada:	9007      	str	r0, [sp, #28]
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f43f af1f 	beq.w	8008920 <_strtod_l+0x488>
 8008ae2:	9b05      	ldr	r3, [sp, #20]
 8008ae4:	1b9e      	subs	r6, r3, r6
 8008ae6:	9b06      	ldr	r3, [sp, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bfb4      	ite	lt
 8008aec:	4633      	movlt	r3, r6
 8008aee:	2300      	movge	r3, #0
 8008af0:	930c      	str	r3, [sp, #48]	; 0x30
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	2500      	movs	r5, #0
 8008af6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008afa:	9312      	str	r3, [sp, #72]	; 0x48
 8008afc:	462e      	mov	r6, r5
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	4620      	mov	r0, r4
 8008b02:	6859      	ldr	r1, [r3, #4]
 8008b04:	f000 ffea 	bl	8009adc <_Balloc>
 8008b08:	9005      	str	r0, [sp, #20]
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f43f af0c 	beq.w	8008928 <_strtod_l+0x490>
 8008b10:	9b07      	ldr	r3, [sp, #28]
 8008b12:	691a      	ldr	r2, [r3, #16]
 8008b14:	3202      	adds	r2, #2
 8008b16:	f103 010c 	add.w	r1, r3, #12
 8008b1a:	0092      	lsls	r2, r2, #2
 8008b1c:	300c      	adds	r0, #12
 8008b1e:	f7ff fb10 	bl	8008142 <memcpy>
 8008b22:	ec4b ab10 	vmov	d0, sl, fp
 8008b26:	aa1a      	add	r2, sp, #104	; 0x68
 8008b28:	a919      	add	r1, sp, #100	; 0x64
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f001 fbc4 	bl	800a2b8 <__d2b>
 8008b30:	ec4b ab18 	vmov	d8, sl, fp
 8008b34:	9018      	str	r0, [sp, #96]	; 0x60
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f aef6 	beq.w	8008928 <_strtod_l+0x490>
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f001 f90e 	bl	8009d60 <__i2b>
 8008b44:	4606      	mov	r6, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f43f aeee 	beq.w	8008928 <_strtod_l+0x490>
 8008b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b4e:	9904      	ldr	r1, [sp, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	bfab      	itete	ge
 8008b54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008b56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008b58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008b5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008b5e:	bfac      	ite	ge
 8008b60:	eb03 0902 	addge.w	r9, r3, r2
 8008b64:	1ad7      	sublt	r7, r2, r3
 8008b66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b68:	eba3 0801 	sub.w	r8, r3, r1
 8008b6c:	4490      	add	r8, r2
 8008b6e:	4ba1      	ldr	r3, [pc, #644]	; (8008df4 <_strtod_l+0x95c>)
 8008b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b74:	4598      	cmp	r8, r3
 8008b76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b7a:	f280 80c7 	bge.w	8008d0c <_strtod_l+0x874>
 8008b7e:	eba3 0308 	sub.w	r3, r3, r8
 8008b82:	2b1f      	cmp	r3, #31
 8008b84:	eba2 0203 	sub.w	r2, r2, r3
 8008b88:	f04f 0101 	mov.w	r1, #1
 8008b8c:	f300 80b1 	bgt.w	8008cf2 <_strtod_l+0x85a>
 8008b90:	fa01 f303 	lsl.w	r3, r1, r3
 8008b94:	930d      	str	r3, [sp, #52]	; 0x34
 8008b96:	2300      	movs	r3, #0
 8008b98:	9308      	str	r3, [sp, #32]
 8008b9a:	eb09 0802 	add.w	r8, r9, r2
 8008b9e:	9b04      	ldr	r3, [sp, #16]
 8008ba0:	45c1      	cmp	r9, r8
 8008ba2:	4417      	add	r7, r2
 8008ba4:	441f      	add	r7, r3
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	bfa8      	it	ge
 8008baa:	4643      	movge	r3, r8
 8008bac:	42bb      	cmp	r3, r7
 8008bae:	bfa8      	it	ge
 8008bb0:	463b      	movge	r3, r7
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bfc2      	ittt	gt
 8008bb6:	eba8 0803 	subgt.w	r8, r8, r3
 8008bba:	1aff      	subgt	r7, r7, r3
 8008bbc:	eba9 0903 	subgt.w	r9, r9, r3
 8008bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	dd17      	ble.n	8008bf6 <_strtod_l+0x75e>
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f001 f988 	bl	8009ee0 <__pow5mult>
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	f43f aea8 	beq.w	8008928 <_strtod_l+0x490>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f001 f8d5 	bl	8009d8c <__multiply>
 8008be2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f43f ae9f 	beq.w	8008928 <_strtod_l+0x490>
 8008bea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 ffb5 	bl	8009b5c <_Bfree>
 8008bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf4:	9318      	str	r3, [sp, #96]	; 0x60
 8008bf6:	f1b8 0f00 	cmp.w	r8, #0
 8008bfa:	f300 808c 	bgt.w	8008d16 <_strtod_l+0x87e>
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dd08      	ble.n	8008c16 <_strtod_l+0x77e>
 8008c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c06:	9905      	ldr	r1, [sp, #20]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f001 f969 	bl	8009ee0 <__pow5mult>
 8008c0e:	9005      	str	r0, [sp, #20]
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f43f ae89 	beq.w	8008928 <_strtod_l+0x490>
 8008c16:	2f00      	cmp	r7, #0
 8008c18:	dd08      	ble.n	8008c2c <_strtod_l+0x794>
 8008c1a:	9905      	ldr	r1, [sp, #20]
 8008c1c:	463a      	mov	r2, r7
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f001 f9b8 	bl	8009f94 <__lshift>
 8008c24:	9005      	str	r0, [sp, #20]
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f43f ae7e 	beq.w	8008928 <_strtod_l+0x490>
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	dd08      	ble.n	8008c44 <_strtod_l+0x7ac>
 8008c32:	4631      	mov	r1, r6
 8008c34:	464a      	mov	r2, r9
 8008c36:	4620      	mov	r0, r4
 8008c38:	f001 f9ac 	bl	8009f94 <__lshift>
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f43f ae72 	beq.w	8008928 <_strtod_l+0x490>
 8008c44:	9a05      	ldr	r2, [sp, #20]
 8008c46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f001 fa2f 	bl	800a0ac <__mdiff>
 8008c4e:	4605      	mov	r5, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f43f ae69 	beq.w	8008928 <_strtod_l+0x490>
 8008c56:	68c3      	ldr	r3, [r0, #12]
 8008c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60c3      	str	r3, [r0, #12]
 8008c5e:	4631      	mov	r1, r6
 8008c60:	f001 fa08 	bl	800a074 <__mcmp>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	da60      	bge.n	8008d2a <_strtod_l+0x892>
 8008c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c6a:	ea53 030a 	orrs.w	r3, r3, sl
 8008c6e:	f040 8082 	bne.w	8008d76 <_strtod_l+0x8de>
 8008c72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d17d      	bne.n	8008d76 <_strtod_l+0x8de>
 8008c7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c7e:	0d1b      	lsrs	r3, r3, #20
 8008c80:	051b      	lsls	r3, r3, #20
 8008c82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c86:	d976      	bls.n	8008d76 <_strtod_l+0x8de>
 8008c88:	696b      	ldr	r3, [r5, #20]
 8008c8a:	b913      	cbnz	r3, 8008c92 <_strtod_l+0x7fa>
 8008c8c:	692b      	ldr	r3, [r5, #16]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	dd71      	ble.n	8008d76 <_strtod_l+0x8de>
 8008c92:	4629      	mov	r1, r5
 8008c94:	2201      	movs	r2, #1
 8008c96:	4620      	mov	r0, r4
 8008c98:	f001 f97c 	bl	8009f94 <__lshift>
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	f001 f9e8 	bl	800a074 <__mcmp>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	dd66      	ble.n	8008d76 <_strtod_l+0x8de>
 8008ca8:	9904      	ldr	r1, [sp, #16]
 8008caa:	4a53      	ldr	r2, [pc, #332]	; (8008df8 <_strtod_l+0x960>)
 8008cac:	465b      	mov	r3, fp
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	f000 8081 	beq.w	8008db6 <_strtod_l+0x91e>
 8008cb4:	ea02 010b 	and.w	r1, r2, fp
 8008cb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008cbc:	dc7b      	bgt.n	8008db6 <_strtod_l+0x91e>
 8008cbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008cc2:	f77f aea9 	ble.w	8008a18 <_strtod_l+0x580>
 8008cc6:	4b4d      	ldr	r3, [pc, #308]	; (8008dfc <_strtod_l+0x964>)
 8008cc8:	4650      	mov	r0, sl
 8008cca:	4659      	mov	r1, fp
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f7f7 fca3 	bl	8000618 <__aeabi_dmul>
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4303      	orrs	r3, r0
 8008cd6:	bf08      	it	eq
 8008cd8:	2322      	moveq	r3, #34	; 0x22
 8008cda:	4682      	mov	sl, r0
 8008cdc:	468b      	mov	fp, r1
 8008cde:	bf08      	it	eq
 8008ce0:	6023      	streq	r3, [r4, #0]
 8008ce2:	e62b      	b.n	800893c <_strtod_l+0x4a4>
 8008ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	ea03 0a0a 	and.w	sl, r3, sl
 8008cf0:	e6e3      	b.n	8008aba <_strtod_l+0x622>
 8008cf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008cf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008cfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008cfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008d02:	fa01 f308 	lsl.w	r3, r1, r8
 8008d06:	9308      	str	r3, [sp, #32]
 8008d08:	910d      	str	r1, [sp, #52]	; 0x34
 8008d0a:	e746      	b.n	8008b9a <_strtod_l+0x702>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9308      	str	r3, [sp, #32]
 8008d10:	2301      	movs	r3, #1
 8008d12:	930d      	str	r3, [sp, #52]	; 0x34
 8008d14:	e741      	b.n	8008b9a <_strtod_l+0x702>
 8008d16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d18:	4642      	mov	r2, r8
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f001 f93a 	bl	8009f94 <__lshift>
 8008d20:	9018      	str	r0, [sp, #96]	; 0x60
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f47f af6b 	bne.w	8008bfe <_strtod_l+0x766>
 8008d28:	e5fe      	b.n	8008928 <_strtod_l+0x490>
 8008d2a:	465f      	mov	r7, fp
 8008d2c:	d16e      	bne.n	8008e0c <_strtod_l+0x974>
 8008d2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d34:	b342      	cbz	r2, 8008d88 <_strtod_l+0x8f0>
 8008d36:	4a32      	ldr	r2, [pc, #200]	; (8008e00 <_strtod_l+0x968>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d128      	bne.n	8008d8e <_strtod_l+0x8f6>
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	4651      	mov	r1, sl
 8008d40:	b1eb      	cbz	r3, 8008d7e <_strtod_l+0x8e6>
 8008d42:	4b2d      	ldr	r3, [pc, #180]	; (8008df8 <_strtod_l+0x960>)
 8008d44:	403b      	ands	r3, r7
 8008d46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	d819      	bhi.n	8008d84 <_strtod_l+0x8ec>
 8008d50:	0d1b      	lsrs	r3, r3, #20
 8008d52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	d117      	bne.n	8008d8e <_strtod_l+0x8f6>
 8008d5e:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <_strtod_l+0x96c>)
 8008d60:	429f      	cmp	r7, r3
 8008d62:	d102      	bne.n	8008d6a <_strtod_l+0x8d2>
 8008d64:	3101      	adds	r1, #1
 8008d66:	f43f addf 	beq.w	8008928 <_strtod_l+0x490>
 8008d6a:	4b23      	ldr	r3, [pc, #140]	; (8008df8 <_strtod_l+0x960>)
 8008d6c:	403b      	ands	r3, r7
 8008d6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008d72:	f04f 0a00 	mov.w	sl, #0
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1a4      	bne.n	8008cc6 <_strtod_l+0x82e>
 8008d7c:	e5de      	b.n	800893c <_strtod_l+0x4a4>
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d82:	e7ea      	b.n	8008d5a <_strtod_l+0x8c2>
 8008d84:	4613      	mov	r3, r2
 8008d86:	e7e8      	b.n	8008d5a <_strtod_l+0x8c2>
 8008d88:	ea53 030a 	orrs.w	r3, r3, sl
 8008d8c:	d08c      	beq.n	8008ca8 <_strtod_l+0x810>
 8008d8e:	9b08      	ldr	r3, [sp, #32]
 8008d90:	b1db      	cbz	r3, 8008dca <_strtod_l+0x932>
 8008d92:	423b      	tst	r3, r7
 8008d94:	d0ef      	beq.n	8008d76 <_strtod_l+0x8de>
 8008d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d98:	9a04      	ldr	r2, [sp, #16]
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	b1c3      	cbz	r3, 8008dd2 <_strtod_l+0x93a>
 8008da0:	f7ff fb5c 	bl	800845c <sulp>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	ec51 0b18 	vmov	r0, r1, d8
 8008dac:	f7f7 fa7e 	bl	80002ac <__adddf3>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	e7df      	b.n	8008d76 <_strtod_l+0x8de>
 8008db6:	4013      	ands	r3, r2
 8008db8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008dbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008dc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008dc4:	f04f 3aff 	mov.w	sl, #4294967295
 8008dc8:	e7d5      	b.n	8008d76 <_strtod_l+0x8de>
 8008dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dcc:	ea13 0f0a 	tst.w	r3, sl
 8008dd0:	e7e0      	b.n	8008d94 <_strtod_l+0x8fc>
 8008dd2:	f7ff fb43 	bl	800845c <sulp>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	ec51 0b18 	vmov	r0, r1, d8
 8008dde:	f7f7 fa63 	bl	80002a8 <__aeabi_dsub>
 8008de2:	2200      	movs	r2, #0
 8008de4:	2300      	movs	r3, #0
 8008de6:	4682      	mov	sl, r0
 8008de8:	468b      	mov	fp, r1
 8008dea:	f7f7 fe7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d0c1      	beq.n	8008d76 <_strtod_l+0x8de>
 8008df2:	e611      	b.n	8008a18 <_strtod_l+0x580>
 8008df4:	fffffc02 	.word	0xfffffc02
 8008df8:	7ff00000 	.word	0x7ff00000
 8008dfc:	39500000 	.word	0x39500000
 8008e00:	000fffff 	.word	0x000fffff
 8008e04:	7fefffff 	.word	0x7fefffff
 8008e08:	0800b0d0 	.word	0x0800b0d0
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f001 faae 	bl	800a370 <__ratio>
 8008e14:	ec59 8b10 	vmov	r8, r9, d0
 8008e18:	ee10 0a10 	vmov	r0, s0
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e22:	4649      	mov	r1, r9
 8008e24:	f7f7 fe74 	bl	8000b10 <__aeabi_dcmple>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d07a      	beq.n	8008f22 <_strtod_l+0xa8a>
 8008e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d04a      	beq.n	8008ec8 <_strtod_l+0xa30>
 8008e32:	4b95      	ldr	r3, [pc, #596]	; (8009088 <_strtod_l+0xbf0>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009088 <_strtod_l+0xbf0>
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	4b92      	ldr	r3, [pc, #584]	; (800908c <_strtod_l+0xbf4>)
 8008e44:	403b      	ands	r3, r7
 8008e46:	930d      	str	r3, [sp, #52]	; 0x34
 8008e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e4a:	4b91      	ldr	r3, [pc, #580]	; (8009090 <_strtod_l+0xbf8>)
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	f040 80b0 	bne.w	8008fb2 <_strtod_l+0xb1a>
 8008e52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008e5a:	ec4b ab10 	vmov	d0, sl, fp
 8008e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e62:	f001 f9ad 	bl	800a1c0 <__ulp>
 8008e66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e6a:	ec53 2b10 	vmov	r2, r3, d0
 8008e6e:	f7f7 fbd3 	bl	8000618 <__aeabi_dmul>
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	f7f7 fa19 	bl	80002ac <__adddf3>
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4983      	ldr	r1, [pc, #524]	; (800908c <_strtod_l+0xbf4>)
 8008e7e:	4a85      	ldr	r2, [pc, #532]	; (8009094 <_strtod_l+0xbfc>)
 8008e80:	4019      	ands	r1, r3
 8008e82:	4291      	cmp	r1, r2
 8008e84:	4682      	mov	sl, r0
 8008e86:	d960      	bls.n	8008f4a <_strtod_l+0xab2>
 8008e88:	ee18 3a90 	vmov	r3, s17
 8008e8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d104      	bne.n	8008e9e <_strtod_l+0xa06>
 8008e94:	ee18 3a10 	vmov	r3, s16
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f43f ad45 	beq.w	8008928 <_strtod_l+0x490>
 8008e9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80090a0 <_strtod_l+0xc08>
 8008ea2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fe57 	bl	8009b5c <_Bfree>
 8008eae:	9905      	ldr	r1, [sp, #20]
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fe53 	bl	8009b5c <_Bfree>
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fe4f 	bl	8009b5c <_Bfree>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fe4b 	bl	8009b5c <_Bfree>
 8008ec6:	e61a      	b.n	8008afe <_strtod_l+0x666>
 8008ec8:	f1ba 0f00 	cmp.w	sl, #0
 8008ecc:	d11b      	bne.n	8008f06 <_strtod_l+0xa6e>
 8008ece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ed2:	b9f3      	cbnz	r3, 8008f12 <_strtod_l+0xa7a>
 8008ed4:	4b6c      	ldr	r3, [pc, #432]	; (8009088 <_strtod_l+0xbf0>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fe0e 	bl	8000afc <__aeabi_dcmplt>
 8008ee0:	b9d0      	cbnz	r0, 8008f18 <_strtod_l+0xa80>
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	4b6c      	ldr	r3, [pc, #432]	; (8009098 <_strtod_l+0xc00>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7f7 fb95 	bl	8000618 <__aeabi_dmul>
 8008eee:	4680      	mov	r8, r0
 8008ef0:	4689      	mov	r9, r1
 8008ef2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ef6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008efa:	9315      	str	r3, [sp, #84]	; 0x54
 8008efc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008f00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f04:	e79d      	b.n	8008e42 <_strtod_l+0x9aa>
 8008f06:	f1ba 0f01 	cmp.w	sl, #1
 8008f0a:	d102      	bne.n	8008f12 <_strtod_l+0xa7a>
 8008f0c:	2f00      	cmp	r7, #0
 8008f0e:	f43f ad83 	beq.w	8008a18 <_strtod_l+0x580>
 8008f12:	4b62      	ldr	r3, [pc, #392]	; (800909c <_strtod_l+0xc04>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	e78e      	b.n	8008e36 <_strtod_l+0x99e>
 8008f18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009098 <_strtod_l+0xc00>
 8008f1c:	f04f 0800 	mov.w	r8, #0
 8008f20:	e7e7      	b.n	8008ef2 <_strtod_l+0xa5a>
 8008f22:	4b5d      	ldr	r3, [pc, #372]	; (8009098 <_strtod_l+0xc00>)
 8008f24:	4640      	mov	r0, r8
 8008f26:	4649      	mov	r1, r9
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f7f7 fb75 	bl	8000618 <__aeabi_dmul>
 8008f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f30:	4680      	mov	r8, r0
 8008f32:	4689      	mov	r9, r1
 8008f34:	b933      	cbnz	r3, 8008f44 <_strtod_l+0xaac>
 8008f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008f42:	e7dd      	b.n	8008f00 <_strtod_l+0xa68>
 8008f44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008f48:	e7f9      	b.n	8008f3e <_strtod_l+0xaa6>
 8008f4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008f4e:	9b04      	ldr	r3, [sp, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1a8      	bne.n	8008ea6 <_strtod_l+0xa0e>
 8008f54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f5a:	0d1b      	lsrs	r3, r3, #20
 8008f5c:	051b      	lsls	r3, r3, #20
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d1a1      	bne.n	8008ea6 <_strtod_l+0xa0e>
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 fe79 	bl	8000c5c <__aeabi_d2lz>
 8008f6a:	f7f7 fb27 	bl	80005bc <__aeabi_l2d>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 f997 	bl	80002a8 <__aeabi_dsub>
 8008f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f80:	ea43 030a 	orr.w	r3, r3, sl
 8008f84:	4313      	orrs	r3, r2
 8008f86:	4680      	mov	r8, r0
 8008f88:	4689      	mov	r9, r1
 8008f8a:	d055      	beq.n	8009038 <_strtod_l+0xba0>
 8008f8c:	a336      	add	r3, pc, #216	; (adr r3, 8009068 <_strtod_l+0xbd0>)
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f7f7 fdb3 	bl	8000afc <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f47f acd0 	bne.w	800893c <_strtod_l+0x4a4>
 8008f9c:	a334      	add	r3, pc, #208	; (adr r3, 8009070 <_strtod_l+0xbd8>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f43f af7b 	beq.w	8008ea6 <_strtod_l+0xa0e>
 8008fb0:	e4c4      	b.n	800893c <_strtod_l+0x4a4>
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	b333      	cbz	r3, 8009004 <_strtod_l+0xb6c>
 8008fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008fbc:	d822      	bhi.n	8009004 <_strtod_l+0xb6c>
 8008fbe:	a32e      	add	r3, pc, #184	; (adr r3, 8009078 <_strtod_l+0xbe0>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 fda2 	bl	8000b10 <__aeabi_dcmple>
 8008fcc:	b1a0      	cbz	r0, 8008ff8 <_strtod_l+0xb60>
 8008fce:	4649      	mov	r1, r9
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	f7f7 fdbb 	bl	8000b4c <__aeabi_d2uiz>
 8008fd6:	2801      	cmp	r0, #1
 8008fd8:	bf38      	it	cc
 8008fda:	2001      	movcc	r0, #1
 8008fdc:	f7f7 faa2 	bl	8000524 <__aeabi_ui2d>
 8008fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	4689      	mov	r9, r1
 8008fe6:	bb23      	cbnz	r3, 8009032 <_strtod_l+0xb9a>
 8008fe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fec:	9010      	str	r0, [sp, #64]	; 0x40
 8008fee:	9311      	str	r3, [sp, #68]	; 0x44
 8008ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ffc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009000:	1a9b      	subs	r3, r3, r2
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009008:	eeb0 0a48 	vmov.f32	s0, s16
 800900c:	eef0 0a68 	vmov.f32	s1, s17
 8009010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009014:	f001 f8d4 	bl	800a1c0 <__ulp>
 8009018:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800901c:	ec53 2b10 	vmov	r2, r3, d0
 8009020:	f7f7 fafa 	bl	8000618 <__aeabi_dmul>
 8009024:	ec53 2b18 	vmov	r2, r3, d8
 8009028:	f7f7 f940 	bl	80002ac <__adddf3>
 800902c:	4682      	mov	sl, r0
 800902e:	468b      	mov	fp, r1
 8009030:	e78d      	b.n	8008f4e <_strtod_l+0xab6>
 8009032:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009036:	e7db      	b.n	8008ff0 <_strtod_l+0xb58>
 8009038:	a311      	add	r3, pc, #68	; (adr r3, 8009080 <_strtod_l+0xbe8>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 fd5d 	bl	8000afc <__aeabi_dcmplt>
 8009042:	e7b2      	b.n	8008faa <_strtod_l+0xb12>
 8009044:	2300      	movs	r3, #0
 8009046:	930a      	str	r3, [sp, #40]	; 0x28
 8009048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800904a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	f7ff ba6b 	b.w	8008528 <_strtod_l+0x90>
 8009052:	2a65      	cmp	r2, #101	; 0x65
 8009054:	f43f ab5f 	beq.w	8008716 <_strtod_l+0x27e>
 8009058:	2a45      	cmp	r2, #69	; 0x45
 800905a:	f43f ab5c 	beq.w	8008716 <_strtod_l+0x27e>
 800905e:	2301      	movs	r3, #1
 8009060:	f7ff bb94 	b.w	800878c <_strtod_l+0x2f4>
 8009064:	f3af 8000 	nop.w
 8009068:	94a03595 	.word	0x94a03595
 800906c:	3fdfffff 	.word	0x3fdfffff
 8009070:	35afe535 	.word	0x35afe535
 8009074:	3fe00000 	.word	0x3fe00000
 8009078:	ffc00000 	.word	0xffc00000
 800907c:	41dfffff 	.word	0x41dfffff
 8009080:	94a03595 	.word	0x94a03595
 8009084:	3fcfffff 	.word	0x3fcfffff
 8009088:	3ff00000 	.word	0x3ff00000
 800908c:	7ff00000 	.word	0x7ff00000
 8009090:	7fe00000 	.word	0x7fe00000
 8009094:	7c9fffff 	.word	0x7c9fffff
 8009098:	3fe00000 	.word	0x3fe00000
 800909c:	bff00000 	.word	0xbff00000
 80090a0:	7fefffff 	.word	0x7fefffff

080090a4 <strtod>:
 80090a4:	460a      	mov	r2, r1
 80090a6:	4601      	mov	r1, r0
 80090a8:	4802      	ldr	r0, [pc, #8]	; (80090b4 <strtod+0x10>)
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <strtod+0x14>)
 80090ac:	6800      	ldr	r0, [r0, #0]
 80090ae:	f7ff b9f3 	b.w	8008498 <_strtod_l>
 80090b2:	bf00      	nop
 80090b4:	20000010 	.word	0x20000010
 80090b8:	20000078 	.word	0x20000078

080090bc <_strtol_l.constprop.0>:
 80090bc:	2b01      	cmp	r3, #1
 80090be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c2:	d001      	beq.n	80090c8 <_strtol_l.constprop.0+0xc>
 80090c4:	2b24      	cmp	r3, #36	; 0x24
 80090c6:	d906      	bls.n	80090d6 <_strtol_l.constprop.0+0x1a>
 80090c8:	f7fe ff18 	bl	8007efc <__errno>
 80090cc:	2316      	movs	r3, #22
 80090ce:	6003      	str	r3, [r0, #0]
 80090d0:	2000      	movs	r0, #0
 80090d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80091bc <_strtol_l.constprop.0+0x100>
 80090da:	460d      	mov	r5, r1
 80090dc:	462e      	mov	r6, r5
 80090de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80090e6:	f017 0708 	ands.w	r7, r7, #8
 80090ea:	d1f7      	bne.n	80090dc <_strtol_l.constprop.0+0x20>
 80090ec:	2c2d      	cmp	r4, #45	; 0x2d
 80090ee:	d132      	bne.n	8009156 <_strtol_l.constprop.0+0x9a>
 80090f0:	782c      	ldrb	r4, [r5, #0]
 80090f2:	2701      	movs	r7, #1
 80090f4:	1cb5      	adds	r5, r6, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d05b      	beq.n	80091b2 <_strtol_l.constprop.0+0xf6>
 80090fa:	2b10      	cmp	r3, #16
 80090fc:	d109      	bne.n	8009112 <_strtol_l.constprop.0+0x56>
 80090fe:	2c30      	cmp	r4, #48	; 0x30
 8009100:	d107      	bne.n	8009112 <_strtol_l.constprop.0+0x56>
 8009102:	782c      	ldrb	r4, [r5, #0]
 8009104:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009108:	2c58      	cmp	r4, #88	; 0x58
 800910a:	d14d      	bne.n	80091a8 <_strtol_l.constprop.0+0xec>
 800910c:	786c      	ldrb	r4, [r5, #1]
 800910e:	2310      	movs	r3, #16
 8009110:	3502      	adds	r5, #2
 8009112:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009116:	f108 38ff 	add.w	r8, r8, #4294967295
 800911a:	f04f 0c00 	mov.w	ip, #0
 800911e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009122:	4666      	mov	r6, ip
 8009124:	fb03 8a19 	mls	sl, r3, r9, r8
 8009128:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800912c:	f1be 0f09 	cmp.w	lr, #9
 8009130:	d816      	bhi.n	8009160 <_strtol_l.constprop.0+0xa4>
 8009132:	4674      	mov	r4, lr
 8009134:	42a3      	cmp	r3, r4
 8009136:	dd24      	ble.n	8009182 <_strtol_l.constprop.0+0xc6>
 8009138:	f1bc 0f00 	cmp.w	ip, #0
 800913c:	db1e      	blt.n	800917c <_strtol_l.constprop.0+0xc0>
 800913e:	45b1      	cmp	r9, r6
 8009140:	d31c      	bcc.n	800917c <_strtol_l.constprop.0+0xc0>
 8009142:	d101      	bne.n	8009148 <_strtol_l.constprop.0+0x8c>
 8009144:	45a2      	cmp	sl, r4
 8009146:	db19      	blt.n	800917c <_strtol_l.constprop.0+0xc0>
 8009148:	fb06 4603 	mla	r6, r6, r3, r4
 800914c:	f04f 0c01 	mov.w	ip, #1
 8009150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009154:	e7e8      	b.n	8009128 <_strtol_l.constprop.0+0x6c>
 8009156:	2c2b      	cmp	r4, #43	; 0x2b
 8009158:	bf04      	itt	eq
 800915a:	782c      	ldrbeq	r4, [r5, #0]
 800915c:	1cb5      	addeq	r5, r6, #2
 800915e:	e7ca      	b.n	80090f6 <_strtol_l.constprop.0+0x3a>
 8009160:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009164:	f1be 0f19 	cmp.w	lr, #25
 8009168:	d801      	bhi.n	800916e <_strtol_l.constprop.0+0xb2>
 800916a:	3c37      	subs	r4, #55	; 0x37
 800916c:	e7e2      	b.n	8009134 <_strtol_l.constprop.0+0x78>
 800916e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009172:	f1be 0f19 	cmp.w	lr, #25
 8009176:	d804      	bhi.n	8009182 <_strtol_l.constprop.0+0xc6>
 8009178:	3c57      	subs	r4, #87	; 0x57
 800917a:	e7db      	b.n	8009134 <_strtol_l.constprop.0+0x78>
 800917c:	f04f 3cff 	mov.w	ip, #4294967295
 8009180:	e7e6      	b.n	8009150 <_strtol_l.constprop.0+0x94>
 8009182:	f1bc 0f00 	cmp.w	ip, #0
 8009186:	da05      	bge.n	8009194 <_strtol_l.constprop.0+0xd8>
 8009188:	2322      	movs	r3, #34	; 0x22
 800918a:	6003      	str	r3, [r0, #0]
 800918c:	4646      	mov	r6, r8
 800918e:	b942      	cbnz	r2, 80091a2 <_strtol_l.constprop.0+0xe6>
 8009190:	4630      	mov	r0, r6
 8009192:	e79e      	b.n	80090d2 <_strtol_l.constprop.0+0x16>
 8009194:	b107      	cbz	r7, 8009198 <_strtol_l.constprop.0+0xdc>
 8009196:	4276      	negs	r6, r6
 8009198:	2a00      	cmp	r2, #0
 800919a:	d0f9      	beq.n	8009190 <_strtol_l.constprop.0+0xd4>
 800919c:	f1bc 0f00 	cmp.w	ip, #0
 80091a0:	d000      	beq.n	80091a4 <_strtol_l.constprop.0+0xe8>
 80091a2:	1e69      	subs	r1, r5, #1
 80091a4:	6011      	str	r1, [r2, #0]
 80091a6:	e7f3      	b.n	8009190 <_strtol_l.constprop.0+0xd4>
 80091a8:	2430      	movs	r4, #48	; 0x30
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1b1      	bne.n	8009112 <_strtol_l.constprop.0+0x56>
 80091ae:	2308      	movs	r3, #8
 80091b0:	e7af      	b.n	8009112 <_strtol_l.constprop.0+0x56>
 80091b2:	2c30      	cmp	r4, #48	; 0x30
 80091b4:	d0a5      	beq.n	8009102 <_strtol_l.constprop.0+0x46>
 80091b6:	230a      	movs	r3, #10
 80091b8:	e7ab      	b.n	8009112 <_strtol_l.constprop.0+0x56>
 80091ba:	bf00      	nop
 80091bc:	0800b0f9 	.word	0x0800b0f9

080091c0 <strtol>:
 80091c0:	4613      	mov	r3, r2
 80091c2:	460a      	mov	r2, r1
 80091c4:	4601      	mov	r1, r0
 80091c6:	4802      	ldr	r0, [pc, #8]	; (80091d0 <strtol+0x10>)
 80091c8:	6800      	ldr	r0, [r0, #0]
 80091ca:	f7ff bf77 	b.w	80090bc <_strtol_l.constprop.0>
 80091ce:	bf00      	nop
 80091d0:	20000010 	.word	0x20000010

080091d4 <_write_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d07      	ldr	r5, [pc, #28]	; (80091f4 <_write_r+0x20>)
 80091d8:	4604      	mov	r4, r0
 80091da:	4608      	mov	r0, r1
 80091dc:	4611      	mov	r1, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f7f8 fe23 	bl	8001e2e <_write>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_write_r+0x1e>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_write_r+0x1e>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20003138 	.word	0x20003138

080091f8 <_close_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d06      	ldr	r5, [pc, #24]	; (8009214 <_close_r+0x1c>)
 80091fc:	2300      	movs	r3, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	602b      	str	r3, [r5, #0]
 8009204:	f7f8 fe2f 	bl	8001e66 <_close>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_close_r+0x1a>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_close_r+0x1a>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20003138 	.word	0x20003138

08009218 <__sflush_r>:
 8009218:	898a      	ldrh	r2, [r1, #12]
 800921a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921e:	4605      	mov	r5, r0
 8009220:	0710      	lsls	r0, r2, #28
 8009222:	460c      	mov	r4, r1
 8009224:	d458      	bmi.n	80092d8 <__sflush_r+0xc0>
 8009226:	684b      	ldr	r3, [r1, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	dc05      	bgt.n	8009238 <__sflush_r+0x20>
 800922c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	dc02      	bgt.n	8009238 <__sflush_r+0x20>
 8009232:	2000      	movs	r0, #0
 8009234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800923a:	2e00      	cmp	r6, #0
 800923c:	d0f9      	beq.n	8009232 <__sflush_r+0x1a>
 800923e:	2300      	movs	r3, #0
 8009240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009244:	682f      	ldr	r7, [r5, #0]
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	d032      	beq.n	80092b0 <__sflush_r+0x98>
 800924a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	075a      	lsls	r2, r3, #29
 8009250:	d505      	bpl.n	800925e <__sflush_r+0x46>
 8009252:	6863      	ldr	r3, [r4, #4]
 8009254:	1ac0      	subs	r0, r0, r3
 8009256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009258:	b10b      	cbz	r3, 800925e <__sflush_r+0x46>
 800925a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800925c:	1ac0      	subs	r0, r0, r3
 800925e:	2300      	movs	r3, #0
 8009260:	4602      	mov	r2, r0
 8009262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009264:	6a21      	ldr	r1, [r4, #32]
 8009266:	4628      	mov	r0, r5
 8009268:	47b0      	blx	r6
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	d106      	bne.n	800927e <__sflush_r+0x66>
 8009270:	6829      	ldr	r1, [r5, #0]
 8009272:	291d      	cmp	r1, #29
 8009274:	d82c      	bhi.n	80092d0 <__sflush_r+0xb8>
 8009276:	4a2a      	ldr	r2, [pc, #168]	; (8009320 <__sflush_r+0x108>)
 8009278:	40ca      	lsrs	r2, r1
 800927a:	07d6      	lsls	r6, r2, #31
 800927c:	d528      	bpl.n	80092d0 <__sflush_r+0xb8>
 800927e:	2200      	movs	r2, #0
 8009280:	6062      	str	r2, [r4, #4]
 8009282:	04d9      	lsls	r1, r3, #19
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	d504      	bpl.n	8009294 <__sflush_r+0x7c>
 800928a:	1c42      	adds	r2, r0, #1
 800928c:	d101      	bne.n	8009292 <__sflush_r+0x7a>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b903      	cbnz	r3, 8009294 <__sflush_r+0x7c>
 8009292:	6560      	str	r0, [r4, #84]	; 0x54
 8009294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009296:	602f      	str	r7, [r5, #0]
 8009298:	2900      	cmp	r1, #0
 800929a:	d0ca      	beq.n	8009232 <__sflush_r+0x1a>
 800929c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a0:	4299      	cmp	r1, r3
 80092a2:	d002      	beq.n	80092aa <__sflush_r+0x92>
 80092a4:	4628      	mov	r0, r5
 80092a6:	f001 f8f1 	bl	800a48c <_free_r>
 80092aa:	2000      	movs	r0, #0
 80092ac:	6360      	str	r0, [r4, #52]	; 0x34
 80092ae:	e7c1      	b.n	8009234 <__sflush_r+0x1c>
 80092b0:	6a21      	ldr	r1, [r4, #32]
 80092b2:	2301      	movs	r3, #1
 80092b4:	4628      	mov	r0, r5
 80092b6:	47b0      	blx	r6
 80092b8:	1c41      	adds	r1, r0, #1
 80092ba:	d1c7      	bne.n	800924c <__sflush_r+0x34>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0c4      	beq.n	800924c <__sflush_r+0x34>
 80092c2:	2b1d      	cmp	r3, #29
 80092c4:	d001      	beq.n	80092ca <__sflush_r+0xb2>
 80092c6:	2b16      	cmp	r3, #22
 80092c8:	d101      	bne.n	80092ce <__sflush_r+0xb6>
 80092ca:	602f      	str	r7, [r5, #0]
 80092cc:	e7b1      	b.n	8009232 <__sflush_r+0x1a>
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	e7ad      	b.n	8009234 <__sflush_r+0x1c>
 80092d8:	690f      	ldr	r7, [r1, #16]
 80092da:	2f00      	cmp	r7, #0
 80092dc:	d0a9      	beq.n	8009232 <__sflush_r+0x1a>
 80092de:	0793      	lsls	r3, r2, #30
 80092e0:	680e      	ldr	r6, [r1, #0]
 80092e2:	bf08      	it	eq
 80092e4:	694b      	ldreq	r3, [r1, #20]
 80092e6:	600f      	str	r7, [r1, #0]
 80092e8:	bf18      	it	ne
 80092ea:	2300      	movne	r3, #0
 80092ec:	eba6 0807 	sub.w	r8, r6, r7
 80092f0:	608b      	str	r3, [r1, #8]
 80092f2:	f1b8 0f00 	cmp.w	r8, #0
 80092f6:	dd9c      	ble.n	8009232 <__sflush_r+0x1a>
 80092f8:	6a21      	ldr	r1, [r4, #32]
 80092fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092fc:	4643      	mov	r3, r8
 80092fe:	463a      	mov	r2, r7
 8009300:	4628      	mov	r0, r5
 8009302:	47b0      	blx	r6
 8009304:	2800      	cmp	r0, #0
 8009306:	dc06      	bgt.n	8009316 <__sflush_r+0xfe>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	e78e      	b.n	8009234 <__sflush_r+0x1c>
 8009316:	4407      	add	r7, r0
 8009318:	eba8 0800 	sub.w	r8, r8, r0
 800931c:	e7e9      	b.n	80092f2 <__sflush_r+0xda>
 800931e:	bf00      	nop
 8009320:	20400001 	.word	0x20400001

08009324 <_fflush_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b913      	cbnz	r3, 8009334 <_fflush_r+0x10>
 800932e:	2500      	movs	r5, #0
 8009330:	4628      	mov	r0, r5
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	b118      	cbz	r0, 800933e <_fflush_r+0x1a>
 8009336:	6983      	ldr	r3, [r0, #24]
 8009338:	b90b      	cbnz	r3, 800933e <_fflush_r+0x1a>
 800933a:	f7fe fe3d 	bl	8007fb8 <__sinit>
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <_fflush_r+0x6c>)
 8009340:	429c      	cmp	r4, r3
 8009342:	d11b      	bne.n	800937c <_fflush_r+0x58>
 8009344:	686c      	ldr	r4, [r5, #4]
 8009346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0ef      	beq.n	800932e <_fflush_r+0xa>
 800934e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009350:	07d0      	lsls	r0, r2, #31
 8009352:	d404      	bmi.n	800935e <_fflush_r+0x3a>
 8009354:	0599      	lsls	r1, r3, #22
 8009356:	d402      	bmi.n	800935e <_fflush_r+0x3a>
 8009358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935a:	f7fe fef0 	bl	800813e <__retarget_lock_acquire_recursive>
 800935e:	4628      	mov	r0, r5
 8009360:	4621      	mov	r1, r4
 8009362:	f7ff ff59 	bl	8009218 <__sflush_r>
 8009366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009368:	07da      	lsls	r2, r3, #31
 800936a:	4605      	mov	r5, r0
 800936c:	d4e0      	bmi.n	8009330 <_fflush_r+0xc>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	059b      	lsls	r3, r3, #22
 8009372:	d4dd      	bmi.n	8009330 <_fflush_r+0xc>
 8009374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009376:	f7fe fee3 	bl	8008140 <__retarget_lock_release_recursive>
 800937a:	e7d9      	b.n	8009330 <_fflush_r+0xc>
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <_fflush_r+0x70>)
 800937e:	429c      	cmp	r4, r3
 8009380:	d101      	bne.n	8009386 <_fflush_r+0x62>
 8009382:	68ac      	ldr	r4, [r5, #8]
 8009384:	e7df      	b.n	8009346 <_fflush_r+0x22>
 8009386:	4b04      	ldr	r3, [pc, #16]	; (8009398 <_fflush_r+0x74>)
 8009388:	429c      	cmp	r4, r3
 800938a:	bf08      	it	eq
 800938c:	68ec      	ldreq	r4, [r5, #12]
 800938e:	e7da      	b.n	8009346 <_fflush_r+0x22>
 8009390:	0800b054 	.word	0x0800b054
 8009394:	0800b074 	.word	0x0800b074
 8009398:	0800b034 	.word	0x0800b034

0800939c <rshift>:
 800939c:	6903      	ldr	r3, [r0, #16]
 800939e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093aa:	f100 0414 	add.w	r4, r0, #20
 80093ae:	dd45      	ble.n	800943c <rshift+0xa0>
 80093b0:	f011 011f 	ands.w	r1, r1, #31
 80093b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093bc:	d10c      	bne.n	80093d8 <rshift+0x3c>
 80093be:	f100 0710 	add.w	r7, r0, #16
 80093c2:	4629      	mov	r1, r5
 80093c4:	42b1      	cmp	r1, r6
 80093c6:	d334      	bcc.n	8009432 <rshift+0x96>
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	1eea      	subs	r2, r5, #3
 80093ce:	4296      	cmp	r6, r2
 80093d0:	bf38      	it	cc
 80093d2:	2300      	movcc	r3, #0
 80093d4:	4423      	add	r3, r4
 80093d6:	e015      	b.n	8009404 <rshift+0x68>
 80093d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093dc:	f1c1 0820 	rsb	r8, r1, #32
 80093e0:	40cf      	lsrs	r7, r1
 80093e2:	f105 0e04 	add.w	lr, r5, #4
 80093e6:	46a1      	mov	r9, r4
 80093e8:	4576      	cmp	r6, lr
 80093ea:	46f4      	mov	ip, lr
 80093ec:	d815      	bhi.n	800941a <rshift+0x7e>
 80093ee:	1a9a      	subs	r2, r3, r2
 80093f0:	0092      	lsls	r2, r2, #2
 80093f2:	3a04      	subs	r2, #4
 80093f4:	3501      	adds	r5, #1
 80093f6:	42ae      	cmp	r6, r5
 80093f8:	bf38      	it	cc
 80093fa:	2200      	movcc	r2, #0
 80093fc:	18a3      	adds	r3, r4, r2
 80093fe:	50a7      	str	r7, [r4, r2]
 8009400:	b107      	cbz	r7, 8009404 <rshift+0x68>
 8009402:	3304      	adds	r3, #4
 8009404:	1b1a      	subs	r2, r3, r4
 8009406:	42a3      	cmp	r3, r4
 8009408:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800940c:	bf08      	it	eq
 800940e:	2300      	moveq	r3, #0
 8009410:	6102      	str	r2, [r0, #16]
 8009412:	bf08      	it	eq
 8009414:	6143      	streq	r3, [r0, #20]
 8009416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800941a:	f8dc c000 	ldr.w	ip, [ip]
 800941e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009422:	ea4c 0707 	orr.w	r7, ip, r7
 8009426:	f849 7b04 	str.w	r7, [r9], #4
 800942a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800942e:	40cf      	lsrs	r7, r1
 8009430:	e7da      	b.n	80093e8 <rshift+0x4c>
 8009432:	f851 cb04 	ldr.w	ip, [r1], #4
 8009436:	f847 cf04 	str.w	ip, [r7, #4]!
 800943a:	e7c3      	b.n	80093c4 <rshift+0x28>
 800943c:	4623      	mov	r3, r4
 800943e:	e7e1      	b.n	8009404 <rshift+0x68>

08009440 <__hexdig_fun>:
 8009440:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009444:	2b09      	cmp	r3, #9
 8009446:	d802      	bhi.n	800944e <__hexdig_fun+0xe>
 8009448:	3820      	subs	r0, #32
 800944a:	b2c0      	uxtb	r0, r0
 800944c:	4770      	bx	lr
 800944e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009452:	2b05      	cmp	r3, #5
 8009454:	d801      	bhi.n	800945a <__hexdig_fun+0x1a>
 8009456:	3847      	subs	r0, #71	; 0x47
 8009458:	e7f7      	b.n	800944a <__hexdig_fun+0xa>
 800945a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800945e:	2b05      	cmp	r3, #5
 8009460:	d801      	bhi.n	8009466 <__hexdig_fun+0x26>
 8009462:	3827      	subs	r0, #39	; 0x27
 8009464:	e7f1      	b.n	800944a <__hexdig_fun+0xa>
 8009466:	2000      	movs	r0, #0
 8009468:	4770      	bx	lr
	...

0800946c <__gethex>:
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009470:	ed2d 8b02 	vpush	{d8}
 8009474:	b089      	sub	sp, #36	; 0x24
 8009476:	ee08 0a10 	vmov	s16, r0
 800947a:	9304      	str	r3, [sp, #16]
 800947c:	4bb4      	ldr	r3, [pc, #720]	; (8009750 <__gethex+0x2e4>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	4618      	mov	r0, r3
 8009484:	468b      	mov	fp, r1
 8009486:	4690      	mov	r8, r2
 8009488:	f7f6 feac 	bl	80001e4 <strlen>
 800948c:	9b01      	ldr	r3, [sp, #4]
 800948e:	f8db 2000 	ldr.w	r2, [fp]
 8009492:	4403      	add	r3, r0
 8009494:	4682      	mov	sl, r0
 8009496:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800949a:	9305      	str	r3, [sp, #20]
 800949c:	1c93      	adds	r3, r2, #2
 800949e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094a6:	32fe      	adds	r2, #254	; 0xfe
 80094a8:	18d1      	adds	r1, r2, r3
 80094aa:	461f      	mov	r7, r3
 80094ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094b0:	9100      	str	r1, [sp, #0]
 80094b2:	2830      	cmp	r0, #48	; 0x30
 80094b4:	d0f8      	beq.n	80094a8 <__gethex+0x3c>
 80094b6:	f7ff ffc3 	bl	8009440 <__hexdig_fun>
 80094ba:	4604      	mov	r4, r0
 80094bc:	2800      	cmp	r0, #0
 80094be:	d13a      	bne.n	8009536 <__gethex+0xca>
 80094c0:	9901      	ldr	r1, [sp, #4]
 80094c2:	4652      	mov	r2, sl
 80094c4:	4638      	mov	r0, r7
 80094c6:	f001 fb37 	bl	800ab38 <strncmp>
 80094ca:	4605      	mov	r5, r0
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d168      	bne.n	80095a2 <__gethex+0x136>
 80094d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80094d4:	eb07 060a 	add.w	r6, r7, sl
 80094d8:	f7ff ffb2 	bl	8009440 <__hexdig_fun>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d062      	beq.n	80095a6 <__gethex+0x13a>
 80094e0:	4633      	mov	r3, r6
 80094e2:	7818      	ldrb	r0, [r3, #0]
 80094e4:	2830      	cmp	r0, #48	; 0x30
 80094e6:	461f      	mov	r7, r3
 80094e8:	f103 0301 	add.w	r3, r3, #1
 80094ec:	d0f9      	beq.n	80094e2 <__gethex+0x76>
 80094ee:	f7ff ffa7 	bl	8009440 <__hexdig_fun>
 80094f2:	2301      	movs	r3, #1
 80094f4:	fab0 f480 	clz	r4, r0
 80094f8:	0964      	lsrs	r4, r4, #5
 80094fa:	4635      	mov	r5, r6
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	463a      	mov	r2, r7
 8009500:	4616      	mov	r6, r2
 8009502:	3201      	adds	r2, #1
 8009504:	7830      	ldrb	r0, [r6, #0]
 8009506:	f7ff ff9b 	bl	8009440 <__hexdig_fun>
 800950a:	2800      	cmp	r0, #0
 800950c:	d1f8      	bne.n	8009500 <__gethex+0x94>
 800950e:	9901      	ldr	r1, [sp, #4]
 8009510:	4652      	mov	r2, sl
 8009512:	4630      	mov	r0, r6
 8009514:	f001 fb10 	bl	800ab38 <strncmp>
 8009518:	b980      	cbnz	r0, 800953c <__gethex+0xd0>
 800951a:	b94d      	cbnz	r5, 8009530 <__gethex+0xc4>
 800951c:	eb06 050a 	add.w	r5, r6, sl
 8009520:	462a      	mov	r2, r5
 8009522:	4616      	mov	r6, r2
 8009524:	3201      	adds	r2, #1
 8009526:	7830      	ldrb	r0, [r6, #0]
 8009528:	f7ff ff8a 	bl	8009440 <__hexdig_fun>
 800952c:	2800      	cmp	r0, #0
 800952e:	d1f8      	bne.n	8009522 <__gethex+0xb6>
 8009530:	1bad      	subs	r5, r5, r6
 8009532:	00ad      	lsls	r5, r5, #2
 8009534:	e004      	b.n	8009540 <__gethex+0xd4>
 8009536:	2400      	movs	r4, #0
 8009538:	4625      	mov	r5, r4
 800953a:	e7e0      	b.n	80094fe <__gethex+0x92>
 800953c:	2d00      	cmp	r5, #0
 800953e:	d1f7      	bne.n	8009530 <__gethex+0xc4>
 8009540:	7833      	ldrb	r3, [r6, #0]
 8009542:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009546:	2b50      	cmp	r3, #80	; 0x50
 8009548:	d13b      	bne.n	80095c2 <__gethex+0x156>
 800954a:	7873      	ldrb	r3, [r6, #1]
 800954c:	2b2b      	cmp	r3, #43	; 0x2b
 800954e:	d02c      	beq.n	80095aa <__gethex+0x13e>
 8009550:	2b2d      	cmp	r3, #45	; 0x2d
 8009552:	d02e      	beq.n	80095b2 <__gethex+0x146>
 8009554:	1c71      	adds	r1, r6, #1
 8009556:	f04f 0900 	mov.w	r9, #0
 800955a:	7808      	ldrb	r0, [r1, #0]
 800955c:	f7ff ff70 	bl	8009440 <__hexdig_fun>
 8009560:	1e43      	subs	r3, r0, #1
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b18      	cmp	r3, #24
 8009566:	d82c      	bhi.n	80095c2 <__gethex+0x156>
 8009568:	f1a0 0210 	sub.w	r2, r0, #16
 800956c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009570:	f7ff ff66 	bl	8009440 <__hexdig_fun>
 8009574:	1e43      	subs	r3, r0, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b18      	cmp	r3, #24
 800957a:	d91d      	bls.n	80095b8 <__gethex+0x14c>
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	d000      	beq.n	8009584 <__gethex+0x118>
 8009582:	4252      	negs	r2, r2
 8009584:	4415      	add	r5, r2
 8009586:	f8cb 1000 	str.w	r1, [fp]
 800958a:	b1e4      	cbz	r4, 80095c6 <__gethex+0x15a>
 800958c:	9b00      	ldr	r3, [sp, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf14      	ite	ne
 8009592:	2700      	movne	r7, #0
 8009594:	2706      	moveq	r7, #6
 8009596:	4638      	mov	r0, r7
 8009598:	b009      	add	sp, #36	; 0x24
 800959a:	ecbd 8b02 	vpop	{d8}
 800959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a2:	463e      	mov	r6, r7
 80095a4:	4625      	mov	r5, r4
 80095a6:	2401      	movs	r4, #1
 80095a8:	e7ca      	b.n	8009540 <__gethex+0xd4>
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	1cb1      	adds	r1, r6, #2
 80095b0:	e7d3      	b.n	800955a <__gethex+0xee>
 80095b2:	f04f 0901 	mov.w	r9, #1
 80095b6:	e7fa      	b.n	80095ae <__gethex+0x142>
 80095b8:	230a      	movs	r3, #10
 80095ba:	fb03 0202 	mla	r2, r3, r2, r0
 80095be:	3a10      	subs	r2, #16
 80095c0:	e7d4      	b.n	800956c <__gethex+0x100>
 80095c2:	4631      	mov	r1, r6
 80095c4:	e7df      	b.n	8009586 <__gethex+0x11a>
 80095c6:	1bf3      	subs	r3, r6, r7
 80095c8:	3b01      	subs	r3, #1
 80095ca:	4621      	mov	r1, r4
 80095cc:	2b07      	cmp	r3, #7
 80095ce:	dc0b      	bgt.n	80095e8 <__gethex+0x17c>
 80095d0:	ee18 0a10 	vmov	r0, s16
 80095d4:	f000 fa82 	bl	8009adc <_Balloc>
 80095d8:	4604      	mov	r4, r0
 80095da:	b940      	cbnz	r0, 80095ee <__gethex+0x182>
 80095dc:	4b5d      	ldr	r3, [pc, #372]	; (8009754 <__gethex+0x2e8>)
 80095de:	4602      	mov	r2, r0
 80095e0:	21de      	movs	r1, #222	; 0xde
 80095e2:	485d      	ldr	r0, [pc, #372]	; (8009758 <__gethex+0x2ec>)
 80095e4:	f001 fb8a 	bl	800acfc <__assert_func>
 80095e8:	3101      	adds	r1, #1
 80095ea:	105b      	asrs	r3, r3, #1
 80095ec:	e7ee      	b.n	80095cc <__gethex+0x160>
 80095ee:	f100 0914 	add.w	r9, r0, #20
 80095f2:	f04f 0b00 	mov.w	fp, #0
 80095f6:	f1ca 0301 	rsb	r3, sl, #1
 80095fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80095fe:	f8cd b000 	str.w	fp, [sp]
 8009602:	9306      	str	r3, [sp, #24]
 8009604:	42b7      	cmp	r7, r6
 8009606:	d340      	bcc.n	800968a <__gethex+0x21e>
 8009608:	9802      	ldr	r0, [sp, #8]
 800960a:	9b00      	ldr	r3, [sp, #0]
 800960c:	f840 3b04 	str.w	r3, [r0], #4
 8009610:	eba0 0009 	sub.w	r0, r0, r9
 8009614:	1080      	asrs	r0, r0, #2
 8009616:	0146      	lsls	r6, r0, #5
 8009618:	6120      	str	r0, [r4, #16]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fb50 	bl	8009cc0 <__hi0bits>
 8009620:	1a30      	subs	r0, r6, r0
 8009622:	f8d8 6000 	ldr.w	r6, [r8]
 8009626:	42b0      	cmp	r0, r6
 8009628:	dd63      	ble.n	80096f2 <__gethex+0x286>
 800962a:	1b87      	subs	r7, r0, r6
 800962c:	4639      	mov	r1, r7
 800962e:	4620      	mov	r0, r4
 8009630:	f000 fef4 	bl	800a41c <__any_on>
 8009634:	4682      	mov	sl, r0
 8009636:	b1a8      	cbz	r0, 8009664 <__gethex+0x1f8>
 8009638:	1e7b      	subs	r3, r7, #1
 800963a:	1159      	asrs	r1, r3, #5
 800963c:	f003 021f 	and.w	r2, r3, #31
 8009640:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009644:	f04f 0a01 	mov.w	sl, #1
 8009648:	fa0a f202 	lsl.w	r2, sl, r2
 800964c:	420a      	tst	r2, r1
 800964e:	d009      	beq.n	8009664 <__gethex+0x1f8>
 8009650:	4553      	cmp	r3, sl
 8009652:	dd05      	ble.n	8009660 <__gethex+0x1f4>
 8009654:	1eb9      	subs	r1, r7, #2
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fee0 	bl	800a41c <__any_on>
 800965c:	2800      	cmp	r0, #0
 800965e:	d145      	bne.n	80096ec <__gethex+0x280>
 8009660:	f04f 0a02 	mov.w	sl, #2
 8009664:	4639      	mov	r1, r7
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff fe98 	bl	800939c <rshift>
 800966c:	443d      	add	r5, r7
 800966e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009672:	42ab      	cmp	r3, r5
 8009674:	da4c      	bge.n	8009710 <__gethex+0x2a4>
 8009676:	ee18 0a10 	vmov	r0, s16
 800967a:	4621      	mov	r1, r4
 800967c:	f000 fa6e 	bl	8009b5c <_Bfree>
 8009680:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009682:	2300      	movs	r3, #0
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	27a3      	movs	r7, #163	; 0xa3
 8009688:	e785      	b.n	8009596 <__gethex+0x12a>
 800968a:	1e73      	subs	r3, r6, #1
 800968c:	9a05      	ldr	r2, [sp, #20]
 800968e:	9303      	str	r3, [sp, #12]
 8009690:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009694:	4293      	cmp	r3, r2
 8009696:	d019      	beq.n	80096cc <__gethex+0x260>
 8009698:	f1bb 0f20 	cmp.w	fp, #32
 800969c:	d107      	bne.n	80096ae <__gethex+0x242>
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	9a00      	ldr	r2, [sp, #0]
 80096a2:	f843 2b04 	str.w	r2, [r3], #4
 80096a6:	9302      	str	r3, [sp, #8]
 80096a8:	2300      	movs	r3, #0
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	469b      	mov	fp, r3
 80096ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096b2:	f7ff fec5 	bl	8009440 <__hexdig_fun>
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	f000 000f 	and.w	r0, r0, #15
 80096bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80096c0:	4303      	orrs	r3, r0
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	f10b 0b04 	add.w	fp, fp, #4
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	e00d      	b.n	80096e8 <__gethex+0x27c>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	9a06      	ldr	r2, [sp, #24]
 80096d0:	4413      	add	r3, r2
 80096d2:	42bb      	cmp	r3, r7
 80096d4:	d3e0      	bcc.n	8009698 <__gethex+0x22c>
 80096d6:	4618      	mov	r0, r3
 80096d8:	9901      	ldr	r1, [sp, #4]
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	4652      	mov	r2, sl
 80096de:	f001 fa2b 	bl	800ab38 <strncmp>
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d1d7      	bne.n	8009698 <__gethex+0x22c>
 80096e8:	461e      	mov	r6, r3
 80096ea:	e78b      	b.n	8009604 <__gethex+0x198>
 80096ec:	f04f 0a03 	mov.w	sl, #3
 80096f0:	e7b8      	b.n	8009664 <__gethex+0x1f8>
 80096f2:	da0a      	bge.n	800970a <__gethex+0x29e>
 80096f4:	1a37      	subs	r7, r6, r0
 80096f6:	4621      	mov	r1, r4
 80096f8:	ee18 0a10 	vmov	r0, s16
 80096fc:	463a      	mov	r2, r7
 80096fe:	f000 fc49 	bl	8009f94 <__lshift>
 8009702:	1bed      	subs	r5, r5, r7
 8009704:	4604      	mov	r4, r0
 8009706:	f100 0914 	add.w	r9, r0, #20
 800970a:	f04f 0a00 	mov.w	sl, #0
 800970e:	e7ae      	b.n	800966e <__gethex+0x202>
 8009710:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009714:	42a8      	cmp	r0, r5
 8009716:	dd72      	ble.n	80097fe <__gethex+0x392>
 8009718:	1b45      	subs	r5, r0, r5
 800971a:	42ae      	cmp	r6, r5
 800971c:	dc36      	bgt.n	800978c <__gethex+0x320>
 800971e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d02a      	beq.n	800977c <__gethex+0x310>
 8009726:	2b03      	cmp	r3, #3
 8009728:	d02c      	beq.n	8009784 <__gethex+0x318>
 800972a:	2b01      	cmp	r3, #1
 800972c:	d11c      	bne.n	8009768 <__gethex+0x2fc>
 800972e:	42ae      	cmp	r6, r5
 8009730:	d11a      	bne.n	8009768 <__gethex+0x2fc>
 8009732:	2e01      	cmp	r6, #1
 8009734:	d112      	bne.n	800975c <__gethex+0x2f0>
 8009736:	9a04      	ldr	r2, [sp, #16]
 8009738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	2301      	movs	r3, #1
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	f8c9 3000 	str.w	r3, [r9]
 8009746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009748:	2762      	movs	r7, #98	; 0x62
 800974a:	601c      	str	r4, [r3, #0]
 800974c:	e723      	b.n	8009596 <__gethex+0x12a>
 800974e:	bf00      	nop
 8009750:	0800b270 	.word	0x0800b270
 8009754:	0800b1f9 	.word	0x0800b1f9
 8009758:	0800b20a 	.word	0x0800b20a
 800975c:	1e71      	subs	r1, r6, #1
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fe5c 	bl	800a41c <__any_on>
 8009764:	2800      	cmp	r0, #0
 8009766:	d1e6      	bne.n	8009736 <__gethex+0x2ca>
 8009768:	ee18 0a10 	vmov	r0, s16
 800976c:	4621      	mov	r1, r4
 800976e:	f000 f9f5 	bl	8009b5c <_Bfree>
 8009772:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009774:	2300      	movs	r3, #0
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	2750      	movs	r7, #80	; 0x50
 800977a:	e70c      	b.n	8009596 <__gethex+0x12a>
 800977c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f2      	bne.n	8009768 <__gethex+0x2fc>
 8009782:	e7d8      	b.n	8009736 <__gethex+0x2ca>
 8009784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1d5      	bne.n	8009736 <__gethex+0x2ca>
 800978a:	e7ed      	b.n	8009768 <__gethex+0x2fc>
 800978c:	1e6f      	subs	r7, r5, #1
 800978e:	f1ba 0f00 	cmp.w	sl, #0
 8009792:	d131      	bne.n	80097f8 <__gethex+0x38c>
 8009794:	b127      	cbz	r7, 80097a0 <__gethex+0x334>
 8009796:	4639      	mov	r1, r7
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fe3f 	bl	800a41c <__any_on>
 800979e:	4682      	mov	sl, r0
 80097a0:	117b      	asrs	r3, r7, #5
 80097a2:	2101      	movs	r1, #1
 80097a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80097a8:	f007 071f 	and.w	r7, r7, #31
 80097ac:	fa01 f707 	lsl.w	r7, r1, r7
 80097b0:	421f      	tst	r7, r3
 80097b2:	4629      	mov	r1, r5
 80097b4:	4620      	mov	r0, r4
 80097b6:	bf18      	it	ne
 80097b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80097bc:	1b76      	subs	r6, r6, r5
 80097be:	f7ff fded 	bl	800939c <rshift>
 80097c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097c6:	2702      	movs	r7, #2
 80097c8:	f1ba 0f00 	cmp.w	sl, #0
 80097cc:	d048      	beq.n	8009860 <__gethex+0x3f4>
 80097ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d015      	beq.n	8009802 <__gethex+0x396>
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d017      	beq.n	800980a <__gethex+0x39e>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d109      	bne.n	80097f2 <__gethex+0x386>
 80097de:	f01a 0f02 	tst.w	sl, #2
 80097e2:	d006      	beq.n	80097f2 <__gethex+0x386>
 80097e4:	f8d9 0000 	ldr.w	r0, [r9]
 80097e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80097ec:	f01a 0f01 	tst.w	sl, #1
 80097f0:	d10e      	bne.n	8009810 <__gethex+0x3a4>
 80097f2:	f047 0710 	orr.w	r7, r7, #16
 80097f6:	e033      	b.n	8009860 <__gethex+0x3f4>
 80097f8:	f04f 0a01 	mov.w	sl, #1
 80097fc:	e7d0      	b.n	80097a0 <__gethex+0x334>
 80097fe:	2701      	movs	r7, #1
 8009800:	e7e2      	b.n	80097c8 <__gethex+0x35c>
 8009802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009804:	f1c3 0301 	rsb	r3, r3, #1
 8009808:	9315      	str	r3, [sp, #84]	; 0x54
 800980a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800980c:	2b00      	cmp	r3, #0
 800980e:	d0f0      	beq.n	80097f2 <__gethex+0x386>
 8009810:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009814:	f104 0314 	add.w	r3, r4, #20
 8009818:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800981c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009820:	f04f 0c00 	mov.w	ip, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f853 2b04 	ldr.w	r2, [r3], #4
 800982a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800982e:	d01c      	beq.n	800986a <__gethex+0x3fe>
 8009830:	3201      	adds	r2, #1
 8009832:	6002      	str	r2, [r0, #0]
 8009834:	2f02      	cmp	r7, #2
 8009836:	f104 0314 	add.w	r3, r4, #20
 800983a:	d13f      	bne.n	80098bc <__gethex+0x450>
 800983c:	f8d8 2000 	ldr.w	r2, [r8]
 8009840:	3a01      	subs	r2, #1
 8009842:	42b2      	cmp	r2, r6
 8009844:	d10a      	bne.n	800985c <__gethex+0x3f0>
 8009846:	1171      	asrs	r1, r6, #5
 8009848:	2201      	movs	r2, #1
 800984a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800984e:	f006 061f 	and.w	r6, r6, #31
 8009852:	fa02 f606 	lsl.w	r6, r2, r6
 8009856:	421e      	tst	r6, r3
 8009858:	bf18      	it	ne
 800985a:	4617      	movne	r7, r2
 800985c:	f047 0720 	orr.w	r7, r7, #32
 8009860:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009862:	601c      	str	r4, [r3, #0]
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	601d      	str	r5, [r3, #0]
 8009868:	e695      	b.n	8009596 <__gethex+0x12a>
 800986a:	4299      	cmp	r1, r3
 800986c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009870:	d8d8      	bhi.n	8009824 <__gethex+0x3b8>
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	459b      	cmp	fp, r3
 8009876:	db19      	blt.n	80098ac <__gethex+0x440>
 8009878:	6861      	ldr	r1, [r4, #4]
 800987a:	ee18 0a10 	vmov	r0, s16
 800987e:	3101      	adds	r1, #1
 8009880:	f000 f92c 	bl	8009adc <_Balloc>
 8009884:	4681      	mov	r9, r0
 8009886:	b918      	cbnz	r0, 8009890 <__gethex+0x424>
 8009888:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <__gethex+0x488>)
 800988a:	4602      	mov	r2, r0
 800988c:	2184      	movs	r1, #132	; 0x84
 800988e:	e6a8      	b.n	80095e2 <__gethex+0x176>
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	3202      	adds	r2, #2
 8009894:	f104 010c 	add.w	r1, r4, #12
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	300c      	adds	r0, #12
 800989c:	f7fe fc51 	bl	8008142 <memcpy>
 80098a0:	4621      	mov	r1, r4
 80098a2:	ee18 0a10 	vmov	r0, s16
 80098a6:	f000 f959 	bl	8009b5c <_Bfree>
 80098aa:	464c      	mov	r4, r9
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098b4:	6122      	str	r2, [r4, #16]
 80098b6:	2201      	movs	r2, #1
 80098b8:	615a      	str	r2, [r3, #20]
 80098ba:	e7bb      	b.n	8009834 <__gethex+0x3c8>
 80098bc:	6922      	ldr	r2, [r4, #16]
 80098be:	455a      	cmp	r2, fp
 80098c0:	dd0b      	ble.n	80098da <__gethex+0x46e>
 80098c2:	2101      	movs	r1, #1
 80098c4:	4620      	mov	r0, r4
 80098c6:	f7ff fd69 	bl	800939c <rshift>
 80098ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098ce:	3501      	adds	r5, #1
 80098d0:	42ab      	cmp	r3, r5
 80098d2:	f6ff aed0 	blt.w	8009676 <__gethex+0x20a>
 80098d6:	2701      	movs	r7, #1
 80098d8:	e7c0      	b.n	800985c <__gethex+0x3f0>
 80098da:	f016 061f 	ands.w	r6, r6, #31
 80098de:	d0fa      	beq.n	80098d6 <__gethex+0x46a>
 80098e0:	4453      	add	r3, sl
 80098e2:	f1c6 0620 	rsb	r6, r6, #32
 80098e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098ea:	f000 f9e9 	bl	8009cc0 <__hi0bits>
 80098ee:	42b0      	cmp	r0, r6
 80098f0:	dbe7      	blt.n	80098c2 <__gethex+0x456>
 80098f2:	e7f0      	b.n	80098d6 <__gethex+0x46a>
 80098f4:	0800b1f9 	.word	0x0800b1f9

080098f8 <L_shift>:
 80098f8:	f1c2 0208 	rsb	r2, r2, #8
 80098fc:	0092      	lsls	r2, r2, #2
 80098fe:	b570      	push	{r4, r5, r6, lr}
 8009900:	f1c2 0620 	rsb	r6, r2, #32
 8009904:	6843      	ldr	r3, [r0, #4]
 8009906:	6804      	ldr	r4, [r0, #0]
 8009908:	fa03 f506 	lsl.w	r5, r3, r6
 800990c:	432c      	orrs	r4, r5
 800990e:	40d3      	lsrs	r3, r2
 8009910:	6004      	str	r4, [r0, #0]
 8009912:	f840 3f04 	str.w	r3, [r0, #4]!
 8009916:	4288      	cmp	r0, r1
 8009918:	d3f4      	bcc.n	8009904 <L_shift+0xc>
 800991a:	bd70      	pop	{r4, r5, r6, pc}

0800991c <__match>:
 800991c:	b530      	push	{r4, r5, lr}
 800991e:	6803      	ldr	r3, [r0, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009926:	b914      	cbnz	r4, 800992e <__match+0x12>
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	2001      	movs	r0, #1
 800992c:	bd30      	pop	{r4, r5, pc}
 800992e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009932:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009936:	2d19      	cmp	r5, #25
 8009938:	bf98      	it	ls
 800993a:	3220      	addls	r2, #32
 800993c:	42a2      	cmp	r2, r4
 800993e:	d0f0      	beq.n	8009922 <__match+0x6>
 8009940:	2000      	movs	r0, #0
 8009942:	e7f3      	b.n	800992c <__match+0x10>

08009944 <__hexnan>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	680b      	ldr	r3, [r1, #0]
 800994a:	115e      	asrs	r6, r3, #5
 800994c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009950:	f013 031f 	ands.w	r3, r3, #31
 8009954:	b087      	sub	sp, #28
 8009956:	bf18      	it	ne
 8009958:	3604      	addne	r6, #4
 800995a:	2500      	movs	r5, #0
 800995c:	1f37      	subs	r7, r6, #4
 800995e:	4690      	mov	r8, r2
 8009960:	6802      	ldr	r2, [r0, #0]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	4682      	mov	sl, r0
 8009966:	f846 5c04 	str.w	r5, [r6, #-4]
 800996a:	46b9      	mov	r9, r7
 800996c:	463c      	mov	r4, r7
 800996e:	9502      	str	r5, [sp, #8]
 8009970:	46ab      	mov	fp, r5
 8009972:	7851      	ldrb	r1, [r2, #1]
 8009974:	1c53      	adds	r3, r2, #1
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	b341      	cbz	r1, 80099cc <__hexnan+0x88>
 800997a:	4608      	mov	r0, r1
 800997c:	9205      	str	r2, [sp, #20]
 800997e:	9104      	str	r1, [sp, #16]
 8009980:	f7ff fd5e 	bl	8009440 <__hexdig_fun>
 8009984:	2800      	cmp	r0, #0
 8009986:	d14f      	bne.n	8009a28 <__hexnan+0xe4>
 8009988:	9904      	ldr	r1, [sp, #16]
 800998a:	9a05      	ldr	r2, [sp, #20]
 800998c:	2920      	cmp	r1, #32
 800998e:	d818      	bhi.n	80099c2 <__hexnan+0x7e>
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	459b      	cmp	fp, r3
 8009994:	dd13      	ble.n	80099be <__hexnan+0x7a>
 8009996:	454c      	cmp	r4, r9
 8009998:	d206      	bcs.n	80099a8 <__hexnan+0x64>
 800999a:	2d07      	cmp	r5, #7
 800999c:	dc04      	bgt.n	80099a8 <__hexnan+0x64>
 800999e:	462a      	mov	r2, r5
 80099a0:	4649      	mov	r1, r9
 80099a2:	4620      	mov	r0, r4
 80099a4:	f7ff ffa8 	bl	80098f8 <L_shift>
 80099a8:	4544      	cmp	r4, r8
 80099aa:	d950      	bls.n	8009a4e <__hexnan+0x10a>
 80099ac:	2300      	movs	r3, #0
 80099ae:	f1a4 0904 	sub.w	r9, r4, #4
 80099b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80099b6:	f8cd b008 	str.w	fp, [sp, #8]
 80099ba:	464c      	mov	r4, r9
 80099bc:	461d      	mov	r5, r3
 80099be:	9a03      	ldr	r2, [sp, #12]
 80099c0:	e7d7      	b.n	8009972 <__hexnan+0x2e>
 80099c2:	2929      	cmp	r1, #41	; 0x29
 80099c4:	d156      	bne.n	8009a74 <__hexnan+0x130>
 80099c6:	3202      	adds	r2, #2
 80099c8:	f8ca 2000 	str.w	r2, [sl]
 80099cc:	f1bb 0f00 	cmp.w	fp, #0
 80099d0:	d050      	beq.n	8009a74 <__hexnan+0x130>
 80099d2:	454c      	cmp	r4, r9
 80099d4:	d206      	bcs.n	80099e4 <__hexnan+0xa0>
 80099d6:	2d07      	cmp	r5, #7
 80099d8:	dc04      	bgt.n	80099e4 <__hexnan+0xa0>
 80099da:	462a      	mov	r2, r5
 80099dc:	4649      	mov	r1, r9
 80099de:	4620      	mov	r0, r4
 80099e0:	f7ff ff8a 	bl	80098f8 <L_shift>
 80099e4:	4544      	cmp	r4, r8
 80099e6:	d934      	bls.n	8009a52 <__hexnan+0x10e>
 80099e8:	f1a8 0204 	sub.w	r2, r8, #4
 80099ec:	4623      	mov	r3, r4
 80099ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80099f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80099f6:	429f      	cmp	r7, r3
 80099f8:	d2f9      	bcs.n	80099ee <__hexnan+0xaa>
 80099fa:	1b3b      	subs	r3, r7, r4
 80099fc:	f023 0303 	bic.w	r3, r3, #3
 8009a00:	3304      	adds	r3, #4
 8009a02:	3401      	adds	r4, #1
 8009a04:	3e03      	subs	r6, #3
 8009a06:	42b4      	cmp	r4, r6
 8009a08:	bf88      	it	hi
 8009a0a:	2304      	movhi	r3, #4
 8009a0c:	4443      	add	r3, r8
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f843 2b04 	str.w	r2, [r3], #4
 8009a14:	429f      	cmp	r7, r3
 8009a16:	d2fb      	bcs.n	8009a10 <__hexnan+0xcc>
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	b91b      	cbnz	r3, 8009a24 <__hexnan+0xe0>
 8009a1c:	4547      	cmp	r7, r8
 8009a1e:	d127      	bne.n	8009a70 <__hexnan+0x12c>
 8009a20:	2301      	movs	r3, #1
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	2005      	movs	r0, #5
 8009a26:	e026      	b.n	8009a76 <__hexnan+0x132>
 8009a28:	3501      	adds	r5, #1
 8009a2a:	2d08      	cmp	r5, #8
 8009a2c:	f10b 0b01 	add.w	fp, fp, #1
 8009a30:	dd06      	ble.n	8009a40 <__hexnan+0xfc>
 8009a32:	4544      	cmp	r4, r8
 8009a34:	d9c3      	bls.n	80099be <__hexnan+0x7a>
 8009a36:	2300      	movs	r3, #0
 8009a38:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a3c:	2501      	movs	r5, #1
 8009a3e:	3c04      	subs	r4, #4
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	f000 000f 	and.w	r0, r0, #15
 8009a46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a4a:	6022      	str	r2, [r4, #0]
 8009a4c:	e7b7      	b.n	80099be <__hexnan+0x7a>
 8009a4e:	2508      	movs	r5, #8
 8009a50:	e7b5      	b.n	80099be <__hexnan+0x7a>
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0df      	beq.n	8009a18 <__hexnan+0xd4>
 8009a58:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5c:	f1c3 0320 	rsb	r3, r3, #32
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
 8009a64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a68:	401a      	ands	r2, r3
 8009a6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a6e:	e7d3      	b.n	8009a18 <__hexnan+0xd4>
 8009a70:	3f04      	subs	r7, #4
 8009a72:	e7d1      	b.n	8009a18 <__hexnan+0xd4>
 8009a74:	2004      	movs	r0, #4
 8009a76:	b007      	add	sp, #28
 8009a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a7c <_lseek_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_lseek_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f8 fa12 	bl	8001eb4 <_lseek>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_lseek_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_lseek_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20003138 	.word	0x20003138

08009aa0 <__ascii_mbtowc>:
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	b901      	cbnz	r1, 8009aa6 <__ascii_mbtowc+0x6>
 8009aa4:	a901      	add	r1, sp, #4
 8009aa6:	b142      	cbz	r2, 8009aba <__ascii_mbtowc+0x1a>
 8009aa8:	b14b      	cbz	r3, 8009abe <__ascii_mbtowc+0x1e>
 8009aaa:	7813      	ldrb	r3, [r2, #0]
 8009aac:	600b      	str	r3, [r1, #0]
 8009aae:	7812      	ldrb	r2, [r2, #0]
 8009ab0:	1e10      	subs	r0, r2, #0
 8009ab2:	bf18      	it	ne
 8009ab4:	2001      	movne	r0, #1
 8009ab6:	b002      	add	sp, #8
 8009ab8:	4770      	bx	lr
 8009aba:	4610      	mov	r0, r2
 8009abc:	e7fb      	b.n	8009ab6 <__ascii_mbtowc+0x16>
 8009abe:	f06f 0001 	mvn.w	r0, #1
 8009ac2:	e7f8      	b.n	8009ab6 <__ascii_mbtowc+0x16>

08009ac4 <__malloc_lock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__malloc_lock+0x8>)
 8009ac6:	f7fe bb3a 	b.w	800813e <__retarget_lock_acquire_recursive>
 8009aca:	bf00      	nop
 8009acc:	2000312c 	.word	0x2000312c

08009ad0 <__malloc_unlock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__malloc_unlock+0x8>)
 8009ad2:	f7fe bb35 	b.w	8008140 <__retarget_lock_release_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	2000312c 	.word	0x2000312c

08009adc <_Balloc>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	b976      	cbnz	r6, 8009b04 <_Balloc+0x28>
 8009ae6:	2010      	movs	r0, #16
 8009ae8:	f001 f99e 	bl	800ae28 <malloc>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6260      	str	r0, [r4, #36]	; 0x24
 8009af0:	b920      	cbnz	r0, 8009afc <_Balloc+0x20>
 8009af2:	4b18      	ldr	r3, [pc, #96]	; (8009b54 <_Balloc+0x78>)
 8009af4:	4818      	ldr	r0, [pc, #96]	; (8009b58 <_Balloc+0x7c>)
 8009af6:	2166      	movs	r1, #102	; 0x66
 8009af8:	f001 f900 	bl	800acfc <__assert_func>
 8009afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b00:	6006      	str	r6, [r0, #0]
 8009b02:	60c6      	str	r6, [r0, #12]
 8009b04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b06:	68f3      	ldr	r3, [r6, #12]
 8009b08:	b183      	cbz	r3, 8009b2c <_Balloc+0x50>
 8009b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b12:	b9b8      	cbnz	r0, 8009b44 <_Balloc+0x68>
 8009b14:	2101      	movs	r1, #1
 8009b16:	fa01 f605 	lsl.w	r6, r1, r5
 8009b1a:	1d72      	adds	r2, r6, #5
 8009b1c:	0092      	lsls	r2, r2, #2
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 fc9d 	bl	800a45e <_calloc_r>
 8009b24:	b160      	cbz	r0, 8009b40 <_Balloc+0x64>
 8009b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b2a:	e00e      	b.n	8009b4a <_Balloc+0x6e>
 8009b2c:	2221      	movs	r2, #33	; 0x21
 8009b2e:	2104      	movs	r1, #4
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 fc94 	bl	800a45e <_calloc_r>
 8009b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b38:	60f0      	str	r0, [r6, #12]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e4      	bne.n	8009b0a <_Balloc+0x2e>
 8009b40:	2000      	movs	r0, #0
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	6802      	ldr	r2, [r0, #0]
 8009b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b50:	e7f7      	b.n	8009b42 <_Balloc+0x66>
 8009b52:	bf00      	nop
 8009b54:	0800b284 	.word	0x0800b284
 8009b58:	0800b29b 	.word	0x0800b29b

08009b5c <_Bfree>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b60:	4605      	mov	r5, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	b976      	cbnz	r6, 8009b84 <_Bfree+0x28>
 8009b66:	2010      	movs	r0, #16
 8009b68:	f001 f95e 	bl	800ae28 <malloc>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	6268      	str	r0, [r5, #36]	; 0x24
 8009b70:	b920      	cbnz	r0, 8009b7c <_Bfree+0x20>
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <_Bfree+0x3c>)
 8009b74:	4809      	ldr	r0, [pc, #36]	; (8009b9c <_Bfree+0x40>)
 8009b76:	218a      	movs	r1, #138	; 0x8a
 8009b78:	f001 f8c0 	bl	800acfc <__assert_func>
 8009b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b80:	6006      	str	r6, [r0, #0]
 8009b82:	60c6      	str	r6, [r0, #12]
 8009b84:	b13c      	cbz	r4, 8009b96 <_Bfree+0x3a>
 8009b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b88:	6862      	ldr	r2, [r4, #4]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b90:	6021      	str	r1, [r4, #0]
 8009b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	0800b284 	.word	0x0800b284
 8009b9c:	0800b29b 	.word	0x0800b29b

08009ba0 <__multadd>:
 8009ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba4:	690d      	ldr	r5, [r1, #16]
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	461e      	mov	r6, r3
 8009bac:	f101 0c14 	add.w	ip, r1, #20
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8009bb6:	b299      	uxth	r1, r3
 8009bb8:	fb02 6101 	mla	r1, r2, r1, r6
 8009bbc:	0c1e      	lsrs	r6, r3, #16
 8009bbe:	0c0b      	lsrs	r3, r1, #16
 8009bc0:	fb02 3306 	mla	r3, r2, r6, r3
 8009bc4:	b289      	uxth	r1, r1
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bcc:	4285      	cmp	r5, r0
 8009bce:	f84c 1b04 	str.w	r1, [ip], #4
 8009bd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bd6:	dcec      	bgt.n	8009bb2 <__multadd+0x12>
 8009bd8:	b30e      	cbz	r6, 8009c1e <__multadd+0x7e>
 8009bda:	68a3      	ldr	r3, [r4, #8]
 8009bdc:	42ab      	cmp	r3, r5
 8009bde:	dc19      	bgt.n	8009c14 <__multadd+0x74>
 8009be0:	6861      	ldr	r1, [r4, #4]
 8009be2:	4638      	mov	r0, r7
 8009be4:	3101      	adds	r1, #1
 8009be6:	f7ff ff79 	bl	8009adc <_Balloc>
 8009bea:	4680      	mov	r8, r0
 8009bec:	b928      	cbnz	r0, 8009bfa <__multadd+0x5a>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <__multadd+0x84>)
 8009bf2:	480d      	ldr	r0, [pc, #52]	; (8009c28 <__multadd+0x88>)
 8009bf4:	21b5      	movs	r1, #181	; 0xb5
 8009bf6:	f001 f881 	bl	800acfc <__assert_func>
 8009bfa:	6922      	ldr	r2, [r4, #16]
 8009bfc:	3202      	adds	r2, #2
 8009bfe:	f104 010c 	add.w	r1, r4, #12
 8009c02:	0092      	lsls	r2, r2, #2
 8009c04:	300c      	adds	r0, #12
 8009c06:	f7fe fa9c 	bl	8008142 <memcpy>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f7ff ffa5 	bl	8009b5c <_Bfree>
 8009c12:	4644      	mov	r4, r8
 8009c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c18:	3501      	adds	r5, #1
 8009c1a:	615e      	str	r6, [r3, #20]
 8009c1c:	6125      	str	r5, [r4, #16]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c24:	0800b1f9 	.word	0x0800b1f9
 8009c28:	0800b29b 	.word	0x0800b29b

08009c2c <__s2b>:
 8009c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c30:	460c      	mov	r4, r1
 8009c32:	4615      	mov	r5, r2
 8009c34:	461f      	mov	r7, r3
 8009c36:	2209      	movs	r2, #9
 8009c38:	3308      	adds	r3, #8
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c40:	2100      	movs	r1, #0
 8009c42:	2201      	movs	r2, #1
 8009c44:	429a      	cmp	r2, r3
 8009c46:	db09      	blt.n	8009c5c <__s2b+0x30>
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7ff ff47 	bl	8009adc <_Balloc>
 8009c4e:	b940      	cbnz	r0, 8009c62 <__s2b+0x36>
 8009c50:	4602      	mov	r2, r0
 8009c52:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <__s2b+0x8c>)
 8009c54:	4819      	ldr	r0, [pc, #100]	; (8009cbc <__s2b+0x90>)
 8009c56:	21ce      	movs	r1, #206	; 0xce
 8009c58:	f001 f850 	bl	800acfc <__assert_func>
 8009c5c:	0052      	lsls	r2, r2, #1
 8009c5e:	3101      	adds	r1, #1
 8009c60:	e7f0      	b.n	8009c44 <__s2b+0x18>
 8009c62:	9b08      	ldr	r3, [sp, #32]
 8009c64:	6143      	str	r3, [r0, #20]
 8009c66:	2d09      	cmp	r5, #9
 8009c68:	f04f 0301 	mov.w	r3, #1
 8009c6c:	6103      	str	r3, [r0, #16]
 8009c6e:	dd16      	ble.n	8009c9e <__s2b+0x72>
 8009c70:	f104 0909 	add.w	r9, r4, #9
 8009c74:	46c8      	mov	r8, r9
 8009c76:	442c      	add	r4, r5
 8009c78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	3b30      	subs	r3, #48	; 0x30
 8009c80:	220a      	movs	r2, #10
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ff8c 	bl	8009ba0 <__multadd>
 8009c88:	45a0      	cmp	r8, r4
 8009c8a:	d1f5      	bne.n	8009c78 <__s2b+0x4c>
 8009c8c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c90:	444c      	add	r4, r9
 8009c92:	1b2d      	subs	r5, r5, r4
 8009c94:	1963      	adds	r3, r4, r5
 8009c96:	42bb      	cmp	r3, r7
 8009c98:	db04      	blt.n	8009ca4 <__s2b+0x78>
 8009c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9e:	340a      	adds	r4, #10
 8009ca0:	2509      	movs	r5, #9
 8009ca2:	e7f6      	b.n	8009c92 <__s2b+0x66>
 8009ca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ca8:	4601      	mov	r1, r0
 8009caa:	3b30      	subs	r3, #48	; 0x30
 8009cac:	220a      	movs	r2, #10
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7ff ff76 	bl	8009ba0 <__multadd>
 8009cb4:	e7ee      	b.n	8009c94 <__s2b+0x68>
 8009cb6:	bf00      	nop
 8009cb8:	0800b1f9 	.word	0x0800b1f9
 8009cbc:	0800b29b 	.word	0x0800b29b

08009cc0 <__hi0bits>:
 8009cc0:	0c03      	lsrs	r3, r0, #16
 8009cc2:	041b      	lsls	r3, r3, #16
 8009cc4:	b9d3      	cbnz	r3, 8009cfc <__hi0bits+0x3c>
 8009cc6:	0400      	lsls	r0, r0, #16
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cce:	bf04      	itt	eq
 8009cd0:	0200      	lsleq	r0, r0, #8
 8009cd2:	3308      	addeq	r3, #8
 8009cd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cd8:	bf04      	itt	eq
 8009cda:	0100      	lsleq	r0, r0, #4
 8009cdc:	3304      	addeq	r3, #4
 8009cde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ce2:	bf04      	itt	eq
 8009ce4:	0080      	lsleq	r0, r0, #2
 8009ce6:	3302      	addeq	r3, #2
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	db05      	blt.n	8009cf8 <__hi0bits+0x38>
 8009cec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cf0:	f103 0301 	add.w	r3, r3, #1
 8009cf4:	bf08      	it	eq
 8009cf6:	2320      	moveq	r3, #32
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	4770      	bx	lr
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e7e4      	b.n	8009cca <__hi0bits+0xa>

08009d00 <__lo0bits>:
 8009d00:	6803      	ldr	r3, [r0, #0]
 8009d02:	f013 0207 	ands.w	r2, r3, #7
 8009d06:	4601      	mov	r1, r0
 8009d08:	d00b      	beq.n	8009d22 <__lo0bits+0x22>
 8009d0a:	07da      	lsls	r2, r3, #31
 8009d0c:	d423      	bmi.n	8009d56 <__lo0bits+0x56>
 8009d0e:	0798      	lsls	r0, r3, #30
 8009d10:	bf49      	itett	mi
 8009d12:	085b      	lsrmi	r3, r3, #1
 8009d14:	089b      	lsrpl	r3, r3, #2
 8009d16:	2001      	movmi	r0, #1
 8009d18:	600b      	strmi	r3, [r1, #0]
 8009d1a:	bf5c      	itt	pl
 8009d1c:	600b      	strpl	r3, [r1, #0]
 8009d1e:	2002      	movpl	r0, #2
 8009d20:	4770      	bx	lr
 8009d22:	b298      	uxth	r0, r3
 8009d24:	b9a8      	cbnz	r0, 8009d52 <__lo0bits+0x52>
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	2010      	movs	r0, #16
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	b90a      	cbnz	r2, 8009d32 <__lo0bits+0x32>
 8009d2e:	3008      	adds	r0, #8
 8009d30:	0a1b      	lsrs	r3, r3, #8
 8009d32:	071a      	lsls	r2, r3, #28
 8009d34:	bf04      	itt	eq
 8009d36:	091b      	lsreq	r3, r3, #4
 8009d38:	3004      	addeq	r0, #4
 8009d3a:	079a      	lsls	r2, r3, #30
 8009d3c:	bf04      	itt	eq
 8009d3e:	089b      	lsreq	r3, r3, #2
 8009d40:	3002      	addeq	r0, #2
 8009d42:	07da      	lsls	r2, r3, #31
 8009d44:	d403      	bmi.n	8009d4e <__lo0bits+0x4e>
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	f100 0001 	add.w	r0, r0, #1
 8009d4c:	d005      	beq.n	8009d5a <__lo0bits+0x5a>
 8009d4e:	600b      	str	r3, [r1, #0]
 8009d50:	4770      	bx	lr
 8009d52:	4610      	mov	r0, r2
 8009d54:	e7e9      	b.n	8009d2a <__lo0bits+0x2a>
 8009d56:	2000      	movs	r0, #0
 8009d58:	4770      	bx	lr
 8009d5a:	2020      	movs	r0, #32
 8009d5c:	4770      	bx	lr
	...

08009d60 <__i2b>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	460c      	mov	r4, r1
 8009d64:	2101      	movs	r1, #1
 8009d66:	f7ff feb9 	bl	8009adc <_Balloc>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	b928      	cbnz	r0, 8009d7a <__i2b+0x1a>
 8009d6e:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <__i2b+0x24>)
 8009d70:	4805      	ldr	r0, [pc, #20]	; (8009d88 <__i2b+0x28>)
 8009d72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d76:	f000 ffc1 	bl	800acfc <__assert_func>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	6144      	str	r4, [r0, #20]
 8009d7e:	6103      	str	r3, [r0, #16]
 8009d80:	bd10      	pop	{r4, pc}
 8009d82:	bf00      	nop
 8009d84:	0800b1f9 	.word	0x0800b1f9
 8009d88:	0800b29b 	.word	0x0800b29b

08009d8c <__multiply>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	4691      	mov	r9, r2
 8009d92:	690a      	ldr	r2, [r1, #16]
 8009d94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	bfb8      	it	lt
 8009d9c:	460b      	movlt	r3, r1
 8009d9e:	460c      	mov	r4, r1
 8009da0:	bfbc      	itt	lt
 8009da2:	464c      	movlt	r4, r9
 8009da4:	4699      	movlt	r9, r3
 8009da6:	6927      	ldr	r7, [r4, #16]
 8009da8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dac:	68a3      	ldr	r3, [r4, #8]
 8009dae:	6861      	ldr	r1, [r4, #4]
 8009db0:	eb07 060a 	add.w	r6, r7, sl
 8009db4:	42b3      	cmp	r3, r6
 8009db6:	b085      	sub	sp, #20
 8009db8:	bfb8      	it	lt
 8009dba:	3101      	addlt	r1, #1
 8009dbc:	f7ff fe8e 	bl	8009adc <_Balloc>
 8009dc0:	b930      	cbnz	r0, 8009dd0 <__multiply+0x44>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	4b44      	ldr	r3, [pc, #272]	; (8009ed8 <__multiply+0x14c>)
 8009dc6:	4845      	ldr	r0, [pc, #276]	; (8009edc <__multiply+0x150>)
 8009dc8:	f240 115d 	movw	r1, #349	; 0x15d
 8009dcc:	f000 ff96 	bl	800acfc <__assert_func>
 8009dd0:	f100 0514 	add.w	r5, r0, #20
 8009dd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dd8:	462b      	mov	r3, r5
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4543      	cmp	r3, r8
 8009dde:	d321      	bcc.n	8009e24 <__multiply+0x98>
 8009de0:	f104 0314 	add.w	r3, r4, #20
 8009de4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009de8:	f109 0314 	add.w	r3, r9, #20
 8009dec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009df0:	9202      	str	r2, [sp, #8]
 8009df2:	1b3a      	subs	r2, r7, r4
 8009df4:	3a15      	subs	r2, #21
 8009df6:	f022 0203 	bic.w	r2, r2, #3
 8009dfa:	3204      	adds	r2, #4
 8009dfc:	f104 0115 	add.w	r1, r4, #21
 8009e00:	428f      	cmp	r7, r1
 8009e02:	bf38      	it	cc
 8009e04:	2204      	movcc	r2, #4
 8009e06:	9201      	str	r2, [sp, #4]
 8009e08:	9a02      	ldr	r2, [sp, #8]
 8009e0a:	9303      	str	r3, [sp, #12]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d80c      	bhi.n	8009e2a <__multiply+0x9e>
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	dd03      	ble.n	8009e1c <__multiply+0x90>
 8009e14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d05a      	beq.n	8009ed2 <__multiply+0x146>
 8009e1c:	6106      	str	r6, [r0, #16]
 8009e1e:	b005      	add	sp, #20
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	f843 2b04 	str.w	r2, [r3], #4
 8009e28:	e7d8      	b.n	8009ddc <__multiply+0x50>
 8009e2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e2e:	f1ba 0f00 	cmp.w	sl, #0
 8009e32:	d024      	beq.n	8009e7e <__multiply+0xf2>
 8009e34:	f104 0e14 	add.w	lr, r4, #20
 8009e38:	46a9      	mov	r9, r5
 8009e3a:	f04f 0c00 	mov.w	ip, #0
 8009e3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e42:	f8d9 1000 	ldr.w	r1, [r9]
 8009e46:	fa1f fb82 	uxth.w	fp, r2
 8009e4a:	b289      	uxth	r1, r1
 8009e4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e54:	f8d9 2000 	ldr.w	r2, [r9]
 8009e58:	4461      	add	r1, ip
 8009e5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e66:	b289      	uxth	r1, r1
 8009e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e6c:	4577      	cmp	r7, lr
 8009e6e:	f849 1b04 	str.w	r1, [r9], #4
 8009e72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e76:	d8e2      	bhi.n	8009e3e <__multiply+0xb2>
 8009e78:	9a01      	ldr	r2, [sp, #4]
 8009e7a:	f845 c002 	str.w	ip, [r5, r2]
 8009e7e:	9a03      	ldr	r2, [sp, #12]
 8009e80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e84:	3304      	adds	r3, #4
 8009e86:	f1b9 0f00 	cmp.w	r9, #0
 8009e8a:	d020      	beq.n	8009ece <__multiply+0x142>
 8009e8c:	6829      	ldr	r1, [r5, #0]
 8009e8e:	f104 0c14 	add.w	ip, r4, #20
 8009e92:	46ae      	mov	lr, r5
 8009e94:	f04f 0a00 	mov.w	sl, #0
 8009e98:	f8bc b000 	ldrh.w	fp, [ip]
 8009e9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ea0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ea4:	4492      	add	sl, r2
 8009ea6:	b289      	uxth	r1, r1
 8009ea8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009eac:	f84e 1b04 	str.w	r1, [lr], #4
 8009eb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009eb4:	f8be 1000 	ldrh.w	r1, [lr]
 8009eb8:	0c12      	lsrs	r2, r2, #16
 8009eba:	fb09 1102 	mla	r1, r9, r2, r1
 8009ebe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ec2:	4567      	cmp	r7, ip
 8009ec4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ec8:	d8e6      	bhi.n	8009e98 <__multiply+0x10c>
 8009eca:	9a01      	ldr	r2, [sp, #4]
 8009ecc:	50a9      	str	r1, [r5, r2]
 8009ece:	3504      	adds	r5, #4
 8009ed0:	e79a      	b.n	8009e08 <__multiply+0x7c>
 8009ed2:	3e01      	subs	r6, #1
 8009ed4:	e79c      	b.n	8009e10 <__multiply+0x84>
 8009ed6:	bf00      	nop
 8009ed8:	0800b1f9 	.word	0x0800b1f9
 8009edc:	0800b29b 	.word	0x0800b29b

08009ee0 <__pow5mult>:
 8009ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee4:	4615      	mov	r5, r2
 8009ee6:	f012 0203 	ands.w	r2, r2, #3
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	d007      	beq.n	8009f00 <__pow5mult+0x20>
 8009ef0:	4c25      	ldr	r4, [pc, #148]	; (8009f88 <__pow5mult+0xa8>)
 8009ef2:	3a01      	subs	r2, #1
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009efa:	f7ff fe51 	bl	8009ba0 <__multadd>
 8009efe:	4607      	mov	r7, r0
 8009f00:	10ad      	asrs	r5, r5, #2
 8009f02:	d03d      	beq.n	8009f80 <__pow5mult+0xa0>
 8009f04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f06:	b97c      	cbnz	r4, 8009f28 <__pow5mult+0x48>
 8009f08:	2010      	movs	r0, #16
 8009f0a:	f000 ff8d 	bl	800ae28 <malloc>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	6270      	str	r0, [r6, #36]	; 0x24
 8009f12:	b928      	cbnz	r0, 8009f20 <__pow5mult+0x40>
 8009f14:	4b1d      	ldr	r3, [pc, #116]	; (8009f8c <__pow5mult+0xac>)
 8009f16:	481e      	ldr	r0, [pc, #120]	; (8009f90 <__pow5mult+0xb0>)
 8009f18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f1c:	f000 feee 	bl	800acfc <__assert_func>
 8009f20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f24:	6004      	str	r4, [r0, #0]
 8009f26:	60c4      	str	r4, [r0, #12]
 8009f28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f30:	b94c      	cbnz	r4, 8009f46 <__pow5mult+0x66>
 8009f32:	f240 2171 	movw	r1, #625	; 0x271
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff ff12 	bl	8009d60 <__i2b>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f42:	4604      	mov	r4, r0
 8009f44:	6003      	str	r3, [r0, #0]
 8009f46:	f04f 0900 	mov.w	r9, #0
 8009f4a:	07eb      	lsls	r3, r5, #31
 8009f4c:	d50a      	bpl.n	8009f64 <__pow5mult+0x84>
 8009f4e:	4639      	mov	r1, r7
 8009f50:	4622      	mov	r2, r4
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7ff ff1a 	bl	8009d8c <__multiply>
 8009f58:	4639      	mov	r1, r7
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff fdfd 	bl	8009b5c <_Bfree>
 8009f62:	4647      	mov	r7, r8
 8009f64:	106d      	asrs	r5, r5, #1
 8009f66:	d00b      	beq.n	8009f80 <__pow5mult+0xa0>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	b938      	cbnz	r0, 8009f7c <__pow5mult+0x9c>
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff ff0b 	bl	8009d8c <__multiply>
 8009f76:	6020      	str	r0, [r4, #0]
 8009f78:	f8c0 9000 	str.w	r9, [r0]
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	e7e4      	b.n	8009f4a <__pow5mult+0x6a>
 8009f80:	4638      	mov	r0, r7
 8009f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f86:	bf00      	nop
 8009f88:	0800b3e8 	.word	0x0800b3e8
 8009f8c:	0800b284 	.word	0x0800b284
 8009f90:	0800b29b 	.word	0x0800b29b

08009f94 <__lshift>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	460c      	mov	r4, r1
 8009f9a:	6849      	ldr	r1, [r1, #4]
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	4691      	mov	r9, r2
 8009fa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fac:	f108 0601 	add.w	r6, r8, #1
 8009fb0:	42b3      	cmp	r3, r6
 8009fb2:	db0b      	blt.n	8009fcc <__lshift+0x38>
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f7ff fd91 	bl	8009adc <_Balloc>
 8009fba:	4605      	mov	r5, r0
 8009fbc:	b948      	cbnz	r0, 8009fd2 <__lshift+0x3e>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	4b2a      	ldr	r3, [pc, #168]	; (800a06c <__lshift+0xd8>)
 8009fc2:	482b      	ldr	r0, [pc, #172]	; (800a070 <__lshift+0xdc>)
 8009fc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fc8:	f000 fe98 	bl	800acfc <__assert_func>
 8009fcc:	3101      	adds	r1, #1
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	e7ee      	b.n	8009fb0 <__lshift+0x1c>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f100 0114 	add.w	r1, r0, #20
 8009fd8:	f100 0210 	add.w	r2, r0, #16
 8009fdc:	4618      	mov	r0, r3
 8009fde:	4553      	cmp	r3, sl
 8009fe0:	db37      	blt.n	800a052 <__lshift+0xbe>
 8009fe2:	6920      	ldr	r0, [r4, #16]
 8009fe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fe8:	f104 0314 	add.w	r3, r4, #20
 8009fec:	f019 091f 	ands.w	r9, r9, #31
 8009ff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ff4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ff8:	d02f      	beq.n	800a05a <__lshift+0xc6>
 8009ffa:	f1c9 0e20 	rsb	lr, r9, #32
 8009ffe:	468a      	mov	sl, r1
 800a000:	f04f 0c00 	mov.w	ip, #0
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	fa02 f209 	lsl.w	r2, r2, r9
 800a00a:	ea42 020c 	orr.w	r2, r2, ip
 800a00e:	f84a 2b04 	str.w	r2, [sl], #4
 800a012:	f853 2b04 	ldr.w	r2, [r3], #4
 800a016:	4298      	cmp	r0, r3
 800a018:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a01c:	d8f2      	bhi.n	800a004 <__lshift+0x70>
 800a01e:	1b03      	subs	r3, r0, r4
 800a020:	3b15      	subs	r3, #21
 800a022:	f023 0303 	bic.w	r3, r3, #3
 800a026:	3304      	adds	r3, #4
 800a028:	f104 0215 	add.w	r2, r4, #21
 800a02c:	4290      	cmp	r0, r2
 800a02e:	bf38      	it	cc
 800a030:	2304      	movcc	r3, #4
 800a032:	f841 c003 	str.w	ip, [r1, r3]
 800a036:	f1bc 0f00 	cmp.w	ip, #0
 800a03a:	d001      	beq.n	800a040 <__lshift+0xac>
 800a03c:	f108 0602 	add.w	r6, r8, #2
 800a040:	3e01      	subs	r6, #1
 800a042:	4638      	mov	r0, r7
 800a044:	612e      	str	r6, [r5, #16]
 800a046:	4621      	mov	r1, r4
 800a048:	f7ff fd88 	bl	8009b5c <_Bfree>
 800a04c:	4628      	mov	r0, r5
 800a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a052:	f842 0f04 	str.w	r0, [r2, #4]!
 800a056:	3301      	adds	r3, #1
 800a058:	e7c1      	b.n	8009fde <__lshift+0x4a>
 800a05a:	3904      	subs	r1, #4
 800a05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a060:	f841 2f04 	str.w	r2, [r1, #4]!
 800a064:	4298      	cmp	r0, r3
 800a066:	d8f9      	bhi.n	800a05c <__lshift+0xc8>
 800a068:	e7ea      	b.n	800a040 <__lshift+0xac>
 800a06a:	bf00      	nop
 800a06c:	0800b1f9 	.word	0x0800b1f9
 800a070:	0800b29b 	.word	0x0800b29b

0800a074 <__mcmp>:
 800a074:	b530      	push	{r4, r5, lr}
 800a076:	6902      	ldr	r2, [r0, #16]
 800a078:	690c      	ldr	r4, [r1, #16]
 800a07a:	1b12      	subs	r2, r2, r4
 800a07c:	d10e      	bne.n	800a09c <__mcmp+0x28>
 800a07e:	f100 0314 	add.w	r3, r0, #20
 800a082:	3114      	adds	r1, #20
 800a084:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a088:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a08c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a090:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a094:	42a5      	cmp	r5, r4
 800a096:	d003      	beq.n	800a0a0 <__mcmp+0x2c>
 800a098:	d305      	bcc.n	800a0a6 <__mcmp+0x32>
 800a09a:	2201      	movs	r2, #1
 800a09c:	4610      	mov	r0, r2
 800a09e:	bd30      	pop	{r4, r5, pc}
 800a0a0:	4283      	cmp	r3, r0
 800a0a2:	d3f3      	bcc.n	800a08c <__mcmp+0x18>
 800a0a4:	e7fa      	b.n	800a09c <__mcmp+0x28>
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	e7f7      	b.n	800a09c <__mcmp+0x28>

0800a0ac <__mdiff>:
 800a0ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4690      	mov	r8, r2
 800a0ba:	f7ff ffdb 	bl	800a074 <__mcmp>
 800a0be:	1e05      	subs	r5, r0, #0
 800a0c0:	d110      	bne.n	800a0e4 <__mdiff+0x38>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff fd09 	bl	8009adc <_Balloc>
 800a0ca:	b930      	cbnz	r0, 800a0da <__mdiff+0x2e>
 800a0cc:	4b3a      	ldr	r3, [pc, #232]	; (800a1b8 <__mdiff+0x10c>)
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	f240 2132 	movw	r1, #562	; 0x232
 800a0d4:	4839      	ldr	r0, [pc, #228]	; (800a1bc <__mdiff+0x110>)
 800a0d6:	f000 fe11 	bl	800acfc <__assert_func>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	bfa4      	itt	ge
 800a0e6:	4643      	movge	r3, r8
 800a0e8:	46a0      	movge	r8, r4
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0f0:	bfa6      	itte	ge
 800a0f2:	461c      	movge	r4, r3
 800a0f4:	2500      	movge	r5, #0
 800a0f6:	2501      	movlt	r5, #1
 800a0f8:	f7ff fcf0 	bl	8009adc <_Balloc>
 800a0fc:	b920      	cbnz	r0, 800a108 <__mdiff+0x5c>
 800a0fe:	4b2e      	ldr	r3, [pc, #184]	; (800a1b8 <__mdiff+0x10c>)
 800a100:	4602      	mov	r2, r0
 800a102:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a106:	e7e5      	b.n	800a0d4 <__mdiff+0x28>
 800a108:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a10c:	6926      	ldr	r6, [r4, #16]
 800a10e:	60c5      	str	r5, [r0, #12]
 800a110:	f104 0914 	add.w	r9, r4, #20
 800a114:	f108 0514 	add.w	r5, r8, #20
 800a118:	f100 0e14 	add.w	lr, r0, #20
 800a11c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a120:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a124:	f108 0210 	add.w	r2, r8, #16
 800a128:	46f2      	mov	sl, lr
 800a12a:	2100      	movs	r1, #0
 800a12c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a130:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a134:	fa1f f883 	uxth.w	r8, r3
 800a138:	fa11 f18b 	uxtah	r1, r1, fp
 800a13c:	0c1b      	lsrs	r3, r3, #16
 800a13e:	eba1 0808 	sub.w	r8, r1, r8
 800a142:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a146:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a14a:	fa1f f888 	uxth.w	r8, r8
 800a14e:	1419      	asrs	r1, r3, #16
 800a150:	454e      	cmp	r6, r9
 800a152:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a156:	f84a 3b04 	str.w	r3, [sl], #4
 800a15a:	d8e7      	bhi.n	800a12c <__mdiff+0x80>
 800a15c:	1b33      	subs	r3, r6, r4
 800a15e:	3b15      	subs	r3, #21
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	3304      	adds	r3, #4
 800a166:	3415      	adds	r4, #21
 800a168:	42a6      	cmp	r6, r4
 800a16a:	bf38      	it	cc
 800a16c:	2304      	movcc	r3, #4
 800a16e:	441d      	add	r5, r3
 800a170:	4473      	add	r3, lr
 800a172:	469e      	mov	lr, r3
 800a174:	462e      	mov	r6, r5
 800a176:	4566      	cmp	r6, ip
 800a178:	d30e      	bcc.n	800a198 <__mdiff+0xec>
 800a17a:	f10c 0203 	add.w	r2, ip, #3
 800a17e:	1b52      	subs	r2, r2, r5
 800a180:	f022 0203 	bic.w	r2, r2, #3
 800a184:	3d03      	subs	r5, #3
 800a186:	45ac      	cmp	ip, r5
 800a188:	bf38      	it	cc
 800a18a:	2200      	movcc	r2, #0
 800a18c:	441a      	add	r2, r3
 800a18e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a192:	b17b      	cbz	r3, 800a1b4 <__mdiff+0x108>
 800a194:	6107      	str	r7, [r0, #16]
 800a196:	e7a3      	b.n	800a0e0 <__mdiff+0x34>
 800a198:	f856 8b04 	ldr.w	r8, [r6], #4
 800a19c:	fa11 f288 	uxtah	r2, r1, r8
 800a1a0:	1414      	asrs	r4, r2, #16
 800a1a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1a6:	b292      	uxth	r2, r2
 800a1a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1ac:	f84e 2b04 	str.w	r2, [lr], #4
 800a1b0:	1421      	asrs	r1, r4, #16
 800a1b2:	e7e0      	b.n	800a176 <__mdiff+0xca>
 800a1b4:	3f01      	subs	r7, #1
 800a1b6:	e7ea      	b.n	800a18e <__mdiff+0xe2>
 800a1b8:	0800b1f9 	.word	0x0800b1f9
 800a1bc:	0800b29b 	.word	0x0800b29b

0800a1c0 <__ulp>:
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	ed8d 0b00 	vstr	d0, [sp]
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	4912      	ldr	r1, [pc, #72]	; (800a214 <__ulp+0x54>)
 800a1ca:	4019      	ands	r1, r3
 800a1cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a1d0:	2900      	cmp	r1, #0
 800a1d2:	dd05      	ble.n	800a1e0 <__ulp+0x20>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	ec43 2b10 	vmov	d0, r2, r3
 800a1dc:	b002      	add	sp, #8
 800a1de:	4770      	bx	lr
 800a1e0:	4249      	negs	r1, r1
 800a1e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a1e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a1ea:	f04f 0200 	mov.w	r2, #0
 800a1ee:	f04f 0300 	mov.w	r3, #0
 800a1f2:	da04      	bge.n	800a1fe <__ulp+0x3e>
 800a1f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a1f8:	fa41 f300 	asr.w	r3, r1, r0
 800a1fc:	e7ec      	b.n	800a1d8 <__ulp+0x18>
 800a1fe:	f1a0 0114 	sub.w	r1, r0, #20
 800a202:	291e      	cmp	r1, #30
 800a204:	bfda      	itte	le
 800a206:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a20a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a20e:	2101      	movgt	r1, #1
 800a210:	460a      	mov	r2, r1
 800a212:	e7e1      	b.n	800a1d8 <__ulp+0x18>
 800a214:	7ff00000 	.word	0x7ff00000

0800a218 <__b2d>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	6905      	ldr	r5, [r0, #16]
 800a21c:	f100 0714 	add.w	r7, r0, #20
 800a220:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a224:	1f2e      	subs	r6, r5, #4
 800a226:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7ff fd48 	bl	8009cc0 <__hi0bits>
 800a230:	f1c0 0320 	rsb	r3, r0, #32
 800a234:	280a      	cmp	r0, #10
 800a236:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a2b4 <__b2d+0x9c>
 800a23a:	600b      	str	r3, [r1, #0]
 800a23c:	dc14      	bgt.n	800a268 <__b2d+0x50>
 800a23e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a242:	fa24 f10e 	lsr.w	r1, r4, lr
 800a246:	42b7      	cmp	r7, r6
 800a248:	ea41 030c 	orr.w	r3, r1, ip
 800a24c:	bf34      	ite	cc
 800a24e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a252:	2100      	movcs	r1, #0
 800a254:	3015      	adds	r0, #21
 800a256:	fa04 f000 	lsl.w	r0, r4, r0
 800a25a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a25e:	ea40 0201 	orr.w	r2, r0, r1
 800a262:	ec43 2b10 	vmov	d0, r2, r3
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a268:	42b7      	cmp	r7, r6
 800a26a:	bf3a      	itte	cc
 800a26c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a270:	f1a5 0608 	subcc.w	r6, r5, #8
 800a274:	2100      	movcs	r1, #0
 800a276:	380b      	subs	r0, #11
 800a278:	d017      	beq.n	800a2aa <__b2d+0x92>
 800a27a:	f1c0 0c20 	rsb	ip, r0, #32
 800a27e:	fa04 f500 	lsl.w	r5, r4, r0
 800a282:	42be      	cmp	r6, r7
 800a284:	fa21 f40c 	lsr.w	r4, r1, ip
 800a288:	ea45 0504 	orr.w	r5, r5, r4
 800a28c:	bf8c      	ite	hi
 800a28e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a292:	2400      	movls	r4, #0
 800a294:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a298:	fa01 f000 	lsl.w	r0, r1, r0
 800a29c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a2a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2a4:	ea40 0204 	orr.w	r2, r0, r4
 800a2a8:	e7db      	b.n	800a262 <__b2d+0x4a>
 800a2aa:	ea44 030c 	orr.w	r3, r4, ip
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	e7d7      	b.n	800a262 <__b2d+0x4a>
 800a2b2:	bf00      	nop
 800a2b4:	3ff00000 	.word	0x3ff00000

0800a2b8 <__d2b>:
 800a2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2bc:	4689      	mov	r9, r1
 800a2be:	2101      	movs	r1, #1
 800a2c0:	ec57 6b10 	vmov	r6, r7, d0
 800a2c4:	4690      	mov	r8, r2
 800a2c6:	f7ff fc09 	bl	8009adc <_Balloc>
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	b930      	cbnz	r0, 800a2dc <__d2b+0x24>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	4b25      	ldr	r3, [pc, #148]	; (800a368 <__d2b+0xb0>)
 800a2d2:	4826      	ldr	r0, [pc, #152]	; (800a36c <__d2b+0xb4>)
 800a2d4:	f240 310a 	movw	r1, #778	; 0x30a
 800a2d8:	f000 fd10 	bl	800acfc <__assert_func>
 800a2dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2e4:	bb35      	cbnz	r5, 800a334 <__d2b+0x7c>
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	d028      	beq.n	800a33e <__d2b+0x86>
 800a2ec:	4668      	mov	r0, sp
 800a2ee:	9600      	str	r6, [sp, #0]
 800a2f0:	f7ff fd06 	bl	8009d00 <__lo0bits>
 800a2f4:	9900      	ldr	r1, [sp, #0]
 800a2f6:	b300      	cbz	r0, 800a33a <__d2b+0x82>
 800a2f8:	9a01      	ldr	r2, [sp, #4]
 800a2fa:	f1c0 0320 	rsb	r3, r0, #32
 800a2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a302:	430b      	orrs	r3, r1
 800a304:	40c2      	lsrs	r2, r0
 800a306:	6163      	str	r3, [r4, #20]
 800a308:	9201      	str	r2, [sp, #4]
 800a30a:	9b01      	ldr	r3, [sp, #4]
 800a30c:	61a3      	str	r3, [r4, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bf14      	ite	ne
 800a312:	2202      	movne	r2, #2
 800a314:	2201      	moveq	r2, #1
 800a316:	6122      	str	r2, [r4, #16]
 800a318:	b1d5      	cbz	r5, 800a350 <__d2b+0x98>
 800a31a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a31e:	4405      	add	r5, r0
 800a320:	f8c9 5000 	str.w	r5, [r9]
 800a324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a328:	f8c8 0000 	str.w	r0, [r8]
 800a32c:	4620      	mov	r0, r4
 800a32e:	b003      	add	sp, #12
 800a330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a338:	e7d5      	b.n	800a2e6 <__d2b+0x2e>
 800a33a:	6161      	str	r1, [r4, #20]
 800a33c:	e7e5      	b.n	800a30a <__d2b+0x52>
 800a33e:	a801      	add	r0, sp, #4
 800a340:	f7ff fcde 	bl	8009d00 <__lo0bits>
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	6163      	str	r3, [r4, #20]
 800a348:	2201      	movs	r2, #1
 800a34a:	6122      	str	r2, [r4, #16]
 800a34c:	3020      	adds	r0, #32
 800a34e:	e7e3      	b.n	800a318 <__d2b+0x60>
 800a350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a358:	f8c9 0000 	str.w	r0, [r9]
 800a35c:	6918      	ldr	r0, [r3, #16]
 800a35e:	f7ff fcaf 	bl	8009cc0 <__hi0bits>
 800a362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a366:	e7df      	b.n	800a328 <__d2b+0x70>
 800a368:	0800b1f9 	.word	0x0800b1f9
 800a36c:	0800b29b 	.word	0x0800b29b

0800a370 <__ratio>:
 800a370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4688      	mov	r8, r1
 800a376:	4669      	mov	r1, sp
 800a378:	4681      	mov	r9, r0
 800a37a:	f7ff ff4d 	bl	800a218 <__b2d>
 800a37e:	a901      	add	r1, sp, #4
 800a380:	4640      	mov	r0, r8
 800a382:	ec55 4b10 	vmov	r4, r5, d0
 800a386:	f7ff ff47 	bl	800a218 <__b2d>
 800a38a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a38e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a392:	eba3 0c02 	sub.w	ip, r3, r2
 800a396:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a39a:	1a9b      	subs	r3, r3, r2
 800a39c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3a0:	ec51 0b10 	vmov	r0, r1, d0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bfd6      	itet	le
 800a3a8:	460a      	movle	r2, r1
 800a3aa:	462a      	movgt	r2, r5
 800a3ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3b0:	468b      	mov	fp, r1
 800a3b2:	462f      	mov	r7, r5
 800a3b4:	bfd4      	ite	le
 800a3b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3be:	4620      	mov	r0, r4
 800a3c0:	ee10 2a10 	vmov	r2, s0
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	f7f6 fa50 	bl	800086c <__aeabi_ddiv>
 800a3cc:	ec41 0b10 	vmov	d0, r0, r1
 800a3d0:	b003      	add	sp, #12
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3d6 <__copybits>:
 800a3d6:	3901      	subs	r1, #1
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	1149      	asrs	r1, r1, #5
 800a3dc:	6914      	ldr	r4, [r2, #16]
 800a3de:	3101      	adds	r1, #1
 800a3e0:	f102 0314 	add.w	r3, r2, #20
 800a3e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3ec:	1f05      	subs	r5, r0, #4
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	d30c      	bcc.n	800a40c <__copybits+0x36>
 800a3f2:	1aa3      	subs	r3, r4, r2
 800a3f4:	3b11      	subs	r3, #17
 800a3f6:	f023 0303 	bic.w	r3, r3, #3
 800a3fa:	3211      	adds	r2, #17
 800a3fc:	42a2      	cmp	r2, r4
 800a3fe:	bf88      	it	hi
 800a400:	2300      	movhi	r3, #0
 800a402:	4418      	add	r0, r3
 800a404:	2300      	movs	r3, #0
 800a406:	4288      	cmp	r0, r1
 800a408:	d305      	bcc.n	800a416 <__copybits+0x40>
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a410:	f845 6f04 	str.w	r6, [r5, #4]!
 800a414:	e7eb      	b.n	800a3ee <__copybits+0x18>
 800a416:	f840 3b04 	str.w	r3, [r0], #4
 800a41a:	e7f4      	b.n	800a406 <__copybits+0x30>

0800a41c <__any_on>:
 800a41c:	f100 0214 	add.w	r2, r0, #20
 800a420:	6900      	ldr	r0, [r0, #16]
 800a422:	114b      	asrs	r3, r1, #5
 800a424:	4298      	cmp	r0, r3
 800a426:	b510      	push	{r4, lr}
 800a428:	db11      	blt.n	800a44e <__any_on+0x32>
 800a42a:	dd0a      	ble.n	800a442 <__any_on+0x26>
 800a42c:	f011 011f 	ands.w	r1, r1, #31
 800a430:	d007      	beq.n	800a442 <__any_on+0x26>
 800a432:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a436:	fa24 f001 	lsr.w	r0, r4, r1
 800a43a:	fa00 f101 	lsl.w	r1, r0, r1
 800a43e:	428c      	cmp	r4, r1
 800a440:	d10b      	bne.n	800a45a <__any_on+0x3e>
 800a442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a446:	4293      	cmp	r3, r2
 800a448:	d803      	bhi.n	800a452 <__any_on+0x36>
 800a44a:	2000      	movs	r0, #0
 800a44c:	bd10      	pop	{r4, pc}
 800a44e:	4603      	mov	r3, r0
 800a450:	e7f7      	b.n	800a442 <__any_on+0x26>
 800a452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a456:	2900      	cmp	r1, #0
 800a458:	d0f5      	beq.n	800a446 <__any_on+0x2a>
 800a45a:	2001      	movs	r0, #1
 800a45c:	e7f6      	b.n	800a44c <__any_on+0x30>

0800a45e <_calloc_r>:
 800a45e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a460:	fba1 2402 	umull	r2, r4, r1, r2
 800a464:	b94c      	cbnz	r4, 800a47a <_calloc_r+0x1c>
 800a466:	4611      	mov	r1, r2
 800a468:	9201      	str	r2, [sp, #4]
 800a46a:	f7fd fea1 	bl	80081b0 <_malloc_r>
 800a46e:	9a01      	ldr	r2, [sp, #4]
 800a470:	4605      	mov	r5, r0
 800a472:	b930      	cbnz	r0, 800a482 <_calloc_r+0x24>
 800a474:	4628      	mov	r0, r5
 800a476:	b003      	add	sp, #12
 800a478:	bd30      	pop	{r4, r5, pc}
 800a47a:	220c      	movs	r2, #12
 800a47c:	6002      	str	r2, [r0, #0]
 800a47e:	2500      	movs	r5, #0
 800a480:	e7f8      	b.n	800a474 <_calloc_r+0x16>
 800a482:	4621      	mov	r1, r4
 800a484:	f7fd fe6b 	bl	800815e <memset>
 800a488:	e7f4      	b.n	800a474 <_calloc_r+0x16>
	...

0800a48c <_free_r>:
 800a48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a48e:	2900      	cmp	r1, #0
 800a490:	d044      	beq.n	800a51c <_free_r+0x90>
 800a492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a496:	9001      	str	r0, [sp, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f1a1 0404 	sub.w	r4, r1, #4
 800a49e:	bfb8      	it	lt
 800a4a0:	18e4      	addlt	r4, r4, r3
 800a4a2:	f7ff fb0f 	bl	8009ac4 <__malloc_lock>
 800a4a6:	4a1e      	ldr	r2, [pc, #120]	; (800a520 <_free_r+0x94>)
 800a4a8:	9801      	ldr	r0, [sp, #4]
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	b933      	cbnz	r3, 800a4bc <_free_r+0x30>
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	6014      	str	r4, [r2, #0]
 800a4b2:	b003      	add	sp, #12
 800a4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4b8:	f7ff bb0a 	b.w	8009ad0 <__malloc_unlock>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d908      	bls.n	800a4d2 <_free_r+0x46>
 800a4c0:	6825      	ldr	r5, [r4, #0]
 800a4c2:	1961      	adds	r1, r4, r5
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	bf01      	itttt	eq
 800a4c8:	6819      	ldreq	r1, [r3, #0]
 800a4ca:	685b      	ldreq	r3, [r3, #4]
 800a4cc:	1949      	addeq	r1, r1, r5
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	e7ed      	b.n	800a4ae <_free_r+0x22>
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	b10b      	cbz	r3, 800a4dc <_free_r+0x50>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d9fa      	bls.n	800a4d2 <_free_r+0x46>
 800a4dc:	6811      	ldr	r1, [r2, #0]
 800a4de:	1855      	adds	r5, r2, r1
 800a4e0:	42a5      	cmp	r5, r4
 800a4e2:	d10b      	bne.n	800a4fc <_free_r+0x70>
 800a4e4:	6824      	ldr	r4, [r4, #0]
 800a4e6:	4421      	add	r1, r4
 800a4e8:	1854      	adds	r4, r2, r1
 800a4ea:	42a3      	cmp	r3, r4
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	d1e0      	bne.n	800a4b2 <_free_r+0x26>
 800a4f0:	681c      	ldr	r4, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	6053      	str	r3, [r2, #4]
 800a4f6:	4421      	add	r1, r4
 800a4f8:	6011      	str	r1, [r2, #0]
 800a4fa:	e7da      	b.n	800a4b2 <_free_r+0x26>
 800a4fc:	d902      	bls.n	800a504 <_free_r+0x78>
 800a4fe:	230c      	movs	r3, #12
 800a500:	6003      	str	r3, [r0, #0]
 800a502:	e7d6      	b.n	800a4b2 <_free_r+0x26>
 800a504:	6825      	ldr	r5, [r4, #0]
 800a506:	1961      	adds	r1, r4, r5
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf04      	itt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	6063      	str	r3, [r4, #4]
 800a512:	bf04      	itt	eq
 800a514:	1949      	addeq	r1, r1, r5
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	6054      	str	r4, [r2, #4]
 800a51a:	e7ca      	b.n	800a4b2 <_free_r+0x26>
 800a51c:	b003      	add	sp, #12
 800a51e:	bd30      	pop	{r4, r5, pc}
 800a520:	20003130 	.word	0x20003130

0800a524 <__sfputc_r>:
 800a524:	6893      	ldr	r3, [r2, #8]
 800a526:	3b01      	subs	r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	b410      	push	{r4}
 800a52c:	6093      	str	r3, [r2, #8]
 800a52e:	da08      	bge.n	800a542 <__sfputc_r+0x1e>
 800a530:	6994      	ldr	r4, [r2, #24]
 800a532:	42a3      	cmp	r3, r4
 800a534:	db01      	blt.n	800a53a <__sfputc_r+0x16>
 800a536:	290a      	cmp	r1, #10
 800a538:	d103      	bne.n	800a542 <__sfputc_r+0x1e>
 800a53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a53e:	f000 bb0f 	b.w	800ab60 <__swbuf_r>
 800a542:	6813      	ldr	r3, [r2, #0]
 800a544:	1c58      	adds	r0, r3, #1
 800a546:	6010      	str	r0, [r2, #0]
 800a548:	7019      	strb	r1, [r3, #0]
 800a54a:	4608      	mov	r0, r1
 800a54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <__sfputs_r>:
 800a552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a554:	4606      	mov	r6, r0
 800a556:	460f      	mov	r7, r1
 800a558:	4614      	mov	r4, r2
 800a55a:	18d5      	adds	r5, r2, r3
 800a55c:	42ac      	cmp	r4, r5
 800a55e:	d101      	bne.n	800a564 <__sfputs_r+0x12>
 800a560:	2000      	movs	r0, #0
 800a562:	e007      	b.n	800a574 <__sfputs_r+0x22>
 800a564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a568:	463a      	mov	r2, r7
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff ffda 	bl	800a524 <__sfputc_r>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d1f3      	bne.n	800a55c <__sfputs_r+0xa>
 800a574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a578 <_vfiprintf_r>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	460d      	mov	r5, r1
 800a57e:	b09d      	sub	sp, #116	; 0x74
 800a580:	4614      	mov	r4, r2
 800a582:	4698      	mov	r8, r3
 800a584:	4606      	mov	r6, r0
 800a586:	b118      	cbz	r0, 800a590 <_vfiprintf_r+0x18>
 800a588:	6983      	ldr	r3, [r0, #24]
 800a58a:	b90b      	cbnz	r3, 800a590 <_vfiprintf_r+0x18>
 800a58c:	f7fd fd14 	bl	8007fb8 <__sinit>
 800a590:	4b89      	ldr	r3, [pc, #548]	; (800a7b8 <_vfiprintf_r+0x240>)
 800a592:	429d      	cmp	r5, r3
 800a594:	d11b      	bne.n	800a5ce <_vfiprintf_r+0x56>
 800a596:	6875      	ldr	r5, [r6, #4]
 800a598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a59a:	07d9      	lsls	r1, r3, #31
 800a59c:	d405      	bmi.n	800a5aa <_vfiprintf_r+0x32>
 800a59e:	89ab      	ldrh	r3, [r5, #12]
 800a5a0:	059a      	lsls	r2, r3, #22
 800a5a2:	d402      	bmi.n	800a5aa <_vfiprintf_r+0x32>
 800a5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5a6:	f7fd fdca 	bl	800813e <__retarget_lock_acquire_recursive>
 800a5aa:	89ab      	ldrh	r3, [r5, #12]
 800a5ac:	071b      	lsls	r3, r3, #28
 800a5ae:	d501      	bpl.n	800a5b4 <_vfiprintf_r+0x3c>
 800a5b0:	692b      	ldr	r3, [r5, #16]
 800a5b2:	b9eb      	cbnz	r3, 800a5f0 <_vfiprintf_r+0x78>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f000 fb32 	bl	800ac20 <__swsetup_r>
 800a5bc:	b1c0      	cbz	r0, 800a5f0 <_vfiprintf_r+0x78>
 800a5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5c0:	07dc      	lsls	r4, r3, #31
 800a5c2:	d50e      	bpl.n	800a5e2 <_vfiprintf_r+0x6a>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	b01d      	add	sp, #116	; 0x74
 800a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ce:	4b7b      	ldr	r3, [pc, #492]	; (800a7bc <_vfiprintf_r+0x244>)
 800a5d0:	429d      	cmp	r5, r3
 800a5d2:	d101      	bne.n	800a5d8 <_vfiprintf_r+0x60>
 800a5d4:	68b5      	ldr	r5, [r6, #8]
 800a5d6:	e7df      	b.n	800a598 <_vfiprintf_r+0x20>
 800a5d8:	4b79      	ldr	r3, [pc, #484]	; (800a7c0 <_vfiprintf_r+0x248>)
 800a5da:	429d      	cmp	r5, r3
 800a5dc:	bf08      	it	eq
 800a5de:	68f5      	ldreq	r5, [r6, #12]
 800a5e0:	e7da      	b.n	800a598 <_vfiprintf_r+0x20>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	0598      	lsls	r0, r3, #22
 800a5e6:	d4ed      	bmi.n	800a5c4 <_vfiprintf_r+0x4c>
 800a5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ea:	f7fd fda9 	bl	8008140 <__retarget_lock_release_recursive>
 800a5ee:	e7e9      	b.n	800a5c4 <_vfiprintf_r+0x4c>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5fe:	2330      	movs	r3, #48	; 0x30
 800a600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7c4 <_vfiprintf_r+0x24c>
 800a604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a608:	f04f 0901 	mov.w	r9, #1
 800a60c:	4623      	mov	r3, r4
 800a60e:	469a      	mov	sl, r3
 800a610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a614:	b10a      	cbz	r2, 800a61a <_vfiprintf_r+0xa2>
 800a616:	2a25      	cmp	r2, #37	; 0x25
 800a618:	d1f9      	bne.n	800a60e <_vfiprintf_r+0x96>
 800a61a:	ebba 0b04 	subs.w	fp, sl, r4
 800a61e:	d00b      	beq.n	800a638 <_vfiprintf_r+0xc0>
 800a620:	465b      	mov	r3, fp
 800a622:	4622      	mov	r2, r4
 800a624:	4629      	mov	r1, r5
 800a626:	4630      	mov	r0, r6
 800a628:	f7ff ff93 	bl	800a552 <__sfputs_r>
 800a62c:	3001      	adds	r0, #1
 800a62e:	f000 80aa 	beq.w	800a786 <_vfiprintf_r+0x20e>
 800a632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a634:	445a      	add	r2, fp
 800a636:	9209      	str	r2, [sp, #36]	; 0x24
 800a638:	f89a 3000 	ldrb.w	r3, [sl]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80a2 	beq.w	800a786 <_vfiprintf_r+0x20e>
 800a642:	2300      	movs	r3, #0
 800a644:	f04f 32ff 	mov.w	r2, #4294967295
 800a648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a64c:	f10a 0a01 	add.w	sl, sl, #1
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a658:	931a      	str	r3, [sp, #104]	; 0x68
 800a65a:	4654      	mov	r4, sl
 800a65c:	2205      	movs	r2, #5
 800a65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a662:	4858      	ldr	r0, [pc, #352]	; (800a7c4 <_vfiprintf_r+0x24c>)
 800a664:	f7f5 fdcc 	bl	8000200 <memchr>
 800a668:	9a04      	ldr	r2, [sp, #16]
 800a66a:	b9d8      	cbnz	r0, 800a6a4 <_vfiprintf_r+0x12c>
 800a66c:	06d1      	lsls	r1, r2, #27
 800a66e:	bf44      	itt	mi
 800a670:	2320      	movmi	r3, #32
 800a672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a676:	0713      	lsls	r3, r2, #28
 800a678:	bf44      	itt	mi
 800a67a:	232b      	movmi	r3, #43	; 0x2b
 800a67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a680:	f89a 3000 	ldrb.w	r3, [sl]
 800a684:	2b2a      	cmp	r3, #42	; 0x2a
 800a686:	d015      	beq.n	800a6b4 <_vfiprintf_r+0x13c>
 800a688:	9a07      	ldr	r2, [sp, #28]
 800a68a:	4654      	mov	r4, sl
 800a68c:	2000      	movs	r0, #0
 800a68e:	f04f 0c0a 	mov.w	ip, #10
 800a692:	4621      	mov	r1, r4
 800a694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a698:	3b30      	subs	r3, #48	; 0x30
 800a69a:	2b09      	cmp	r3, #9
 800a69c:	d94e      	bls.n	800a73c <_vfiprintf_r+0x1c4>
 800a69e:	b1b0      	cbz	r0, 800a6ce <_vfiprintf_r+0x156>
 800a6a0:	9207      	str	r2, [sp, #28]
 800a6a2:	e014      	b.n	800a6ce <_vfiprintf_r+0x156>
 800a6a4:	eba0 0308 	sub.w	r3, r0, r8
 800a6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	46a2      	mov	sl, r4
 800a6b2:	e7d2      	b.n	800a65a <_vfiprintf_r+0xe2>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	1d19      	adds	r1, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9103      	str	r1, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bfbb      	ittet	lt
 800a6c0:	425b      	neglt	r3, r3
 800a6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c6:	9307      	strge	r3, [sp, #28]
 800a6c8:	9307      	strlt	r3, [sp, #28]
 800a6ca:	bfb8      	it	lt
 800a6cc:	9204      	strlt	r2, [sp, #16]
 800a6ce:	7823      	ldrb	r3, [r4, #0]
 800a6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d2:	d10c      	bne.n	800a6ee <_vfiprintf_r+0x176>
 800a6d4:	7863      	ldrb	r3, [r4, #1]
 800a6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d8:	d135      	bne.n	800a746 <_vfiprintf_r+0x1ce>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	9203      	str	r2, [sp, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfb8      	it	lt
 800a6e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ea:	3402      	adds	r4, #2
 800a6ec:	9305      	str	r3, [sp, #20]
 800a6ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7d4 <_vfiprintf_r+0x25c>
 800a6f2:	7821      	ldrb	r1, [r4, #0]
 800a6f4:	2203      	movs	r2, #3
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	f7f5 fd82 	bl	8000200 <memchr>
 800a6fc:	b140      	cbz	r0, 800a710 <_vfiprintf_r+0x198>
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	eba0 000a 	sub.w	r0, r0, sl
 800a704:	fa03 f000 	lsl.w	r0, r3, r0
 800a708:	9b04      	ldr	r3, [sp, #16]
 800a70a:	4303      	orrs	r3, r0
 800a70c:	3401      	adds	r4, #1
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a714:	482c      	ldr	r0, [pc, #176]	; (800a7c8 <_vfiprintf_r+0x250>)
 800a716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a71a:	2206      	movs	r2, #6
 800a71c:	f7f5 fd70 	bl	8000200 <memchr>
 800a720:	2800      	cmp	r0, #0
 800a722:	d03f      	beq.n	800a7a4 <_vfiprintf_r+0x22c>
 800a724:	4b29      	ldr	r3, [pc, #164]	; (800a7cc <_vfiprintf_r+0x254>)
 800a726:	bb1b      	cbnz	r3, 800a770 <_vfiprintf_r+0x1f8>
 800a728:	9b03      	ldr	r3, [sp, #12]
 800a72a:	3307      	adds	r3, #7
 800a72c:	f023 0307 	bic.w	r3, r3, #7
 800a730:	3308      	adds	r3, #8
 800a732:	9303      	str	r3, [sp, #12]
 800a734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a736:	443b      	add	r3, r7
 800a738:	9309      	str	r3, [sp, #36]	; 0x24
 800a73a:	e767      	b.n	800a60c <_vfiprintf_r+0x94>
 800a73c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a740:	460c      	mov	r4, r1
 800a742:	2001      	movs	r0, #1
 800a744:	e7a5      	b.n	800a692 <_vfiprintf_r+0x11a>
 800a746:	2300      	movs	r3, #0
 800a748:	3401      	adds	r4, #1
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	4619      	mov	r1, r3
 800a74e:	f04f 0c0a 	mov.w	ip, #10
 800a752:	4620      	mov	r0, r4
 800a754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a758:	3a30      	subs	r2, #48	; 0x30
 800a75a:	2a09      	cmp	r2, #9
 800a75c:	d903      	bls.n	800a766 <_vfiprintf_r+0x1ee>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0c5      	beq.n	800a6ee <_vfiprintf_r+0x176>
 800a762:	9105      	str	r1, [sp, #20]
 800a764:	e7c3      	b.n	800a6ee <_vfiprintf_r+0x176>
 800a766:	fb0c 2101 	mla	r1, ip, r1, r2
 800a76a:	4604      	mov	r4, r0
 800a76c:	2301      	movs	r3, #1
 800a76e:	e7f0      	b.n	800a752 <_vfiprintf_r+0x1da>
 800a770:	ab03      	add	r3, sp, #12
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	462a      	mov	r2, r5
 800a776:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <_vfiprintf_r+0x258>)
 800a778:	a904      	add	r1, sp, #16
 800a77a:	4630      	mov	r0, r6
 800a77c:	f3af 8000 	nop.w
 800a780:	4607      	mov	r7, r0
 800a782:	1c78      	adds	r0, r7, #1
 800a784:	d1d6      	bne.n	800a734 <_vfiprintf_r+0x1bc>
 800a786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a788:	07d9      	lsls	r1, r3, #31
 800a78a:	d405      	bmi.n	800a798 <_vfiprintf_r+0x220>
 800a78c:	89ab      	ldrh	r3, [r5, #12]
 800a78e:	059a      	lsls	r2, r3, #22
 800a790:	d402      	bmi.n	800a798 <_vfiprintf_r+0x220>
 800a792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a794:	f7fd fcd4 	bl	8008140 <__retarget_lock_release_recursive>
 800a798:	89ab      	ldrh	r3, [r5, #12]
 800a79a:	065b      	lsls	r3, r3, #25
 800a79c:	f53f af12 	bmi.w	800a5c4 <_vfiprintf_r+0x4c>
 800a7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7a2:	e711      	b.n	800a5c8 <_vfiprintf_r+0x50>
 800a7a4:	ab03      	add	r3, sp, #12
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <_vfiprintf_r+0x258>)
 800a7ac:	a904      	add	r1, sp, #16
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f000 f880 	bl	800a8b4 <_printf_i>
 800a7b4:	e7e4      	b.n	800a780 <_vfiprintf_r+0x208>
 800a7b6:	bf00      	nop
 800a7b8:	0800b054 	.word	0x0800b054
 800a7bc:	0800b074 	.word	0x0800b074
 800a7c0:	0800b034 	.word	0x0800b034
 800a7c4:	0800b3f4 	.word	0x0800b3f4
 800a7c8:	0800b3fe 	.word	0x0800b3fe
 800a7cc:	00000000 	.word	0x00000000
 800a7d0:	0800a553 	.word	0x0800a553
 800a7d4:	0800b3fa 	.word	0x0800b3fa

0800a7d8 <_printf_common>:
 800a7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	4616      	mov	r6, r2
 800a7de:	4699      	mov	r9, r3
 800a7e0:	688a      	ldr	r2, [r1, #8]
 800a7e2:	690b      	ldr	r3, [r1, #16]
 800a7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	bfb8      	it	lt
 800a7ec:	4613      	movlt	r3, r2
 800a7ee:	6033      	str	r3, [r6, #0]
 800a7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	b10a      	cbz	r2, 800a7fe <_printf_common+0x26>
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	6033      	str	r3, [r6, #0]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	0699      	lsls	r1, r3, #26
 800a802:	bf42      	ittt	mi
 800a804:	6833      	ldrmi	r3, [r6, #0]
 800a806:	3302      	addmi	r3, #2
 800a808:	6033      	strmi	r3, [r6, #0]
 800a80a:	6825      	ldr	r5, [r4, #0]
 800a80c:	f015 0506 	ands.w	r5, r5, #6
 800a810:	d106      	bne.n	800a820 <_printf_common+0x48>
 800a812:	f104 0a19 	add.w	sl, r4, #25
 800a816:	68e3      	ldr	r3, [r4, #12]
 800a818:	6832      	ldr	r2, [r6, #0]
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	dc26      	bgt.n	800a86e <_printf_common+0x96>
 800a820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a824:	1e13      	subs	r3, r2, #0
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	bf18      	it	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	0692      	lsls	r2, r2, #26
 800a82e:	d42b      	bmi.n	800a888 <_printf_common+0xb0>
 800a830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a834:	4649      	mov	r1, r9
 800a836:	4638      	mov	r0, r7
 800a838:	47c0      	blx	r8
 800a83a:	3001      	adds	r0, #1
 800a83c:	d01e      	beq.n	800a87c <_printf_common+0xa4>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	68e5      	ldr	r5, [r4, #12]
 800a842:	6832      	ldr	r2, [r6, #0]
 800a844:	f003 0306 	and.w	r3, r3, #6
 800a848:	2b04      	cmp	r3, #4
 800a84a:	bf08      	it	eq
 800a84c:	1aad      	subeq	r5, r5, r2
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	bf0c      	ite	eq
 800a854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a858:	2500      	movne	r5, #0
 800a85a:	4293      	cmp	r3, r2
 800a85c:	bfc4      	itt	gt
 800a85e:	1a9b      	subgt	r3, r3, r2
 800a860:	18ed      	addgt	r5, r5, r3
 800a862:	2600      	movs	r6, #0
 800a864:	341a      	adds	r4, #26
 800a866:	42b5      	cmp	r5, r6
 800a868:	d11a      	bne.n	800a8a0 <_printf_common+0xc8>
 800a86a:	2000      	movs	r0, #0
 800a86c:	e008      	b.n	800a880 <_printf_common+0xa8>
 800a86e:	2301      	movs	r3, #1
 800a870:	4652      	mov	r2, sl
 800a872:	4649      	mov	r1, r9
 800a874:	4638      	mov	r0, r7
 800a876:	47c0      	blx	r8
 800a878:	3001      	adds	r0, #1
 800a87a:	d103      	bne.n	800a884 <_printf_common+0xac>
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295
 800a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a884:	3501      	adds	r5, #1
 800a886:	e7c6      	b.n	800a816 <_printf_common+0x3e>
 800a888:	18e1      	adds	r1, r4, r3
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	2030      	movs	r0, #48	; 0x30
 800a88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a892:	4422      	add	r2, r4
 800a894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a89c:	3302      	adds	r3, #2
 800a89e:	e7c7      	b.n	800a830 <_printf_common+0x58>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c0      	blx	r8
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d0e6      	beq.n	800a87c <_printf_common+0xa4>
 800a8ae:	3601      	adds	r6, #1
 800a8b0:	e7d9      	b.n	800a866 <_printf_common+0x8e>
	...

0800a8b4 <_printf_i>:
 800a8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8bc:	2f78      	cmp	r7, #120	; 0x78
 800a8be:	4691      	mov	r9, r2
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	469a      	mov	sl, r3
 800a8c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8ca:	d807      	bhi.n	800a8dc <_printf_i+0x28>
 800a8cc:	2f62      	cmp	r7, #98	; 0x62
 800a8ce:	d80a      	bhi.n	800a8e6 <_printf_i+0x32>
 800a8d0:	2f00      	cmp	r7, #0
 800a8d2:	f000 80d8 	beq.w	800aa86 <_printf_i+0x1d2>
 800a8d6:	2f58      	cmp	r7, #88	; 0x58
 800a8d8:	f000 80a3 	beq.w	800aa22 <_printf_i+0x16e>
 800a8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8e4:	e03a      	b.n	800a95c <_printf_i+0xa8>
 800a8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ea:	2b15      	cmp	r3, #21
 800a8ec:	d8f6      	bhi.n	800a8dc <_printf_i+0x28>
 800a8ee:	a101      	add	r1, pc, #4	; (adr r1, 800a8f4 <_printf_i+0x40>)
 800a8f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f4:	0800a94d 	.word	0x0800a94d
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a8dd 	.word	0x0800a8dd
 800a900:	0800a8dd 	.word	0x0800a8dd
 800a904:	0800a8dd 	.word	0x0800a8dd
 800a908:	0800a8dd 	.word	0x0800a8dd
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a8dd 	.word	0x0800a8dd
 800a914:	0800a8dd 	.word	0x0800a8dd
 800a918:	0800a8dd 	.word	0x0800a8dd
 800a91c:	0800a8dd 	.word	0x0800a8dd
 800a920:	0800aa6d 	.word	0x0800aa6d
 800a924:	0800a991 	.word	0x0800a991
 800a928:	0800aa4f 	.word	0x0800aa4f
 800a92c:	0800a8dd 	.word	0x0800a8dd
 800a930:	0800a8dd 	.word	0x0800a8dd
 800a934:	0800aa8f 	.word	0x0800aa8f
 800a938:	0800a8dd 	.word	0x0800a8dd
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a8dd 	.word	0x0800a8dd
 800a944:	0800a8dd 	.word	0x0800a8dd
 800a948:	0800aa57 	.word	0x0800aa57
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	602a      	str	r2, [r5, #0]
 800a954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a95c:	2301      	movs	r3, #1
 800a95e:	e0a3      	b.n	800aaa8 <_printf_i+0x1f4>
 800a960:	6820      	ldr	r0, [r4, #0]
 800a962:	6829      	ldr	r1, [r5, #0]
 800a964:	0606      	lsls	r6, r0, #24
 800a966:	f101 0304 	add.w	r3, r1, #4
 800a96a:	d50a      	bpl.n	800a982 <_printf_i+0xce>
 800a96c:	680e      	ldr	r6, [r1, #0]
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	2e00      	cmp	r6, #0
 800a972:	da03      	bge.n	800a97c <_printf_i+0xc8>
 800a974:	232d      	movs	r3, #45	; 0x2d
 800a976:	4276      	negs	r6, r6
 800a978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a97c:	485e      	ldr	r0, [pc, #376]	; (800aaf8 <_printf_i+0x244>)
 800a97e:	230a      	movs	r3, #10
 800a980:	e019      	b.n	800a9b6 <_printf_i+0x102>
 800a982:	680e      	ldr	r6, [r1, #0]
 800a984:	602b      	str	r3, [r5, #0]
 800a986:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a98a:	bf18      	it	ne
 800a98c:	b236      	sxthne	r6, r6
 800a98e:	e7ef      	b.n	800a970 <_printf_i+0xbc>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	6820      	ldr	r0, [r4, #0]
 800a994:	1d19      	adds	r1, r3, #4
 800a996:	6029      	str	r1, [r5, #0]
 800a998:	0601      	lsls	r1, r0, #24
 800a99a:	d501      	bpl.n	800a9a0 <_printf_i+0xec>
 800a99c:	681e      	ldr	r6, [r3, #0]
 800a99e:	e002      	b.n	800a9a6 <_printf_i+0xf2>
 800a9a0:	0646      	lsls	r6, r0, #25
 800a9a2:	d5fb      	bpl.n	800a99c <_printf_i+0xe8>
 800a9a4:	881e      	ldrh	r6, [r3, #0]
 800a9a6:	4854      	ldr	r0, [pc, #336]	; (800aaf8 <_printf_i+0x244>)
 800a9a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2308      	moveq	r3, #8
 800a9ae:	230a      	movne	r3, #10
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9b6:	6865      	ldr	r5, [r4, #4]
 800a9b8:	60a5      	str	r5, [r4, #8]
 800a9ba:	2d00      	cmp	r5, #0
 800a9bc:	bfa2      	ittt	ge
 800a9be:	6821      	ldrge	r1, [r4, #0]
 800a9c0:	f021 0104 	bicge.w	r1, r1, #4
 800a9c4:	6021      	strge	r1, [r4, #0]
 800a9c6:	b90e      	cbnz	r6, 800a9cc <_printf_i+0x118>
 800a9c8:	2d00      	cmp	r5, #0
 800a9ca:	d04d      	beq.n	800aa68 <_printf_i+0x1b4>
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9d2:	fb03 6711 	mls	r7, r3, r1, r6
 800a9d6:	5dc7      	ldrb	r7, [r0, r7]
 800a9d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9dc:	4637      	mov	r7, r6
 800a9de:	42bb      	cmp	r3, r7
 800a9e0:	460e      	mov	r6, r1
 800a9e2:	d9f4      	bls.n	800a9ce <_printf_i+0x11a>
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d10b      	bne.n	800aa00 <_printf_i+0x14c>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	07de      	lsls	r6, r3, #31
 800a9ec:	d508      	bpl.n	800aa00 <_printf_i+0x14c>
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6861      	ldr	r1, [r4, #4]
 800a9f2:	4299      	cmp	r1, r3
 800a9f4:	bfde      	ittt	le
 800a9f6:	2330      	movle	r3, #48	; 0x30
 800a9f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa00:	1b52      	subs	r2, r2, r5
 800aa02:	6122      	str	r2, [r4, #16]
 800aa04:	f8cd a000 	str.w	sl, [sp]
 800aa08:	464b      	mov	r3, r9
 800aa0a:	aa03      	add	r2, sp, #12
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	4640      	mov	r0, r8
 800aa10:	f7ff fee2 	bl	800a7d8 <_printf_common>
 800aa14:	3001      	adds	r0, #1
 800aa16:	d14c      	bne.n	800aab2 <_printf_i+0x1fe>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	b004      	add	sp, #16
 800aa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa22:	4835      	ldr	r0, [pc, #212]	; (800aaf8 <_printf_i+0x244>)
 800aa24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa28:	6829      	ldr	r1, [r5, #0]
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa30:	6029      	str	r1, [r5, #0]
 800aa32:	061d      	lsls	r5, r3, #24
 800aa34:	d514      	bpl.n	800aa60 <_printf_i+0x1ac>
 800aa36:	07df      	lsls	r7, r3, #31
 800aa38:	bf44      	itt	mi
 800aa3a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa3e:	6023      	strmi	r3, [r4, #0]
 800aa40:	b91e      	cbnz	r6, 800aa4a <_printf_i+0x196>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	f023 0320 	bic.w	r3, r3, #32
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	2310      	movs	r3, #16
 800aa4c:	e7b0      	b.n	800a9b0 <_printf_i+0xfc>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f043 0320 	orr.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	2378      	movs	r3, #120	; 0x78
 800aa58:	4828      	ldr	r0, [pc, #160]	; (800aafc <_printf_i+0x248>)
 800aa5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa5e:	e7e3      	b.n	800aa28 <_printf_i+0x174>
 800aa60:	0659      	lsls	r1, r3, #25
 800aa62:	bf48      	it	mi
 800aa64:	b2b6      	uxthmi	r6, r6
 800aa66:	e7e6      	b.n	800aa36 <_printf_i+0x182>
 800aa68:	4615      	mov	r5, r2
 800aa6a:	e7bb      	b.n	800a9e4 <_printf_i+0x130>
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	6826      	ldr	r6, [r4, #0]
 800aa70:	6961      	ldr	r1, [r4, #20]
 800aa72:	1d18      	adds	r0, r3, #4
 800aa74:	6028      	str	r0, [r5, #0]
 800aa76:	0635      	lsls	r5, r6, #24
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	d501      	bpl.n	800aa80 <_printf_i+0x1cc>
 800aa7c:	6019      	str	r1, [r3, #0]
 800aa7e:	e002      	b.n	800aa86 <_printf_i+0x1d2>
 800aa80:	0670      	lsls	r0, r6, #25
 800aa82:	d5fb      	bpl.n	800aa7c <_printf_i+0x1c8>
 800aa84:	8019      	strh	r1, [r3, #0]
 800aa86:	2300      	movs	r3, #0
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	4615      	mov	r5, r2
 800aa8c:	e7ba      	b.n	800aa04 <_printf_i+0x150>
 800aa8e:	682b      	ldr	r3, [r5, #0]
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	602a      	str	r2, [r5, #0]
 800aa94:	681d      	ldr	r5, [r3, #0]
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f7f5 fbb0 	bl	8000200 <memchr>
 800aaa0:	b108      	cbz	r0, 800aaa6 <_printf_i+0x1f2>
 800aaa2:	1b40      	subs	r0, r0, r5
 800aaa4:	6060      	str	r0, [r4, #4]
 800aaa6:	6863      	ldr	r3, [r4, #4]
 800aaa8:	6123      	str	r3, [r4, #16]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab0:	e7a8      	b.n	800aa04 <_printf_i+0x150>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	462a      	mov	r2, r5
 800aab6:	4649      	mov	r1, r9
 800aab8:	4640      	mov	r0, r8
 800aaba:	47d0      	blx	sl
 800aabc:	3001      	adds	r0, #1
 800aabe:	d0ab      	beq.n	800aa18 <_printf_i+0x164>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	079b      	lsls	r3, r3, #30
 800aac4:	d413      	bmi.n	800aaee <_printf_i+0x23a>
 800aac6:	68e0      	ldr	r0, [r4, #12]
 800aac8:	9b03      	ldr	r3, [sp, #12]
 800aaca:	4298      	cmp	r0, r3
 800aacc:	bfb8      	it	lt
 800aace:	4618      	movlt	r0, r3
 800aad0:	e7a4      	b.n	800aa1c <_printf_i+0x168>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4632      	mov	r2, r6
 800aad6:	4649      	mov	r1, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	47d0      	blx	sl
 800aadc:	3001      	adds	r0, #1
 800aade:	d09b      	beq.n	800aa18 <_printf_i+0x164>
 800aae0:	3501      	adds	r5, #1
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	9903      	ldr	r1, [sp, #12]
 800aae6:	1a5b      	subs	r3, r3, r1
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dcf2      	bgt.n	800aad2 <_printf_i+0x21e>
 800aaec:	e7eb      	b.n	800aac6 <_printf_i+0x212>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	f104 0619 	add.w	r6, r4, #25
 800aaf4:	e7f5      	b.n	800aae2 <_printf_i+0x22e>
 800aaf6:	bf00      	nop
 800aaf8:	0800b405 	.word	0x0800b405
 800aafc:	0800b416 	.word	0x0800b416

0800ab00 <_read_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	; (800ab20 <_read_r+0x20>)
 800ab04:	4604      	mov	r4, r0
 800ab06:	4608      	mov	r0, r1
 800ab08:	4611      	mov	r1, r2
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	602a      	str	r2, [r5, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f7f7 f970 	bl	8001df4 <_read>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d102      	bne.n	800ab1e <_read_r+0x1e>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	b103      	cbz	r3, 800ab1e <_read_r+0x1e>
 800ab1c:	6023      	str	r3, [r4, #0]
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
 800ab20:	20003138 	.word	0x20003138
 800ab24:	00000000 	.word	0x00000000

0800ab28 <nan>:
 800ab28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab30 <nan+0x8>
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	00000000 	.word	0x00000000
 800ab34:	7ff80000 	.word	0x7ff80000

0800ab38 <strncmp>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	b17a      	cbz	r2, 800ab5c <strncmp+0x24>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	3901      	subs	r1, #1
 800ab40:	1884      	adds	r4, r0, r2
 800ab42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab4a:	4290      	cmp	r0, r2
 800ab4c:	d101      	bne.n	800ab52 <strncmp+0x1a>
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	d101      	bne.n	800ab56 <strncmp+0x1e>
 800ab52:	1a80      	subs	r0, r0, r2
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d1f3      	bne.n	800ab42 <strncmp+0xa>
 800ab5a:	e7fa      	b.n	800ab52 <strncmp+0x1a>
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	e7f9      	b.n	800ab54 <strncmp+0x1c>

0800ab60 <__swbuf_r>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	460e      	mov	r6, r1
 800ab64:	4614      	mov	r4, r2
 800ab66:	4605      	mov	r5, r0
 800ab68:	b118      	cbz	r0, 800ab72 <__swbuf_r+0x12>
 800ab6a:	6983      	ldr	r3, [r0, #24]
 800ab6c:	b90b      	cbnz	r3, 800ab72 <__swbuf_r+0x12>
 800ab6e:	f7fd fa23 	bl	8007fb8 <__sinit>
 800ab72:	4b21      	ldr	r3, [pc, #132]	; (800abf8 <__swbuf_r+0x98>)
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d12b      	bne.n	800abd0 <__swbuf_r+0x70>
 800ab78:	686c      	ldr	r4, [r5, #4]
 800ab7a:	69a3      	ldr	r3, [r4, #24]
 800ab7c:	60a3      	str	r3, [r4, #8]
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	071a      	lsls	r2, r3, #28
 800ab82:	d52f      	bpl.n	800abe4 <__swbuf_r+0x84>
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	b36b      	cbz	r3, 800abe4 <__swbuf_r+0x84>
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	6820      	ldr	r0, [r4, #0]
 800ab8c:	1ac0      	subs	r0, r0, r3
 800ab8e:	6963      	ldr	r3, [r4, #20]
 800ab90:	b2f6      	uxtb	r6, r6
 800ab92:	4283      	cmp	r3, r0
 800ab94:	4637      	mov	r7, r6
 800ab96:	dc04      	bgt.n	800aba2 <__swbuf_r+0x42>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f7fe fbc2 	bl	8009324 <_fflush_r>
 800aba0:	bb30      	cbnz	r0, 800abf0 <__swbuf_r+0x90>
 800aba2:	68a3      	ldr	r3, [r4, #8]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	60a3      	str	r3, [r4, #8]
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	1c5a      	adds	r2, r3, #1
 800abac:	6022      	str	r2, [r4, #0]
 800abae:	701e      	strb	r6, [r3, #0]
 800abb0:	6963      	ldr	r3, [r4, #20]
 800abb2:	3001      	adds	r0, #1
 800abb4:	4283      	cmp	r3, r0
 800abb6:	d004      	beq.n	800abc2 <__swbuf_r+0x62>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	07db      	lsls	r3, r3, #31
 800abbc:	d506      	bpl.n	800abcc <__swbuf_r+0x6c>
 800abbe:	2e0a      	cmp	r6, #10
 800abc0:	d104      	bne.n	800abcc <__swbuf_r+0x6c>
 800abc2:	4621      	mov	r1, r4
 800abc4:	4628      	mov	r0, r5
 800abc6:	f7fe fbad 	bl	8009324 <_fflush_r>
 800abca:	b988      	cbnz	r0, 800abf0 <__swbuf_r+0x90>
 800abcc:	4638      	mov	r0, r7
 800abce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd0:	4b0a      	ldr	r3, [pc, #40]	; (800abfc <__swbuf_r+0x9c>)
 800abd2:	429c      	cmp	r4, r3
 800abd4:	d101      	bne.n	800abda <__swbuf_r+0x7a>
 800abd6:	68ac      	ldr	r4, [r5, #8]
 800abd8:	e7cf      	b.n	800ab7a <__swbuf_r+0x1a>
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <__swbuf_r+0xa0>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	bf08      	it	eq
 800abe0:	68ec      	ldreq	r4, [r5, #12]
 800abe2:	e7ca      	b.n	800ab7a <__swbuf_r+0x1a>
 800abe4:	4621      	mov	r1, r4
 800abe6:	4628      	mov	r0, r5
 800abe8:	f000 f81a 	bl	800ac20 <__swsetup_r>
 800abec:	2800      	cmp	r0, #0
 800abee:	d0cb      	beq.n	800ab88 <__swbuf_r+0x28>
 800abf0:	f04f 37ff 	mov.w	r7, #4294967295
 800abf4:	e7ea      	b.n	800abcc <__swbuf_r+0x6c>
 800abf6:	bf00      	nop
 800abf8:	0800b054 	.word	0x0800b054
 800abfc:	0800b074 	.word	0x0800b074
 800ac00:	0800b034 	.word	0x0800b034

0800ac04 <__ascii_wctomb>:
 800ac04:	b149      	cbz	r1, 800ac1a <__ascii_wctomb+0x16>
 800ac06:	2aff      	cmp	r2, #255	; 0xff
 800ac08:	bf85      	ittet	hi
 800ac0a:	238a      	movhi	r3, #138	; 0x8a
 800ac0c:	6003      	strhi	r3, [r0, #0]
 800ac0e:	700a      	strbls	r2, [r1, #0]
 800ac10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac14:	bf98      	it	ls
 800ac16:	2001      	movls	r0, #1
 800ac18:	4770      	bx	lr
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4770      	bx	lr
	...

0800ac20 <__swsetup_r>:
 800ac20:	4b32      	ldr	r3, [pc, #200]	; (800acec <__swsetup_r+0xcc>)
 800ac22:	b570      	push	{r4, r5, r6, lr}
 800ac24:	681d      	ldr	r5, [r3, #0]
 800ac26:	4606      	mov	r6, r0
 800ac28:	460c      	mov	r4, r1
 800ac2a:	b125      	cbz	r5, 800ac36 <__swsetup_r+0x16>
 800ac2c:	69ab      	ldr	r3, [r5, #24]
 800ac2e:	b913      	cbnz	r3, 800ac36 <__swsetup_r+0x16>
 800ac30:	4628      	mov	r0, r5
 800ac32:	f7fd f9c1 	bl	8007fb8 <__sinit>
 800ac36:	4b2e      	ldr	r3, [pc, #184]	; (800acf0 <__swsetup_r+0xd0>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d10f      	bne.n	800ac5c <__swsetup_r+0x3c>
 800ac3c:	686c      	ldr	r4, [r5, #4]
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac44:	0719      	lsls	r1, r3, #28
 800ac46:	d42c      	bmi.n	800aca2 <__swsetup_r+0x82>
 800ac48:	06dd      	lsls	r5, r3, #27
 800ac4a:	d411      	bmi.n	800ac70 <__swsetup_r+0x50>
 800ac4c:	2309      	movs	r3, #9
 800ac4e:	6033      	str	r3, [r6, #0]
 800ac50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5a:	e03e      	b.n	800acda <__swsetup_r+0xba>
 800ac5c:	4b25      	ldr	r3, [pc, #148]	; (800acf4 <__swsetup_r+0xd4>)
 800ac5e:	429c      	cmp	r4, r3
 800ac60:	d101      	bne.n	800ac66 <__swsetup_r+0x46>
 800ac62:	68ac      	ldr	r4, [r5, #8]
 800ac64:	e7eb      	b.n	800ac3e <__swsetup_r+0x1e>
 800ac66:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <__swsetup_r+0xd8>)
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	bf08      	it	eq
 800ac6c:	68ec      	ldreq	r4, [r5, #12]
 800ac6e:	e7e6      	b.n	800ac3e <__swsetup_r+0x1e>
 800ac70:	0758      	lsls	r0, r3, #29
 800ac72:	d512      	bpl.n	800ac9a <__swsetup_r+0x7a>
 800ac74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac76:	b141      	cbz	r1, 800ac8a <__swsetup_r+0x6a>
 800ac78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	d002      	beq.n	800ac86 <__swsetup_r+0x66>
 800ac80:	4630      	mov	r0, r6
 800ac82:	f7ff fc03 	bl	800a48c <_free_r>
 800ac86:	2300      	movs	r3, #0
 800ac88:	6363      	str	r3, [r4, #52]	; 0x34
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	2300      	movs	r3, #0
 800ac94:	6063      	str	r3, [r4, #4]
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f043 0308 	orr.w	r3, r3, #8
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	6923      	ldr	r3, [r4, #16]
 800aca4:	b94b      	cbnz	r3, 800acba <__swsetup_r+0x9a>
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acb0:	d003      	beq.n	800acba <__swsetup_r+0x9a>
 800acb2:	4621      	mov	r1, r4
 800acb4:	4630      	mov	r0, r6
 800acb6:	f000 f877 	bl	800ada8 <__smakebuf_r>
 800acba:	89a0      	ldrh	r0, [r4, #12]
 800acbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acc0:	f010 0301 	ands.w	r3, r0, #1
 800acc4:	d00a      	beq.n	800acdc <__swsetup_r+0xbc>
 800acc6:	2300      	movs	r3, #0
 800acc8:	60a3      	str	r3, [r4, #8]
 800acca:	6963      	ldr	r3, [r4, #20]
 800accc:	425b      	negs	r3, r3
 800acce:	61a3      	str	r3, [r4, #24]
 800acd0:	6923      	ldr	r3, [r4, #16]
 800acd2:	b943      	cbnz	r3, 800ace6 <__swsetup_r+0xc6>
 800acd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acd8:	d1ba      	bne.n	800ac50 <__swsetup_r+0x30>
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	0781      	lsls	r1, r0, #30
 800acde:	bf58      	it	pl
 800ace0:	6963      	ldrpl	r3, [r4, #20]
 800ace2:	60a3      	str	r3, [r4, #8]
 800ace4:	e7f4      	b.n	800acd0 <__swsetup_r+0xb0>
 800ace6:	2000      	movs	r0, #0
 800ace8:	e7f7      	b.n	800acda <__swsetup_r+0xba>
 800acea:	bf00      	nop
 800acec:	20000010 	.word	0x20000010
 800acf0:	0800b054 	.word	0x0800b054
 800acf4:	0800b074 	.word	0x0800b074
 800acf8:	0800b034 	.word	0x0800b034

0800acfc <__assert_func>:
 800acfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfe:	4614      	mov	r4, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <__assert_func+0x2c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4605      	mov	r5, r0
 800ad08:	68d8      	ldr	r0, [r3, #12]
 800ad0a:	b14c      	cbz	r4, 800ad20 <__assert_func+0x24>
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <__assert_func+0x30>)
 800ad0e:	9100      	str	r1, [sp, #0]
 800ad10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad14:	4906      	ldr	r1, [pc, #24]	; (800ad30 <__assert_func+0x34>)
 800ad16:	462b      	mov	r3, r5
 800ad18:	f000 f80e 	bl	800ad38 <fiprintf>
 800ad1c:	f000 f88c 	bl	800ae38 <abort>
 800ad20:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <__assert_func+0x38>)
 800ad22:	461c      	mov	r4, r3
 800ad24:	e7f3      	b.n	800ad0e <__assert_func+0x12>
 800ad26:	bf00      	nop
 800ad28:	20000010 	.word	0x20000010
 800ad2c:	0800b427 	.word	0x0800b427
 800ad30:	0800b434 	.word	0x0800b434
 800ad34:	0800b462 	.word	0x0800b462

0800ad38 <fiprintf>:
 800ad38:	b40e      	push	{r1, r2, r3}
 800ad3a:	b503      	push	{r0, r1, lr}
 800ad3c:	4601      	mov	r1, r0
 800ad3e:	ab03      	add	r3, sp, #12
 800ad40:	4805      	ldr	r0, [pc, #20]	; (800ad58 <fiprintf+0x20>)
 800ad42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad46:	6800      	ldr	r0, [r0, #0]
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	f7ff fc15 	bl	800a578 <_vfiprintf_r>
 800ad4e:	b002      	add	sp, #8
 800ad50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad54:	b003      	add	sp, #12
 800ad56:	4770      	bx	lr
 800ad58:	20000010 	.word	0x20000010

0800ad5c <__swhatbuf_r>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	460e      	mov	r6, r1
 800ad60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad64:	2900      	cmp	r1, #0
 800ad66:	b096      	sub	sp, #88	; 0x58
 800ad68:	4614      	mov	r4, r2
 800ad6a:	461d      	mov	r5, r3
 800ad6c:	da08      	bge.n	800ad80 <__swhatbuf_r+0x24>
 800ad6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	602a      	str	r2, [r5, #0]
 800ad76:	061a      	lsls	r2, r3, #24
 800ad78:	d410      	bmi.n	800ad9c <__swhatbuf_r+0x40>
 800ad7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad7e:	e00e      	b.n	800ad9e <__swhatbuf_r+0x42>
 800ad80:	466a      	mov	r2, sp
 800ad82:	f000 f861 	bl	800ae48 <_fstat_r>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	dbf1      	blt.n	800ad6e <__swhatbuf_r+0x12>
 800ad8a:	9a01      	ldr	r2, [sp, #4]
 800ad8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad94:	425a      	negs	r2, r3
 800ad96:	415a      	adcs	r2, r3
 800ad98:	602a      	str	r2, [r5, #0]
 800ad9a:	e7ee      	b.n	800ad7a <__swhatbuf_r+0x1e>
 800ad9c:	2340      	movs	r3, #64	; 0x40
 800ad9e:	2000      	movs	r0, #0
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	b016      	add	sp, #88	; 0x58
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ada8 <__smakebuf_r>:
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adac:	079d      	lsls	r5, r3, #30
 800adae:	4606      	mov	r6, r0
 800adb0:	460c      	mov	r4, r1
 800adb2:	d507      	bpl.n	800adc4 <__smakebuf_r+0x1c>
 800adb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	6123      	str	r3, [r4, #16]
 800adbc:	2301      	movs	r3, #1
 800adbe:	6163      	str	r3, [r4, #20]
 800adc0:	b002      	add	sp, #8
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	ab01      	add	r3, sp, #4
 800adc6:	466a      	mov	r2, sp
 800adc8:	f7ff ffc8 	bl	800ad5c <__swhatbuf_r>
 800adcc:	9900      	ldr	r1, [sp, #0]
 800adce:	4605      	mov	r5, r0
 800add0:	4630      	mov	r0, r6
 800add2:	f7fd f9ed 	bl	80081b0 <_malloc_r>
 800add6:	b948      	cbnz	r0, 800adec <__smakebuf_r+0x44>
 800add8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800addc:	059a      	lsls	r2, r3, #22
 800adde:	d4ef      	bmi.n	800adc0 <__smakebuf_r+0x18>
 800ade0:	f023 0303 	bic.w	r3, r3, #3
 800ade4:	f043 0302 	orr.w	r3, r3, #2
 800ade8:	81a3      	strh	r3, [r4, #12]
 800adea:	e7e3      	b.n	800adb4 <__smakebuf_r+0xc>
 800adec:	4b0d      	ldr	r3, [pc, #52]	; (800ae24 <__smakebuf_r+0x7c>)
 800adee:	62b3      	str	r3, [r6, #40]	; 0x28
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	6020      	str	r0, [r4, #0]
 800adf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf8:	81a3      	strh	r3, [r4, #12]
 800adfa:	9b00      	ldr	r3, [sp, #0]
 800adfc:	6163      	str	r3, [r4, #20]
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	6120      	str	r0, [r4, #16]
 800ae02:	b15b      	cbz	r3, 800ae1c <__smakebuf_r+0x74>
 800ae04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f000 f82f 	bl	800ae6c <_isatty_r>
 800ae0e:	b128      	cbz	r0, 800ae1c <__smakebuf_r+0x74>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f023 0303 	bic.w	r3, r3, #3
 800ae16:	f043 0301 	orr.w	r3, r3, #1
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	89a0      	ldrh	r0, [r4, #12]
 800ae1e:	4305      	orrs	r5, r0
 800ae20:	81a5      	strh	r5, [r4, #12]
 800ae22:	e7cd      	b.n	800adc0 <__smakebuf_r+0x18>
 800ae24:	08007f51 	.word	0x08007f51

0800ae28 <malloc>:
 800ae28:	4b02      	ldr	r3, [pc, #8]	; (800ae34 <malloc+0xc>)
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	f7fd b9bf 	b.w	80081b0 <_malloc_r>
 800ae32:	bf00      	nop
 800ae34:	20000010 	.word	0x20000010

0800ae38 <abort>:
 800ae38:	b508      	push	{r3, lr}
 800ae3a:	2006      	movs	r0, #6
 800ae3c:	f000 f84e 	bl	800aedc <raise>
 800ae40:	2001      	movs	r0, #1
 800ae42:	f7f6 ffcd 	bl	8001de0 <_exit>
	...

0800ae48 <_fstat_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d07      	ldr	r5, [pc, #28]	; (800ae68 <_fstat_r+0x20>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	4611      	mov	r1, r2
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	f7f7 f812 	bl	8001e7e <_fstat>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d102      	bne.n	800ae64 <_fstat_r+0x1c>
 800ae5e:	682b      	ldr	r3, [r5, #0]
 800ae60:	b103      	cbz	r3, 800ae64 <_fstat_r+0x1c>
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
 800ae66:	bf00      	nop
 800ae68:	20003138 	.word	0x20003138

0800ae6c <_isatty_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d06      	ldr	r5, [pc, #24]	; (800ae88 <_isatty_r+0x1c>)
 800ae70:	2300      	movs	r3, #0
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7f7 f811 	bl	8001e9e <_isatty>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_isatty_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_isatty_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	20003138 	.word	0x20003138

0800ae8c <_raise_r>:
 800ae8c:	291f      	cmp	r1, #31
 800ae8e:	b538      	push	{r3, r4, r5, lr}
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	d904      	bls.n	800aea0 <_raise_r+0x14>
 800ae96:	2316      	movs	r3, #22
 800ae98:	6003      	str	r3, [r0, #0]
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aea2:	b112      	cbz	r2, 800aeaa <_raise_r+0x1e>
 800aea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aea8:	b94b      	cbnz	r3, 800aebe <_raise_r+0x32>
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 f830 	bl	800af10 <_getpid_r>
 800aeb0:	462a      	mov	r2, r5
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeba:	f000 b817 	b.w	800aeec <_kill_r>
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d00a      	beq.n	800aed8 <_raise_r+0x4c>
 800aec2:	1c59      	adds	r1, r3, #1
 800aec4:	d103      	bne.n	800aece <_raise_r+0x42>
 800aec6:	2316      	movs	r3, #22
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	2001      	movs	r0, #1
 800aecc:	e7e7      	b.n	800ae9e <_raise_r+0x12>
 800aece:	2400      	movs	r4, #0
 800aed0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aed4:	4628      	mov	r0, r5
 800aed6:	4798      	blx	r3
 800aed8:	2000      	movs	r0, #0
 800aeda:	e7e0      	b.n	800ae9e <_raise_r+0x12>

0800aedc <raise>:
 800aedc:	4b02      	ldr	r3, [pc, #8]	; (800aee8 <raise+0xc>)
 800aede:	4601      	mov	r1, r0
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	f7ff bfd3 	b.w	800ae8c <_raise_r>
 800aee6:	bf00      	nop
 800aee8:	20000010 	.word	0x20000010

0800aeec <_kill_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d07      	ldr	r5, [pc, #28]	; (800af0c <_kill_r+0x20>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	4611      	mov	r1, r2
 800aef8:	602b      	str	r3, [r5, #0]
 800aefa:	f7f6 ff61 	bl	8001dc0 <_kill>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	d102      	bne.n	800af08 <_kill_r+0x1c>
 800af02:	682b      	ldr	r3, [r5, #0]
 800af04:	b103      	cbz	r3, 800af08 <_kill_r+0x1c>
 800af06:	6023      	str	r3, [r4, #0]
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	bf00      	nop
 800af0c:	20003138 	.word	0x20003138

0800af10 <_getpid_r>:
 800af10:	f7f6 bf4e 	b.w	8001db0 <_getpid>

0800af14 <_init>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	bf00      	nop
 800af18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1a:	bc08      	pop	{r3}
 800af1c:	469e      	mov	lr, r3
 800af1e:	4770      	bx	lr

0800af20 <_fini>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	bf00      	nop
 800af24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af26:	bc08      	pop	{r3}
 800af28:	469e      	mov	lr, r3
 800af2a:	4770      	bx	lr
