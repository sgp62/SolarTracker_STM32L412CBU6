
SolarTracker_STM32L412CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008874  08008874  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800887c  0800887c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f34  20000074  080088f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fa8  080088f8  00022fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cab0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a61  00000000  00000000  0003cb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  000405b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00041da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e020  00000000  00000000  00043410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa92  00000000  00000000  00061430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b81e4  00000000  00000000  0007bec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001340a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  001340f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086c0 	.word	0x080086c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080086c0 	.word	0x080086c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b098      	sub	sp, #96	; 0x60
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 ff36 	bl	800143e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f895 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f98d 	bl	80008f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005da:	f000 f8e7 	bl	80007ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005de:	f000 f929 	bl	8000834 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f957 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 12, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	210c      	movs	r1, #12
 80005ea:	2026      	movs	r0, #38	; 0x26
 80005ec:	f001 f818 	bl	8001620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80005f0:	2026      	movs	r0, #38	; 0x26
 80005f2:	f001 f831 	bl	8001658 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80005f6:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <main+0x108>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <main+0x108>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000602:	2003      	movs	r0, #3
 8000604:	f001 f801 	bl	800160a <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of spi_mutex */
  osMutexDef(spi_mutex);
 8000608:	2300      	movs	r3, #0
 800060a:	65bb      	str	r3, [r7, #88]	; 0x58
 800060c:	2300      	movs	r3, #0
 800060e:	65fb      	str	r3, [r7, #92]	; 0x5c
  spi_mutexHandle = osMutexCreate(osMutex(spi_mutex));
 8000610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fbf3 	bl	8004e00 <osMutexCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <main+0x10c>)
 800061e:	6013      	str	r3, [r2, #0]
//  osSemaphoreDef(external_sem);
//  external_semHandle = osSemaphoreCreate(osSemaphore(external_sem), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  spi_semHandle = xSemaphoreCreateCounting( 1, 0 );
 8000620:	2100      	movs	r1, #0
 8000622:	2001      	movs	r0, #1
 8000624:	f004 fe3e 	bl	80052a4 <xQueueCreateCountingSemaphore>
 8000628:	4603      	mov	r3, r0
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <main+0x110>)
 800062c:	6013      	str	r3, [r2, #0]
  uart_semHandle = xSemaphoreCreateCounting( 1, 1 );
 800062e:	2101      	movs	r1, #1
 8000630:	2001      	movs	r0, #1
 8000632:	f004 fe37 	bl	80052a4 <xQueueCreateCountingSemaphore>
 8000636:	4603      	mov	r3, r0
 8000638:	4a28      	ldr	r2, [pc, #160]	; (80006dc <main+0x114>)
 800063a:	6013      	str	r3, [r2, #0]
  external_semHandle = xSemaphoreCreateCounting( 1, 0 );
 800063c:	2100      	movs	r1, #0
 800063e:	2001      	movs	r0, #1
 8000640:	f004 fe30 	bl	80052a4 <xQueueCreateCountingSemaphore>
 8000644:	4603      	mov	r3, r0
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <main+0x118>)
 8000648:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 800064a:	2200      	movs	r2, #0
 800064c:	2164      	movs	r1, #100	; 0x64
 800064e:	2002      	movs	r0, #2
 8000650:	f004 fd82 	bl	8005158 <xQueueGenericCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <main+0x11c>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart1Task */
  osThreadDef(uart1Task, Startuart1Task, osPriorityHigh, 0, 512);
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <main+0x120>)
 800065c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 800066e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fb77 	bl	8004d68 <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <main+0x124>)
 800067e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart2Task */
  osThreadDef(uart2Task, Startuart2Task, osPriorityNormal, 0, 512);
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <main+0x128>)
 8000682:	f107 0420 	add.w	r4, r7, #32
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fb64 	bl	8004d68 <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <main+0x12c>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi1Task */
  osThreadDef(spi1Task, startspi1Task, osPriorityNormal, 0, 512);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <main+0x130>)
 80006a8:	1d3c      	adds	r4, r7, #4
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spi1TaskHandle = osThreadCreate(osThread(spi1Task), NULL);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fb53 	bl	8004d68 <osThreadCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <main+0x134>)
 80006c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c8:	f004 fb47 	bl	8004d5a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <main+0x104>
 80006ce:	bf00      	nop
 80006d0:	40004400 	.word	0x40004400
 80006d4:	20000530 	.word	0x20000530
 80006d8:	20000534 	.word	0x20000534
 80006dc:	20000538 	.word	0x20000538
 80006e0:	2000053c 	.word	0x2000053c
 80006e4:	200005a8 	.word	0x200005a8
 80006e8:	080086fc 	.word	0x080086fc
 80006ec:	20000524 	.word	0x20000524
 80006f0:	08008718 	.word	0x08008718
 80006f4:	20000528 	.word	0x20000528
 80006f8:	08008734 	.word	0x08008734
 80006fc:	2000052c 	.word	0x2000052c

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2244      	movs	r2, #68	; 0x44
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f8cd 	bl	80078ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000722:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000726:	f001 f9a7 	bl	8001a78 <HAL_PWREx_ControlVoltageScaling>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000730:	f000 fc0c 	bl	8000f4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000734:	f001 f982 	bl	8001a3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <SystemClock_Config+0xa8>)
 800073a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800073e:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <SystemClock_Config+0xa8>)
 8000740:	f023 0318 	bic.w	r3, r3, #24
 8000744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000748:	2314      	movs	r3, #20
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000758:	2360      	movs	r3, #96	; 0x60
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f9dd 	bl	8001b24 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000770:	f000 fbec 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fe2b 	bl	80023e8 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000798:	f000 fbd8 	bl	8000f4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800079c:	f002 fa00 	bl	8002ba0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007a0:	bf00      	nop
 80007a2:	3758      	adds	r7, #88	; 0x58
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_SPI1_Init+0x80>)
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <MX_SPI1_Init+0x84>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_SPI1_Init+0x80>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_SPI1_Init+0x80>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_SPI1_Init+0x80>)
 80007c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_SPI1_Init+0x80>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI1_Init+0x80>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI1_Init+0x80>)
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //TODO Check if this does anything
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_SPI1_Init+0x80>)
 80007e2:	2238      	movs	r2, #56	; 0x38
 80007e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI1_Init+0x80>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI1_Init+0x80>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_SPI1_Init+0x80>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI1_Init+0x80>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_SPI1_Init+0x80>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI1_Init+0x80>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_SPI1_Init+0x80>)
 800080c:	f002 f9d8 	bl	8002bc0 <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fb99 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SSM;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_SPI1_Init+0x84>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <MX_SPI1_Init+0x84>)
 8000820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000824:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003b8 	.word	0x200003b8
 8000830:	40013000 	.word	0x40013000

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART1_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART1_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART1_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000878:	f003 fd6c 	bl	8004354 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 fb63 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000041c 	.word	0x2000041c
 8000890:	40013800 	.word	0x40013800

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART2_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART2_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d8:	f003 fd3c 	bl	8004354 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 fb33 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200004a0 	.word	0x200004a0
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <MX_GPIO_Init+0xe8>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_GPIO_Init+0xe8>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2103      	movs	r1, #3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f001 f83f 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f240 1101 	movw	r1, #257	; 0x101
 8000964:	481e      	ldr	r0, [pc, #120]	; (80009e0 <MX_GPIO_Init+0xec>)
 8000966:	f001 f839 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096a:	2303      	movs	r3, #3
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 feb8 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000988:	f240 1301 	movw	r3, #257	; 0x101
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_GPIO_Init+0xec>)
 80009a2:	f000 fea9 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b2:	2302      	movs	r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_GPIO_Init+0xec>)
 80009be:	f000 fe9b 	bl	80016f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2028      	movs	r0, #40	; 0x28
 80009c8:	f000 fe2a 	bl	8001620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009cc:	2028      	movs	r0, #40	; 0x28
 80009ce:	f000 fe43 	bl	8001658 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000400 	.word	0x48000400

080009e4 <USART2_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <USART2_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 80009fc:	2208      	movs	r2, #8
 80009fe:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <USART2_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 8000a0e:	2204      	movs	r2, #4
 8000a10:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <USART2_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d036      	beq.n	8000a9e <USART2_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <USART2_IRQHandler+0xc4>)
 8000a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b0d      	cmp	r3, #13
 8000a3c:	d002      	beq.n	8000a44 <USART2_IRQHandler+0x60>
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b0a      	cmp	r3, #10
 8000a42:	d119      	bne.n	8000a78 <USART2_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d028      	beq.n	8000a9e <USART2_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	4916      	ldr	r1, [pc, #88]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a54:	600a      	str	r2, [r1, #0]
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <USART2_IRQHandler+0xcc>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <USART2_IRQHandler+0xd0>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	463a      	mov	r2, r7
 8000a62:	2300      	movs	r3, #0
 8000a64:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <USART2_IRQHandler+0xcc>)
 8000a66:	f004 fd4f 	bl	8005508 <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <USART2_IRQHandler+0xd4>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 8000a76:	e012      	b.n	8000a9e <USART2_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b24      	cmp	r3, #36	; 0x24
 8000a7c:	d003      	beq.n	8000a86 <USART2_IRQHandler+0xa2>
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2bc8      	cmp	r3, #200	; 0xc8
 8000a84:	d102      	bne.n	8000a8c <USART2_IRQHandler+0xa8>
				rx_index = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4906      	ldr	r1, [pc, #24]	; (8000aac <USART2_IRQHandler+0xc8>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <USART2_IRQHandler+0xcc>)
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8000a9c:	e7ff      	b.n	8000a9e <USART2_IRQHandler+0xba>
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	200005ac 	.word	0x200005ac
 8000ab0:	200005b0 	.word	0x200005b0
 8000ab4:	200005a8 	.word	0x200005a8
 8000ab8:	20000344 	.word	0x20000344

08000abc <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_11)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000acc:	d105      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  xSemaphoreGiveFromISR(external_semHandle, NULL);
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 fdb2 	bl	800563e <xQueueGiveFromISR>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000053c 	.word	0x2000053c

08000ae8 <Startuart1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startuart1Task */
void Startuart1Task(void const * argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint16_t spi_gps_read_addr = 0;
	static SerialBuffer gps_ext_buffer;
	static int statusbuf[8];
	int num_messages = 390; //Number of FRAM messages for offset 72B -> 256KB storage = 390
 8000af0:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8000af4:	613b      	str	r3, [r7, #16]
	//Code used for external UART write, reading SPI data
	uint8_t addr_msb = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_lsb = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <Startuart1Task+0xcc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f04f 31ff 	mov.w	r1, #4294967295
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 ff06 	bl	8005918 <xQueueSemaphoreTake>
		//Take both semaphores to keep other tasks from running (might be unnecessary bc higher priority)
		//xSemaphoreTake(uart_semHandle, portMAX_DELAY);
		//xSemaphoreTake(spi_semHandle, portMAX_DELAY);
		USART_GPS->CR1 &= ~(USART_CR1_RXNEIE); // Disable UART Interrupt
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <Startuart1Task+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a29      	ldr	r2, [pc, #164]	; (8000bb8 <Startuart1Task+0xd0>)
 8000b12:	f023 0320 	bic.w	r3, r3, #32
 8000b16:	6013      	str	r3, [r2, #0]
		spi_gps_read_addr = 0;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <Startuart1Task+0xd4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]


		for(int i = 0; i < num_messages; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e03c      	b.n	8000b9e <Startuart1Task+0xb6>

			addr_msb = (spi_gps_read_addr >> 8) & 0xFF;
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <Startuart1Task+0xd4>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
			addr_lsb = spi_gps_read_addr & 0xFF;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <Startuart1Task+0xd4>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	73bb      	strb	r3, [r7, #14]

			//Read NMEA_LEN bytes of data
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <Startuart1Task+0xd8>)
 8000b3e:	f000 ff4d 	bl	80019dc <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	2201      	movs	r2, #1
 8000b46:	491f      	ldr	r1, [pc, #124]	; (8000bc4 <Startuart1Task+0xdc>)
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b4a:	f002 f8dc 	bl	8002d06 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_msb, 1, 100); //Send Address MSBs
 8000b4e:	f107 010f 	add.w	r1, r7, #15
 8000b52:	2364      	movs	r3, #100	; 0x64
 8000b54:	2201      	movs	r2, #1
 8000b56:	481c      	ldr	r0, [pc, #112]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b58:	f002 f8d5 	bl	8002d06 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_lsb, 1, 100); //Send Address LSBs
 8000b5c:	f107 010e 	add.w	r1, r7, #14
 8000b60:	2364      	movs	r3, #100	; 0x64
 8000b62:	2201      	movs	r2, #1
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b66:	f002 f8ce 	bl	8002d06 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, (uint8_t *)&gps_ext_buffer.Buffer, NMEA_LEN, 100);
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2250      	movs	r2, #80	; 0x50
 8000b6e:	4917      	ldr	r1, [pc, #92]	; (8000bcc <Startuart1Task+0xe4>)
 8000b70:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b72:	f002 fa36 	bl	8002fe2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <Startuart1Task+0xd8>)
 8000b7c:	f000 ff2e 	bl	80019dc <HAL_GPIO_WritePin>

			spi_gps_read_addr += NMEA_LEN; //Increase offset to read next data value
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <Startuart1Task+0xd4>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	3350      	adds	r3, #80	; 0x50
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <Startuart1Task+0xd4>)
 8000b8a:	801a      	strh	r2, [r3, #0]
//			HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
//			HAL_SPI_Receive(&hspi1, (uint8_t *)statusbuf, 1, 100);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

			//Write NMEA message to external UART
			HAL_UART_Transmit(&huart1, (uint8_t*)&gps_ext_buffer.Buffer, NMEA_LEN, 100);
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	2250      	movs	r2, #80	; 0x50
 8000b90:	490e      	ldr	r1, [pc, #56]	; (8000bcc <Startuart1Task+0xe4>)
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <Startuart1Task+0xe8>)
 8000b94:	f003 fc2c 	bl	80043f0 <HAL_UART_Transmit>
		for(int i = 0; i < num_messages; i++){
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbbe      	blt.n	8000b24 <Startuart1Task+0x3c>
		}


		//Let other tasks continue running
		USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable UART Interrupt
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <Startuart1Task+0xd0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <Startuart1Task+0xd0>)
 8000bac:	f043 0320 	orr.w	r3, r3, #32
 8000bb0:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 8000bb2:	e7a4      	b.n	8000afe <Startuart1Task+0x16>
 8000bb4:	2000053c 	.word	0x2000053c
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	2000067a 	.word	0x2000067a
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	0800878d 	.word	0x0800878d
 8000bc8:	200003b8 	.word	0x200003b8
 8000bcc:	2000067c 	.word	0x2000067c
 8000bd0:	2000041c 	.word	0x2000041c

08000bd4 <Startuart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startuart2Task */
void Startuart2Task(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	float latitude, longitude;

	char* message_id, *time, *data_valid, *raw_latitude, *raw_longitude, *latdir, *longdir;

	//Set RF Switch to 0 for internal antenna:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be2:	4828      	ldr	r0, [pc, #160]	; (8000c84 <Startuart2Task+0xb0>)
 8000be4:	f000 fefa 	bl	80019dc <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <Startuart2Task+0xb4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 ff9f 	bl	8005b30 <uxQueueMessagesWaitingFromISR>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f7      	beq.n	8000be8 <Startuart2Task+0x14>
	  {


		  xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <Startuart2Task+0xb4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4923      	ldr	r1, [pc, #140]	; (8000c8c <Startuart2Task+0xb8>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fda9 	bl	8005758 <xQueueReceive>
		  //Fill and check header
		  for(int c = 0; c < 6; c++){
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e00b      	b.n	8000c24 <Startuart2Task+0x50>
			  nmea_header[c] = SerialBufferReceived.Buffer[c];
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <Startuart2Task+0xb8>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	7819      	ldrb	r1, [r3, #0]
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <Startuart2Task+0xbc>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	460a      	mov	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
		  for(int c = 0; c < 6; c++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	ddf0      	ble.n	8000c0c <Startuart2Task+0x38>
		  }
		  if(!strcmp(nmea_header, "$GPRMC")){
 8000c2a:	491a      	ldr	r1, [pc, #104]	; (8000c94 <Startuart2Task+0xc0>)
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <Startuart2Task+0xbc>)
 8000c2e:	f7ff facf 	bl	80001d0 <strcmp>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d120      	bne.n	8000c7a <Startuart2Task+0xa6>
			  if(SerialBufferReceived.Buffer[18] == 'V'){
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <Startuart2Task+0xb8>)
 8000c3a:	7c9b      	ldrb	r3, [r3, #18]
 8000c3c:	2b56      	cmp	r3, #86	; 0x56
 8000c3e:	d11c      	bne.n	8000c7a <Startuart2Task+0xa6>
				  //No fix, turn on LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2101      	movs	r1, #1
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f000 fec8 	bl	80019dc <HAL_GPIO_WritePin>
//
//				  latitude = GpsToDecimalDegrees(raw_latitude, *latdir);
//				  longitude = GpsToDecimalDegrees(raw_longitude, *longdir);


				  if(tim1_counter > 5000){ //Post SPI write semaphore every 5s there is a valid message
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <Startuart2Task+0xc4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d910      	bls.n	8000c7a <Startuart2Task+0xa6>
					  xSemaphoreGive(spi_semHandle);
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <Startuart2Task+0xc8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	f004 fb53 	bl	800530c <xQueueGenericSend>
					  tim1_counter = 0;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <Startuart2Task+0xc4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
					  xSemaphoreTake(uart_semHandle, portMAX_DELAY); //Wait until SPI is posted
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <Startuart2Task+0xcc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 fe4f 	bl	8005918 <xQueueSemaphoreTake>
				  }
			  }
		  }
		  got_nmea=0;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <Startuart2Task+0xd0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000c80:	e7b2      	b.n	8000be8 <Startuart2Task+0x14>
 8000c82:	bf00      	nop
 8000c84:	48000400 	.word	0x48000400
 8000c88:	200005a8 	.word	0x200005a8
 8000c8c:	20000540 	.word	0x20000540
 8000c90:	20000348 	.word	0x20000348
 8000c94:	08008750 	.word	0x08008750
 8000c98:	200005a4 	.word	0x200005a4
 8000c9c:	20000534 	.word	0x20000534
 8000ca0:	20000538 	.word	0x20000538
 8000ca4:	20000344 	.word	0x20000344

08000ca8 <startspi1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startspi1Task */
void startspi1Task(void const * argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startspi1Task */
	HAL_StatusTypeDef response = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]

	//SPI Initialization **************************
	//Write CS Pin high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	488a      	ldr	r0, [pc, #552]	; (8000ee4 <startspi1Task+0x23c>)
 8000cba:	f000 fe8f 	bl	80019dc <HAL_GPIO_WritePin>
	// Enable write enable latch (allow write operations)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4888      	ldr	r0, [pc, #544]	; (8000ee4 <startspi1Task+0x23c>)
 8000cc4:	f000 fe8a 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4986      	ldr	r1, [pc, #536]	; (8000ee8 <startspi1Task+0x240>)
 8000cce:	4887      	ldr	r0, [pc, #540]	; (8000eec <startspi1Task+0x244>)
 8000cd0:	f002 f819 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4882      	ldr	r0, [pc, #520]	; (8000ee4 <startspi1Task+0x23c>)
 8000cda:	f000 fe7f 	bl	80019dc <HAL_GPIO_WritePin>

	// Test bytes to write to EEPROM
	spi_mout_buf[0] = 0xAB;
 8000cde:	4b84      	ldr	r3, [pc, #528]	; (8000ef0 <startspi1Task+0x248>)
 8000ce0:	22ab      	movs	r2, #171	; 0xab
 8000ce2:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0xCD;
 8000ce4:	4b82      	ldr	r3, [pc, #520]	; (8000ef0 <startspi1Task+0x248>)
 8000ce6:	22cd      	movs	r2, #205	; 0xcd
 8000ce8:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0xEF;
 8000cea:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <startspi1Task+0x248>)
 8000cec:	22ef      	movs	r2, #239	; 0xef
 8000cee:	709a      	strb	r2, [r3, #2]

	// Write 3 bytes starting at given address
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <startspi1Task+0x23c>)
 8000cf6:	f000 fe71 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	497d      	ldr	r1, [pc, #500]	; (8000ef4 <startspi1Task+0x24c>)
 8000d00:	487a      	ldr	r0, [pc, #488]	; (8000eec <startspi1Task+0x244>)
 8000d02:	f002 f800 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2202      	movs	r2, #2
 8000d0a:	497b      	ldr	r1, [pc, #492]	; (8000ef8 <startspi1Task+0x250>)
 8000d0c:	4877      	ldr	r0, [pc, #476]	; (8000eec <startspi1Task+0x244>)
 8000d0e:	f001 fffa 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	2203      	movs	r2, #3
 8000d16:	4976      	ldr	r1, [pc, #472]	; (8000ef0 <startspi1Task+0x248>)
 8000d18:	4874      	ldr	r0, [pc, #464]	; (8000eec <startspi1Task+0x244>)
 8000d1a:	f001 fff4 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2101      	movs	r1, #1
 8000d22:	4870      	ldr	r0, [pc, #448]	; (8000ee4 <startspi1Task+0x23c>)
 8000d24:	f000 fe5a 	bl	80019dc <HAL_GPIO_WritePin>
	//IO Driver for output pin enable

	// Clear buffer
	spi_mout_buf[0] = 0;
 8000d28:	4b71      	ldr	r3, [pc, #452]	; (8000ef0 <startspi1Task+0x248>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0;
 8000d2e:	4b70      	ldr	r3, [pc, #448]	; (8000ef0 <startspi1Task+0x248>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0;
 8000d34:	4b6e      	ldr	r3, [pc, #440]	; (8000ef0 <startspi1Task+0x248>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	709a      	strb	r2, [r3, #2]

	// Wait until WIP bit is cleared
	spi_wip = 1;
 8000d3a:	4b70      	ldr	r3, [pc, #448]	; (8000efc <startspi1Task+0x254>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 8000d40:	e02d      	b.n	8000d9e <startspi1Task+0xf6>
	{
	 // Read status register
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2101      	movs	r1, #1
 8000d46:	4867      	ldr	r0, [pc, #412]	; (8000ee4 <startspi1Task+0x23c>)
 8000d48:	f000 fe48 	bl	80019dc <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	2201      	movs	r2, #1
 8000d50:	496b      	ldr	r1, [pc, #428]	; (8000f00 <startspi1Task+0x258>)
 8000d52:	4866      	ldr	r0, [pc, #408]	; (8000eec <startspi1Task+0x244>)
 8000d54:	f001 ffd7 	bl	8002d06 <HAL_SPI_Transmit>
	 response = HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4964      	ldr	r1, [pc, #400]	; (8000ef0 <startspi1Task+0x248>)
 8000d5e:	4863      	ldr	r0, [pc, #396]	; (8000eec <startspi1Task+0x244>)
 8000d60:	f002 f93f 	bl	8002fe2 <HAL_SPI_Receive>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
	 if (response == HAL_OK) {
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d106      	bne.n	8000d7c <startspi1Task+0xd4>
	  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 8000d6e:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <startspi1Task+0x248>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4863      	ldr	r0, [pc, #396]	; (8000f04 <startspi1Task+0x25c>)
 8000d76:	f006 fe37 	bl	80079e8 <iprintf>
 8000d7a:	e004      	b.n	8000d86 <startspi1Task+0xde>
	 } else {
	  printf("Got error response as %d\r\n", response);
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4861      	ldr	r0, [pc, #388]	; (8000f08 <startspi1Task+0x260>)
 8000d82:	f006 fe31 	bl	80079e8 <iprintf>
	 }
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <startspi1Task+0x23c>)
 8000d8c:	f000 fe26 	bl	80019dc <HAL_GPIO_WritePin>

	 // Mask out WIP bit
	 spi_wip = spi_mout_buf[0] & 0b00000001;
 8000d90:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <startspi1Task+0x248>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b58      	ldr	r3, [pc, #352]	; (8000efc <startspi1Task+0x254>)
 8000d9c:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <startspi1Task+0x254>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1cd      	bne.n	8000d42 <startspi1Task+0x9a>
	}

	// Read the 3 bytes back
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	484e      	ldr	r0, [pc, #312]	; (8000ee4 <startspi1Task+0x23c>)
 8000dac:	f000 fe16 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000db0:	2364      	movs	r3, #100	; 0x64
 8000db2:	2201      	movs	r2, #1
 8000db4:	4955      	ldr	r1, [pc, #340]	; (8000f0c <startspi1Task+0x264>)
 8000db6:	484d      	ldr	r0, [pc, #308]	; (8000eec <startspi1Task+0x244>)
 8000db8:	f001 ffa5 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000dbc:	2364      	movs	r3, #100	; 0x64
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	494d      	ldr	r1, [pc, #308]	; (8000ef8 <startspi1Task+0x250>)
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <startspi1Task+0x244>)
 8000dc4:	f001 ff9f 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 8000dc8:	2364      	movs	r3, #100	; 0x64
 8000dca:	2203      	movs	r2, #3
 8000dcc:	4948      	ldr	r1, [pc, #288]	; (8000ef0 <startspi1Task+0x248>)
 8000dce:	4847      	ldr	r0, [pc, #284]	; (8000eec <startspi1Task+0x244>)
 8000dd0:	f002 f907 	bl	8002fe2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4842      	ldr	r0, [pc, #264]	; (8000ee4 <startspi1Task+0x23c>)
 8000dda:	f000 fdff 	bl	80019dc <HAL_GPIO_WritePin>

	// Read status register
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4840      	ldr	r0, [pc, #256]	; (8000ee4 <startspi1Task+0x23c>)
 8000de4:	f000 fdfa 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	2201      	movs	r2, #1
 8000dec:	4944      	ldr	r1, [pc, #272]	; (8000f00 <startspi1Task+0x258>)
 8000dee:	483f      	ldr	r0, [pc, #252]	; (8000eec <startspi1Task+0x244>)
 8000df0:	f001 ff89 	bl	8002d06 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	2201      	movs	r2, #1
 8000df8:	493d      	ldr	r1, [pc, #244]	; (8000ef0 <startspi1Task+0x248>)
 8000dfa:	483c      	ldr	r0, [pc, #240]	; (8000eec <startspi1Task+0x244>)
 8000dfc:	f002 f8f1 	bl	8002fe2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <startspi1Task+0x23c>)
 8000e06:	f000 fde9 	bl	80019dc <HAL_GPIO_WritePin>

	uint8_t addr_msb = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
	uint8_t addr_lsb = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	737b      	strb	r3, [r7, #13]

	/* Infinite loop */
	for(;;)
	{
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <startspi1Task+0x268>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 fd7c 	bl	8005918 <xQueueSemaphoreTake>
	  //osDelay(1);

	  //Send over SPI to FRAM
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
		//Set Write enable latch
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <startspi1Task+0x23c>)
 8000e26:	f000 fdd9 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	492e      	ldr	r1, [pc, #184]	; (8000ee8 <startspi1Task+0x240>)
 8000e2e:	482f      	ldr	r0, [pc, #188]	; (8000eec <startspi1Task+0x244>)
 8000e30:	f002 fc1a 	bl	8003668 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2101      	movs	r1, #1
 8000e38:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <startspi1Task+0x23c>)
 8000e3a:	f000 fdcf 	bl	80019dc <HAL_GPIO_WritePin>

		addr_msb = (spi_addr >> 8) & 0xFF;
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <startspi1Task+0x250>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	73bb      	strb	r3, [r7, #14]
		addr_lsb = spi_addr & 0xFF;
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <startspi1Task+0x250>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	737b      	strb	r3, [r7, #13]
		// Write 64 bytes starting at given address
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	4823      	ldr	r0, [pc, #140]	; (8000ee4 <startspi1Task+0x23c>)
 8000e58:	f000 fdc0 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4924      	ldr	r1, [pc, #144]	; (8000ef4 <startspi1Task+0x24c>)
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <startspi1Task+0x244>)
 8000e64:	f001 ff4f 	bl	8002d06 <HAL_SPI_Transmit>
//		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_msb, 1, 100); //Send Address MSBs
 8000e68:	f107 010e 	add.w	r1, r7, #14
 8000e6c:	2364      	movs	r3, #100	; 0x64
 8000e6e:	2201      	movs	r2, #1
 8000e70:	481e      	ldr	r0, [pc, #120]	; (8000eec <startspi1Task+0x244>)
 8000e72:	f001 ff48 	bl	8002d06 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr_lsb, 1, 100); //Send Address LSBs
 8000e76:	f107 010d 	add.w	r1, r7, #13
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <startspi1Task+0x244>)
 8000e80:	f001 ff41 	bl	8002d06 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&SerialBufferReceived.Buffer, NMEA_LEN, 100);
 8000e84:	2364      	movs	r3, #100	; 0x64
 8000e86:	2250      	movs	r2, #80	; 0x50
 8000e88:	4922      	ldr	r1, [pc, #136]	; (8000f14 <startspi1Task+0x26c>)
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <startspi1Task+0x244>)
 8000e8c:	f001 ff3b 	bl	8002d06 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <startspi1Task+0x23c>)
 8000e96:	f000 fda1 	bl	80019dc <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
//		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
//		HAL_SPI_Receive(&hspi1, (uint8_t *)&test_spi_buf.Buffer, NMEA_LEN, 100);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

		spi_addr += NMEA_LEN; //Offset within destination device to hold NMEA message
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <startspi1Task+0x250>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	3350      	adds	r3, #80	; 0x50
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <startspi1Task+0x250>)
 8000ea4:	801a      	strh	r2, [r3, #0]

		if(spi_addr > 0x7FFF) spi_addr = 0;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <startspi1Task+0x250>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da02      	bge.n	8000eb6 <startspi1Task+0x20e>
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <startspi1Task+0x250>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]


		xSemaphoreGive(uart_semHandle);
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <startspi1Task+0x270>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f004 fa24 	bl	800530c <xQueueGenericSend>

		//Blink LED to signal SPI write happened
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fd86 	bl	80019dc <HAL_GPIO_WritePin>
		vTaskDelay( 200 / portTICK_PERIOD_MS );
 8000ed0:	20c8      	movs	r0, #200	; 0xc8
 8000ed2:	f005 f91d 	bl	8006110 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f000 fd7d 	bl	80019dc <HAL_GPIO_WritePin>
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8000ee2:	e796      	b.n	8000e12 <startspi1Task+0x16a>
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	0800878f 	.word	0x0800878f
 8000eec:	200003b8 	.word	0x200003b8
 8000ef0:	20000350 	.word	0x20000350
 8000ef4:	0800878e 	.word	0x0800878e
 8000ef8:	200003b4 	.word	0x200003b4
 8000efc:	200003b6 	.word	0x200003b6
 8000f00:	08008790 	.word	0x08008790
 8000f04:	08008758 	.word	0x08008758
 8000f08:	0800876c 	.word	0x0800876c
 8000f0c:	0800878d 	.word	0x0800878d
 8000f10:	20000534 	.word	0x20000534
 8000f14:	20000540 	.word	0x20000540
 8000f18:	20000538 	.word	0x20000538

08000f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	tim1_counter++; //Incrementing at 1kHz (1000 in 1 second)
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8000f38:	f000 fa9a 	bl	8001470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200005a4 	.word	0x200005a4
 8000f48:	40012c00 	.word	0x40012c00

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	210f      	movs	r1, #15
 8000f92:	f06f 0001 	mvn.w	r0, #1
 8000f96:	f000 fb43 	bl	8001620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12f      	bne.n	800102a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8000fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2338      	movs	r3, #56	; 0x38
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <HAL_SPI_MspInit+0x94>)
 8001016:	f000 fb6f 	bl	80016f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	2023      	movs	r0, #35	; 0x23
 8001020:	f000 fafe 	bl	8001620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001024:	2023      	movs	r0, #35	; 0x23
 8001026:	f000 fb17 	bl	8001658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40013000 	.word	0x40013000
 8001038:	40021000 	.word	0x40021000
 800103c:	48000400 	.word	0x48000400

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b098      	sub	sp, #96	; 0x60
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2234      	movs	r2, #52	; 0x34
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fc24 	bl	80078ae <memset>
  if(huart->Instance==USART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a3e      	ldr	r2, [pc, #248]	; (8001164 <HAL_UART_MspInit+0x124>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d138      	bne.n	80010e2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fc09 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff ff60 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_UART_MspInit+0x128>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001090:	4a35      	ldr	r2, [pc, #212]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6613      	str	r3, [r2, #96]	; 0x60
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_UART_MspInit+0x128>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_UART_MspInit+0x128>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <HAL_UART_MspInit+0x128>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_UART_MspInit+0x128>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ce:	2307      	movs	r3, #7
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f000 fb0c 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e0:	e03b      	b.n	800115a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_UART_MspInit+0x12c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d136      	bne.n	800115a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fbcb 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001104:	f7ff ff22 	bl	8000f4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x128>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_UART_MspInit+0x128>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001112:	6593      	str	r3, [r2, #88]	; 0x58
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_UART_MspInit+0x128>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001138:	230c      	movs	r3, #12
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001148:	2307      	movs	r3, #7
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 facf 	bl	80016f8 <HAL_GPIO_Init>
}
 800115a:	bf00      	nop
 800115c:	3760      	adds	r7, #96	; 0x60
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013800 	.word	0x40013800
 8001168:	40021000 	.word	0x40021000
 800116c:	40004400 	.word	0x40004400

08001170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	2019      	movs	r0, #25
 8001186:	f000 fa4b 	bl	8001620 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800118a:	2019      	movs	r0, #25
 800118c:	f000 fa64 	bl	8001658 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_InitTick+0x9c>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_InitTick+0x9c>)
 8001196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800119a:	6613      	str	r3, [r2, #96]	; 0x60
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_InitTick+0x9c>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fadc 	bl	8002770 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011b8:	f001 fac4 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 80011bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <HAL_InitTick+0xa0>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0c9b      	lsrs	r3, r3, #18
 80011c8:	3b01      	subs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_InitTick+0xa4>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_InitTick+0xa8>)
 80011d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_InitTick+0xa4>)
 80011d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_InitTick+0xa4>)
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_InitTick+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_InitTick+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <HAL_InitTick+0xa4>)
 80011ee:	f002 fe32 	bl	8003e56 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <HAL_InitTick+0xa4>)
 80011fa:	f002 fe8d 	bl	8003f18 <HAL_TIM_Base_Start_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3730      	adds	r7, #48	; 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	431bde83 	.word	0x431bde83
 8001214:	200006e0 	.word	0x200006e0
 8001218:	40012c00 	.word	0x40012c00

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800124e:	f002 feb7 	bl	8003fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200006e0 	.word	0x200006e0

0800125c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <SPI1_IRQHandler+0x10>)
 8001262:	f002 fa8f 	bl	8003784 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200003b8 	.word	0x200003b8

08001270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001274:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001278:	f000 fbc8 	bl	8001a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001292:	f3af 8000 	nop.w
 8001296:	4601      	mov	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
	}

return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e009      	b.n	80012e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf1      	blt.n	80012cc <_write+0x12>
	}
	return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:

int _close(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131a:	605a      	str	r2, [r3, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_isatty>:

int _isatty(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f006 f95e 	bl	800764c <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000a000 	.word	0x2000a000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	2000072c 	.word	0x2000072c
 80013c4:	20002fa8 	.word	0x20002fa8

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001424 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f0:	f7ff ffea 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f6:	490d      	ldr	r1, [pc, #52]	; (800142c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <LoopForever+0xe>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <LoopForever+0x16>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f006 fa13 	bl	8007844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141e:	f7ff f8d3 	bl	80005c8 <main>

08001422 <LoopForever>:

LoopForever:
    b LoopForever
 8001422:	e7fe      	b.n	8001422 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001424:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001430:	08008884 	.word	0x08008884
  ldr r2, =_sbss
 8001434:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001438:	20002fa8 	.word	0x20002fa8

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>

0800143e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f8de 	bl	800160a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144e:	200f      	movs	r0, #15
 8001450:	f7ff fe8e 	bl	8001170 <HAL_InitTick>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	e001      	b.n	8001464 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001460:	f7ff fd7a 	bl	8000f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001464:	79fb      	ldrb	r3, [r7, #7]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	20000730 	.word	0x20000730

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000730 	.word	0x20000730

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff4c 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001632:	f7ff ff61 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001636:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	6978      	ldr	r0, [r7, #20]
 800163e:	f7ff ffb1 	bl	80015a4 <NVIC_EncodePriority>
 8001642:	4602      	mov	r2, r0
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff80 	bl	8001550 <__NVIC_SetPriority>
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff54 	bl	8001514 <__NVIC_EnableIRQ>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d005      	beq.n	8001698 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	e029      	b.n	80016ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 020e 	bic.w	r2, r2, #14
 80016a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f003 021c 	and.w	r2, r3, #28
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
    }
  }
  return status;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e14e      	b.n	80019a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8140 	beq.w	80019a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <HAL_GPIO_Init+0x40>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	f003 0201 	and.w	r2, r3, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d017      	beq.n	80017d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d123      	bne.n	800182a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	6939      	ldr	r1, [r7, #16]
 8001826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0203 	and.w	r2, r3, #3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 809a 	beq.w	80019a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186c:	4b55      	ldr	r3, [pc, #340]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 800186e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001870:	4a54      	ldr	r2, [pc, #336]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6613      	str	r3, [r2, #96]	; 0x60
 8001878:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001884:	4a50      	ldr	r2, [pc, #320]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1e0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a46      	ldr	r2, [pc, #280]	; (80019cc <HAL_GPIO_Init+0x2d4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1dc>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_GPIO_Init+0x2d8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1d8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a44      	ldr	r2, [pc, #272]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1d4>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018cc:	2307      	movs	r3, #7
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d8:	2300      	movs	r3, #0
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ea:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f8:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800191c:	4a2e      	ldr	r2, [pc, #184]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001922:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001946:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199a:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_GPIO_Init+0x2e0>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f aea9 	bne.w	8001708 <HAL_GPIO_Init+0x10>
  }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	40010400 	.word	0x40010400

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f846 	bl	8000abc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40007000 	.word	0x40007000

08001a5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40007000 	.word	0x40007000

08001a78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a86:	d130      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a88:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a94:	d038      	beq.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2232      	movs	r2, #50	; 0x32
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0c9b      	lsrs	r3, r3, #18
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001abc:	e002      	b.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad0:	d102      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f2      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae4:	d110      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e00f      	b.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af6:	d007      	beq.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b00:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	431bde83 	.word	0x431bde83

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f000 bc4f 	b.w	80023d6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b38:	4b97      	ldr	r3, [pc, #604]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b42:	4b95      	ldr	r3, [pc, #596]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80e6 	beq.w	8001d26 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4c>
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	f040 808d 	bne.w	8001c82 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f040 8089 	bne.w	8001c82 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b70:	4b89      	ldr	r3, [pc, #548]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_RCC_OscConfig+0x66>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f000 bc26 	b.w	80023d6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8e:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x80>
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCC_OscConfig+0x8c>
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d224      	bcs.n	8001bfe <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fe0b 	bl	80027d4 <RCC_SetFlashLatencyFromMSIRange>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f000 bc06 	b.w	80023d6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	496d      	ldr	r1, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be8:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	4968      	ldr	r1, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e025      	b.n	8001c4a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	4960      	ldr	r1, [pc, #384]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	495b      	ldr	r1, [pc, #364]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fdca 	bl	80027d4 <RCC_SetFlashLatencyFromMSIRange>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e3c5      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c4a:	f000 fccd 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b51      	ldr	r3, [pc, #324]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	4950      	ldr	r1, [pc, #320]	; (8001d9c <HAL_RCC_OscConfig+0x278>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa7e 	bl	8001170 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d052      	beq.n	8001d24 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	e3a9      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d032      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fbff 	bl	8001498 <HAL_GetTick>
 8001c9a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fbfb 	bl	8001498 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e392      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb0:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	4930      	ldr	r1, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
 8001cee:	e01a      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fbcc 	bl	8001498 <HAL_GetTick>
 8001d00:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d04:	f7ff fbc8 	bl	8001498 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e35f      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1e0>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d073      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x220>
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d10e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d063      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2f4>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d15f      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e33c      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x250>
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e025      	b.n	8001dc0 <HAL_RCC_OscConfig+0x29c>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d114      	bne.n	8001da8 <HAL_RCC_OscConfig+0x284>
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a02      	ldr	r2, [pc, #8]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x29c>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08008794 	.word	0x08008794
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004
 8001da8:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a8e      	ldr	r2, [pc, #568]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb66 	bl	8001498 <HAL_GetTick>
 8001dcc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb62 	bl	8001498 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e2f9      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x2ac>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fb52 	bl	8001498 <HAL_GetTick>
 8001df4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fb4e 	bl	8001498 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e2e5      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d4>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d060      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x314>
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d119      	bne.n	8001e66 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d116      	bne.n	8001e66 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x32c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e2c2      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4962      	ldr	r1, [pc, #392]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	e040      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d023      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fb0d 	bl	8001498 <HAL_GetTick>
 8001e7e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fb09 	bl	8001498 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e2a0      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	494e      	ldr	r1, [pc, #312]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
 8001eb4:	e018      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a4b      	ldr	r2, [pc, #300]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fae9 	bl	8001498 <HAL_GetTick>
 8001ec6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fae5 	bl	8001498 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e27c      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8082 	beq.w	8001ffa <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d05f      	beq.n	8001fbe <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d037      	beq.n	8001f84 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e254      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f46:	f7ff faa7 	bl	8001498 <HAL_GetTick>
 8001f4a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff faa3 	bl	8001498 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b11      	cmp	r3, #17
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e23a      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	f023 0210 	bic.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fa80 	bl	8001498 <HAL_GetTick>
 8001f98:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fa7c 	bl	8001498 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b11      	cmp	r3, #17
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e213      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ef      	beq.n	8001f9c <HAL_RCC_OscConfig+0x478>
 8001fbc:	e01d      	b.n	8001ffa <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff fa63 	bl	8001498 <HAL_GetTick>
 8001fd2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fa5f 	bl	8001498 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d903      	bls.n	8001fec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1f6      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
 8001fe8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fec:	4ba9      	ldr	r3, [pc, #676]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ed      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80bd 	beq.w	8002182 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800200e:	4ba1      	ldr	r3, [pc, #644]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10e      	bne.n	8002038 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b9e      	ldr	r3, [pc, #632]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a9d      	ldr	r2, [pc, #628]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b9b      	ldr	r3, [pc, #620]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b97      	ldr	r3, [pc, #604]	; (8002298 <HAL_RCC_OscConfig+0x774>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d118      	bne.n	8002076 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x774>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a93      	ldr	r2, [pc, #588]	; (8002298 <HAL_RCC_OscConfig+0x774>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002050:	f7ff fa22 	bl	8001498 <HAL_GetTick>
 8002054:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002058:	f7ff fa1e 	bl	8001498 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1b5      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <HAL_RCC_OscConfig+0x774>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d02c      	beq.n	80020dc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002082:	4b84      	ldr	r3, [pc, #528]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	497f      	ldr	r1, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020a8:	4b7a      	ldr	r3, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	4a79      	ldr	r2, [pc, #484]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020b8:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a75      	ldr	r2, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c8:	e018      	b.n	80020fc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020ca:	4b72      	ldr	r3, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	4a70      	ldr	r2, [pc, #448]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020da:	e00f      	b.n	80020fc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020dc:	4b6d      	ldr	r3, [pc, #436]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	4a6c      	ldr	r2, [pc, #432]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020ec:	4b69      	ldr	r3, [pc, #420]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	4a68      	ldr	r2, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d016      	beq.n	8002132 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff f9c8 	bl	8001498 <HAL_GetTick>
 8002108:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff f9c4 	bl	8001498 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e159      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ed      	beq.n	800210c <HAL_RCC_OscConfig+0x5e8>
 8002130:	e01d      	b.n	800216e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff f9b1 	bl	8001498 <HAL_GetTick>
 8002136:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7ff f9ad 	bl	8001498 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e142      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ed      	bne.n	800213a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800215e:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a46      	ldr	r2, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03c      	beq.n	8002208 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219c:	4a3d      	ldr	r2, [pc, #244]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff f977 	bl	8001498 <HAL_GetTick>
 80021aa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ae:	f7ff f973 	bl	8001498 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e10a      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80021c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ef      	beq.n	80021ae <HAL_RCC_OscConfig+0x68a>
 80021ce:	e01b      	b.n	8002208 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80021d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d6:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7ff f95a 	bl	8001498 <HAL_GetTick>
 80021e4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e8:	f7ff f956 	bl	8001498 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0ed      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 80021fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ef      	bne.n	80021e8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80e1 	beq.w	80023d4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	2b02      	cmp	r3, #2
 8002218:	f040 80b5 	bne.w	8002386 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	429a      	cmp	r2, r3
 800222e:	d124      	bne.n	800227a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	3b01      	subs	r3, #1
 800223c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11b      	bne.n	800227a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d113      	bne.n	800227a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d109      	bne.n	800227a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d05f      	beq.n	800233a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d05a      	beq.n	8002336 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_RCC_OscConfig+0x770>)
 8002286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800228c:	f7ff f904 	bl	8001498 <HAL_GetTick>
 8002290:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	e00c      	b.n	80022ae <HAL_RCC_OscConfig+0x78a>
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff f8fc 	bl	8001498 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e093      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ae:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ba:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x8c0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ca:	3a01      	subs	r2, #1
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022d4:	0212      	lsls	r2, r2, #8
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022dc:	0852      	lsrs	r2, r2, #1
 80022de:	3a01      	subs	r2, #1
 80022e0:	0552      	lsls	r2, r2, #21
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022e8:	0852      	lsrs	r2, r2, #1
 80022ea:	3a01      	subs	r2, #1
 80022ec:	0652      	lsls	r2, r2, #25
 80022ee:	430a      	orrs	r2, r1
 80022f0:	493b      	ldr	r1, [pc, #236]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a39      	ldr	r2, [pc, #228]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80022fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002300:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4a36      	ldr	r2, [pc, #216]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 8002308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800230e:	f7ff f8c3 	bl	8001498 <HAL_GetTick>
 8002312:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f8bf 	bl	8001498 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e056      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002334:	e04e      	b.n	80023d4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e04d      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d146      	bne.n	80023d4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 800234c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002350:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 8002358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800235e:	f7ff f89b 	bl	8001498 <HAL_GetTick>
 8002362:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff f897 	bl	8001498 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e02e      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x842>
 8002384:	e026      	b.n	80023d4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d021      	beq.n	80023d0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 8002392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff f87e 	bl	8001498 <HAL_GetTick>
 800239c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff f87a 	bl	8001498 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e011      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_RCC_OscConfig+0x8bc>)
 80023c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023c8:	f023 0303 	bic.w	r3, r3, #3
 80023cc:	60d3      	str	r3, [r2, #12]
 80023ce:	e001      	b.n	80023d4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	f99f808c 	.word	0xf99f808c

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0e7      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0207 	bic.w	r2, r3, #7
 8002412:	4970      	ldr	r1, [pc, #448]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0cf      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	429a      	cmp	r2, r3
 8002446:	d908      	bls.n	800245a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4960      	ldr	r1, [pc, #384]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d04c      	beq.n	8002500 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d121      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0a6      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d115      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e09a      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e08e      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e086      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4943      	ldr	r1, [pc, #268]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe ffe2 	bl	8001498 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe ffde 	bl	8001498 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e06e      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d010      	beq.n	800252e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002518:	429a      	cmp	r2, r3
 800251a:	d208      	bcs.n	800252e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	492b      	ldr	r1, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d210      	bcs.n	800255e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0207 	bic.w	r2, r3, #7
 8002544:	4923      	ldr	r1, [pc, #140]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e036      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4918      	ldr	r1, [pc, #96]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4910      	ldr	r1, [pc, #64]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259c:	f000 f824 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	490b      	ldr	r1, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1f4>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1f8>)
 80025ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1fc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fdd5 	bl	8001170 <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ca:	7afb      	ldrb	r3, [r7, #11]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	08008794 	.word	0x08008794
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d121      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11e      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002644:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10d      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d102      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e004      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d101      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_RCC_GetSysClockFreq+0x114>)
 800266e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d134      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0xa6>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d003      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0xac>
 800268c:	e005      	b.n	800269a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002690:	617b      	str	r3, [r7, #20]
      break;
 8002692:	e005      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002696:	617b      	str	r3, [r7, #20]
      break;
 8002698:	e002      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	617b      	str	r3, [r7, #20]
      break;
 800269e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	3301      	adds	r3, #1
 80026ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	fb03 f202 	mul.w	r2, r3, r2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0e5b      	lsrs	r3, r3, #25
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	3301      	adds	r3, #1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026e0:	69bb      	ldr	r3, [r7, #24]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	080087ac 	.word	0x080087ac
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	007a1200 	.word	0x007a1200

08002700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800271c:	f7ff fff0 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4904      	ldr	r1, [pc, #16]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	080087a4 	.word	0x080087a4

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002748:	f7ff ffda 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_RCC_GetPCLK2Freq+0x28>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	080087a4 	.word	0x080087a4

08002770 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	220f      	movs	r2, #15
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCC_GetClockConfig+0x60>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40022000 	.word	0x40022000

080027d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027ec:	f7ff f936 	bl	8001a5c <HAL_PWREx_GetVoltageRange>
 80027f0:	6178      	str	r0, [r7, #20]
 80027f2:	e014      	b.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800280c:	f7ff f926 	bl	8001a5c <HAL_PWREx_GetVoltageRange>
 8002810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d10b      	bne.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d919      	bls.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2ba0      	cmp	r3, #160	; 0xa0
 8002830:	d902      	bls.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002832:	2302      	movs	r3, #2
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e013      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e010      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d902      	bls.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002844:	2303      	movs	r3, #3
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e00a      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d102      	bne.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002850:	2302      	movs	r3, #2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e004      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d101      	bne.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800285c:	2301      	movs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 0207 	bic.w	r2, r3, #7
 8002868:	4909      	ldr	r1, [pc, #36]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	40022000 	.word	0x40022000

08002894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800289c:	2300      	movs	r3, #0
 800289e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 809e 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6593      	str	r3, [r2, #88]	; 0x58
 80028d8:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a39      	ldr	r2, [pc, #228]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fdd0 	bl	8001498 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028fa:	e009      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fc:	f7fe fdcc 	bl	8001498 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	74fb      	strb	r3, [r7, #19]
        break;
 800290e:	e005      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d15a      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01e      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	429a      	cmp	r2, r3
 800293c:	d019      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800294a:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d016      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fd8c 	bl	8001498 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002982:	e00b      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fd88 	bl	8001498 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d902      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	74fb      	strb	r3, [r7, #19]
            break;
 800299a:	e006      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ec      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c6:	e009      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x148>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029dc:	7c7b      	ldrb	r3, [r7, #17]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b6e      	ldr	r3, [pc, #440]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a6d      	ldr	r2, [pc, #436]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f023 0203 	bic.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4964      	ldr	r1, [pc, #400]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1c:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 020c 	bic.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	495c      	ldr	r1, [pc, #368]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3e:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4953      	ldr	r1, [pc, #332]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a60:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	494b      	ldr	r1, [pc, #300]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a82:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4942      	ldr	r1, [pc, #264]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	493a      	ldr	r1, [pc, #232]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	4931      	ldr	r1, [pc, #196]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	4929      	ldr	r1, [pc, #164]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	4920      	ldr	r1, [pc, #128]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	4918      	ldr	r1, [pc, #96]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b82:	d105      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b90:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e095      	b.n	8002cfe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be2:	d009      	beq.n	8002bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	61da      	str	r2, [r3, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f9c8 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c38:	d902      	bls.n	8002c40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e002      	b.n	8002c46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c4e:	d007      	beq.n	8002c60 <HAL_SPI_Init+0xa0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c58:	d002      	beq.n	8002c60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	ea42 0103 	orr.w	r1, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0204 	and.w	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cdc:	ea42 0103 	orr.w	r1, r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b088      	sub	sp, #32
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_SPI_Transmit+0x22>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e158      	b.n	8002fda <HAL_SPI_Transmit+0x2d4>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d30:	f7fe fbb2 	bl	8001498 <HAL_GetTick>
 8002d34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d4a:	e13d      	b.n	8002fc8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_Transmit+0x52>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5c:	e134      	b.n	8002fc8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da8:	d10f      	bne.n	8002dca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d007      	beq.n	8002de8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002df0:	d94b      	bls.n	8002e8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_SPI_Transmit+0xfa>
 8002dfa:	8afb      	ldrh	r3, [r7, #22]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d13e      	bne.n	8002e7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	1c9a      	adds	r2, r3, #2
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e24:	e02b      	b.n	8002e7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d112      	bne.n	8002e5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e58:	e011      	b.n	8002e7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e5a:	f7fe fb1d 	bl	8001498 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d803      	bhi.n	8002e72 <HAL_SPI_Transmit+0x16c>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d102      	bne.n	8002e78 <HAL_SPI_Transmit+0x172>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e7c:	e0a4      	b.n	8002fc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1ce      	bne.n	8002e26 <HAL_SPI_Transmit+0x120>
 8002e88:	e07c      	b.n	8002f84 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Transmit+0x192>
 8002e92:	8afb      	ldrh	r3, [r7, #22]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d170      	bne.n	8002f7a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d912      	bls.n	8002ec8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b02      	subs	r3, #2
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ec6:	e058      	b.n	8002f7a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	7812      	ldrb	r2, [r2, #0]
 8002ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002eee:	e044      	b.n	8002f7a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d12b      	bne.n	8002f56 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d912      	bls.n	8002f2e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b02      	subs	r3, #2
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f2c:	e025      	b.n	8002f7a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f54:	e011      	b.n	8002f7a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f56:	f7fe fa9f 	bl	8001498 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d803      	bhi.n	8002f6e <HAL_SPI_Transmit+0x268>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d102      	bne.n	8002f74 <HAL_SPI_Transmit+0x26e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f78:	e026      	b.n	8002fc8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1b5      	bne.n	8002ef0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fedf 	bl	8003d4c <SPI_EndRxTxTransaction>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e000      	b.n	8002fc8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b088      	sub	sp, #32
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d112      	bne.n	8003026 <HAL_SPI_Receive+0x44>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10e      	bne.n	8003026 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2204      	movs	r2, #4
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f910 	bl	8003242 <HAL_SPI_TransmitReceive>
 8003022:	4603      	mov	r3, r0
 8003024:	e109      	b.n	800323a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_SPI_Receive+0x52>
 8003030:	2302      	movs	r3, #2
 8003032:	e102      	b.n	800323a <HAL_SPI_Receive+0x258>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800303c:	f7fe fa2c 	bl	8001498 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d002      	beq.n	8003054 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800304e:	2302      	movs	r3, #2
 8003050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003052:	e0e9      	b.n	8003228 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_SPI_Receive+0x7e>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003064:	e0e0      	b.n	8003228 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2204      	movs	r2, #4
 800306a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030b0:	d908      	bls.n	80030c4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	e007      	b.n	80030d4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030dc:	d10f      	bne.n	80030fe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d007      	beq.n	800311c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003124:	d867      	bhi.n	80031f6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003126:	e030      	b.n	800318a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d117      	bne.n	8003166 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f103 020c 	add.w	r2, r3, #12
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003164:	e011      	b.n	800318a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003166:	f7fe f997 	bl	8001498 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d803      	bhi.n	800317e <HAL_SPI_Receive+0x19c>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d102      	bne.n	8003184 <HAL_SPI_Receive+0x1a2>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003188:	e04e      	b.n	8003228 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1c8      	bne.n	8003128 <HAL_SPI_Receive+0x146>
 8003196:	e034      	b.n	8003202 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d115      	bne.n	80031d2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	b292      	uxth	r2, r2
 80031b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031d0:	e011      	b.n	80031f6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d2:	f7fe f961 	bl	8001498 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d803      	bhi.n	80031ea <HAL_SPI_Receive+0x208>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d102      	bne.n	80031f0 <HAL_SPI_Receive+0x20e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031f4:	e018      	b.n	8003228 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ca      	bne.n	8003198 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fd48 	bl	8003c9c <SPI_EndRxTransaction>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
 8003224:	e000      	b.n	8003228 <HAL_SPI_Receive+0x246>
  }

error :
 8003226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003238:	7dfb      	ldrb	r3, [r7, #23]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	; 0x28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x26>
 8003264:	2302      	movs	r3, #2
 8003266:	e1fb      	b.n	8003660 <HAL_SPI_TransmitReceive+0x41e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003270:	f7fe f912 	bl	8001498 <HAL_GetTick>
 8003274:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800327c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800328c:	7efb      	ldrb	r3, [r7, #27]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d00e      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x6e>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003298:	d106      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x66>
 80032a2:	7efb      	ldrb	r3, [r7, #27]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d003      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032ae:	e1cd      	b.n	800364c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x80>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x80>
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032c8:	e1c0      	b.n	800364c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d003      	beq.n	80032de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2205      	movs	r2, #5
 80032da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003320:	d802      	bhi.n	8003328 <HAL_SPI_TransmitReceive+0xe6>
 8003322:	8a3b      	ldrh	r3, [r7, #16]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d908      	bls.n	800333a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e007      	b.n	800334a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003348:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d007      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003370:	d97c      	bls.n	800346c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x13e>
 800337a:	8a7b      	ldrh	r3, [r7, #18]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d169      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a4:	e056      	b.n	8003454 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11b      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x1aa>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x1aa>
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d113      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	1c9a      	adds	r2, r3, #2
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d11c      	bne.n	8003434 <HAL_SPI_TransmitReceive+0x1f2>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	b292      	uxth	r2, r2
 8003412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003434:	f7fe f830 	bl	8001498 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003440:	429a      	cmp	r2, r3
 8003442:	d807      	bhi.n	8003454 <HAL_SPI_TransmitReceive+0x212>
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d003      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003452:	e0fb      	b.n	800364c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1a3      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x164>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d19d      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x164>
 800346a:	e0df      	b.n	800362c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_SPI_TransmitReceive+0x23a>
 8003474:	8a7b      	ldrh	r3, [r7, #18]
 8003476:	2b01      	cmp	r3, #1
 8003478:	f040 80cb 	bne.w	8003612 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d912      	bls.n	80034ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b02      	subs	r3, #2
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034aa:	e0b2      	b.n	8003612 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d2:	e09e      	b.n	8003612 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d134      	bne.n	800354c <HAL_SPI_TransmitReceive+0x30a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02f      	beq.n	800354c <HAL_SPI_TransmitReceive+0x30a>
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d12c      	bne.n	800354c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d912      	bls.n	8003522 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b02      	subs	r3, #2
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003520:	e012      	b.n	8003548 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d148      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x3aa>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d042      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d923      	bls.n	80035ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	b292      	uxth	r2, r2
 800357e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b02      	subs	r3, #2
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d81f      	bhi.n	80035e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	e016      	b.n	80035e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f103 020c 	add.w	r2, r3, #12
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	7812      	ldrb	r2, [r2, #0]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035e8:	2301      	movs	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035ec:	f7fd ff54 	bl	8001498 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <HAL_SPI_TransmitReceive+0x3c2>
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d102      	bne.n	800360a <HAL_SPI_TransmitReceive+0x3c8>
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003610:	e01c      	b.n	800364c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	f47f af5b 	bne.w	80034d4 <HAL_SPI_TransmitReceive+0x292>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	f47f af54 	bne.w	80034d4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fb8b 	bl	8003d4c <SPI_EndRxTxTransaction>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
 8003648:	e000      	b.n	800364c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800364a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800365c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_SPI_Transmit_IT+0x20>
 8003684:	2302      	movs	r3, #2
 8003686:	e072      	b.n	800376e <HAL_SPI_Transmit_IT+0x106>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_SPI_Transmit_IT+0x34>
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036a0:	e060      	b.n	8003764 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d002      	beq.n	80036b4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036b2:	e057      	b.n	8003764 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2203      	movs	r2, #3
 80036b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f8:	d903      	bls.n	8003702 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <HAL_SPI_Transmit_IT+0x114>)
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003700:	e002      	b.n	8003708 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_SPI_Transmit_IT+0x118>)
 8003706:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003710:	d10f      	bne.n	8003732 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003740:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d008      	beq.n	8003762 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e000      	b.n	8003764 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8003762:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
}
 800376e:	4618      	mov	r0, r3
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	08003a1d 	.word	0x08003a1d
 8003780:	080039d7 	.word	0x080039d7

08003784 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
    return;
 80037c6:	e0d7      	b.n	8003978 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_SPI_IRQHandler+0x66>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	09db      	lsrs	r3, r3, #7
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
    return;
 80037e8:	e0c6      	b.n	8003978 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_SPI_IRQHandler+0x8c>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80b4 	beq.w	8003978 <HAL_SPI_IRQHandler+0x1f4>
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80ad 	beq.w	8003978 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d023      	beq.n	8003872 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b03      	cmp	r3, #3
 8003834:	d011      	beq.n	800385a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	f043 0204 	orr.w	r2, r3, #4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	e00b      	b.n	8003872 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
        return;
 8003870:	e082      	b.n	8003978 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d014      	beq.n	80038a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	f043 0208 	orr.w	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04f      	beq.n	8003976 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_SPI_IRQHandler+0x17e>
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d034      	beq.n	800396c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0203 	bic.w	r2, r2, #3
 8003910:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_SPI_IRQHandler+0x1fc>)
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fea4 	bl	8001674 <HAL_DMA_Abort_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <HAL_SPI_IRQHandler+0x1fc>)
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fe8e 	bl	8001674 <HAL_DMA_Abort_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800396a:	e003      	b.n	8003974 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f813 	bl	8003998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003972:	e000      	b.n	8003976 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003974:	bf00      	nop
    return;
 8003976:	bf00      	nop
  }
}
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	080039ad 	.word	0x080039ad

08003984 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff ffe5 	bl	8003998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9e2 	bl	8003dd8 <SPI_CloseTx_ISR>
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9c0 	bl	8003dd8 <SPI_CloseTx_ISR>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a70:	f7fd fd12 	bl	8001498 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a80:	f7fd fd0a 	bl	8001498 <HAL_GetTick>
 8003a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	0d1b      	lsrs	r3, r3, #20
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a96:	e054      	b.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d050      	beq.n	8003b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aa0:	f7fd fcfa 	bl	8001498 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d902      	bls.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13d      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ace:	d111      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad8:	d004      	beq.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d107      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afc:	d10f      	bne.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e017      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d19b      	bne.n	8003a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000

08003b70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b82:	f7fd fc89 	bl	8001498 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b92:	f7fd fc81 	bl	8001498 <HAL_GetTick>
 8003b96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ba0:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00da      	lsls	r2, r3, #3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	0d1b      	lsrs	r3, r3, #20
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bb8:	e060      	b.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bc0:	d107      	bne.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d050      	beq.n	8003c7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bda:	f7fd fc5d 	bl	8001498 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d902      	bls.n	8003bf0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d13d      	bne.n	8003c6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d111      	bne.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d004      	beq.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d107      	bne.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	d10f      	bne.n	8003c58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e010      	b.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d196      	bne.n	8003bba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3728      	adds	r7, #40	; 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000000 	.word	0x20000000

08003c9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb0:	d111      	bne.n	8003cd6 <SPI_EndRxTransaction+0x3a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cba:	d004      	beq.n	8003cc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc4:	d107      	bne.n	8003cd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff febd 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e023      	b.n	8003d44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d04:	d11d      	bne.n	8003d42 <SPI_EndRxTransaction+0xa6>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0e:	d004      	beq.n	8003d1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d113      	bne.n	8003d42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff22 	bl	8003b70 <SPI_WaitFifoStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e000      	b.n	8003d44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff ff03 	bl	8003b70 <SPI_WaitFifoStateUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e027      	b.n	8003dd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff fe68 	bl	8003a60 <SPI_WaitFlagStateUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e014      	b.n	8003dd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff fedc 	bl	8003b70 <SPI_WaitFifoStateUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e000      	b.n	8003dd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de0:	f7fd fb5a 	bl	8001498 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	2164      	movs	r1, #100	; 0x64
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffa6 	bl	8003d4c <SPI_EndRxTxTransaction>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fda9 	bl	8003998 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003e46:	e002      	b.n	8003e4e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fd9b 	bl	8003984 <HAL_SPI_TxCpltCallback>
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e049      	b.n	8003efc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f841 	bl	8003f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f000 f9db 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e03b      	b.n	8003fa8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_TIM_Base_Start_IT+0x4e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d004      	beq.n	8003f66 <HAL_TIM_Base_Start_IT+0x4e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d115      	bne.n	8003f92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <HAL_TIM_Base_Start_IT+0xa4>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b06      	cmp	r3, #6
 8003f76:	d015      	beq.n	8003fa4 <HAL_TIM_Base_Start_IT+0x8c>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d011      	beq.n	8003fa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	e008      	b.n	8003fa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e000      	b.n	8003fa6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	00010007 	.word	0x00010007

08003fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0202 	mvn.w	r2, #2
 8003fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f905 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8f7 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f908 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0204 	mvn.w	r2, #4
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8db 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8cd 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8de 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b08      	cmp	r3, #8
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b08      	cmp	r3, #8
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0208 	mvn.w	r2, #8
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2204      	movs	r2, #4
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8b1 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f8a3 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8b4 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0210 	mvn.w	r2, #16
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2208      	movs	r2, #8
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f887 	bl	8004212 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f879 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f88a 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0201 	mvn.w	r2, #1
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc feec 	bl	8000f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8de 	bl	800432c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417e:	d10e      	bne.n	800419e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d107      	bne.n	800419e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f8d1 	bl	8004340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d10e      	bne.n	80041ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d107      	bne.n	80041ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f838 	bl	800423a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d10e      	bne.n	80041f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d107      	bne.n	80041f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f06f 0220 	mvn.w	r2, #32
 80041ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f891 	bl	8004318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0xbc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x20>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <TIM_Base_SetConfig+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x52>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x52>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <TIM_Base_SetConfig+0xc0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x52>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <TIM_Base_SetConfig+0xc4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <TIM_Base_SetConfig+0xbc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0xa0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <TIM_Base_SetConfig+0xc0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0xa0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <TIM_Base_SetConfig+0xc4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400

08004318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e040      	b.n	80043e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fe62 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	; 0x24
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8c0 	bl	8004518 <UART_SetConfig>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e022      	b.n	80043e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fb0e 	bl	80049cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fb95 	bl	8004b10 <UART_CheckIdleState>
 80043e6:	4603      	mov	r3, r0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004404:	2b20      	cmp	r3, #32
 8004406:	f040 8082 	bne.w	800450e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_UART_Transmit+0x26>
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07a      	b.n	8004510 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_UART_Transmit+0x38>
 8004424:	2302      	movs	r3, #2
 8004426:	e073      	b.n	8004510 <HAL_UART_Transmit+0x120>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2221      	movs	r2, #33	; 0x21
 800443c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443e:	f7fd f82b 	bl	8001498 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445c:	d108      	bne.n	8004470 <HAL_UART_Transmit+0x80>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e003      	b.n	8004478 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004480:	e02d      	b.n	80044de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fb88 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e039      	b.n	8004510 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	881a      	ldrh	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ae:	b292      	uxth	r2, r2
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	3302      	adds	r3, #2
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e008      	b.n	80044cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	b292      	uxth	r2, r2
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cb      	bne.n	8004482 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb54 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e005      	b.n	8004510 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800451c:	b08a      	sub	sp, #40	; 0x28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4313      	orrs	r3, r2
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b9e      	ldr	r3, [pc, #632]	; (80047c0 <UART_SetConfig+0x2a8>)
 8004548:	4013      	ands	r3, r2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004550:	430b      	orrs	r3, r1
 8004552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a93      	ldr	r2, [pc, #588]	; (80047c4 <UART_SetConfig+0x2ac>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	4313      	orrs	r3, r2
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a8a      	ldr	r2, [pc, #552]	; (80047c8 <UART_SetConfig+0x2b0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d126      	bne.n	80045f0 <UART_SetConfig+0xd8>
 80045a2:	4b8a      	ldr	r3, [pc, #552]	; (80047cc <UART_SetConfig+0x2b4>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d81b      	bhi.n	80045e8 <UART_SetConfig+0xd0>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0xa0>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e0ab      	b.n	8004728 <UART_SetConfig+0x210>
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d6:	e0a7      	b.n	8004728 <UART_SetConfig+0x210>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045de:	e0a3      	b.n	8004728 <UART_SetConfig+0x210>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e09f      	b.n	8004728 <UART_SetConfig+0x210>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e09b      	b.n	8004728 <UART_SetConfig+0x210>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a76      	ldr	r2, [pc, #472]	; (80047d0 <UART_SetConfig+0x2b8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d138      	bne.n	800466c <UART_SetConfig+0x154>
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <UART_SetConfig+0x2b4>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b0c      	cmp	r3, #12
 8004606:	d82d      	bhi.n	8004664 <UART_SetConfig+0x14c>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0xf8>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004645 	.word	0x08004645
 8004614:	08004665 	.word	0x08004665
 8004618:	08004665 	.word	0x08004665
 800461c:	08004665 	.word	0x08004665
 8004620:	08004655 	.word	0x08004655
 8004624:	08004665 	.word	0x08004665
 8004628:	08004665 	.word	0x08004665
 800462c:	08004665 	.word	0x08004665
 8004630:	0800464d 	.word	0x0800464d
 8004634:	08004665 	.word	0x08004665
 8004638:	08004665 	.word	0x08004665
 800463c:	08004665 	.word	0x08004665
 8004640:	0800465d 	.word	0x0800465d
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e06d      	b.n	8004728 <UART_SetConfig+0x210>
 800464c:	2302      	movs	r3, #2
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e069      	b.n	8004728 <UART_SetConfig+0x210>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e065      	b.n	8004728 <UART_SetConfig+0x210>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e061      	b.n	8004728 <UART_SetConfig+0x210>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e05d      	b.n	8004728 <UART_SetConfig+0x210>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <UART_SetConfig+0x2bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d125      	bne.n	80046c2 <UART_SetConfig+0x1aa>
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <UART_SetConfig+0x2b4>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d016      	beq.n	80046b2 <UART_SetConfig+0x19a>
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d818      	bhi.n	80046ba <UART_SetConfig+0x1a2>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d00a      	beq.n	80046a2 <UART_SetConfig+0x18a>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d814      	bhi.n	80046ba <UART_SetConfig+0x1a2>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <UART_SetConfig+0x182>
 8004694:	2b10      	cmp	r3, #16
 8004696:	d008      	beq.n	80046aa <UART_SetConfig+0x192>
 8004698:	e00f      	b.n	80046ba <UART_SetConfig+0x1a2>
 800469a:	2300      	movs	r3, #0
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a0:	e042      	b.n	8004728 <UART_SetConfig+0x210>
 80046a2:	2302      	movs	r3, #2
 80046a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a8:	e03e      	b.n	8004728 <UART_SetConfig+0x210>
 80046aa:	2304      	movs	r3, #4
 80046ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b0:	e03a      	b.n	8004728 <UART_SetConfig+0x210>
 80046b2:	2308      	movs	r3, #8
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b8:	e036      	b.n	8004728 <UART_SetConfig+0x210>
 80046ba:	2310      	movs	r3, #16
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c0:	e032      	b.n	8004728 <UART_SetConfig+0x210>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a3f      	ldr	r2, [pc, #252]	; (80047c4 <UART_SetConfig+0x2ac>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d12a      	bne.n	8004722 <UART_SetConfig+0x20a>
 80046cc:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <UART_SetConfig+0x2b4>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046da:	d01a      	beq.n	8004712 <UART_SetConfig+0x1fa>
 80046dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046e0:	d81b      	bhi.n	800471a <UART_SetConfig+0x202>
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e6:	d00c      	beq.n	8004702 <UART_SetConfig+0x1ea>
 80046e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ec:	d815      	bhi.n	800471a <UART_SetConfig+0x202>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <UART_SetConfig+0x1e2>
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f6:	d008      	beq.n	800470a <UART_SetConfig+0x1f2>
 80046f8:	e00f      	b.n	800471a <UART_SetConfig+0x202>
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004700:	e012      	b.n	8004728 <UART_SetConfig+0x210>
 8004702:	2302      	movs	r3, #2
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004708:	e00e      	b.n	8004728 <UART_SetConfig+0x210>
 800470a:	2304      	movs	r3, #4
 800470c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004710:	e00a      	b.n	8004728 <UART_SetConfig+0x210>
 8004712:	2308      	movs	r3, #8
 8004714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004718:	e006      	b.n	8004728 <UART_SetConfig+0x210>
 800471a:	2310      	movs	r3, #16
 800471c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004720:	e002      	b.n	8004728 <UART_SetConfig+0x210>
 8004722:	2310      	movs	r3, #16
 8004724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <UART_SetConfig+0x2ac>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f040 808a 	bne.w	8004848 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004738:	2b08      	cmp	r3, #8
 800473a:	d824      	bhi.n	8004786 <UART_SetConfig+0x26e>
 800473c:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <UART_SetConfig+0x22c>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004769 	.word	0x08004769
 8004748:	08004787 	.word	0x08004787
 800474c:	08004771 	.word	0x08004771
 8004750:	08004787 	.word	0x08004787
 8004754:	08004777 	.word	0x08004777
 8004758:	08004787 	.word	0x08004787
 800475c:	08004787 	.word	0x08004787
 8004760:	08004787 	.word	0x08004787
 8004764:	0800477f 	.word	0x0800477f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7fd ffd6 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 800476c:	61f8      	str	r0, [r7, #28]
        break;
 800476e:	e010      	b.n	8004792 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <UART_SetConfig+0x2c0>)
 8004772:	61fb      	str	r3, [r7, #28]
        break;
 8004774:	e00d      	b.n	8004792 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004776:	f7fd ff37 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800477a:	61f8      	str	r0, [r7, #28]
        break;
 800477c:	e009      	b.n	8004792 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004782:	61fb      	str	r3, [r7, #28]
        break;
 8004784:	e005      	b.n	8004792 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004790:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8109 	beq.w	80049ac <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d305      	bcc.n	80047b6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d912      	bls.n	80047dc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047bc:	e0f6      	b.n	80049ac <UART_SetConfig+0x494>
 80047be:	bf00      	nop
 80047c0:	efff69f3 	.word	0xefff69f3
 80047c4:	40008000 	.word	0x40008000
 80047c8:	40013800 	.word	0x40013800
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40004400 	.word	0x40004400
 80047d4:	40004800 	.word	0x40004800
 80047d8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2200      	movs	r2, #0
 80047e0:	461c      	mov	r4, r3
 80047e2:	4615      	mov	r5, r2
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	022b      	lsls	r3, r5, #8
 80047ee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047f2:	0222      	lsls	r2, r4, #8
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	6849      	ldr	r1, [r1, #4]
 80047f8:	0849      	lsrs	r1, r1, #1
 80047fa:	2000      	movs	r0, #0
 80047fc:	4688      	mov	r8, r1
 80047fe:	4681      	mov	r9, r0
 8004800:	eb12 0a08 	adds.w	sl, r2, r8
 8004804:	eb43 0b09 	adc.w	fp, r3, r9
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004816:	4650      	mov	r0, sl
 8004818:	4659      	mov	r1, fp
 800481a:	f7fb fd39 	bl	8000290 <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4613      	mov	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482c:	d308      	bcc.n	8004840 <UART_SetConfig+0x328>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004834:	d204      	bcs.n	8004840 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	e0b5      	b.n	80049ac <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004846:	e0b1      	b.n	80049ac <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004850:	d15d      	bne.n	800490e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004856:	2b08      	cmp	r3, #8
 8004858:	d827      	bhi.n	80048aa <UART_SetConfig+0x392>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x348>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fd ff48 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8004888:	61f8      	str	r0, [r7, #28]
        break;
 800488a:	e014      	b.n	80048b6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fd ff5a 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e010      	b.n	80048b6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b4c      	ldr	r3, [pc, #304]	; (80049c8 <UART_SetConfig+0x4b0>)
 8004896:	61fb      	str	r3, [r7, #28]
        break;
 8004898:	e00d      	b.n	80048b6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fd fea5 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800489e:	61f8      	str	r0, [r7, #28]
        break;
 80048a0:	e009      	b.n	80048b6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e005      	b.n	80048b6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d077      	beq.n	80049ac <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005a      	lsls	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	441a      	add	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d916      	bls.n	8004906 <UART_SetConfig+0x3ee>
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d212      	bcs.n	8004906 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f023 030f 	bic.w	r3, r3, #15
 80048e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	8afb      	ldrh	r3, [r7, #22]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	8afa      	ldrh	r2, [r7, #22]
 8004902:	60da      	str	r2, [r3, #12]
 8004904:	e052      	b.n	80049ac <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800490c:	e04e      	b.n	80049ac <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004912:	2b08      	cmp	r3, #8
 8004914:	d827      	bhi.n	8004966 <UART_SetConfig+0x44e>
 8004916:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0x404>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	08004967 	.word	0x08004967
 800492c:	08004957 	.word	0x08004957
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
 800493c:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7fd feea 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8004944:	61f8      	str	r0, [r7, #28]
        break;
 8004946:	e014      	b.n	8004972 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7fd fefc 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 800494c:	61f8      	str	r0, [r7, #28]
        break;
 800494e:	e010      	b.n	8004972 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <UART_SetConfig+0x4b0>)
 8004952:	61fb      	str	r3, [r7, #28]
        break;
 8004954:	e00d      	b.n	8004972 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fd fe47 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800495a:	61f8      	str	r0, [r7, #28]
        break;
 800495c:	e009      	b.n	8004972 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004962:	61fb      	str	r3, [r7, #28]
        break;
 8004964:	e005      	b.n	8004972 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004970:	bf00      	nop
    }

    if (pclk != 0U)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d019      	beq.n	80049ac <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	085a      	lsrs	r2, r3, #1
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b0f      	cmp	r3, #15
 8004990:	d909      	bls.n	80049a6 <UART_SetConfig+0x48e>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d205      	bcs.n	80049a6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	e002      	b.n	80049ac <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c6:	bf00      	nop
 80049c8:	00f42400 	.word	0x00f42400

080049cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d10a      	bne.n	8004ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b20:	f7fc fcba 	bl	8001498 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d10e      	bne.n	8004b52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f82d 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e023      	b.n	8004b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d10e      	bne.n	8004b7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f817 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e00d      	b.n	8004b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b09c      	sub	sp, #112	; 0x70
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb2:	e0a5      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	f000 80a1 	beq.w	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fc fc6b 	bl	8001498 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d13e      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e6      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e067      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d04f      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6e:	d147      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ccc:	623a      	str	r2, [r7, #32]
 8004cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e010      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f43f af4a 	beq.w	8004bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3770      	adds	r7, #112	; 0x70
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3c:	2b84      	cmp	r3, #132	; 0x84
 8004d3e:	d005      	beq.n	8004d4c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	3303      	adds	r3, #3
 8004d4a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d5e:	f001 fa0b 	bl	8006178 <vTaskStartScheduler>
  
  return osOK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af04      	add	r7, sp, #16
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d020      	beq.n	8004dbc <osThreadCreate+0x54>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01c      	beq.n	8004dbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685c      	ldr	r4, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681d      	ldr	r5, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691e      	ldr	r6, [r3, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ffc8 	bl	8004d2a <makeFreeRtosPriority>
 8004d9a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	9100      	str	r1, [sp, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	4632      	mov	r2, r6
 8004dae:	4629      	mov	r1, r5
 8004db0:	4620      	mov	r0, r4
 8004db2:	f001 f803 	bl	8005dbc <xTaskCreateStatic>
 8004db6:	4603      	mov	r3, r0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e01c      	b.n	8004df6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685c      	ldr	r4, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dc8:	b29e      	uxth	r6, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff ffaa 	bl	8004d2a <makeFreeRtosPriority>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	f107 030c 	add.w	r3, r7, #12
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	9200      	str	r2, [sp, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4632      	mov	r2, r6
 8004de4:	4629      	mov	r1, r5
 8004de6:	4620      	mov	r0, r4
 8004de8:	f001 f845 	bl	8005e76 <xTaskCreate>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004df6:	68fb      	ldr	r3, [r7, #12]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e00 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4619      	mov	r1, r3
 8004e16:	2001      	movs	r0, #1
 8004e18:	f000 fa29 	bl	800526e <xQueueCreateMutexStatic>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	e003      	b.n	8004e28 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004e20:	2001      	movs	r0, #1
 8004e22:	f000 fa0c 	bl	800523e <xQueueCreateMutex>
 8004e26:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f103 0208 	add.w	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f103 0208 	add.w	r2, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f103 0208 	add.w	r2, r3, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d103      	bne.n	8004ef2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e00c      	b.n	8004f0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e002      	b.n	8004f00 <vListInsert+0x2e>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d2f6      	bcs.n	8004efa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	601a      	str	r2, [r3, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6892      	ldr	r2, [r2, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6852      	ldr	r2, [r2, #4]
 8004f64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d103      	bne.n	8004f78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	1e5a      	subs	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fc2:	f002 f837 	bl	8007034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	441a      	add	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	22ff      	movs	r2, #255	; 0xff
 8005006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	22ff      	movs	r2, #255	; 0xff
 800500e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d114      	bne.n	8005042 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01a      	beq.n	8005056 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3310      	adds	r3, #16
 8005024:	4618      	mov	r0, r3
 8005026:	f001 faf9 	bl	800661c <xTaskRemoveFromEventList>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <xQueueGenericReset+0xcc>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	e009      	b.n	8005056 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3310      	adds	r3, #16
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fef2 	bl	8004e30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3324      	adds	r3, #36	; 0x24
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff feed 	bl	8004e30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005056:	f002 f81d 	bl	8007094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800505a:	2301      	movs	r3, #1
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	; 0x38
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <xQueueGenericCreateStatic+0x52>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <xQueueGenericCreateStatic+0x56>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <xQueueGenericCreateStatic+0x58>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	623b      	str	r3, [r7, #32]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d102      	bne.n	80050e6 <xQueueGenericCreateStatic+0x7e>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <xQueueGenericCreateStatic+0x82>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericCreateStatic+0x84>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61fb      	str	r3, [r7, #28]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005106:	2348      	movs	r3, #72	; 0x48
 8005108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b48      	cmp	r3, #72	; 0x48
 800510e:	d00a      	beq.n	8005126 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61bb      	str	r3, [r7, #24]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005126:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800513a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f83f 	bl	80051cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	; 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xQueueGenericCreate+0x2a>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	613b      	str	r3, [r7, #16]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3348      	adds	r3, #72	; 0x48
 8005190:	4618      	mov	r0, r3
 8005192:	f002 f871 	bl	8007278 <pvPortMalloc>
 8005196:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	3348      	adds	r3, #72	; 0x48
 80051a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051b0:	79fa      	ldrb	r2, [r7, #7]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f805 	bl	80051cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051c2:	69bb      	ldr	r3, [r7, #24]
	}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e002      	b.n	80051ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051fa:	2101      	movs	r1, #1
 80051fc:	69b8      	ldr	r0, [r7, #24]
 80051fe:	f7ff fecb 	bl	8004f98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800522a:	2300      	movs	r3, #0
 800522c:	2200      	movs	r2, #0
 800522e:	2100      	movs	r1, #0
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f86b 	bl	800530c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af00      	add	r7, sp, #0
 8005244:	4603      	mov	r3, r0
 8005246:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	461a      	mov	r2, r3
 8005254:	6939      	ldr	r1, [r7, #16]
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f7ff ff7e 	bl	8005158 <xQueueGenericCreate>
 800525c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff ffd3 	bl	800520a <prvInitialiseMutex>

		return xNewQueue;
 8005264:	68fb      	ldr	r3, [r7, #12]
	}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af02      	add	r7, sp, #8
 8005274:	4603      	mov	r3, r0
 8005276:	6039      	str	r1, [r7, #0]
 8005278:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800527a:	2301      	movs	r3, #1
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	6978      	ldr	r0, [r7, #20]
 800528e:	f7ff feeb 	bl	8005068 <xQueueGenericCreateStatic>
 8005292:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ffb8 	bl	800520a <prvInitialiseMutex>

		return xNewQueue;
 800529a:	68fb      	ldr	r3, [r7, #12]
	}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	613b      	str	r3, [r7, #16]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d90a      	bls.n	80052e8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60fb      	str	r3, [r7, #12]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052e8:	2202      	movs	r2, #2
 80052ea:	2100      	movs	r1, #0
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff33 	bl	8005158 <xQueueGenericCreate>
 80052f2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005300:	697b      	ldr	r3, [r7, #20]
	}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	; 0x38
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800531a:	2300      	movs	r3, #0
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xQueueGenericSend+0x32>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <xQueueGenericSend+0x40>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <xQueueGenericSend+0x44>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <xQueueGenericSend+0x46>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <xQueueGenericSend+0x60>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d103      	bne.n	800537a <xQueueGenericSend+0x6e>
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <xQueueGenericSend+0x72>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <xQueueGenericSend+0x74>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xQueueGenericSend+0x8e>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	623b      	str	r3, [r7, #32]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800539a:	f001 faff 	bl	800699c <xTaskGetSchedulerState>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <xQueueGenericSend+0x9e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <xQueueGenericSend+0xa2>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <xQueueGenericSend+0xa4>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueGenericSend+0xbe>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61fb      	str	r3, [r7, #28]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ca:	f001 fe33 	bl	8007034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <xQueueGenericSend+0xd4>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d129      	bne.n	8005434 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053e6:	f000 fbd9 	bl	8005b9c <prvCopyDataToQueue>
 80053ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d010      	beq.n	8005416 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	3324      	adds	r3, #36	; 0x24
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f90f 	bl	800661c <xTaskRemoveFromEventList>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d013      	beq.n	800542c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005404:	4b3f      	ldr	r3, [pc, #252]	; (8005504 <xQueueGenericSend+0x1f8>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	e00a      	b.n	800542c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800541c:	4b39      	ldr	r3, [pc, #228]	; (8005504 <xQueueGenericSend+0x1f8>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800542c:	f001 fe32 	bl	8007094 <vPortExitCritical>
				return pdPASS;
 8005430:	2301      	movs	r3, #1
 8005432:	e063      	b.n	80054fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800543a:	f001 fe2b 	bl	8007094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800543e:	2300      	movs	r3, #0
 8005440:	e05c      	b.n	80054fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	4618      	mov	r0, r3
 800544e:	f001 f947 	bl	80066e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005452:	2301      	movs	r3, #1
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005456:	f001 fe1d 	bl	8007094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800545a:	f000 fef7 	bl	800624c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800545e:	f001 fde9 	bl	8007034 <vPortEnterCritical>
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005468:	b25b      	sxtb	r3, r3
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d103      	bne.n	8005478 <xQueueGenericSend+0x16c>
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800547e:	b25b      	sxtb	r3, r3
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d103      	bne.n	800548e <xQueueGenericSend+0x182>
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800548e:	f001 fe01 	bl	8007094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005492:	1d3a      	adds	r2, r7, #4
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	4611      	mov	r1, r2
 800549a:	4618      	mov	r0, r3
 800549c:	f001 f936 	bl	800670c <xTaskCheckForTimeOut>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d124      	bne.n	80054f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054a8:	f000 fc70 	bl	8005d8c <prvIsQueueFull>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d018      	beq.n	80054e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	3310      	adds	r3, #16
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 f88a 	bl	80065d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c2:	f000 fbfb 	bl	8005cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054c6:	f000 fecf 	bl	8006268 <xTaskResumeAll>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f47f af7c 	bne.w	80053ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <xQueueGenericSend+0x1f8>)
 80054d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	e772      	b.n	80053ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e6:	f000 fbe9 	bl	8005cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ea:	f000 febd 	bl	8006268 <xTaskResumeAll>
 80054ee:	e76c      	b.n	80053ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f2:	f000 fbe3 	bl	8005cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054f6:	f000 feb7 	bl	8006268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3738      	adds	r7, #56	; 0x38
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b090      	sub	sp, #64	; 0x40
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d103      	bne.n	8005544 <xQueueGenericSendFromISR+0x3c>
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <xQueueGenericSendFromISR+0x40>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <xQueueGenericSendFromISR+0x42>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d103      	bne.n	8005572 <xQueueGenericSendFromISR+0x6a>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <xQueueGenericSendFromISR+0x6e>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericSendFromISR+0x70>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	623b      	str	r3, [r7, #32]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005592:	f001 fe31 	bl	80071f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005596:	f3ef 8211 	mrs	r2, BASEPRI
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	61fa      	str	r2, [r7, #28]
 80055ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d302      	bcc.n	80055c4 <xQueueGenericSendFromISR+0xbc>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d12f      	bne.n	8005624 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055da:	f000 fadf 	bl	8005b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d112      	bne.n	800560e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d016      	beq.n	800561e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f811 	bl	800661c <xTaskRemoveFromEventList>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00e      	beq.n	800561e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	e007      	b.n	800561e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800560e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005612:	3301      	adds	r3, #1
 8005614:	b2db      	uxtb	r3, r3
 8005616:	b25a      	sxtb	r2, r3
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800561e:	2301      	movs	r3, #1
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005622:	e001      	b.n	8005628 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005636:	4618      	mov	r0, r3
 8005638:	3740      	adds	r7, #64	; 0x40
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08e      	sub	sp, #56	; 0x38
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	623b      	str	r3, [r7, #32]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	61fb      	str	r3, [r7, #28]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <xQueueGiveFromISR+0x58>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xQueueGiveFromISR+0x5c>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGiveFromISR+0x5e>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	61bb      	str	r3, [r7, #24]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056b6:	f001 fd9f 	bl	80071f8 <vPortValidateInterruptPriority>
	__asm volatile
 80056ba:	f3ef 8211 	mrs	r2, BASEPRI
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	617a      	str	r2, [r7, #20]
 80056d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80056d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d22b      	bcs.n	800573e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d112      	bne.n	8005728 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	3324      	adds	r3, #36	; 0x24
 800570e:	4618      	mov	r0, r3
 8005710:	f000 ff84 	bl	800661c <xTaskRemoveFromEventList>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e007      	b.n	8005738 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800572c:	3301      	adds	r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	b25a      	sxtb	r2, r3
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005738:	2301      	movs	r3, #1
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
 800573c:	e001      	b.n	8005742 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f383 8811 	msr	BASEPRI, r3
}
 800574c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005750:	4618      	mov	r0, r3
 8005752:	3738      	adds	r7, #56	; 0x38
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	; 0x30
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005764:	2300      	movs	r3, #0
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <xQueueReceive+0x30>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	623b      	str	r3, [r7, #32]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <xQueueReceive+0x3e>
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <xQueueReceive+0x42>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <xQueueReceive+0x44>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <xQueueReceive+0x5e>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	61fb      	str	r3, [r7, #28]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057b6:	f001 f8f1 	bl	800699c <xTaskGetSchedulerState>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <xQueueReceive+0x6e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <xQueueReceive+0x72>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <xQueueReceive+0x74>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <xQueueReceive+0x8e>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	61bb      	str	r3, [r7, #24]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057e6:	f001 fc25 	bl	8007034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01f      	beq.n	8005836 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fa:	f000 fa39 	bl	8005c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00f      	beq.n	800582e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	3310      	adds	r3, #16
 8005812:	4618      	mov	r0, r3
 8005814:	f000 ff02 	bl	800661c <xTaskRemoveFromEventList>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <xQueueReceive+0x1bc>)
 8005820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800582e:	f001 fc31 	bl	8007094 <vPortExitCritical>
				return pdPASS;
 8005832:	2301      	movs	r3, #1
 8005834:	e069      	b.n	800590a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800583c:	f001 fc2a 	bl	8007094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005840:	2300      	movs	r3, #0
 8005842:	e062      	b.n	800590a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800584a:	f107 0310 	add.w	r3, r7, #16
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ff46 	bl	80066e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005858:	f001 fc1c 	bl	8007094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800585c:	f000 fcf6 	bl	800624c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005860:	f001 fbe8 	bl	8007034 <vPortEnterCritical>
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800586a:	b25b      	sxtb	r3, r3
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d103      	bne.n	800587a <xQueueReceive+0x122>
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005880:	b25b      	sxtb	r3, r3
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d103      	bne.n	8005890 <xQueueReceive+0x138>
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005890:	f001 fc00 	bl	8007094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005894:	1d3a      	adds	r2, r7, #4
 8005896:	f107 0310 	add.w	r3, r7, #16
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f000 ff35 	bl	800670c <xTaskCheckForTimeOut>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d123      	bne.n	80058f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058aa:	f000 fa59 	bl	8005d60 <prvIsQueueEmpty>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d017      	beq.n	80058e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	3324      	adds	r3, #36	; 0x24
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fe89 	bl	80065d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c4:	f000 f9fa 	bl	8005cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058c8:	f000 fcce 	bl	8006268 <xTaskResumeAll>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d189      	bne.n	80057e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <xQueueReceive+0x1bc>)
 80058d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	e780      	b.n	80057e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e6:	f000 f9e9 	bl	8005cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ea:	f000 fcbd 	bl	8006268 <xTaskResumeAll>
 80058ee:	e77a      	b.n	80057e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f2:	f000 f9e3 	bl	8005cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f6:	f000 fcb7 	bl	8006268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fc:	f000 fa30 	bl	8005d60 <prvIsQueueEmpty>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	f43f af6f 	beq.w	80057e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800590a:	4618      	mov	r0, r3
 800590c:	3730      	adds	r7, #48	; 0x30
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	; 0x38
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	61fb      	str	r3, [r7, #28]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005968:	f001 f818 	bl	800699c <xTaskGetSchedulerState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <xQueueSemaphoreTake+0x60>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueSemaphoreTake+0x64>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueSemaphoreTake+0x66>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61bb      	str	r3, [r7, #24]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005998:	f001 fb4c 	bl	8007034 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d024      	beq.n	80059f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	1e5a      	subs	r2, r3, #1
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059b8:	f001 f998 	bl	8006cec <pvTaskIncrementMutexHeldCount>
 80059bc:	4602      	mov	r2, r0
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00f      	beq.n	80059ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	3310      	adds	r3, #16
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fe24 	bl	800661c <xTaskRemoveFromEventList>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059da:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <xQueueSemaphoreTake+0x214>)
 80059dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059ea:	f001 fb53 	bl	8007094 <vPortExitCritical>
				return pdPASS;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e097      	b.n	8005b22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d111      	bne.n	8005a1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	617b      	str	r3, [r7, #20]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a14:	f001 fb3e 	bl	8007094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e082      	b.n	8005b22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a22:	f107 030c 	add.w	r3, r7, #12
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fe5a 	bl	80066e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a30:	f001 fb30 	bl	8007094 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a34:	f000 fc0a 	bl	800624c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a38:	f001 fafc 	bl	8007034 <vPortEnterCritical>
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a42:	b25b      	sxtb	r3, r3
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d103      	bne.n	8005a52 <xQueueSemaphoreTake+0x13a>
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d103      	bne.n	8005a68 <xQueueSemaphoreTake+0x150>
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a68:	f001 fb14 	bl	8007094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a6c:	463a      	mov	r2, r7
 8005a6e:	f107 030c 	add.w	r3, r7, #12
 8005a72:	4611      	mov	r1, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fe49 	bl	800670c <xTaskCheckForTimeOut>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d132      	bne.n	8005ae6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a82:	f000 f96d 	bl	8005d60 <prvIsQueueEmpty>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d026      	beq.n	8005ada <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005a94:	f001 face 	bl	8007034 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 ff9b 	bl	80069d8 <xTaskPriorityInherit>
 8005aa2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005aa4:	f001 faf6 	bl	8007094 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	3324      	adds	r3, #36	; 0x24
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fd8f 	bl	80065d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ab8:	f000 f900 	bl	8005cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005abc:	f000 fbd4 	bl	8006268 <xTaskResumeAll>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f47f af68 	bne.w	8005998 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005ac8:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <xQueueSemaphoreTake+0x214>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	e75e      	b.n	8005998 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005adc:	f000 f8ee 	bl	8005cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae0:	f000 fbc2 	bl	8006268 <xTaskResumeAll>
 8005ae4:	e758      	b.n	8005998 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ae8:	f000 f8e8 	bl	8005cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aec:	f000 fbbc 	bl	8006268 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af2:	f000 f935 	bl	8005d60 <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f43f af4d 	beq.w	8005998 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b04:	f001 fa96 	bl	8007034 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b0a:	f000 f82f 	bl	8005b6c <prvGetDisinheritPriorityAfterTimeout>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 f85a 	bl	8006bd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b1c:	f001 faba 	bl	8007094 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3738      	adds	r7, #56	; 0x38
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60fb      	str	r3, [r7, #12]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b5e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b60:	4618      	mov	r0, r3
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1c3 0307 	rsb	r3, r3, #7
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e001      	b.n	8005b8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10d      	bne.n	8005bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d14d      	bne.n	8005c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 ff7c 	bl	8006ac4 <xTaskPriorityDisinherit>
 8005bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	e043      	b.n	8005c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d119      	bne.n	8005c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6858      	ldr	r0, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	461a      	mov	r2, r3
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	f001 fe53 	bl	8007892 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d32b      	bcc.n	8005c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	e026      	b.n	8005c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68d8      	ldr	r0, [r3, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	f001 fe39 	bl	8007892 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	425b      	negs	r3, r3
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d207      	bcs.n	8005c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	425b      	negs	r3, r3
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d105      	bne.n	8005c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c66:	697b      	ldr	r3, [r7, #20]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d303      	bcc.n	8005ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68d9      	ldr	r1, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	461a      	mov	r2, r3
 8005cae:	6838      	ldr	r0, [r7, #0]
 8005cb0:	f001 fdef 	bl	8007892 <memcpy>
	}
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cc4:	f001 f9b6 	bl	8007034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd0:	e011      	b.n	8005cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d012      	beq.n	8005d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3324      	adds	r3, #36	; 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fc9c 	bl	800661c <xTaskRemoveFromEventList>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cea:	f000 fd71 	bl	80067d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dce9      	bgt.n	8005cd2 <prvUnlockQueue+0x16>
 8005cfe:	e000      	b.n	8005d02 <prvUnlockQueue+0x46>
					break;
 8005d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	22ff      	movs	r2, #255	; 0xff
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d0a:	f001 f9c3 	bl	8007094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d0e:	f001 f991 	bl	8007034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d1a:	e011      	b.n	8005d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d012      	beq.n	8005d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3310      	adds	r3, #16
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fc77 	bl	800661c <xTaskRemoveFromEventList>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d34:	f000 fd4c 	bl	80067d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dce9      	bgt.n	8005d1c <prvUnlockQueue+0x60>
 8005d48:	e000      	b.n	8005d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	22ff      	movs	r2, #255	; 0xff
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d54:	f001 f99e 	bl	8007094 <vPortExitCritical>
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d68:	f001 f964 	bl	8007034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e001      	b.n	8005d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d7e:	f001 f989 	bl	8007094 <vPortExitCritical>

	return xReturn;
 8005d82:	68fb      	ldr	r3, [r7, #12]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d94:	f001 f94e 	bl	8007034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d102      	bne.n	8005daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e001      	b.n	8005dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dae:	f001 f971 	bl	8007094 <vPortExitCritical>

	return xReturn;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08e      	sub	sp, #56	; 0x38
 8005dc0:	af04      	add	r7, sp, #16
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	623b      	str	r3, [r7, #32]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xTaskCreateStatic+0x46>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	61fb      	str	r3, [r7, #28]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e02:	23b4      	movs	r3, #180	; 0xb4
 8005e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2bb4      	cmp	r3, #180	; 0xb4
 8005e0a:	d00a      	beq.n	8005e22 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61bb      	str	r3, [r7, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01e      	beq.n	8005e68 <xTaskCreateStatic+0xac>
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e42:	2300      	movs	r3, #0
 8005e44:	9303      	str	r3, [sp, #12]
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	9302      	str	r3, [sp, #8]
 8005e4a:	f107 0314 	add.w	r3, r7, #20
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f850 	bl	8005f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e62:	f000 f8eb 	bl	800603c <prvAddNewTaskToReadyList>
 8005e66:	e001      	b.n	8005e6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e6c:	697b      	ldr	r3, [r7, #20]
	}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3728      	adds	r7, #40	; 0x28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08c      	sub	sp, #48	; 0x30
 8005e7a:	af04      	add	r7, sp, #16
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 f9f4 	bl	8007278 <pvPortMalloc>
 8005e90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e98:	20b4      	movs	r0, #180	; 0xb4
 8005e9a:	f001 f9ed 	bl	8007278 <pvPortMalloc>
 8005e9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8005eac:	e005      	b.n	8005eba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eae:	6978      	ldr	r0, [r7, #20]
 8005eb0:	f001 faae 	bl	8007410 <vPortFree>
 8005eb4:	e001      	b.n	8005eba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d017      	beq.n	8005ef0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ec8:	88fa      	ldrh	r2, [r7, #6]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9303      	str	r3, [sp, #12]
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	9302      	str	r3, [sp, #8]
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f80e 	bl	8005f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee4:	69f8      	ldr	r0, [r7, #28]
 8005ee6:	f000 f8a9 	bl	800603c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eea:	2301      	movs	r3, #1
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e002      	b.n	8005ef6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	617b      	str	r3, [r7, #20]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01f      	beq.n	8005f8e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	e012      	b.n	8005f7a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	3334      	adds	r3, #52	; 0x34
 8005f64:	460a      	mov	r2, r1
 8005f66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b0f      	cmp	r3, #15
 8005f7e:	d9e9      	bls.n	8005f54 <prvInitialiseNewTask+0x54>
 8005f80:	e000      	b.n	8005f84 <prvInitialiseNewTask+0x84>
			{
				break;
 8005f82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f8c:	e003      	b.n	8005f96 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	2b06      	cmp	r3, #6
 8005f9a:	d901      	bls.n	8005fa0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f9c:	2306      	movs	r3, #6
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	2200      	movs	r2, #0
 8005fb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe ff5a 	bl	8004e70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe ff55 	bl	8004e70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	f1c3 0207 	rsb	r2, r3, #7
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	334c      	adds	r3, #76	; 0x4c
 8005ff0:	2260      	movs	r2, #96	; 0x60
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fc5a 	bl	80078ae <memset>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <prvInitialiseNewTask+0x130>)
 8005ffe:	651a      	str	r2, [r3, #80]	; 0x50
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <prvInitialiseNewTask+0x134>)
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	4a0b      	ldr	r2, [pc, #44]	; (8006038 <prvInitialiseNewTask+0x138>)
 800600a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	69b8      	ldr	r0, [r7, #24]
 8006012:	f000 fee5 	bl	8006de0 <pxPortInitialiseStack>
 8006016:	4602      	mov	r2, r0
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	080087fc 	.word	0x080087fc
 8006034:	0800881c 	.word	0x0800881c
 8006038:	080087dc 	.word	0x080087dc

0800603c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006044:	f000 fff6 	bl	8007034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006048:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <prvAddNewTaskToReadyList+0xb8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <prvAddNewTaskToReadyList+0xb8>)
 8006050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006052:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <prvAddNewTaskToReadyList+0xbc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800605a:	4a27      	ldr	r2, [pc, #156]	; (80060f8 <prvAddNewTaskToReadyList+0xbc>)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006060:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <prvAddNewTaskToReadyList+0xb8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d110      	bne.n	800608a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006068:	f000 fbd6 	bl	8006818 <prvInitialiseTaskLists>
 800606c:	e00d      	b.n	800608a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800606e:	4b23      	ldr	r3, [pc, #140]	; (80060fc <prvAddNewTaskToReadyList+0xc0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006076:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <prvAddNewTaskToReadyList+0xbc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	429a      	cmp	r2, r3
 8006082:	d802      	bhi.n	800608a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006084:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <prvAddNewTaskToReadyList+0xbc>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800608a:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <prvAddNewTaskToReadyList+0xc4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <prvAddNewTaskToReadyList+0xc4>)
 8006092:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2201      	movs	r2, #1
 800609a:	409a      	lsls	r2, r3
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	4a18      	ldr	r2, [pc, #96]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a15      	ldr	r2, [pc, #84]	; (8006108 <prvAddNewTaskToReadyList+0xcc>)
 80060b4:	441a      	add	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f7fe fee4 	bl	8004e8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060c2:	f000 ffe7 	bl	8007094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060c6:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <prvAddNewTaskToReadyList+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <prvAddNewTaskToReadyList+0xbc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d207      	bcs.n	80060ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <prvAddNewTaskToReadyList+0xd0>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000834 	.word	0x20000834
 80060f8:	20000734 	.word	0x20000734
 80060fc:	20000840 	.word	0x20000840
 8006100:	20000850 	.word	0x20000850
 8006104:	2000083c 	.word	0x2000083c
 8006108:	20000738 	.word	0x20000738
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d017      	beq.n	8006152 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <vTaskDelay+0x60>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <vTaskDelay+0x30>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	60bb      	str	r3, [r7, #8]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006140:	f000 f884 	bl	800624c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006144:	2100      	movs	r1, #0
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fde4 	bl	8006d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800614c:	f000 f88c 	bl	8006268 <xTaskResumeAll>
 8006150:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <vTaskDelay+0x64>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	2000085c 	.word	0x2000085c
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006186:	463a      	mov	r2, r7
 8006188:	1d39      	adds	r1, r7, #4
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4618      	mov	r0, r3
 8006190:	f7fa fa00 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	9202      	str	r2, [sp, #8]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	2300      	movs	r3, #0
 80061a4:	460a      	mov	r2, r1
 80061a6:	4921      	ldr	r1, [pc, #132]	; (800622c <vTaskStartScheduler+0xb4>)
 80061a8:	4821      	ldr	r0, [pc, #132]	; (8006230 <vTaskStartScheduler+0xb8>)
 80061aa:	f7ff fe07 	bl	8005dbc <xTaskCreateStatic>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4a20      	ldr	r2, [pc, #128]	; (8006234 <vTaskStartScheduler+0xbc>)
 80061b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061b4:	4b1f      	ldr	r3, [pc, #124]	; (8006234 <vTaskStartScheduler+0xbc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e001      	b.n	80061c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d11b      	bne.n	8006204 <vTaskStartScheduler+0x8c>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	613b      	str	r3, [r7, #16]
}
 80061de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061e0:	4b15      	ldr	r3, [pc, #84]	; (8006238 <vTaskStartScheduler+0xc0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	334c      	adds	r3, #76	; 0x4c
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <vTaskStartScheduler+0xc4>)
 80061e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <vTaskStartScheduler+0xc8>)
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061f2:	4b14      	ldr	r3, [pc, #80]	; (8006244 <vTaskStartScheduler+0xcc>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061f8:	4b13      	ldr	r3, [pc, #76]	; (8006248 <vTaskStartScheduler+0xd0>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061fe:	f000 fe77 	bl	8006ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006202:	e00e      	b.n	8006222 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d10a      	bne.n	8006222 <vTaskStartScheduler+0xaa>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60fb      	str	r3, [r7, #12]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <vTaskStartScheduler+0xa8>
}
 8006222:	bf00      	nop
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	08008788 	.word	0x08008788
 8006230:	080067e9 	.word	0x080067e9
 8006234:	20000858 	.word	0x20000858
 8006238:	20000734 	.word	0x20000734
 800623c:	20000010 	.word	0x20000010
 8006240:	20000854 	.word	0x20000854
 8006244:	20000840 	.word	0x20000840
 8006248:	20000838 	.word	0x20000838

0800624c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <vTaskSuspendAll+0x18>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	4a03      	ldr	r2, [pc, #12]	; (8006264 <vTaskSuspendAll+0x18>)
 8006258:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800625a:	bf00      	nop
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	2000085c 	.word	0x2000085c

08006268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006276:	4b41      	ldr	r3, [pc, #260]	; (800637c <xTaskResumeAll+0x114>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <xTaskResumeAll+0x2c>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	603b      	str	r3, [r7, #0]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006294:	f000 fece 	bl	8007034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006298:	4b38      	ldr	r3, [pc, #224]	; (800637c <xTaskResumeAll+0x114>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3b01      	subs	r3, #1
 800629e:	4a37      	ldr	r2, [pc, #220]	; (800637c <xTaskResumeAll+0x114>)
 80062a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <xTaskResumeAll+0x114>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d161      	bne.n	800636e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062aa:	4b35      	ldr	r3, [pc, #212]	; (8006380 <xTaskResumeAll+0x118>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d05d      	beq.n	800636e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b2:	e02e      	b.n	8006312 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b4:	4b33      	ldr	r3, [pc, #204]	; (8006384 <xTaskResumeAll+0x11c>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3318      	adds	r3, #24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fe3f 	bl	8004f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fe3a 	bl	8004f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	2201      	movs	r2, #1
 80062d6:	409a      	lsls	r2, r3
 80062d8:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <xTaskResumeAll+0x120>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	4a2a      	ldr	r2, [pc, #168]	; (8006388 <xTaskResumeAll+0x120>)
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4a27      	ldr	r2, [pc, #156]	; (800638c <xTaskResumeAll+0x124>)
 80062f0:	441a      	add	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7fe fdc6 	bl	8004e8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4b23      	ldr	r3, [pc, #140]	; (8006390 <xTaskResumeAll+0x128>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <xTaskResumeAll+0x12c>)
 800630e:	2201      	movs	r2, #1
 8006310:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <xTaskResumeAll+0x11c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1cc      	bne.n	80062b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006320:	f000 fb1c 	bl	800695c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006324:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <xTaskResumeAll+0x130>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006330:	f000 f836 	bl	80063a0 <xTaskIncrementTick>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <xTaskResumeAll+0x12c>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3b01      	subs	r3, #1
 8006344:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f1      	bne.n	8006330 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800634c:	4b12      	ldr	r3, [pc, #72]	; (8006398 <xTaskResumeAll+0x130>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <xTaskResumeAll+0x12c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800635a:	2301      	movs	r3, #1
 800635c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <xTaskResumeAll+0x134>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800636e:	f000 fe91 	bl	8007094 <vPortExitCritical>

	return xAlreadyYielded;
 8006372:	68bb      	ldr	r3, [r7, #8]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2000085c 	.word	0x2000085c
 8006380:	20000834 	.word	0x20000834
 8006384:	200007f4 	.word	0x200007f4
 8006388:	2000083c 	.word	0x2000083c
 800638c:	20000738 	.word	0x20000738
 8006390:	20000734 	.word	0x20000734
 8006394:	20000848 	.word	0x20000848
 8006398:	20000844 	.word	0x20000844
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063aa:	4b4e      	ldr	r3, [pc, #312]	; (80064e4 <xTaskIncrementTick+0x144>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 808e 	bne.w	80064d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063b4:	4b4c      	ldr	r3, [pc, #304]	; (80064e8 <xTaskIncrementTick+0x148>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063bc:	4a4a      	ldr	r2, [pc, #296]	; (80064e8 <xTaskIncrementTick+0x148>)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d120      	bne.n	800640a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063c8:	4b48      	ldr	r3, [pc, #288]	; (80064ec <xTaskIncrementTick+0x14c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	603b      	str	r3, [r7, #0]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <xTaskIncrementTick+0x46>
 80063e8:	4b40      	ldr	r3, [pc, #256]	; (80064ec <xTaskIncrementTick+0x14c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <xTaskIncrementTick+0x150>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a3e      	ldr	r2, [pc, #248]	; (80064ec <xTaskIncrementTick+0x14c>)
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4a3e      	ldr	r2, [pc, #248]	; (80064f0 <xTaskIncrementTick+0x150>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b3d      	ldr	r3, [pc, #244]	; (80064f4 <xTaskIncrementTick+0x154>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3301      	adds	r3, #1
 8006402:	4a3c      	ldr	r2, [pc, #240]	; (80064f4 <xTaskIncrementTick+0x154>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	f000 faa9 	bl	800695c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800640a:	4b3b      	ldr	r3, [pc, #236]	; (80064f8 <xTaskIncrementTick+0x158>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	429a      	cmp	r2, r3
 8006412:	d348      	bcc.n	80064a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006414:	4b35      	ldr	r3, [pc, #212]	; (80064ec <xTaskIncrementTick+0x14c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641e:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <xTaskIncrementTick+0x158>)
 8006420:	f04f 32ff 	mov.w	r2, #4294967295
 8006424:	601a      	str	r2, [r3, #0]
					break;
 8006426:	e03e      	b.n	80064a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006428:	4b30      	ldr	r3, [pc, #192]	; (80064ec <xTaskIncrementTick+0x14c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d203      	bcs.n	8006448 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006440:	4a2d      	ldr	r2, [pc, #180]	; (80064f8 <xTaskIncrementTick+0x158>)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006446:	e02e      	b.n	80064a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3304      	adds	r3, #4
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fd79 	bl	8004f44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3318      	adds	r3, #24
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fd70 	bl	8004f44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	2201      	movs	r2, #1
 800646a:	409a      	lsls	r2, r3
 800646c:	4b23      	ldr	r3, [pc, #140]	; (80064fc <xTaskIncrementTick+0x15c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4313      	orrs	r3, r2
 8006472:	4a22      	ldr	r2, [pc, #136]	; (80064fc <xTaskIncrementTick+0x15c>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <xTaskIncrementTick+0x160>)
 8006484:	441a      	add	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fe fcfc 	bl	8004e8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006496:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <xTaskIncrementTick+0x164>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	429a      	cmp	r2, r3
 800649e:	d3b9      	bcc.n	8006414 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a4:	e7b6      	b.n	8006414 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064a6:	4b17      	ldr	r3, [pc, #92]	; (8006504 <xTaskIncrementTick+0x164>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	4914      	ldr	r1, [pc, #80]	; (8006500 <xTaskIncrementTick+0x160>)
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d901      	bls.n	80064c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064c2:	4b11      	ldr	r3, [pc, #68]	; (8006508 <xTaskIncrementTick+0x168>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e004      	b.n	80064da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064d0:	4b0e      	ldr	r3, [pc, #56]	; (800650c <xTaskIncrementTick+0x16c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a0d      	ldr	r2, [pc, #52]	; (800650c <xTaskIncrementTick+0x16c>)
 80064d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064da:	697b      	ldr	r3, [r7, #20]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	2000085c 	.word	0x2000085c
 80064e8:	20000838 	.word	0x20000838
 80064ec:	200007ec 	.word	0x200007ec
 80064f0:	200007f0 	.word	0x200007f0
 80064f4:	2000084c 	.word	0x2000084c
 80064f8:	20000854 	.word	0x20000854
 80064fc:	2000083c 	.word	0x2000083c
 8006500:	20000738 	.word	0x20000738
 8006504:	20000734 	.word	0x20000734
 8006508:	20000848 	.word	0x20000848
 800650c:	20000844 	.word	0x20000844

08006510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006516:	4b29      	ldr	r3, [pc, #164]	; (80065bc <vTaskSwitchContext+0xac>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <vTaskSwitchContext+0xb0>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006524:	e044      	b.n	80065b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006526:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <vTaskSwitchContext+0xb0>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652c:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <vTaskSwitchContext+0xb4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	fab3 f383 	clz	r3, r3
 8006538:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	f1c3 031f 	rsb	r3, r3, #31
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	4921      	ldr	r1, [pc, #132]	; (80065c8 <vTaskSwitchContext+0xb8>)
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	607b      	str	r3, [r7, #4]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <vTaskSwitchContext+0x5a>
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <vTaskSwitchContext+0xb8>)
 8006578:	4413      	add	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3308      	adds	r3, #8
 800658e:	429a      	cmp	r2, r3
 8006590:	d104      	bne.n	800659c <vTaskSwitchContext+0x8c>
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <vTaskSwitchContext+0xbc>)
 80065a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <vTaskSwitchContext+0xbc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	334c      	adds	r3, #76	; 0x4c
 80065ac:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <vTaskSwitchContext+0xc0>)
 80065ae:	6013      	str	r3, [r2, #0]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	2000085c 	.word	0x2000085c
 80065c0:	20000848 	.word	0x20000848
 80065c4:	2000083c 	.word	0x2000083c
 80065c8:	20000738 	.word	0x20000738
 80065cc:	20000734 	.word	0x20000734
 80065d0:	20000010 	.word	0x20000010

080065d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	60fb      	str	r3, [r7, #12]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065fa:	4b07      	ldr	r3, [pc, #28]	; (8006618 <vTaskPlaceOnEventList+0x44>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3318      	adds	r3, #24
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fe fc65 	bl	8004ed2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006608:	2101      	movs	r1, #1
 800660a:	6838      	ldr	r0, [r7, #0]
 800660c:	f000 fb82 	bl	8006d14 <prvAddCurrentTaskToDelayedList>
}
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000734 	.word	0x20000734

0800661c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60fb      	str	r3, [r7, #12]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	3318      	adds	r3, #24
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fc79 	bl	8004f44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <xTaskRemoveFromEventList+0xac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d11c      	bne.n	8006694 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3304      	adds	r3, #4
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fc70 	bl	8004f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	2201      	movs	r2, #1
 800666a:	409a      	lsls	r2, r3
 800666c:	4b17      	ldr	r3, [pc, #92]	; (80066cc <xTaskRemoveFromEventList+0xb0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4313      	orrs	r3, r2
 8006672:	4a16      	ldr	r2, [pc, #88]	; (80066cc <xTaskRemoveFromEventList+0xb0>)
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <xTaskRemoveFromEventList+0xb4>)
 8006684:	441a      	add	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3304      	adds	r3, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7fe fbfc 	bl	8004e8a <vListInsertEnd>
 8006692:	e005      	b.n	80066a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3318      	adds	r3, #24
 8006698:	4619      	mov	r1, r3
 800669a:	480e      	ldr	r0, [pc, #56]	; (80066d4 <xTaskRemoveFromEventList+0xb8>)
 800669c:	f7fe fbf5 	bl	8004e8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <xTaskRemoveFromEventList+0xbc>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d905      	bls.n	80066ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066ae:	2301      	movs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <xTaskRemoveFromEventList+0xc0>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e001      	b.n	80066be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066be:	697b      	ldr	r3, [r7, #20]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	2000085c 	.word	0x2000085c
 80066cc:	2000083c 	.word	0x2000083c
 80066d0:	20000738 	.word	0x20000738
 80066d4:	200007f4 	.word	0x200007f4
 80066d8:	20000734 	.word	0x20000734
 80066dc:	20000848 	.word	0x20000848

080066e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066e8:	4b06      	ldr	r3, [pc, #24]	; (8006704 <vTaskInternalSetTimeOutState+0x24>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <vTaskInternalSetTimeOutState+0x28>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	605a      	str	r2, [r3, #4]
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	2000084c 	.word	0x2000084c
 8006708:	20000838 	.word	0x20000838

0800670c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	613b      	str	r3, [r7, #16]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800674e:	f000 fc71 	bl	8007034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006752:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <xTaskCheckForTimeOut+0xbc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d102      	bne.n	8006772 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	e023      	b.n	80067ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <xTaskCheckForTimeOut+0xc0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d007      	beq.n	800678e <xTaskCheckForTimeOut+0x82>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e015      	b.n	80067ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	429a      	cmp	r2, r3
 8006796:	d20b      	bcs.n	80067b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff9b 	bl	80066e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067aa:	2300      	movs	r3, #0
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	e004      	b.n	80067ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067ba:	f000 fc6b 	bl	8007094 <vPortExitCritical>

	return xReturn;
 80067be:	69fb      	ldr	r3, [r7, #28]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20000838 	.word	0x20000838
 80067cc:	2000084c 	.word	0x2000084c

080067d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067d4:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <vTaskMissedYield+0x14>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
}
 80067da:	bf00      	nop
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000848 	.word	0x20000848

080067e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067f0:	f000 f852 	bl	8006898 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <prvIdleTask+0x28>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d9f9      	bls.n	80067f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <prvIdleTask+0x2c>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800680c:	e7f0      	b.n	80067f0 <prvIdleTask+0x8>
 800680e:	bf00      	nop
 8006810:	20000738 	.word	0x20000738
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	e00c      	b.n	800683e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4a12      	ldr	r2, [pc, #72]	; (8006878 <prvInitialiseTaskLists+0x60>)
 8006830:	4413      	add	r3, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fafc 	bl	8004e30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3301      	adds	r3, #1
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b06      	cmp	r3, #6
 8006842:	d9ef      	bls.n	8006824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006844:	480d      	ldr	r0, [pc, #52]	; (800687c <prvInitialiseTaskLists+0x64>)
 8006846:	f7fe faf3 	bl	8004e30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800684a:	480d      	ldr	r0, [pc, #52]	; (8006880 <prvInitialiseTaskLists+0x68>)
 800684c:	f7fe faf0 	bl	8004e30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006850:	480c      	ldr	r0, [pc, #48]	; (8006884 <prvInitialiseTaskLists+0x6c>)
 8006852:	f7fe faed 	bl	8004e30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006856:	480c      	ldr	r0, [pc, #48]	; (8006888 <prvInitialiseTaskLists+0x70>)
 8006858:	f7fe faea 	bl	8004e30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800685c:	480b      	ldr	r0, [pc, #44]	; (800688c <prvInitialiseTaskLists+0x74>)
 800685e:	f7fe fae7 	bl	8004e30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <prvInitialiseTaskLists+0x78>)
 8006864:	4a05      	ldr	r2, [pc, #20]	; (800687c <prvInitialiseTaskLists+0x64>)
 8006866:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvInitialiseTaskLists+0x7c>)
 800686a:	4a05      	ldr	r2, [pc, #20]	; (8006880 <prvInitialiseTaskLists+0x68>)
 800686c:	601a      	str	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000738 	.word	0x20000738
 800687c:	200007c4 	.word	0x200007c4
 8006880:	200007d8 	.word	0x200007d8
 8006884:	200007f4 	.word	0x200007f4
 8006888:	20000808 	.word	0x20000808
 800688c:	20000820 	.word	0x20000820
 8006890:	200007ec 	.word	0x200007ec
 8006894:	200007f0 	.word	0x200007f0

08006898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800689e:	e019      	b.n	80068d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068a0:	f000 fbc8 	bl	8007034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <prvCheckTasksWaitingTermination+0x50>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe fb47 	bl	8004f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <prvCheckTasksWaitingTermination+0x54>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	4a0b      	ldr	r2, [pc, #44]	; (80068ec <prvCheckTasksWaitingTermination+0x54>)
 80068be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvCheckTasksWaitingTermination+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	4a0a      	ldr	r2, [pc, #40]	; (80068f0 <prvCheckTasksWaitingTermination+0x58>)
 80068c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ca:	f000 fbe3 	bl	8007094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f810 	bl	80068f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <prvCheckTasksWaitingTermination+0x58>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e1      	bne.n	80068a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000808 	.word	0x20000808
 80068ec:	20000834 	.word	0x20000834
 80068f0:	2000081c 	.word	0x2000081c

080068f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	334c      	adds	r3, #76	; 0x4c
 8006900:	4618      	mov	r0, r3
 8006902:	f001 f897 	bl	8007a34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fd7b 	bl	8007410 <vPortFree>
				vPortFree( pxTCB );
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fd78 	bl	8007410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006920:	e018      	b.n	8006954 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d103      	bne.n	8006934 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fd6f 	bl	8007410 <vPortFree>
	}
 8006932:	e00f      	b.n	8006954 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800693a:	2b02      	cmp	r3, #2
 800693c:	d00a      	beq.n	8006954 <prvDeleteTCB+0x60>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <prvDeleteTCB+0x5e>
	}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006962:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <prvResetNextTaskUnblockTime+0x38>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <prvResetNextTaskUnblockTime+0x3c>)
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006974:	e008      	b.n	8006988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <prvResetNextTaskUnblockTime+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvResetNextTaskUnblockTime+0x3c>)
 8006986:	6013      	str	r3, [r2, #0]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	200007ec 	.word	0x200007ec
 8006998:	20000854 	.word	0x20000854

0800699c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <xTaskGetSchedulerState+0x34>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069aa:	2301      	movs	r3, #1
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	e008      	b.n	80069c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b0:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <xTaskGetSchedulerState+0x38>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069b8:	2302      	movs	r3, #2
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e001      	b.n	80069c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069c2:	687b      	ldr	r3, [r7, #4]
	}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20000840 	.word	0x20000840
 80069d4:	2000085c 	.word	0x2000085c

080069d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d05e      	beq.n	8006aac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f2:	4b31      	ldr	r3, [pc, #196]	; (8006ab8 <xTaskPriorityInherit+0xe0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d24e      	bcs.n	8006a9a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db06      	blt.n	8006a12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a04:	4b2c      	ldr	r3, [pc, #176]	; (8006ab8 <xTaskPriorityInherit+0xe0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	f1c3 0207 	rsb	r2, r3, #7
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6959      	ldr	r1, [r3, #20]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4a26      	ldr	r2, [pc, #152]	; (8006abc <xTaskPriorityInherit+0xe4>)
 8006a24:	4413      	add	r3, r2
 8006a26:	4299      	cmp	r1, r3
 8006a28:	d12f      	bne.n	8006a8a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fa88 	bl	8004f44 <uxListRemove>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	2201      	movs	r2, #1
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43da      	mvns	r2, r3
 8006a46:	4b1e      	ldr	r3, [pc, #120]	; (8006ac0 <xTaskPriorityInherit+0xe8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <xTaskPriorityInherit+0xe8>)
 8006a4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a50:	4b19      	ldr	r3, [pc, #100]	; (8006ab8 <xTaskPriorityInherit+0xe0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	2201      	movs	r2, #1
 8006a60:	409a      	lsls	r2, r3
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <xTaskPriorityInherit+0xe8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <xTaskPriorityInherit+0xe8>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4a10      	ldr	r2, [pc, #64]	; (8006abc <xTaskPriorityInherit+0xe4>)
 8006a7a:	441a      	add	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	f7fe fa01 	bl	8004e8a <vListInsertEnd>
 8006a88:	e004      	b.n	8006a94 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <xTaskPriorityInherit+0xe0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e008      	b.n	8006aac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <xTaskPriorityInherit+0xe0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d201      	bcs.n	8006aac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aac:	68fb      	ldr	r3, [r7, #12]
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000734 	.word	0x20000734
 8006abc:	20000738 	.word	0x20000738
 8006ac0:	2000083c 	.word	0x2000083c

08006ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d06e      	beq.n	8006bb8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ada:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <xTaskPriorityDisinherit+0x100>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d00a      	beq.n	8006afa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	60fb      	str	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	60bb      	str	r3, [r7, #8]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d044      	beq.n	8006bb8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d140      	bne.n	8006bb8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fa02 	bl	8004f44 <uxListRemove>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	491f      	ldr	r1, [pc, #124]	; (8006bc8 <xTaskPriorityDisinherit+0x104>)
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xTaskPriorityDisinherit+0xae>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2201      	movs	r2, #1
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43da      	mvns	r2, r3
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	4a17      	ldr	r2, [pc, #92]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	f1c3 0207 	rsb	r2, r3, #7
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <xTaskPriorityDisinherit+0x104>)
 8006ba6:	441a      	add	r2, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe f96b 	bl	8004e8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bb8:	697b      	ldr	r3, [r7, #20]
	}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000734 	.word	0x20000734
 8006bc8:	20000738 	.word	0x20000738
 8006bcc:	2000083c 	.word	0x2000083c

08006bd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006bde:	2301      	movs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d077      	beq.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	60fb      	str	r3, [r7, #12]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d902      	bls.n	8006c16 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e002      	b.n	8006c1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d058      	beq.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d153      	bne.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c30:	4b2b      	ldr	r3, [pc, #172]	; (8006ce0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d10a      	bne.n	8006c50 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	db04      	blt.n	8006c6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f1c3 0207 	rsb	r2, r3, #7
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	6959      	ldr	r1, [r3, #20]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006c7e:	4413      	add	r3, r2
 8006c80:	4299      	cmp	r1, r3
 8006c82:	d129      	bne.n	8006cd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe f95b 	bl	8004f44 <uxListRemove>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	2201      	movs	r2, #1
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	4a10      	ldr	r2, [pc, #64]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ca8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	2201      	movs	r2, #1
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	4a0b      	ldr	r2, [pc, #44]	; (8006ce8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4a06      	ldr	r2, [pc, #24]	; (8006ce4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006cca:	441a      	add	r2, r3
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f7fe f8d9 	bl	8004e8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cd8:	bf00      	nop
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20000734 	.word	0x20000734
 8006ce4:	20000738 	.word	0x20000738
 8006ce8:	2000083c 	.word	0x2000083c

08006cec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cfe:	3201      	adds	r2, #1
 8006d00:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d04:	681b      	ldr	r3, [r3, #0]
	}
 8006d06:	4618      	mov	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	20000734 	.word	0x20000734

08006d14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d1e:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d24:	4b28      	ldr	r3, [pc, #160]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe f90a 	bl	8004f44 <uxListRemove>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	43da      	mvns	r2, r3
 8006d44:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d10a      	bne.n	8006d6c <prvAddCurrentTaskToDelayedList+0x58>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	481a      	ldr	r0, [pc, #104]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d66:	f7fe f890 	bl	8004e8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d6a:	e026      	b.n	8006dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d74:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d209      	bcs.n	8006d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d84:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f7fe f89e 	bl	8004ed2 <vListInsert>
}
 8006d96:	e010      	b.n	8006dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d98:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fe f894 	bl	8004ed2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d202      	bcs.n	8006dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006db4:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6013      	str	r3, [r2, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000838 	.word	0x20000838
 8006dc8:	20000734 	.word	0x20000734
 8006dcc:	2000083c 	.word	0x2000083c
 8006dd0:	20000820 	.word	0x20000820
 8006dd4:	200007f0 	.word	0x200007f0
 8006dd8:	200007ec 	.word	0x200007ec
 8006ddc:	20000854 	.word	0x20000854

08006de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3b04      	subs	r3, #4
 8006df0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3b04      	subs	r3, #4
 8006dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3b04      	subs	r3, #4
 8006e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e10:	4a0c      	ldr	r2, [pc, #48]	; (8006e44 <pxPortInitialiseStack+0x64>)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3b14      	subs	r3, #20
 8006e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b04      	subs	r3, #4
 8006e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f06f 0202 	mvn.w	r2, #2
 8006e2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3b20      	subs	r3, #32
 8006e34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e36:	68fb      	ldr	r3, [r7, #12]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	08006e49 	.word	0x08006e49

08006e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <prvTaskExitError+0x54>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d00a      	beq.n	8006e72 <prvTaskExitError+0x2a>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60fb      	str	r3, [r7, #12]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <prvTaskExitError+0x28>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e86:	bf00      	nop
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0fc      	beq.n	8006e88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000000c 	.word	0x2000000c

08006ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <pxCurrentTCBConst2>)
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	6808      	ldr	r0, [r1, #0]
 8006ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	f380 8809 	msr	PSP, r0
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f380 8811 	msr	BASEPRI, r0
 8006eba:	4770      	bx	lr
 8006ebc:	f3af 8000 	nop.w

08006ec0 <pxCurrentTCBConst2>:
 8006ec0:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ec8:	4808      	ldr	r0, [pc, #32]	; (8006eec <prvPortStartFirstTask+0x24>)
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	6800      	ldr	r0, [r0, #0]
 8006ece:	f380 8808 	msr	MSP, r0
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8814 	msr	CONTROL, r0
 8006eda:	b662      	cpsie	i
 8006edc:	b661      	cpsie	f
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	df00      	svc	0
 8006ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eea:	bf00      	nop
 8006eec:	e000ed08 	.word	0xe000ed08

08006ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ef6:	4b46      	ldr	r3, [pc, #280]	; (8007010 <xPortStartScheduler+0x120>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a46      	ldr	r2, [pc, #280]	; (8007014 <xPortStartScheduler+0x124>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10a      	bne.n	8006f16 <xPortStartScheduler+0x26>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	613b      	str	r3, [r7, #16]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f16:	4b3e      	ldr	r3, [pc, #248]	; (8007010 <xPortStartScheduler+0x120>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a3f      	ldr	r2, [pc, #252]	; (8007018 <xPortStartScheduler+0x128>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10a      	bne.n	8006f36 <xPortStartScheduler+0x46>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f36:	4b39      	ldr	r3, [pc, #228]	; (800701c <xPortStartScheduler+0x12c>)
 8006f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	22ff      	movs	r2, #255	; 0xff
 8006f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	4b31      	ldr	r3, [pc, #196]	; (8007020 <xPortStartScheduler+0x130>)
 8006f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f5e:	4b31      	ldr	r3, [pc, #196]	; (8007024 <xPortStartScheduler+0x134>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f64:	e009      	b.n	8006f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f66:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <xPortStartScheduler+0x134>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <xPortStartScheduler+0x134>)
 8006f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	d0ef      	beq.n	8006f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f86:	4b27      	ldr	r3, [pc, #156]	; (8007024 <xPortStartScheduler+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1c3 0307 	rsb	r3, r3, #7
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d00a      	beq.n	8006fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60bb      	str	r3, [r7, #8]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fa8:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <xPortStartScheduler+0x134>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <xPortStartScheduler+0x134>)
 8006fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <xPortStartScheduler+0x134>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fba:	4a1a      	ldr	r2, [pc, #104]	; (8007024 <xPortStartScheduler+0x134>)
 8006fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fc6:	4b18      	ldr	r3, [pc, #96]	; (8007028 <xPortStartScheduler+0x138>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a17      	ldr	r2, [pc, #92]	; (8007028 <xPortStartScheduler+0x138>)
 8006fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <xPortStartScheduler+0x138>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a14      	ldr	r2, [pc, #80]	; (8007028 <xPortStartScheduler+0x138>)
 8006fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fde:	f000 f8dd 	bl	800719c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <xPortStartScheduler+0x13c>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fe8:	f000 f8fc 	bl	80071e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fec:	4b10      	ldr	r3, [pc, #64]	; (8007030 <xPortStartScheduler+0x140>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0f      	ldr	r2, [pc, #60]	; (8007030 <xPortStartScheduler+0x140>)
 8006ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ff8:	f7ff ff66 	bl	8006ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ffc:	f7ff fa88 	bl	8006510 <vTaskSwitchContext>
	prvTaskExitError();
 8007000:	f7ff ff22 	bl	8006e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	e000ed00 	.word	0xe000ed00
 8007014:	410fc271 	.word	0x410fc271
 8007018:	410fc270 	.word	0x410fc270
 800701c:	e000e400 	.word	0xe000e400
 8007020:	20000860 	.word	0x20000860
 8007024:	20000864 	.word	0x20000864
 8007028:	e000ed20 	.word	0xe000ed20
 800702c:	2000000c 	.word	0x2000000c
 8007030:	e000ef34 	.word	0xe000ef34

08007034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	607b      	str	r3, [r7, #4]
}
 800704c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <vPortEnterCritical+0x58>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3301      	adds	r3, #1
 8007054:	4a0d      	ldr	r2, [pc, #52]	; (800708c <vPortEnterCritical+0x58>)
 8007056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <vPortEnterCritical+0x58>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d10f      	bne.n	8007080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <vPortEnterCritical+0x5c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <vPortEnterCritical+0x4c>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	603b      	str	r3, [r7, #0]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <vPortEnterCritical+0x4a>
	}
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	2000000c 	.word	0x2000000c
 8007090:	e000ed04 	.word	0xe000ed04

08007094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <vPortExitCritical+0x50>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <vPortExitCritical+0x24>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	607b      	str	r3, [r7, #4]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <vPortExitCritical+0x50>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <vPortExitCritical+0x50>)
 80070c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070c2:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <vPortExitCritical+0x50>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <vPortExitCritical+0x42>
 80070ca:	2300      	movs	r3, #0
 80070cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	f383 8811 	msr	BASEPRI, r3
}
 80070d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	2000000c 	.word	0x2000000c
	...

080070f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070f0:	f3ef 8009 	mrs	r0, PSP
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <pxCurrentTCBConst>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	f01e 0f10 	tst.w	lr, #16
 8007100:	bf08      	it	eq
 8007102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710a:	6010      	str	r0, [r2, #0]
 800710c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007114:	f380 8811 	msr	BASEPRI, r0
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f7ff f9f6 	bl	8006510 <vTaskSwitchContext>
 8007124:	f04f 0000 	mov.w	r0, #0
 8007128:	f380 8811 	msr	BASEPRI, r0
 800712c:	bc09      	pop	{r0, r3}
 800712e:	6819      	ldr	r1, [r3, #0]
 8007130:	6808      	ldr	r0, [r1, #0]
 8007132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007136:	f01e 0f10 	tst.w	lr, #16
 800713a:	bf08      	it	eq
 800713c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007140:	f380 8809 	msr	PSP, r0
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w

08007150 <pxCurrentTCBConst>:
 8007150:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	607b      	str	r3, [r7, #4]
}
 8007170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007172:	f7ff f915 	bl	80063a0 <xTaskIncrementTick>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <SysTick_Handler+0x40>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <vPortSetupTimerInterrupt+0x38>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <vPortSetupTimerInterrupt+0x3c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <vPortSetupTimerInterrupt+0x40>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	4a09      	ldr	r2, [pc, #36]	; (80071e0 <vPortSetupTimerInterrupt+0x44>)
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	e000e010 	.word	0xe000e010
 80071d4:	e000e018 	.word	0xe000e018
 80071d8:	20000000 	.word	0x20000000
 80071dc:	10624dd3 	.word	0x10624dd3
 80071e0:	e000e014 	.word	0xe000e014

080071e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071f4 <vPortEnableVFP+0x10>
 80071e8:	6801      	ldr	r1, [r0, #0]
 80071ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071ee:	6001      	str	r1, [r0, #0]
 80071f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071f2:	bf00      	nop
 80071f4:	e000ed88 	.word	0xe000ed88

080071f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071fe:	f3ef 8305 	mrs	r3, IPSR
 8007202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d914      	bls.n	8007234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <vPortValidateInterruptPriority+0x70>)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007214:	4b15      	ldr	r3, [pc, #84]	; (800726c <vPortValidateInterruptPriority+0x74>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	7afa      	ldrb	r2, [r7, #11]
 800721a:	429a      	cmp	r2, r3
 800721c:	d20a      	bcs.n	8007234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <vPortValidateInterruptPriority+0x78>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <vPortValidateInterruptPriority+0x7c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d90a      	bls.n	800725a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	603b      	str	r3, [r7, #0]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <vPortValidateInterruptPriority+0x60>
	}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	e000e3f0 	.word	0xe000e3f0
 800726c:	20000860 	.word	0x20000860
 8007270:	e000ed0c 	.word	0xe000ed0c
 8007274:	20000864 	.word	0x20000864

08007278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007284:	f7fe ffe2 	bl	800624c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007288:	4b5b      	ldr	r3, [pc, #364]	; (80073f8 <pvPortMalloc+0x180>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007290:	f000 f920 	bl	80074d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007294:	4b59      	ldr	r3, [pc, #356]	; (80073fc <pvPortMalloc+0x184>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 8093 	bne.w	80073c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01d      	beq.n	80072e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072a8:	2208      	movs	r2, #8
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d014      	beq.n	80072e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	3308      	adds	r3, #8
 80072c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <pvPortMalloc+0x6c>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	617b      	str	r3, [r7, #20]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d06e      	beq.n	80073c8 <pvPortMalloc+0x150>
 80072ea:	4b45      	ldr	r3, [pc, #276]	; (8007400 <pvPortMalloc+0x188>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d869      	bhi.n	80073c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072f4:	4b43      	ldr	r3, [pc, #268]	; (8007404 <pvPortMalloc+0x18c>)
 80072f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072f8:	4b42      	ldr	r3, [pc, #264]	; (8007404 <pvPortMalloc+0x18c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072fe:	e004      	b.n	800730a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d903      	bls.n	800731c <pvPortMalloc+0xa4>
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f1      	bne.n	8007300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800731c:	4b36      	ldr	r3, [pc, #216]	; (80073f8 <pvPortMalloc+0x180>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007322:	429a      	cmp	r2, r3
 8007324:	d050      	beq.n	80073c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2208      	movs	r2, #8
 800732c:	4413      	add	r3, r2
 800732e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1ad2      	subs	r2, r2, r3
 8007340:	2308      	movs	r3, #8
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	429a      	cmp	r2, r3
 8007346:	d91f      	bls.n	8007388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <pvPortMalloc+0xf8>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	613b      	str	r3, [r7, #16]
}
 800736c:	bf00      	nop
 800736e:	e7fe      	b.n	800736e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007382:	69b8      	ldr	r0, [r7, #24]
 8007384:	f000 f908 	bl	8007598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <pvPortMalloc+0x188>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <pvPortMalloc+0x188>)
 8007394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007396:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <pvPortMalloc+0x188>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <pvPortMalloc+0x190>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d203      	bcs.n	80073aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073a2:	4b17      	ldr	r3, [pc, #92]	; (8007400 <pvPortMalloc+0x188>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a18      	ldr	r2, [pc, #96]	; (8007408 <pvPortMalloc+0x190>)
 80073a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <pvPortMalloc+0x184>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <pvPortMalloc+0x194>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	4a11      	ldr	r2, [pc, #68]	; (800740c <pvPortMalloc+0x194>)
 80073c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073c8:	f7fe ff4e 	bl	8006268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <pvPortMalloc+0x174>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	60fb      	str	r3, [r7, #12]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <pvPortMalloc+0x172>
	return pvReturn;
 80073ec:	69fb      	ldr	r3, [r7, #28]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3728      	adds	r7, #40	; 0x28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20002f80 	.word	0x20002f80
 80073fc:	20002f94 	.word	0x20002f94
 8007400:	20002f84 	.word	0x20002f84
 8007404:	20002f78 	.word	0x20002f78
 8007408:	20002f88 	.word	0x20002f88
 800740c:	20002f8c 	.word	0x20002f8c

08007410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04d      	beq.n	80074be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007422:	2308      	movs	r3, #8
 8007424:	425b      	negs	r3, r3
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4413      	add	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <vPortFree+0xb8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4013      	ands	r3, r2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <vPortFree+0x44>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	60fb      	str	r3, [r7, #12]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <vPortFree+0x62>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60bb      	str	r3, [r7, #8]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <vPortFree+0xb8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01e      	beq.n	80074be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d11a      	bne.n	80074be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <vPortFree+0xb8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	43db      	mvns	r3, r3
 8007492:	401a      	ands	r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007498:	f7fe fed8 	bl	800624c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <vPortFree+0xbc>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4413      	add	r3, r2
 80074a6:	4a09      	ldr	r2, [pc, #36]	; (80074cc <vPortFree+0xbc>)
 80074a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074aa:	6938      	ldr	r0, [r7, #16]
 80074ac:	f000 f874 	bl	8007598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <vPortFree+0xc0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a06      	ldr	r2, [pc, #24]	; (80074d0 <vPortFree+0xc0>)
 80074b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074ba:	f7fe fed5 	bl	8006268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074be:	bf00      	nop
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20002f94 	.word	0x20002f94
 80074cc:	20002f84 	.word	0x20002f84
 80074d0:	20002f90 	.word	0x20002f90

080074d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074da:	f242 7310 	movw	r3, #10000	; 0x2710
 80074de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074e0:	4b27      	ldr	r3, [pc, #156]	; (8007580 <prvHeapInit+0xac>)
 80074e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3307      	adds	r3, #7
 80074f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0307 	bic.w	r3, r3, #7
 80074fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	4a1f      	ldr	r2, [pc, #124]	; (8007580 <prvHeapInit+0xac>)
 8007504:	4413      	add	r3, r2
 8007506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800750c:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <prvHeapInit+0xb0>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <prvHeapInit+0xb0>)
 8007514:	2200      	movs	r2, #0
 8007516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4413      	add	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007520:	2208      	movs	r2, #8
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0307 	bic.w	r3, r3, #7
 800752e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <prvHeapInit+0xb4>)
 8007534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <prvHeapInit+0xb4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2200      	movs	r2, #0
 800753c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800753e:	4b12      	ldr	r3, [pc, #72]	; (8007588 <prvHeapInit+0xb4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007554:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <prvHeapInit+0xb4>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <prvHeapInit+0xb8>)
 8007562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	4a09      	ldr	r2, [pc, #36]	; (8007590 <prvHeapInit+0xbc>)
 800756a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800756c:	4b09      	ldr	r3, [pc, #36]	; (8007594 <prvHeapInit+0xc0>)
 800756e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20000868 	.word	0x20000868
 8007584:	20002f78 	.word	0x20002f78
 8007588:	20002f80 	.word	0x20002f80
 800758c:	20002f88 	.word	0x20002f88
 8007590:	20002f84 	.word	0x20002f84
 8007594:	20002f94 	.word	0x20002f94

08007598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075a0:	4b28      	ldr	r3, [pc, #160]	; (8007644 <prvInsertBlockIntoFreeList+0xac>)
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	e002      	b.n	80075ac <prvInsertBlockIntoFreeList+0x14>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d8f7      	bhi.n	80075a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4413      	add	r3, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d108      	bne.n	80075da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	441a      	add	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	441a      	add	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d118      	bne.n	8007620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4b15      	ldr	r3, [pc, #84]	; (8007648 <prvInsertBlockIntoFreeList+0xb0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d00d      	beq.n	8007616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	441a      	add	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e008      	b.n	8007628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <prvInsertBlockIntoFreeList+0xb0>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e003      	b.n	8007628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d002      	beq.n	8007636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20002f78 	.word	0x20002f78
 8007648:	20002f80 	.word	0x20002f80

0800764c <__errno>:
 800764c:	4b01      	ldr	r3, [pc, #4]	; (8007654 <__errno+0x8>)
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000010 	.word	0x20000010

08007658 <std>:
 8007658:	2300      	movs	r3, #0
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
 800765e:	e9c0 3300 	strd	r3, r3, [r0]
 8007662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007666:	6083      	str	r3, [r0, #8]
 8007668:	8181      	strh	r1, [r0, #12]
 800766a:	6643      	str	r3, [r0, #100]	; 0x64
 800766c:	81c2      	strh	r2, [r0, #14]
 800766e:	6183      	str	r3, [r0, #24]
 8007670:	4619      	mov	r1, r3
 8007672:	2208      	movs	r2, #8
 8007674:	305c      	adds	r0, #92	; 0x5c
 8007676:	f000 f91a 	bl	80078ae <memset>
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <std+0x38>)
 800767c:	6263      	str	r3, [r4, #36]	; 0x24
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <std+0x3c>)
 8007680:	62a3      	str	r3, [r4, #40]	; 0x28
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std+0x40>)
 8007684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <std+0x44>)
 8007688:	6224      	str	r4, [r4, #32]
 800768a:	6323      	str	r3, [r4, #48]	; 0x30
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop
 8007690:	08007b0d 	.word	0x08007b0d
 8007694:	08007b2f 	.word	0x08007b2f
 8007698:	08007b67 	.word	0x08007b67
 800769c:	08007b8b 	.word	0x08007b8b

080076a0 <_cleanup_r>:
 80076a0:	4901      	ldr	r1, [pc, #4]	; (80076a8 <_cleanup_r+0x8>)
 80076a2:	f000 b8af 	b.w	8007804 <_fwalk_reent>
 80076a6:	bf00      	nop
 80076a8:	08007ce5 	.word	0x08007ce5

080076ac <__sfmoreglue>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	2268      	movs	r2, #104	; 0x68
 80076b0:	1e4d      	subs	r5, r1, #1
 80076b2:	4355      	muls	r5, r2
 80076b4:	460e      	mov	r6, r1
 80076b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076ba:	f000 f921 	bl	8007900 <_malloc_r>
 80076be:	4604      	mov	r4, r0
 80076c0:	b140      	cbz	r0, 80076d4 <__sfmoreglue+0x28>
 80076c2:	2100      	movs	r1, #0
 80076c4:	e9c0 1600 	strd	r1, r6, [r0]
 80076c8:	300c      	adds	r0, #12
 80076ca:	60a0      	str	r0, [r4, #8]
 80076cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076d0:	f000 f8ed 	bl	80078ae <memset>
 80076d4:	4620      	mov	r0, r4
 80076d6:	bd70      	pop	{r4, r5, r6, pc}

080076d8 <__sfp_lock_acquire>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__sfp_lock_acquire+0x8>)
 80076da:	f000 b8d8 	b.w	800788e <__retarget_lock_acquire_recursive>
 80076de:	bf00      	nop
 80076e0:	20002f99 	.word	0x20002f99

080076e4 <__sfp_lock_release>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__sfp_lock_release+0x8>)
 80076e6:	f000 b8d3 	b.w	8007890 <__retarget_lock_release_recursive>
 80076ea:	bf00      	nop
 80076ec:	20002f99 	.word	0x20002f99

080076f0 <__sinit_lock_acquire>:
 80076f0:	4801      	ldr	r0, [pc, #4]	; (80076f8 <__sinit_lock_acquire+0x8>)
 80076f2:	f000 b8cc 	b.w	800788e <__retarget_lock_acquire_recursive>
 80076f6:	bf00      	nop
 80076f8:	20002f9a 	.word	0x20002f9a

080076fc <__sinit_lock_release>:
 80076fc:	4801      	ldr	r0, [pc, #4]	; (8007704 <__sinit_lock_release+0x8>)
 80076fe:	f000 b8c7 	b.w	8007890 <__retarget_lock_release_recursive>
 8007702:	bf00      	nop
 8007704:	20002f9a 	.word	0x20002f9a

08007708 <__sinit>:
 8007708:	b510      	push	{r4, lr}
 800770a:	4604      	mov	r4, r0
 800770c:	f7ff fff0 	bl	80076f0 <__sinit_lock_acquire>
 8007710:	69a3      	ldr	r3, [r4, #24]
 8007712:	b11b      	cbz	r3, 800771c <__sinit+0x14>
 8007714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007718:	f7ff bff0 	b.w	80076fc <__sinit_lock_release>
 800771c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007720:	6523      	str	r3, [r4, #80]	; 0x50
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <__sinit+0x68>)
 8007724:	4a13      	ldr	r2, [pc, #76]	; (8007774 <__sinit+0x6c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	62a2      	str	r2, [r4, #40]	; 0x28
 800772a:	42a3      	cmp	r3, r4
 800772c:	bf04      	itt	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	61a3      	streq	r3, [r4, #24]
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f820 	bl	8007778 <__sfp>
 8007738:	6060      	str	r0, [r4, #4]
 800773a:	4620      	mov	r0, r4
 800773c:	f000 f81c 	bl	8007778 <__sfp>
 8007740:	60a0      	str	r0, [r4, #8]
 8007742:	4620      	mov	r0, r4
 8007744:	f000 f818 	bl	8007778 <__sfp>
 8007748:	2200      	movs	r2, #0
 800774a:	60e0      	str	r0, [r4, #12]
 800774c:	2104      	movs	r1, #4
 800774e:	6860      	ldr	r0, [r4, #4]
 8007750:	f7ff ff82 	bl	8007658 <std>
 8007754:	68a0      	ldr	r0, [r4, #8]
 8007756:	2201      	movs	r2, #1
 8007758:	2109      	movs	r1, #9
 800775a:	f7ff ff7d 	bl	8007658 <std>
 800775e:	68e0      	ldr	r0, [r4, #12]
 8007760:	2202      	movs	r2, #2
 8007762:	2112      	movs	r1, #18
 8007764:	f7ff ff78 	bl	8007658 <std>
 8007768:	2301      	movs	r3, #1
 800776a:	61a3      	str	r3, [r4, #24]
 800776c:	e7d2      	b.n	8007714 <__sinit+0xc>
 800776e:	bf00      	nop
 8007770:	0800883c 	.word	0x0800883c
 8007774:	080076a1 	.word	0x080076a1

08007778 <__sfp>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	4607      	mov	r7, r0
 800777c:	f7ff ffac 	bl	80076d8 <__sfp_lock_acquire>
 8007780:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <__sfp+0x84>)
 8007782:	681e      	ldr	r6, [r3, #0]
 8007784:	69b3      	ldr	r3, [r6, #24]
 8007786:	b913      	cbnz	r3, 800778e <__sfp+0x16>
 8007788:	4630      	mov	r0, r6
 800778a:	f7ff ffbd 	bl	8007708 <__sinit>
 800778e:	3648      	adds	r6, #72	; 0x48
 8007790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007794:	3b01      	subs	r3, #1
 8007796:	d503      	bpl.n	80077a0 <__sfp+0x28>
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	b30b      	cbz	r3, 80077e0 <__sfp+0x68>
 800779c:	6836      	ldr	r6, [r6, #0]
 800779e:	e7f7      	b.n	8007790 <__sfp+0x18>
 80077a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077a4:	b9d5      	cbnz	r5, 80077dc <__sfp+0x64>
 80077a6:	4b16      	ldr	r3, [pc, #88]	; (8007800 <__sfp+0x88>)
 80077a8:	60e3      	str	r3, [r4, #12]
 80077aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077ae:	6665      	str	r5, [r4, #100]	; 0x64
 80077b0:	f000 f86c 	bl	800788c <__retarget_lock_init_recursive>
 80077b4:	f7ff ff96 	bl	80076e4 <__sfp_lock_release>
 80077b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077c0:	6025      	str	r5, [r4, #0]
 80077c2:	61a5      	str	r5, [r4, #24]
 80077c4:	2208      	movs	r2, #8
 80077c6:	4629      	mov	r1, r5
 80077c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077cc:	f000 f86f 	bl	80078ae <memset>
 80077d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077d8:	4620      	mov	r0, r4
 80077da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077dc:	3468      	adds	r4, #104	; 0x68
 80077de:	e7d9      	b.n	8007794 <__sfp+0x1c>
 80077e0:	2104      	movs	r1, #4
 80077e2:	4638      	mov	r0, r7
 80077e4:	f7ff ff62 	bl	80076ac <__sfmoreglue>
 80077e8:	4604      	mov	r4, r0
 80077ea:	6030      	str	r0, [r6, #0]
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1d5      	bne.n	800779c <__sfp+0x24>
 80077f0:	f7ff ff78 	bl	80076e4 <__sfp_lock_release>
 80077f4:	230c      	movs	r3, #12
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	e7ee      	b.n	80077d8 <__sfp+0x60>
 80077fa:	bf00      	nop
 80077fc:	0800883c 	.word	0x0800883c
 8007800:	ffff0001 	.word	0xffff0001

08007804 <_fwalk_reent>:
 8007804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007808:	4606      	mov	r6, r0
 800780a:	4688      	mov	r8, r1
 800780c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007810:	2700      	movs	r7, #0
 8007812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007816:	f1b9 0901 	subs.w	r9, r9, #1
 800781a:	d505      	bpl.n	8007828 <_fwalk_reent+0x24>
 800781c:	6824      	ldr	r4, [r4, #0]
 800781e:	2c00      	cmp	r4, #0
 8007820:	d1f7      	bne.n	8007812 <_fwalk_reent+0xe>
 8007822:	4638      	mov	r0, r7
 8007824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007828:	89ab      	ldrh	r3, [r5, #12]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d907      	bls.n	800783e <_fwalk_reent+0x3a>
 800782e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007832:	3301      	adds	r3, #1
 8007834:	d003      	beq.n	800783e <_fwalk_reent+0x3a>
 8007836:	4629      	mov	r1, r5
 8007838:	4630      	mov	r0, r6
 800783a:	47c0      	blx	r8
 800783c:	4307      	orrs	r7, r0
 800783e:	3568      	adds	r5, #104	; 0x68
 8007840:	e7e9      	b.n	8007816 <_fwalk_reent+0x12>
	...

08007844 <__libc_init_array>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4d0d      	ldr	r5, [pc, #52]	; (800787c <__libc_init_array+0x38>)
 8007848:	4c0d      	ldr	r4, [pc, #52]	; (8007880 <__libc_init_array+0x3c>)
 800784a:	1b64      	subs	r4, r4, r5
 800784c:	10a4      	asrs	r4, r4, #2
 800784e:	2600      	movs	r6, #0
 8007850:	42a6      	cmp	r6, r4
 8007852:	d109      	bne.n	8007868 <__libc_init_array+0x24>
 8007854:	4d0b      	ldr	r5, [pc, #44]	; (8007884 <__libc_init_array+0x40>)
 8007856:	4c0c      	ldr	r4, [pc, #48]	; (8007888 <__libc_init_array+0x44>)
 8007858:	f000 ff32 	bl	80086c0 <_init>
 800785c:	1b64      	subs	r4, r4, r5
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	2600      	movs	r6, #0
 8007862:	42a6      	cmp	r6, r4
 8007864:	d105      	bne.n	8007872 <__libc_init_array+0x2e>
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	f855 3b04 	ldr.w	r3, [r5], #4
 800786c:	4798      	blx	r3
 800786e:	3601      	adds	r6, #1
 8007870:	e7ee      	b.n	8007850 <__libc_init_array+0xc>
 8007872:	f855 3b04 	ldr.w	r3, [r5], #4
 8007876:	4798      	blx	r3
 8007878:	3601      	adds	r6, #1
 800787a:	e7f2      	b.n	8007862 <__libc_init_array+0x1e>
 800787c:	0800887c 	.word	0x0800887c
 8007880:	0800887c 	.word	0x0800887c
 8007884:	0800887c 	.word	0x0800887c
 8007888:	08008880 	.word	0x08008880

0800788c <__retarget_lock_init_recursive>:
 800788c:	4770      	bx	lr

0800788e <__retarget_lock_acquire_recursive>:
 800788e:	4770      	bx	lr

08007890 <__retarget_lock_release_recursive>:
 8007890:	4770      	bx	lr

08007892 <memcpy>:
 8007892:	440a      	add	r2, r1
 8007894:	4291      	cmp	r1, r2
 8007896:	f100 33ff 	add.w	r3, r0, #4294967295
 800789a:	d100      	bne.n	800789e <memcpy+0xc>
 800789c:	4770      	bx	lr
 800789e:	b510      	push	{r4, lr}
 80078a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a8:	4291      	cmp	r1, r2
 80078aa:	d1f9      	bne.n	80078a0 <memcpy+0xe>
 80078ac:	bd10      	pop	{r4, pc}

080078ae <memset>:
 80078ae:	4402      	add	r2, r0
 80078b0:	4603      	mov	r3, r0
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d100      	bne.n	80078b8 <memset+0xa>
 80078b6:	4770      	bx	lr
 80078b8:	f803 1b01 	strb.w	r1, [r3], #1
 80078bc:	e7f9      	b.n	80078b2 <memset+0x4>
	...

080078c0 <sbrk_aligned>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4e0e      	ldr	r6, [pc, #56]	; (80078fc <sbrk_aligned+0x3c>)
 80078c4:	460c      	mov	r4, r1
 80078c6:	6831      	ldr	r1, [r6, #0]
 80078c8:	4605      	mov	r5, r0
 80078ca:	b911      	cbnz	r1, 80078d2 <sbrk_aligned+0x12>
 80078cc:	f000 f90e 	bl	8007aec <_sbrk_r>
 80078d0:	6030      	str	r0, [r6, #0]
 80078d2:	4621      	mov	r1, r4
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 f909 	bl	8007aec <_sbrk_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d00a      	beq.n	80078f4 <sbrk_aligned+0x34>
 80078de:	1cc4      	adds	r4, r0, #3
 80078e0:	f024 0403 	bic.w	r4, r4, #3
 80078e4:	42a0      	cmp	r0, r4
 80078e6:	d007      	beq.n	80078f8 <sbrk_aligned+0x38>
 80078e8:	1a21      	subs	r1, r4, r0
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f8fe 	bl	8007aec <_sbrk_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d101      	bne.n	80078f8 <sbrk_aligned+0x38>
 80078f4:	f04f 34ff 	mov.w	r4, #4294967295
 80078f8:	4620      	mov	r0, r4
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	20002fa0 	.word	0x20002fa0

08007900 <_malloc_r>:
 8007900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	1ccd      	adds	r5, r1, #3
 8007906:	f025 0503 	bic.w	r5, r5, #3
 800790a:	3508      	adds	r5, #8
 800790c:	2d0c      	cmp	r5, #12
 800790e:	bf38      	it	cc
 8007910:	250c      	movcc	r5, #12
 8007912:	2d00      	cmp	r5, #0
 8007914:	4607      	mov	r7, r0
 8007916:	db01      	blt.n	800791c <_malloc_r+0x1c>
 8007918:	42a9      	cmp	r1, r5
 800791a:	d905      	bls.n	8007928 <_malloc_r+0x28>
 800791c:	230c      	movs	r3, #12
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	2600      	movs	r6, #0
 8007922:	4630      	mov	r0, r6
 8007924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007928:	4e2e      	ldr	r6, [pc, #184]	; (80079e4 <_malloc_r+0xe4>)
 800792a:	f000 fa29 	bl	8007d80 <__malloc_lock>
 800792e:	6833      	ldr	r3, [r6, #0]
 8007930:	461c      	mov	r4, r3
 8007932:	bb34      	cbnz	r4, 8007982 <_malloc_r+0x82>
 8007934:	4629      	mov	r1, r5
 8007936:	4638      	mov	r0, r7
 8007938:	f7ff ffc2 	bl	80078c0 <sbrk_aligned>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	4604      	mov	r4, r0
 8007940:	d14d      	bne.n	80079de <_malloc_r+0xde>
 8007942:	6834      	ldr	r4, [r6, #0]
 8007944:	4626      	mov	r6, r4
 8007946:	2e00      	cmp	r6, #0
 8007948:	d140      	bne.n	80079cc <_malloc_r+0xcc>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	4631      	mov	r1, r6
 800794e:	4638      	mov	r0, r7
 8007950:	eb04 0803 	add.w	r8, r4, r3
 8007954:	f000 f8ca 	bl	8007aec <_sbrk_r>
 8007958:	4580      	cmp	r8, r0
 800795a:	d13a      	bne.n	80079d2 <_malloc_r+0xd2>
 800795c:	6821      	ldr	r1, [r4, #0]
 800795e:	3503      	adds	r5, #3
 8007960:	1a6d      	subs	r5, r5, r1
 8007962:	f025 0503 	bic.w	r5, r5, #3
 8007966:	3508      	adds	r5, #8
 8007968:	2d0c      	cmp	r5, #12
 800796a:	bf38      	it	cc
 800796c:	250c      	movcc	r5, #12
 800796e:	4629      	mov	r1, r5
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff ffa5 	bl	80078c0 <sbrk_aligned>
 8007976:	3001      	adds	r0, #1
 8007978:	d02b      	beq.n	80079d2 <_malloc_r+0xd2>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	442b      	add	r3, r5
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	e00e      	b.n	80079a0 <_malloc_r+0xa0>
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	1b52      	subs	r2, r2, r5
 8007986:	d41e      	bmi.n	80079c6 <_malloc_r+0xc6>
 8007988:	2a0b      	cmp	r2, #11
 800798a:	d916      	bls.n	80079ba <_malloc_r+0xba>
 800798c:	1961      	adds	r1, r4, r5
 800798e:	42a3      	cmp	r3, r4
 8007990:	6025      	str	r5, [r4, #0]
 8007992:	bf18      	it	ne
 8007994:	6059      	strne	r1, [r3, #4]
 8007996:	6863      	ldr	r3, [r4, #4]
 8007998:	bf08      	it	eq
 800799a:	6031      	streq	r1, [r6, #0]
 800799c:	5162      	str	r2, [r4, r5]
 800799e:	604b      	str	r3, [r1, #4]
 80079a0:	4638      	mov	r0, r7
 80079a2:	f104 060b 	add.w	r6, r4, #11
 80079a6:	f000 f9f1 	bl	8007d8c <__malloc_unlock>
 80079aa:	f026 0607 	bic.w	r6, r6, #7
 80079ae:	1d23      	adds	r3, r4, #4
 80079b0:	1af2      	subs	r2, r6, r3
 80079b2:	d0b6      	beq.n	8007922 <_malloc_r+0x22>
 80079b4:	1b9b      	subs	r3, r3, r6
 80079b6:	50a3      	str	r3, [r4, r2]
 80079b8:	e7b3      	b.n	8007922 <_malloc_r+0x22>
 80079ba:	6862      	ldr	r2, [r4, #4]
 80079bc:	42a3      	cmp	r3, r4
 80079be:	bf0c      	ite	eq
 80079c0:	6032      	streq	r2, [r6, #0]
 80079c2:	605a      	strne	r2, [r3, #4]
 80079c4:	e7ec      	b.n	80079a0 <_malloc_r+0xa0>
 80079c6:	4623      	mov	r3, r4
 80079c8:	6864      	ldr	r4, [r4, #4]
 80079ca:	e7b2      	b.n	8007932 <_malloc_r+0x32>
 80079cc:	4634      	mov	r4, r6
 80079ce:	6876      	ldr	r6, [r6, #4]
 80079d0:	e7b9      	b.n	8007946 <_malloc_r+0x46>
 80079d2:	230c      	movs	r3, #12
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	4638      	mov	r0, r7
 80079d8:	f000 f9d8 	bl	8007d8c <__malloc_unlock>
 80079dc:	e7a1      	b.n	8007922 <_malloc_r+0x22>
 80079de:	6025      	str	r5, [r4, #0]
 80079e0:	e7de      	b.n	80079a0 <_malloc_r+0xa0>
 80079e2:	bf00      	nop
 80079e4:	20002f9c 	.word	0x20002f9c

080079e8 <iprintf>:
 80079e8:	b40f      	push	{r0, r1, r2, r3}
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <iprintf+0x2c>)
 80079ec:	b513      	push	{r0, r1, r4, lr}
 80079ee:	681c      	ldr	r4, [r3, #0]
 80079f0:	b124      	cbz	r4, 80079fc <iprintf+0x14>
 80079f2:	69a3      	ldr	r3, [r4, #24]
 80079f4:	b913      	cbnz	r3, 80079fc <iprintf+0x14>
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff fe86 	bl	8007708 <__sinit>
 80079fc:	ab05      	add	r3, sp, #20
 80079fe:	9a04      	ldr	r2, [sp, #16]
 8007a00:	68a1      	ldr	r1, [r4, #8]
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fa3d 	bl	8007e84 <_vfiprintf_r>
 8007a0a:	b002      	add	sp, #8
 8007a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a10:	b004      	add	sp, #16
 8007a12:	4770      	bx	lr
 8007a14:	20000010 	.word	0x20000010

08007a18 <cleanup_glue>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	6809      	ldr	r1, [r1, #0]
 8007a1e:	4605      	mov	r5, r0
 8007a20:	b109      	cbz	r1, 8007a26 <cleanup_glue+0xe>
 8007a22:	f7ff fff9 	bl	8007a18 <cleanup_glue>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a2e:	f000 b9b3 	b.w	8007d98 <_free_r>
	...

08007a34 <_reclaim_reent>:
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <_reclaim_reent+0xb4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	d051      	beq.n	8007ae4 <_reclaim_reent+0xb0>
 8007a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a42:	b143      	cbz	r3, 8007a56 <_reclaim_reent+0x22>
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14a      	bne.n	8007ae0 <_reclaim_reent+0xac>
 8007a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a4c:	6819      	ldr	r1, [r3, #0]
 8007a4e:	b111      	cbz	r1, 8007a56 <_reclaim_reent+0x22>
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 f9a1 	bl	8007d98 <_free_r>
 8007a56:	6961      	ldr	r1, [r4, #20]
 8007a58:	b111      	cbz	r1, 8007a60 <_reclaim_reent+0x2c>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f99c 	bl	8007d98 <_free_r>
 8007a60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a62:	b111      	cbz	r1, 8007a6a <_reclaim_reent+0x36>
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 f997 	bl	8007d98 <_free_r>
 8007a6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a6c:	b111      	cbz	r1, 8007a74 <_reclaim_reent+0x40>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 f992 	bl	8007d98 <_free_r>
 8007a74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a76:	b111      	cbz	r1, 8007a7e <_reclaim_reent+0x4a>
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f98d 	bl	8007d98 <_free_r>
 8007a7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a80:	b111      	cbz	r1, 8007a88 <_reclaim_reent+0x54>
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f988 	bl	8007d98 <_free_r>
 8007a88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a8a:	b111      	cbz	r1, 8007a92 <_reclaim_reent+0x5e>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 f983 	bl	8007d98 <_free_r>
 8007a92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a94:	b111      	cbz	r1, 8007a9c <_reclaim_reent+0x68>
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f97e 	bl	8007d98 <_free_r>
 8007a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a9e:	b111      	cbz	r1, 8007aa6 <_reclaim_reent+0x72>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 f979 	bl	8007d98 <_free_r>
 8007aa6:	69a3      	ldr	r3, [r4, #24]
 8007aa8:	b1e3      	cbz	r3, 8007ae4 <_reclaim_reent+0xb0>
 8007aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007aac:	4620      	mov	r0, r4
 8007aae:	4798      	blx	r3
 8007ab0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ab2:	b1b9      	cbz	r1, 8007ae4 <_reclaim_reent+0xb0>
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aba:	f7ff bfad 	b.w	8007a18 <cleanup_glue>
 8007abe:	5949      	ldr	r1, [r1, r5]
 8007ac0:	b941      	cbnz	r1, 8007ad4 <_reclaim_reent+0xa0>
 8007ac2:	3504      	adds	r5, #4
 8007ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac6:	2d80      	cmp	r5, #128	; 0x80
 8007ac8:	68d9      	ldr	r1, [r3, #12]
 8007aca:	d1f8      	bne.n	8007abe <_reclaim_reent+0x8a>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f963 	bl	8007d98 <_free_r>
 8007ad2:	e7ba      	b.n	8007a4a <_reclaim_reent+0x16>
 8007ad4:	680e      	ldr	r6, [r1, #0]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f95e 	bl	8007d98 <_free_r>
 8007adc:	4631      	mov	r1, r6
 8007ade:	e7ef      	b.n	8007ac0 <_reclaim_reent+0x8c>
 8007ae0:	2500      	movs	r5, #0
 8007ae2:	e7ef      	b.n	8007ac4 <_reclaim_reent+0x90>
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000010 	.word	0x20000010

08007aec <_sbrk_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d06      	ldr	r5, [pc, #24]	; (8007b08 <_sbrk_r+0x1c>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7f9 fc30 	bl	800135c <_sbrk>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_sbrk_r+0x1a>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_sbrk_r+0x1a>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20002fa4 	.word	0x20002fa4

08007b0c <__sread>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	460c      	mov	r4, r1
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	f000 fc7a 	bl	800840c <_read_r>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	bfab      	itete	ge
 8007b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b20:	181b      	addge	r3, r3, r0
 8007b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b26:	bfac      	ite	ge
 8007b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b2a:	81a3      	strhlt	r3, [r4, #12]
 8007b2c:	bd10      	pop	{r4, pc}

08007b2e <__swrite>:
 8007b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	461f      	mov	r7, r3
 8007b34:	898b      	ldrh	r3, [r1, #12]
 8007b36:	05db      	lsls	r3, r3, #23
 8007b38:	4605      	mov	r5, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	d505      	bpl.n	8007b4c <__swrite+0x1e>
 8007b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b44:	2302      	movs	r3, #2
 8007b46:	2200      	movs	r2, #0
 8007b48:	f000 f908 	bl	8007d5c <_lseek_r>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	4632      	mov	r2, r6
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b62:	f000 b817 	b.w	8007b94 <_write_r>

08007b66 <__sseek>:
 8007b66:	b510      	push	{r4, lr}
 8007b68:	460c      	mov	r4, r1
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 f8f5 	bl	8007d5c <_lseek_r>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	bf15      	itete	ne
 8007b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b82:	81a3      	strheq	r3, [r4, #12]
 8007b84:	bf18      	it	ne
 8007b86:	81a3      	strhne	r3, [r4, #12]
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <__sclose>:
 8007b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8e:	f000 b813 	b.w	8007bb8 <_close_r>
	...

08007b94 <_write_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_write_r+0x20>)
 8007b98:	4604      	mov	r4, r0
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7f9 fb89 	bl	80012ba <_write>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_write_r+0x1e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_write_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20002fa4 	.word	0x20002fa4

08007bb8 <_close_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d06      	ldr	r5, [pc, #24]	; (8007bd4 <_close_r+0x1c>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7f9 fb95 	bl	80012f2 <_close>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_close_r+0x1a>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_close_r+0x1a>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20002fa4 	.word	0x20002fa4

08007bd8 <__sflush_r>:
 8007bd8:	898a      	ldrh	r2, [r1, #12]
 8007bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bde:	4605      	mov	r5, r0
 8007be0:	0710      	lsls	r0, r2, #28
 8007be2:	460c      	mov	r4, r1
 8007be4:	d458      	bmi.n	8007c98 <__sflush_r+0xc0>
 8007be6:	684b      	ldr	r3, [r1, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dc05      	bgt.n	8007bf8 <__sflush_r+0x20>
 8007bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dc02      	bgt.n	8007bf8 <__sflush_r+0x20>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	d0f9      	beq.n	8007bf2 <__sflush_r+0x1a>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c04:	682f      	ldr	r7, [r5, #0]
 8007c06:	602b      	str	r3, [r5, #0]
 8007c08:	d032      	beq.n	8007c70 <__sflush_r+0x98>
 8007c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	075a      	lsls	r2, r3, #29
 8007c10:	d505      	bpl.n	8007c1e <__sflush_r+0x46>
 8007c12:	6863      	ldr	r3, [r4, #4]
 8007c14:	1ac0      	subs	r0, r0, r3
 8007c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c18:	b10b      	cbz	r3, 8007c1e <__sflush_r+0x46>
 8007c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c1c:	1ac0      	subs	r0, r0, r3
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4602      	mov	r2, r0
 8007c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c24:	6a21      	ldr	r1, [r4, #32]
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b0      	blx	r6
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	d106      	bne.n	8007c3e <__sflush_r+0x66>
 8007c30:	6829      	ldr	r1, [r5, #0]
 8007c32:	291d      	cmp	r1, #29
 8007c34:	d82c      	bhi.n	8007c90 <__sflush_r+0xb8>
 8007c36:	4a2a      	ldr	r2, [pc, #168]	; (8007ce0 <__sflush_r+0x108>)
 8007c38:	40ca      	lsrs	r2, r1
 8007c3a:	07d6      	lsls	r6, r2, #31
 8007c3c:	d528      	bpl.n	8007c90 <__sflush_r+0xb8>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	6062      	str	r2, [r4, #4]
 8007c42:	04d9      	lsls	r1, r3, #19
 8007c44:	6922      	ldr	r2, [r4, #16]
 8007c46:	6022      	str	r2, [r4, #0]
 8007c48:	d504      	bpl.n	8007c54 <__sflush_r+0x7c>
 8007c4a:	1c42      	adds	r2, r0, #1
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0x7a>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	b903      	cbnz	r3, 8007c54 <__sflush_r+0x7c>
 8007c52:	6560      	str	r0, [r4, #84]	; 0x54
 8007c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c56:	602f      	str	r7, [r5, #0]
 8007c58:	2900      	cmp	r1, #0
 8007c5a:	d0ca      	beq.n	8007bf2 <__sflush_r+0x1a>
 8007c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c60:	4299      	cmp	r1, r3
 8007c62:	d002      	beq.n	8007c6a <__sflush_r+0x92>
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f897 	bl	8007d98 <_free_r>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c6e:	e7c1      	b.n	8007bf4 <__sflush_r+0x1c>
 8007c70:	6a21      	ldr	r1, [r4, #32]
 8007c72:	2301      	movs	r3, #1
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b0      	blx	r6
 8007c78:	1c41      	adds	r1, r0, #1
 8007c7a:	d1c7      	bne.n	8007c0c <__sflush_r+0x34>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0c4      	beq.n	8007c0c <__sflush_r+0x34>
 8007c82:	2b1d      	cmp	r3, #29
 8007c84:	d001      	beq.n	8007c8a <__sflush_r+0xb2>
 8007c86:	2b16      	cmp	r3, #22
 8007c88:	d101      	bne.n	8007c8e <__sflush_r+0xb6>
 8007c8a:	602f      	str	r7, [r5, #0]
 8007c8c:	e7b1      	b.n	8007bf2 <__sflush_r+0x1a>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	e7ad      	b.n	8007bf4 <__sflush_r+0x1c>
 8007c98:	690f      	ldr	r7, [r1, #16]
 8007c9a:	2f00      	cmp	r7, #0
 8007c9c:	d0a9      	beq.n	8007bf2 <__sflush_r+0x1a>
 8007c9e:	0793      	lsls	r3, r2, #30
 8007ca0:	680e      	ldr	r6, [r1, #0]
 8007ca2:	bf08      	it	eq
 8007ca4:	694b      	ldreq	r3, [r1, #20]
 8007ca6:	600f      	str	r7, [r1, #0]
 8007ca8:	bf18      	it	ne
 8007caa:	2300      	movne	r3, #0
 8007cac:	eba6 0807 	sub.w	r8, r6, r7
 8007cb0:	608b      	str	r3, [r1, #8]
 8007cb2:	f1b8 0f00 	cmp.w	r8, #0
 8007cb6:	dd9c      	ble.n	8007bf2 <__sflush_r+0x1a>
 8007cb8:	6a21      	ldr	r1, [r4, #32]
 8007cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cbc:	4643      	mov	r3, r8
 8007cbe:	463a      	mov	r2, r7
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b0      	blx	r6
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	dc06      	bgt.n	8007cd6 <__sflush_r+0xfe>
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cce:	81a3      	strh	r3, [r4, #12]
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	e78e      	b.n	8007bf4 <__sflush_r+0x1c>
 8007cd6:	4407      	add	r7, r0
 8007cd8:	eba8 0800 	sub.w	r8, r8, r0
 8007cdc:	e7e9      	b.n	8007cb2 <__sflush_r+0xda>
 8007cde:	bf00      	nop
 8007ce0:	20400001 	.word	0x20400001

08007ce4 <_fflush_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	690b      	ldr	r3, [r1, #16]
 8007ce8:	4605      	mov	r5, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b913      	cbnz	r3, 8007cf4 <_fflush_r+0x10>
 8007cee:	2500      	movs	r5, #0
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	b118      	cbz	r0, 8007cfe <_fflush_r+0x1a>
 8007cf6:	6983      	ldr	r3, [r0, #24]
 8007cf8:	b90b      	cbnz	r3, 8007cfe <_fflush_r+0x1a>
 8007cfa:	f7ff fd05 	bl	8007708 <__sinit>
 8007cfe:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <_fflush_r+0x6c>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d11b      	bne.n	8007d3c <_fflush_r+0x58>
 8007d04:	686c      	ldr	r4, [r5, #4]
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0ef      	beq.n	8007cee <_fflush_r+0xa>
 8007d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d10:	07d0      	lsls	r0, r2, #31
 8007d12:	d404      	bmi.n	8007d1e <_fflush_r+0x3a>
 8007d14:	0599      	lsls	r1, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_fflush_r+0x3a>
 8007d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1a:	f7ff fdb8 	bl	800788e <__retarget_lock_acquire_recursive>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	4621      	mov	r1, r4
 8007d22:	f7ff ff59 	bl	8007bd8 <__sflush_r>
 8007d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d28:	07da      	lsls	r2, r3, #31
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	d4e0      	bmi.n	8007cf0 <_fflush_r+0xc>
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	059b      	lsls	r3, r3, #22
 8007d32:	d4dd      	bmi.n	8007cf0 <_fflush_r+0xc>
 8007d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d36:	f7ff fdab 	bl	8007890 <__retarget_lock_release_recursive>
 8007d3a:	e7d9      	b.n	8007cf0 <_fflush_r+0xc>
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <_fflush_r+0x70>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <_fflush_r+0x62>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7df      	b.n	8007d06 <_fflush_r+0x22>
 8007d46:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <_fflush_r+0x74>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	bf08      	it	eq
 8007d4c:	68ec      	ldreq	r4, [r5, #12]
 8007d4e:	e7da      	b.n	8007d06 <_fflush_r+0x22>
 8007d50:	080087fc 	.word	0x080087fc
 8007d54:	0800881c 	.word	0x0800881c
 8007d58:	080087dc 	.word	0x080087dc

08007d5c <_lseek_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_lseek_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f9 fae8 	bl	8001340 <_lseek>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_lseek_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_lseek_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20002fa4 	.word	0x20002fa4

08007d80 <__malloc_lock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__malloc_lock+0x8>)
 8007d82:	f7ff bd84 	b.w	800788e <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	20002f98 	.word	0x20002f98

08007d8c <__malloc_unlock>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__malloc_unlock+0x8>)
 8007d8e:	f7ff bd7f 	b.w	8007890 <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	20002f98 	.word	0x20002f98

08007d98 <_free_r>:
 8007d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9a:	2900      	cmp	r1, #0
 8007d9c:	d044      	beq.n	8007e28 <_free_r+0x90>
 8007d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da2:	9001      	str	r0, [sp, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f1a1 0404 	sub.w	r4, r1, #4
 8007daa:	bfb8      	it	lt
 8007dac:	18e4      	addlt	r4, r4, r3
 8007dae:	f7ff ffe7 	bl	8007d80 <__malloc_lock>
 8007db2:	4a1e      	ldr	r2, [pc, #120]	; (8007e2c <_free_r+0x94>)
 8007db4:	9801      	ldr	r0, [sp, #4]
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	b933      	cbnz	r3, 8007dc8 <_free_r+0x30>
 8007dba:	6063      	str	r3, [r4, #4]
 8007dbc:	6014      	str	r4, [r2, #0]
 8007dbe:	b003      	add	sp, #12
 8007dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc4:	f7ff bfe2 	b.w	8007d8c <__malloc_unlock>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d908      	bls.n	8007dde <_free_r+0x46>
 8007dcc:	6825      	ldr	r5, [r4, #0]
 8007dce:	1961      	adds	r1, r4, r5
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	bf01      	itttt	eq
 8007dd4:	6819      	ldreq	r1, [r3, #0]
 8007dd6:	685b      	ldreq	r3, [r3, #4]
 8007dd8:	1949      	addeq	r1, r1, r5
 8007dda:	6021      	streq	r1, [r4, #0]
 8007ddc:	e7ed      	b.n	8007dba <_free_r+0x22>
 8007dde:	461a      	mov	r2, r3
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	b10b      	cbz	r3, 8007de8 <_free_r+0x50>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d9fa      	bls.n	8007dde <_free_r+0x46>
 8007de8:	6811      	ldr	r1, [r2, #0]
 8007dea:	1855      	adds	r5, r2, r1
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d10b      	bne.n	8007e08 <_free_r+0x70>
 8007df0:	6824      	ldr	r4, [r4, #0]
 8007df2:	4421      	add	r1, r4
 8007df4:	1854      	adds	r4, r2, r1
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	d1e0      	bne.n	8007dbe <_free_r+0x26>
 8007dfc:	681c      	ldr	r4, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	6053      	str	r3, [r2, #4]
 8007e02:	4421      	add	r1, r4
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	e7da      	b.n	8007dbe <_free_r+0x26>
 8007e08:	d902      	bls.n	8007e10 <_free_r+0x78>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	6003      	str	r3, [r0, #0]
 8007e0e:	e7d6      	b.n	8007dbe <_free_r+0x26>
 8007e10:	6825      	ldr	r5, [r4, #0]
 8007e12:	1961      	adds	r1, r4, r5
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf04      	itt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	6063      	str	r3, [r4, #4]
 8007e1e:	bf04      	itt	eq
 8007e20:	1949      	addeq	r1, r1, r5
 8007e22:	6021      	streq	r1, [r4, #0]
 8007e24:	6054      	str	r4, [r2, #4]
 8007e26:	e7ca      	b.n	8007dbe <_free_r+0x26>
 8007e28:	b003      	add	sp, #12
 8007e2a:	bd30      	pop	{r4, r5, pc}
 8007e2c:	20002f9c 	.word	0x20002f9c

08007e30 <__sfputc_r>:
 8007e30:	6893      	ldr	r3, [r2, #8]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	b410      	push	{r4}
 8007e38:	6093      	str	r3, [r2, #8]
 8007e3a:	da08      	bge.n	8007e4e <__sfputc_r+0x1e>
 8007e3c:	6994      	ldr	r4, [r2, #24]
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	db01      	blt.n	8007e46 <__sfputc_r+0x16>
 8007e42:	290a      	cmp	r1, #10
 8007e44:	d103      	bne.n	8007e4e <__sfputc_r+0x1e>
 8007e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e4a:	f000 baf1 	b.w	8008430 <__swbuf_r>
 8007e4e:	6813      	ldr	r3, [r2, #0]
 8007e50:	1c58      	adds	r0, r3, #1
 8007e52:	6010      	str	r0, [r2, #0]
 8007e54:	7019      	strb	r1, [r3, #0]
 8007e56:	4608      	mov	r0, r1
 8007e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <__sfputs_r>:
 8007e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	18d5      	adds	r5, r2, r3
 8007e68:	42ac      	cmp	r4, r5
 8007e6a:	d101      	bne.n	8007e70 <__sfputs_r+0x12>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e007      	b.n	8007e80 <__sfputs_r+0x22>
 8007e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e74:	463a      	mov	r2, r7
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7ff ffda 	bl	8007e30 <__sfputc_r>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d1f3      	bne.n	8007e68 <__sfputs_r+0xa>
 8007e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e84 <_vfiprintf_r>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	460d      	mov	r5, r1
 8007e8a:	b09d      	sub	sp, #116	; 0x74
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	4698      	mov	r8, r3
 8007e90:	4606      	mov	r6, r0
 8007e92:	b118      	cbz	r0, 8007e9c <_vfiprintf_r+0x18>
 8007e94:	6983      	ldr	r3, [r0, #24]
 8007e96:	b90b      	cbnz	r3, 8007e9c <_vfiprintf_r+0x18>
 8007e98:	f7ff fc36 	bl	8007708 <__sinit>
 8007e9c:	4b89      	ldr	r3, [pc, #548]	; (80080c4 <_vfiprintf_r+0x240>)
 8007e9e:	429d      	cmp	r5, r3
 8007ea0:	d11b      	bne.n	8007eda <_vfiprintf_r+0x56>
 8007ea2:	6875      	ldr	r5, [r6, #4]
 8007ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ea6:	07d9      	lsls	r1, r3, #31
 8007ea8:	d405      	bmi.n	8007eb6 <_vfiprintf_r+0x32>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	059a      	lsls	r2, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_vfiprintf_r+0x32>
 8007eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb2:	f7ff fcec 	bl	800788e <__retarget_lock_acquire_recursive>
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	071b      	lsls	r3, r3, #28
 8007eba:	d501      	bpl.n	8007ec0 <_vfiprintf_r+0x3c>
 8007ebc:	692b      	ldr	r3, [r5, #16]
 8007ebe:	b9eb      	cbnz	r3, 8007efc <_vfiprintf_r+0x78>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 fb06 	bl	80084d4 <__swsetup_r>
 8007ec8:	b1c0      	cbz	r0, 8007efc <_vfiprintf_r+0x78>
 8007eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ecc:	07dc      	lsls	r4, r3, #31
 8007ece:	d50e      	bpl.n	8007eee <_vfiprintf_r+0x6a>
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed4:	b01d      	add	sp, #116	; 0x74
 8007ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eda:	4b7b      	ldr	r3, [pc, #492]	; (80080c8 <_vfiprintf_r+0x244>)
 8007edc:	429d      	cmp	r5, r3
 8007ede:	d101      	bne.n	8007ee4 <_vfiprintf_r+0x60>
 8007ee0:	68b5      	ldr	r5, [r6, #8]
 8007ee2:	e7df      	b.n	8007ea4 <_vfiprintf_r+0x20>
 8007ee4:	4b79      	ldr	r3, [pc, #484]	; (80080cc <_vfiprintf_r+0x248>)
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	bf08      	it	eq
 8007eea:	68f5      	ldreq	r5, [r6, #12]
 8007eec:	e7da      	b.n	8007ea4 <_vfiprintf_r+0x20>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	0598      	lsls	r0, r3, #22
 8007ef2:	d4ed      	bmi.n	8007ed0 <_vfiprintf_r+0x4c>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ef6:	f7ff fccb 	bl	8007890 <__retarget_lock_release_recursive>
 8007efa:	e7e9      	b.n	8007ed0 <_vfiprintf_r+0x4c>
 8007efc:	2300      	movs	r3, #0
 8007efe:	9309      	str	r3, [sp, #36]	; 0x24
 8007f00:	2320      	movs	r3, #32
 8007f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f0a:	2330      	movs	r3, #48	; 0x30
 8007f0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080d0 <_vfiprintf_r+0x24c>
 8007f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f14:	f04f 0901 	mov.w	r9, #1
 8007f18:	4623      	mov	r3, r4
 8007f1a:	469a      	mov	sl, r3
 8007f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f20:	b10a      	cbz	r2, 8007f26 <_vfiprintf_r+0xa2>
 8007f22:	2a25      	cmp	r2, #37	; 0x25
 8007f24:	d1f9      	bne.n	8007f1a <_vfiprintf_r+0x96>
 8007f26:	ebba 0b04 	subs.w	fp, sl, r4
 8007f2a:	d00b      	beq.n	8007f44 <_vfiprintf_r+0xc0>
 8007f2c:	465b      	mov	r3, fp
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ff93 	bl	8007e5e <__sfputs_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f000 80aa 	beq.w	8008092 <_vfiprintf_r+0x20e>
 8007f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f40:	445a      	add	r2, fp
 8007f42:	9209      	str	r2, [sp, #36]	; 0x24
 8007f44:	f89a 3000 	ldrb.w	r3, [sl]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80a2 	beq.w	8008092 <_vfiprintf_r+0x20e>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f58:	f10a 0a01 	add.w	sl, sl, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f64:	931a      	str	r3, [sp, #104]	; 0x68
 8007f66:	4654      	mov	r4, sl
 8007f68:	2205      	movs	r2, #5
 8007f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6e:	4858      	ldr	r0, [pc, #352]	; (80080d0 <_vfiprintf_r+0x24c>)
 8007f70:	f7f8 f93e 	bl	80001f0 <memchr>
 8007f74:	9a04      	ldr	r2, [sp, #16]
 8007f76:	b9d8      	cbnz	r0, 8007fb0 <_vfiprintf_r+0x12c>
 8007f78:	06d1      	lsls	r1, r2, #27
 8007f7a:	bf44      	itt	mi
 8007f7c:	2320      	movmi	r3, #32
 8007f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f82:	0713      	lsls	r3, r2, #28
 8007f84:	bf44      	itt	mi
 8007f86:	232b      	movmi	r3, #43	; 0x2b
 8007f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f90:	2b2a      	cmp	r3, #42	; 0x2a
 8007f92:	d015      	beq.n	8007fc0 <_vfiprintf_r+0x13c>
 8007f94:	9a07      	ldr	r2, [sp, #28]
 8007f96:	4654      	mov	r4, sl
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f04f 0c0a 	mov.w	ip, #10
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa4:	3b30      	subs	r3, #48	; 0x30
 8007fa6:	2b09      	cmp	r3, #9
 8007fa8:	d94e      	bls.n	8008048 <_vfiprintf_r+0x1c4>
 8007faa:	b1b0      	cbz	r0, 8007fda <_vfiprintf_r+0x156>
 8007fac:	9207      	str	r2, [sp, #28]
 8007fae:	e014      	b.n	8007fda <_vfiprintf_r+0x156>
 8007fb0:	eba0 0308 	sub.w	r3, r0, r8
 8007fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	46a2      	mov	sl, r4
 8007fbe:	e7d2      	b.n	8007f66 <_vfiprintf_r+0xe2>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	1d19      	adds	r1, r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	9103      	str	r1, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bfbb      	ittet	lt
 8007fcc:	425b      	neglt	r3, r3
 8007fce:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd2:	9307      	strge	r3, [sp, #28]
 8007fd4:	9307      	strlt	r3, [sp, #28]
 8007fd6:	bfb8      	it	lt
 8007fd8:	9204      	strlt	r2, [sp, #16]
 8007fda:	7823      	ldrb	r3, [r4, #0]
 8007fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8007fde:	d10c      	bne.n	8007ffa <_vfiprintf_r+0x176>
 8007fe0:	7863      	ldrb	r3, [r4, #1]
 8007fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe4:	d135      	bne.n	8008052 <_vfiprintf_r+0x1ce>
 8007fe6:	9b03      	ldr	r3, [sp, #12]
 8007fe8:	1d1a      	adds	r2, r3, #4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	9203      	str	r2, [sp, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfb8      	it	lt
 8007ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ff6:	3402      	adds	r4, #2
 8007ff8:	9305      	str	r3, [sp, #20]
 8007ffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80080e0 <_vfiprintf_r+0x25c>
 8007ffe:	7821      	ldrb	r1, [r4, #0]
 8008000:	2203      	movs	r2, #3
 8008002:	4650      	mov	r0, sl
 8008004:	f7f8 f8f4 	bl	80001f0 <memchr>
 8008008:	b140      	cbz	r0, 800801c <_vfiprintf_r+0x198>
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	eba0 000a 	sub.w	r0, r0, sl
 8008010:	fa03 f000 	lsl.w	r0, r3, r0
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	4303      	orrs	r3, r0
 8008018:	3401      	adds	r4, #1
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008020:	482c      	ldr	r0, [pc, #176]	; (80080d4 <_vfiprintf_r+0x250>)
 8008022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008026:	2206      	movs	r2, #6
 8008028:	f7f8 f8e2 	bl	80001f0 <memchr>
 800802c:	2800      	cmp	r0, #0
 800802e:	d03f      	beq.n	80080b0 <_vfiprintf_r+0x22c>
 8008030:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <_vfiprintf_r+0x254>)
 8008032:	bb1b      	cbnz	r3, 800807c <_vfiprintf_r+0x1f8>
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	3307      	adds	r3, #7
 8008038:	f023 0307 	bic.w	r3, r3, #7
 800803c:	3308      	adds	r3, #8
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008042:	443b      	add	r3, r7
 8008044:	9309      	str	r3, [sp, #36]	; 0x24
 8008046:	e767      	b.n	8007f18 <_vfiprintf_r+0x94>
 8008048:	fb0c 3202 	mla	r2, ip, r2, r3
 800804c:	460c      	mov	r4, r1
 800804e:	2001      	movs	r0, #1
 8008050:	e7a5      	b.n	8007f9e <_vfiprintf_r+0x11a>
 8008052:	2300      	movs	r3, #0
 8008054:	3401      	adds	r4, #1
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	4619      	mov	r1, r3
 800805a:	f04f 0c0a 	mov.w	ip, #10
 800805e:	4620      	mov	r0, r4
 8008060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008064:	3a30      	subs	r2, #48	; 0x30
 8008066:	2a09      	cmp	r2, #9
 8008068:	d903      	bls.n	8008072 <_vfiprintf_r+0x1ee>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0c5      	beq.n	8007ffa <_vfiprintf_r+0x176>
 800806e:	9105      	str	r1, [sp, #20]
 8008070:	e7c3      	b.n	8007ffa <_vfiprintf_r+0x176>
 8008072:	fb0c 2101 	mla	r1, ip, r1, r2
 8008076:	4604      	mov	r4, r0
 8008078:	2301      	movs	r3, #1
 800807a:	e7f0      	b.n	800805e <_vfiprintf_r+0x1da>
 800807c:	ab03      	add	r3, sp, #12
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	462a      	mov	r2, r5
 8008082:	4b16      	ldr	r3, [pc, #88]	; (80080dc <_vfiprintf_r+0x258>)
 8008084:	a904      	add	r1, sp, #16
 8008086:	4630      	mov	r0, r6
 8008088:	f3af 8000 	nop.w
 800808c:	4607      	mov	r7, r0
 800808e:	1c78      	adds	r0, r7, #1
 8008090:	d1d6      	bne.n	8008040 <_vfiprintf_r+0x1bc>
 8008092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008094:	07d9      	lsls	r1, r3, #31
 8008096:	d405      	bmi.n	80080a4 <_vfiprintf_r+0x220>
 8008098:	89ab      	ldrh	r3, [r5, #12]
 800809a:	059a      	lsls	r2, r3, #22
 800809c:	d402      	bmi.n	80080a4 <_vfiprintf_r+0x220>
 800809e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a0:	f7ff fbf6 	bl	8007890 <__retarget_lock_release_recursive>
 80080a4:	89ab      	ldrh	r3, [r5, #12]
 80080a6:	065b      	lsls	r3, r3, #25
 80080a8:	f53f af12 	bmi.w	8007ed0 <_vfiprintf_r+0x4c>
 80080ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ae:	e711      	b.n	8007ed4 <_vfiprintf_r+0x50>
 80080b0:	ab03      	add	r3, sp, #12
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	462a      	mov	r2, r5
 80080b6:	4b09      	ldr	r3, [pc, #36]	; (80080dc <_vfiprintf_r+0x258>)
 80080b8:	a904      	add	r1, sp, #16
 80080ba:	4630      	mov	r0, r6
 80080bc:	f000 f880 	bl	80081c0 <_printf_i>
 80080c0:	e7e4      	b.n	800808c <_vfiprintf_r+0x208>
 80080c2:	bf00      	nop
 80080c4:	080087fc 	.word	0x080087fc
 80080c8:	0800881c 	.word	0x0800881c
 80080cc:	080087dc 	.word	0x080087dc
 80080d0:	08008840 	.word	0x08008840
 80080d4:	0800884a 	.word	0x0800884a
 80080d8:	00000000 	.word	0x00000000
 80080dc:	08007e5f 	.word	0x08007e5f
 80080e0:	08008846 	.word	0x08008846

080080e4 <_printf_common>:
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4616      	mov	r6, r2
 80080ea:	4699      	mov	r9, r3
 80080ec:	688a      	ldr	r2, [r1, #8]
 80080ee:	690b      	ldr	r3, [r1, #16]
 80080f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	bfb8      	it	lt
 80080f8:	4613      	movlt	r3, r2
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008100:	4607      	mov	r7, r0
 8008102:	460c      	mov	r4, r1
 8008104:	b10a      	cbz	r2, 800810a <_printf_common+0x26>
 8008106:	3301      	adds	r3, #1
 8008108:	6033      	str	r3, [r6, #0]
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	0699      	lsls	r1, r3, #26
 800810e:	bf42      	ittt	mi
 8008110:	6833      	ldrmi	r3, [r6, #0]
 8008112:	3302      	addmi	r3, #2
 8008114:	6033      	strmi	r3, [r6, #0]
 8008116:	6825      	ldr	r5, [r4, #0]
 8008118:	f015 0506 	ands.w	r5, r5, #6
 800811c:	d106      	bne.n	800812c <_printf_common+0x48>
 800811e:	f104 0a19 	add.w	sl, r4, #25
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	6832      	ldr	r2, [r6, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	42ab      	cmp	r3, r5
 800812a:	dc26      	bgt.n	800817a <_printf_common+0x96>
 800812c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008130:	1e13      	subs	r3, r2, #0
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	bf18      	it	ne
 8008136:	2301      	movne	r3, #1
 8008138:	0692      	lsls	r2, r2, #26
 800813a:	d42b      	bmi.n	8008194 <_printf_common+0xb0>
 800813c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d01e      	beq.n	8008188 <_printf_common+0xa4>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	68e5      	ldr	r5, [r4, #12]
 800814e:	6832      	ldr	r2, [r6, #0]
 8008150:	f003 0306 	and.w	r3, r3, #6
 8008154:	2b04      	cmp	r3, #4
 8008156:	bf08      	it	eq
 8008158:	1aad      	subeq	r5, r5, r2
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	bf0c      	ite	eq
 8008160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008164:	2500      	movne	r5, #0
 8008166:	4293      	cmp	r3, r2
 8008168:	bfc4      	itt	gt
 800816a:	1a9b      	subgt	r3, r3, r2
 800816c:	18ed      	addgt	r5, r5, r3
 800816e:	2600      	movs	r6, #0
 8008170:	341a      	adds	r4, #26
 8008172:	42b5      	cmp	r5, r6
 8008174:	d11a      	bne.n	80081ac <_printf_common+0xc8>
 8008176:	2000      	movs	r0, #0
 8008178:	e008      	b.n	800818c <_printf_common+0xa8>
 800817a:	2301      	movs	r3, #1
 800817c:	4652      	mov	r2, sl
 800817e:	4649      	mov	r1, r9
 8008180:	4638      	mov	r0, r7
 8008182:	47c0      	blx	r8
 8008184:	3001      	adds	r0, #1
 8008186:	d103      	bne.n	8008190 <_printf_common+0xac>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	3501      	adds	r5, #1
 8008192:	e7c6      	b.n	8008122 <_printf_common+0x3e>
 8008194:	18e1      	adds	r1, r4, r3
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	2030      	movs	r0, #48	; 0x30
 800819a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800819e:	4422      	add	r2, r4
 80081a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a8:	3302      	adds	r3, #2
 80081aa:	e7c7      	b.n	800813c <_printf_common+0x58>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4622      	mov	r2, r4
 80081b0:	4649      	mov	r1, r9
 80081b2:	4638      	mov	r0, r7
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0e6      	beq.n	8008188 <_printf_common+0xa4>
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7d9      	b.n	8008172 <_printf_common+0x8e>
	...

080081c0 <_printf_i>:
 80081c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	7e0f      	ldrb	r7, [r1, #24]
 80081c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081c8:	2f78      	cmp	r7, #120	; 0x78
 80081ca:	4691      	mov	r9, r2
 80081cc:	4680      	mov	r8, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	469a      	mov	sl, r3
 80081d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081d6:	d807      	bhi.n	80081e8 <_printf_i+0x28>
 80081d8:	2f62      	cmp	r7, #98	; 0x62
 80081da:	d80a      	bhi.n	80081f2 <_printf_i+0x32>
 80081dc:	2f00      	cmp	r7, #0
 80081de:	f000 80d8 	beq.w	8008392 <_printf_i+0x1d2>
 80081e2:	2f58      	cmp	r7, #88	; 0x58
 80081e4:	f000 80a3 	beq.w	800832e <_printf_i+0x16e>
 80081e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f0:	e03a      	b.n	8008268 <_printf_i+0xa8>
 80081f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081f6:	2b15      	cmp	r3, #21
 80081f8:	d8f6      	bhi.n	80081e8 <_printf_i+0x28>
 80081fa:	a101      	add	r1, pc, #4	; (adr r1, 8008200 <_printf_i+0x40>)
 80081fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008200:	08008259 	.word	0x08008259
 8008204:	0800826d 	.word	0x0800826d
 8008208:	080081e9 	.word	0x080081e9
 800820c:	080081e9 	.word	0x080081e9
 8008210:	080081e9 	.word	0x080081e9
 8008214:	080081e9 	.word	0x080081e9
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080081e9 	.word	0x080081e9
 8008220:	080081e9 	.word	0x080081e9
 8008224:	080081e9 	.word	0x080081e9
 8008228:	080081e9 	.word	0x080081e9
 800822c:	08008379 	.word	0x08008379
 8008230:	0800829d 	.word	0x0800829d
 8008234:	0800835b 	.word	0x0800835b
 8008238:	080081e9 	.word	0x080081e9
 800823c:	080081e9 	.word	0x080081e9
 8008240:	0800839b 	.word	0x0800839b
 8008244:	080081e9 	.word	0x080081e9
 8008248:	0800829d 	.word	0x0800829d
 800824c:	080081e9 	.word	0x080081e9
 8008250:	080081e9 	.word	0x080081e9
 8008254:	08008363 	.word	0x08008363
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	602a      	str	r2, [r5, #0]
 8008260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008268:	2301      	movs	r3, #1
 800826a:	e0a3      	b.n	80083b4 <_printf_i+0x1f4>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	6829      	ldr	r1, [r5, #0]
 8008270:	0606      	lsls	r6, r0, #24
 8008272:	f101 0304 	add.w	r3, r1, #4
 8008276:	d50a      	bpl.n	800828e <_printf_i+0xce>
 8008278:	680e      	ldr	r6, [r1, #0]
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	2e00      	cmp	r6, #0
 800827e:	da03      	bge.n	8008288 <_printf_i+0xc8>
 8008280:	232d      	movs	r3, #45	; 0x2d
 8008282:	4276      	negs	r6, r6
 8008284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008288:	485e      	ldr	r0, [pc, #376]	; (8008404 <_printf_i+0x244>)
 800828a:	230a      	movs	r3, #10
 800828c:	e019      	b.n	80082c2 <_printf_i+0x102>
 800828e:	680e      	ldr	r6, [r1, #0]
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008296:	bf18      	it	ne
 8008298:	b236      	sxthne	r6, r6
 800829a:	e7ef      	b.n	800827c <_printf_i+0xbc>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	6029      	str	r1, [r5, #0]
 80082a4:	0601      	lsls	r1, r0, #24
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0xec>
 80082a8:	681e      	ldr	r6, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <_printf_i+0xf2>
 80082ac:	0646      	lsls	r6, r0, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0xe8>
 80082b0:	881e      	ldrh	r6, [r3, #0]
 80082b2:	4854      	ldr	r0, [pc, #336]	; (8008404 <_printf_i+0x244>)
 80082b4:	2f6f      	cmp	r7, #111	; 0x6f
 80082b6:	bf0c      	ite	eq
 80082b8:	2308      	moveq	r3, #8
 80082ba:	230a      	movne	r3, #10
 80082bc:	2100      	movs	r1, #0
 80082be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082c2:	6865      	ldr	r5, [r4, #4]
 80082c4:	60a5      	str	r5, [r4, #8]
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	bfa2      	ittt	ge
 80082ca:	6821      	ldrge	r1, [r4, #0]
 80082cc:	f021 0104 	bicge.w	r1, r1, #4
 80082d0:	6021      	strge	r1, [r4, #0]
 80082d2:	b90e      	cbnz	r6, 80082d8 <_printf_i+0x118>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d04d      	beq.n	8008374 <_printf_i+0x1b4>
 80082d8:	4615      	mov	r5, r2
 80082da:	fbb6 f1f3 	udiv	r1, r6, r3
 80082de:	fb03 6711 	mls	r7, r3, r1, r6
 80082e2:	5dc7      	ldrb	r7, [r0, r7]
 80082e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e8:	4637      	mov	r7, r6
 80082ea:	42bb      	cmp	r3, r7
 80082ec:	460e      	mov	r6, r1
 80082ee:	d9f4      	bls.n	80082da <_printf_i+0x11a>
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d10b      	bne.n	800830c <_printf_i+0x14c>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	07de      	lsls	r6, r3, #31
 80082f8:	d508      	bpl.n	800830c <_printf_i+0x14c>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	6861      	ldr	r1, [r4, #4]
 80082fe:	4299      	cmp	r1, r3
 8008300:	bfde      	ittt	le
 8008302:	2330      	movle	r3, #48	; 0x30
 8008304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008308:	f105 35ff 	addle.w	r5, r5, #4294967295
 800830c:	1b52      	subs	r2, r2, r5
 800830e:	6122      	str	r2, [r4, #16]
 8008310:	f8cd a000 	str.w	sl, [sp]
 8008314:	464b      	mov	r3, r9
 8008316:	aa03      	add	r2, sp, #12
 8008318:	4621      	mov	r1, r4
 800831a:	4640      	mov	r0, r8
 800831c:	f7ff fee2 	bl	80080e4 <_printf_common>
 8008320:	3001      	adds	r0, #1
 8008322:	d14c      	bne.n	80083be <_printf_i+0x1fe>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	b004      	add	sp, #16
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	4835      	ldr	r0, [pc, #212]	; (8008404 <_printf_i+0x244>)
 8008330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008334:	6829      	ldr	r1, [r5, #0]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f851 6b04 	ldr.w	r6, [r1], #4
 800833c:	6029      	str	r1, [r5, #0]
 800833e:	061d      	lsls	r5, r3, #24
 8008340:	d514      	bpl.n	800836c <_printf_i+0x1ac>
 8008342:	07df      	lsls	r7, r3, #31
 8008344:	bf44      	itt	mi
 8008346:	f043 0320 	orrmi.w	r3, r3, #32
 800834a:	6023      	strmi	r3, [r4, #0]
 800834c:	b91e      	cbnz	r6, 8008356 <_printf_i+0x196>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	f023 0320 	bic.w	r3, r3, #32
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	2310      	movs	r3, #16
 8008358:	e7b0      	b.n	80082bc <_printf_i+0xfc>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f043 0320 	orr.w	r3, r3, #32
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	2378      	movs	r3, #120	; 0x78
 8008364:	4828      	ldr	r0, [pc, #160]	; (8008408 <_printf_i+0x248>)
 8008366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800836a:	e7e3      	b.n	8008334 <_printf_i+0x174>
 800836c:	0659      	lsls	r1, r3, #25
 800836e:	bf48      	it	mi
 8008370:	b2b6      	uxthmi	r6, r6
 8008372:	e7e6      	b.n	8008342 <_printf_i+0x182>
 8008374:	4615      	mov	r5, r2
 8008376:	e7bb      	b.n	80082f0 <_printf_i+0x130>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	6826      	ldr	r6, [r4, #0]
 800837c:	6961      	ldr	r1, [r4, #20]
 800837e:	1d18      	adds	r0, r3, #4
 8008380:	6028      	str	r0, [r5, #0]
 8008382:	0635      	lsls	r5, r6, #24
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	d501      	bpl.n	800838c <_printf_i+0x1cc>
 8008388:	6019      	str	r1, [r3, #0]
 800838a:	e002      	b.n	8008392 <_printf_i+0x1d2>
 800838c:	0670      	lsls	r0, r6, #25
 800838e:	d5fb      	bpl.n	8008388 <_printf_i+0x1c8>
 8008390:	8019      	strh	r1, [r3, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	4615      	mov	r5, r2
 8008398:	e7ba      	b.n	8008310 <_printf_i+0x150>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	1d1a      	adds	r2, r3, #4
 800839e:	602a      	str	r2, [r5, #0]
 80083a0:	681d      	ldr	r5, [r3, #0]
 80083a2:	6862      	ldr	r2, [r4, #4]
 80083a4:	2100      	movs	r1, #0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7f7 ff22 	bl	80001f0 <memchr>
 80083ac:	b108      	cbz	r0, 80083b2 <_printf_i+0x1f2>
 80083ae:	1b40      	subs	r0, r0, r5
 80083b0:	6060      	str	r0, [r4, #4]
 80083b2:	6863      	ldr	r3, [r4, #4]
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	2300      	movs	r3, #0
 80083b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083bc:	e7a8      	b.n	8008310 <_printf_i+0x150>
 80083be:	6923      	ldr	r3, [r4, #16]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4649      	mov	r1, r9
 80083c4:	4640      	mov	r0, r8
 80083c6:	47d0      	blx	sl
 80083c8:	3001      	adds	r0, #1
 80083ca:	d0ab      	beq.n	8008324 <_printf_i+0x164>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	079b      	lsls	r3, r3, #30
 80083d0:	d413      	bmi.n	80083fa <_printf_i+0x23a>
 80083d2:	68e0      	ldr	r0, [r4, #12]
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	4298      	cmp	r0, r3
 80083d8:	bfb8      	it	lt
 80083da:	4618      	movlt	r0, r3
 80083dc:	e7a4      	b.n	8008328 <_printf_i+0x168>
 80083de:	2301      	movs	r3, #1
 80083e0:	4632      	mov	r2, r6
 80083e2:	4649      	mov	r1, r9
 80083e4:	4640      	mov	r0, r8
 80083e6:	47d0      	blx	sl
 80083e8:	3001      	adds	r0, #1
 80083ea:	d09b      	beq.n	8008324 <_printf_i+0x164>
 80083ec:	3501      	adds	r5, #1
 80083ee:	68e3      	ldr	r3, [r4, #12]
 80083f0:	9903      	ldr	r1, [sp, #12]
 80083f2:	1a5b      	subs	r3, r3, r1
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	dcf2      	bgt.n	80083de <_printf_i+0x21e>
 80083f8:	e7eb      	b.n	80083d2 <_printf_i+0x212>
 80083fa:	2500      	movs	r5, #0
 80083fc:	f104 0619 	add.w	r6, r4, #25
 8008400:	e7f5      	b.n	80083ee <_printf_i+0x22e>
 8008402:	bf00      	nop
 8008404:	08008851 	.word	0x08008851
 8008408:	08008862 	.word	0x08008862

0800840c <_read_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_read_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f8 ff30 	bl	8001280 <_read>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_read_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_read_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20002fa4 	.word	0x20002fa4

08008430 <__swbuf_r>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	460e      	mov	r6, r1
 8008434:	4614      	mov	r4, r2
 8008436:	4605      	mov	r5, r0
 8008438:	b118      	cbz	r0, 8008442 <__swbuf_r+0x12>
 800843a:	6983      	ldr	r3, [r0, #24]
 800843c:	b90b      	cbnz	r3, 8008442 <__swbuf_r+0x12>
 800843e:	f7ff f963 	bl	8007708 <__sinit>
 8008442:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <__swbuf_r+0x98>)
 8008444:	429c      	cmp	r4, r3
 8008446:	d12b      	bne.n	80084a0 <__swbuf_r+0x70>
 8008448:	686c      	ldr	r4, [r5, #4]
 800844a:	69a3      	ldr	r3, [r4, #24]
 800844c:	60a3      	str	r3, [r4, #8]
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	071a      	lsls	r2, r3, #28
 8008452:	d52f      	bpl.n	80084b4 <__swbuf_r+0x84>
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	b36b      	cbz	r3, 80084b4 <__swbuf_r+0x84>
 8008458:	6923      	ldr	r3, [r4, #16]
 800845a:	6820      	ldr	r0, [r4, #0]
 800845c:	1ac0      	subs	r0, r0, r3
 800845e:	6963      	ldr	r3, [r4, #20]
 8008460:	b2f6      	uxtb	r6, r6
 8008462:	4283      	cmp	r3, r0
 8008464:	4637      	mov	r7, r6
 8008466:	dc04      	bgt.n	8008472 <__swbuf_r+0x42>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f7ff fc3a 	bl	8007ce4 <_fflush_r>
 8008470:	bb30      	cbnz	r0, 80084c0 <__swbuf_r+0x90>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	60a3      	str	r3, [r4, #8]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	701e      	strb	r6, [r3, #0]
 8008480:	6963      	ldr	r3, [r4, #20]
 8008482:	3001      	adds	r0, #1
 8008484:	4283      	cmp	r3, r0
 8008486:	d004      	beq.n	8008492 <__swbuf_r+0x62>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	07db      	lsls	r3, r3, #31
 800848c:	d506      	bpl.n	800849c <__swbuf_r+0x6c>
 800848e:	2e0a      	cmp	r6, #10
 8008490:	d104      	bne.n	800849c <__swbuf_r+0x6c>
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff fc25 	bl	8007ce4 <_fflush_r>
 800849a:	b988      	cbnz	r0, 80084c0 <__swbuf_r+0x90>
 800849c:	4638      	mov	r0, r7
 800849e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <__swbuf_r+0x9c>)
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d101      	bne.n	80084aa <__swbuf_r+0x7a>
 80084a6:	68ac      	ldr	r4, [r5, #8]
 80084a8:	e7cf      	b.n	800844a <__swbuf_r+0x1a>
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <__swbuf_r+0xa0>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	bf08      	it	eq
 80084b0:	68ec      	ldreq	r4, [r5, #12]
 80084b2:	e7ca      	b.n	800844a <__swbuf_r+0x1a>
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f80c 	bl	80084d4 <__swsetup_r>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d0cb      	beq.n	8008458 <__swbuf_r+0x28>
 80084c0:	f04f 37ff 	mov.w	r7, #4294967295
 80084c4:	e7ea      	b.n	800849c <__swbuf_r+0x6c>
 80084c6:	bf00      	nop
 80084c8:	080087fc 	.word	0x080087fc
 80084cc:	0800881c 	.word	0x0800881c
 80084d0:	080087dc 	.word	0x080087dc

080084d4 <__swsetup_r>:
 80084d4:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <__swsetup_r+0xcc>)
 80084d6:	b570      	push	{r4, r5, r6, lr}
 80084d8:	681d      	ldr	r5, [r3, #0]
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	b125      	cbz	r5, 80084ea <__swsetup_r+0x16>
 80084e0:	69ab      	ldr	r3, [r5, #24]
 80084e2:	b913      	cbnz	r3, 80084ea <__swsetup_r+0x16>
 80084e4:	4628      	mov	r0, r5
 80084e6:	f7ff f90f 	bl	8007708 <__sinit>
 80084ea:	4b2e      	ldr	r3, [pc, #184]	; (80085a4 <__swsetup_r+0xd0>)
 80084ec:	429c      	cmp	r4, r3
 80084ee:	d10f      	bne.n	8008510 <__swsetup_r+0x3c>
 80084f0:	686c      	ldr	r4, [r5, #4]
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084f8:	0719      	lsls	r1, r3, #28
 80084fa:	d42c      	bmi.n	8008556 <__swsetup_r+0x82>
 80084fc:	06dd      	lsls	r5, r3, #27
 80084fe:	d411      	bmi.n	8008524 <__swsetup_r+0x50>
 8008500:	2309      	movs	r3, #9
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	f04f 30ff 	mov.w	r0, #4294967295
 800850e:	e03e      	b.n	800858e <__swsetup_r+0xba>
 8008510:	4b25      	ldr	r3, [pc, #148]	; (80085a8 <__swsetup_r+0xd4>)
 8008512:	429c      	cmp	r4, r3
 8008514:	d101      	bne.n	800851a <__swsetup_r+0x46>
 8008516:	68ac      	ldr	r4, [r5, #8]
 8008518:	e7eb      	b.n	80084f2 <__swsetup_r+0x1e>
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <__swsetup_r+0xd8>)
 800851c:	429c      	cmp	r4, r3
 800851e:	bf08      	it	eq
 8008520:	68ec      	ldreq	r4, [r5, #12]
 8008522:	e7e6      	b.n	80084f2 <__swsetup_r+0x1e>
 8008524:	0758      	lsls	r0, r3, #29
 8008526:	d512      	bpl.n	800854e <__swsetup_r+0x7a>
 8008528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852a:	b141      	cbz	r1, 800853e <__swsetup_r+0x6a>
 800852c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008530:	4299      	cmp	r1, r3
 8008532:	d002      	beq.n	800853a <__swsetup_r+0x66>
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff fc2f 	bl	8007d98 <_free_r>
 800853a:	2300      	movs	r3, #0
 800853c:	6363      	str	r3, [r4, #52]	; 0x34
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	2300      	movs	r3, #0
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f043 0308 	orr.w	r3, r3, #8
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	b94b      	cbnz	r3, 800856e <__swsetup_r+0x9a>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008564:	d003      	beq.n	800856e <__swsetup_r+0x9a>
 8008566:	4621      	mov	r1, r4
 8008568:	4630      	mov	r0, r6
 800856a:	f000 f847 	bl	80085fc <__smakebuf_r>
 800856e:	89a0      	ldrh	r0, [r4, #12]
 8008570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008574:	f010 0301 	ands.w	r3, r0, #1
 8008578:	d00a      	beq.n	8008590 <__swsetup_r+0xbc>
 800857a:	2300      	movs	r3, #0
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6963      	ldr	r3, [r4, #20]
 8008580:	425b      	negs	r3, r3
 8008582:	61a3      	str	r3, [r4, #24]
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	b943      	cbnz	r3, 800859a <__swsetup_r+0xc6>
 8008588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800858c:	d1ba      	bne.n	8008504 <__swsetup_r+0x30>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	0781      	lsls	r1, r0, #30
 8008592:	bf58      	it	pl
 8008594:	6963      	ldrpl	r3, [r4, #20]
 8008596:	60a3      	str	r3, [r4, #8]
 8008598:	e7f4      	b.n	8008584 <__swsetup_r+0xb0>
 800859a:	2000      	movs	r0, #0
 800859c:	e7f7      	b.n	800858e <__swsetup_r+0xba>
 800859e:	bf00      	nop
 80085a0:	20000010 	.word	0x20000010
 80085a4:	080087fc 	.word	0x080087fc
 80085a8:	0800881c 	.word	0x0800881c
 80085ac:	080087dc 	.word	0x080087dc

080085b0 <__swhatbuf_r>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	460e      	mov	r6, r1
 80085b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b8:	2900      	cmp	r1, #0
 80085ba:	b096      	sub	sp, #88	; 0x58
 80085bc:	4614      	mov	r4, r2
 80085be:	461d      	mov	r5, r3
 80085c0:	da08      	bge.n	80085d4 <__swhatbuf_r+0x24>
 80085c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	602a      	str	r2, [r5, #0]
 80085ca:	061a      	lsls	r2, r3, #24
 80085cc:	d410      	bmi.n	80085f0 <__swhatbuf_r+0x40>
 80085ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085d2:	e00e      	b.n	80085f2 <__swhatbuf_r+0x42>
 80085d4:	466a      	mov	r2, sp
 80085d6:	f000 f851 	bl	800867c <_fstat_r>
 80085da:	2800      	cmp	r0, #0
 80085dc:	dbf1      	blt.n	80085c2 <__swhatbuf_r+0x12>
 80085de:	9a01      	ldr	r2, [sp, #4]
 80085e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085e8:	425a      	negs	r2, r3
 80085ea:	415a      	adcs	r2, r3
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	e7ee      	b.n	80085ce <__swhatbuf_r+0x1e>
 80085f0:	2340      	movs	r3, #64	; 0x40
 80085f2:	2000      	movs	r0, #0
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	b016      	add	sp, #88	; 0x58
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080085fc <__smakebuf_r>:
 80085fc:	898b      	ldrh	r3, [r1, #12]
 80085fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008600:	079d      	lsls	r5, r3, #30
 8008602:	4606      	mov	r6, r0
 8008604:	460c      	mov	r4, r1
 8008606:	d507      	bpl.n	8008618 <__smakebuf_r+0x1c>
 8008608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	2301      	movs	r3, #1
 8008612:	6163      	str	r3, [r4, #20]
 8008614:	b002      	add	sp, #8
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	ab01      	add	r3, sp, #4
 800861a:	466a      	mov	r2, sp
 800861c:	f7ff ffc8 	bl	80085b0 <__swhatbuf_r>
 8008620:	9900      	ldr	r1, [sp, #0]
 8008622:	4605      	mov	r5, r0
 8008624:	4630      	mov	r0, r6
 8008626:	f7ff f96b 	bl	8007900 <_malloc_r>
 800862a:	b948      	cbnz	r0, 8008640 <__smakebuf_r+0x44>
 800862c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008630:	059a      	lsls	r2, r3, #22
 8008632:	d4ef      	bmi.n	8008614 <__smakebuf_r+0x18>
 8008634:	f023 0303 	bic.w	r3, r3, #3
 8008638:	f043 0302 	orr.w	r3, r3, #2
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	e7e3      	b.n	8008608 <__smakebuf_r+0xc>
 8008640:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <__smakebuf_r+0x7c>)
 8008642:	62b3      	str	r3, [r6, #40]	; 0x28
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	6020      	str	r0, [r4, #0]
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	6163      	str	r3, [r4, #20]
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	6120      	str	r0, [r4, #16]
 8008656:	b15b      	cbz	r3, 8008670 <__smakebuf_r+0x74>
 8008658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800865c:	4630      	mov	r0, r6
 800865e:	f000 f81f 	bl	80086a0 <_isatty_r>
 8008662:	b128      	cbz	r0, 8008670 <__smakebuf_r+0x74>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	f043 0301 	orr.w	r3, r3, #1
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	89a0      	ldrh	r0, [r4, #12]
 8008672:	4305      	orrs	r5, r0
 8008674:	81a5      	strh	r5, [r4, #12]
 8008676:	e7cd      	b.n	8008614 <__smakebuf_r+0x18>
 8008678:	080076a1 	.word	0x080076a1

0800867c <_fstat_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	; (800869c <_fstat_r+0x20>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	4611      	mov	r1, r2
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	f7f8 fe3e 	bl	800130a <_fstat>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d102      	bne.n	8008698 <_fstat_r+0x1c>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	b103      	cbz	r3, 8008698 <_fstat_r+0x1c>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	20002fa4 	.word	0x20002fa4

080086a0 <_isatty_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	; (80086bc <_isatty_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f8 fe3d 	bl	800132a <_isatty>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_isatty_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_isatty_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	20002fa4 	.word	0x20002fa4

080086c0 <_init>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr

080086cc <_fini>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr
