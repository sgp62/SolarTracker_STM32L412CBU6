
SolarTracker_STM32L412CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800af60  0800af60  0001af60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b494  0800b494  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b49c  0800b49c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b4a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fbc  200001e4  0800b688  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031a0  0800b688  000231a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca7b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a52  00000000  00000000  0003cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  000406e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00041ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e020  00000000  00000000  00043540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aaa7  00000000  00000000  00061560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b81da  00000000  00000000  0007c007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001341e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076f0  00000000  00000000  00134234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af44 	.word	0x0800af44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800af44 	.word	0x0800af44

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9aa 	b.w	8000f98 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <vApplicationGetIdleTaskMemory+0x30>)
 8000fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000200 	.word	0x20000200
 8000fcc:	200002b4 	.word	0x200002b4

08000fd0 <GpsToDecimalDegrees>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  float v= 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  if(strlen(nmeaPos)>5)
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f8fe 	bl	80001e4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d948      	bls.n	8001080 <GpsToDecimalDegrees+0xb0>
  {
    char integerPart[3+1];
    int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff6:	d101      	bne.n	8000ffc <GpsToDecimalDegrees+0x2c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <GpsToDecimalDegrees+0x2e>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	613b      	str	r3, [r7, #16]
    memcpy(integerPart, nmeaPos, digitCount);
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f007 f8b2 	bl	8008172 <memcpy>
    integerPart[digitCount]= 0;
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    nmeaPos+= digitCount;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	607b      	str	r3, [r7, #4]
    v= atoi(integerPart) + atof(nmeaPos)/60.;
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f006 ff7b 	bl	8007f22 <atoi>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa88 	bl	8000544 <__aeabi_i2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 ff6f 	bl	8007f1c <atof>
 800103e:	ec51 0b10 	vmov	r0, r1, d0
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <GpsToDecimalDegrees+0xc0>)
 8001048:	f7ff fc10 	bl	800086c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff f92a 	bl	80002ac <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd94 	bl	8000b8c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
    if(quadrant=='W' || quadrant=='S')
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b57      	cmp	r3, #87	; 0x57
 800106c:	d002      	beq.n	8001074 <GpsToDecimalDegrees+0xa4>
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b53      	cmp	r3, #83	; 0x53
 8001072:	d105      	bne.n	8001080 <GpsToDecimalDegrees+0xb0>
      v= -v;
 8001074:	edd7 7a05 	vldr	s15, [r7, #20]
 8001078:	eef1 7a67 	vneg.f32	s15, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return v;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	404e0000 	.word	0x404e0000

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b098      	sub	sp, #96	; 0x60
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 ffa4 	bl	8001fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f895 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 f987 	bl	80013b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010a6:	f000 f8e7 	bl	8001278 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010aa:	f000 f923 	bl	80012f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010ae:	f000 f951 	bl	8001354 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 12, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	210c      	movs	r1, #12
 80010b6:	2025      	movs	r0, #37	; 0x25
 80010b8:	f001 f886 	bl	80021c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80010bc:	2025      	movs	r0, #37	; 0x25
 80010be:	f001 f89f 	bl	8002200 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <main+0x108>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a35      	ldr	r2, [pc, #212]	; (800119c <main+0x108>)
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f001 f86f 	bl	80021b2 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of spi_mutex */
  osMutexDef(spi_mutex);
 80010d4:	2300      	movs	r3, #0
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80010d8:	2300      	movs	r3, #0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
  spi_mutexHandle = osMutexCreate(osMutex(spi_mutex));
 80010dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 faf1 	bl	80056c8 <osMutexCreate>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <main+0x10c>)
 80010ea:	6013      	str	r3, [r2, #0]
//  osSemaphoreDef(external_sem);
//  external_semHandle = osSemaphoreCreate(osSemaphore(external_sem), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  spi_semHandle = xSemaphoreCreateCounting( 1, 0 );
 80010ec:	2100      	movs	r1, #0
 80010ee:	2001      	movs	r0, #1
 80010f0:	f004 fd3c 	bl	8005b6c <xQueueCreateCountingSemaphore>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a2b      	ldr	r2, [pc, #172]	; (80011a4 <main+0x110>)
 80010f8:	6013      	str	r3, [r2, #0]
  uart_semHandle = xSemaphoreCreateCounting( 1, 1 );
 80010fa:	2101      	movs	r1, #1
 80010fc:	2001      	movs	r0, #1
 80010fe:	f004 fd35 	bl	8005b6c <xQueueCreateCountingSemaphore>
 8001102:	4603      	mov	r3, r0
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <main+0x114>)
 8001106:	6013      	str	r3, [r2, #0]
  external_semHandle = xSemaphoreCreateCounting( 1, 0 );
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f004 fd2e 	bl	8005b6c <xQueueCreateCountingSemaphore>
 8001110:	4603      	mov	r3, r0
 8001112:	4a26      	ldr	r2, [pc, #152]	; (80011ac <main+0x118>)
 8001114:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 8001116:	2200      	movs	r2, #0
 8001118:	2164      	movs	r1, #100	; 0x64
 800111a:	2002      	movs	r0, #2
 800111c:	f004 fc80 	bl	8005a20 <xQueueGenericCreate>
 8001120:	4603      	mov	r3, r0
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <main+0x11c>)
 8001124:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart1Task */
  osThreadDef(uart1Task, Startuart1Task, osPriorityHigh, 0, 512);
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <main+0x120>)
 8001128:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 800113a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fa75 	bl	8005630 <osThreadCreate>
 8001146:	4603      	mov	r3, r0
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <main+0x124>)
 800114a:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart2Task */
  osThreadDef(uart2Task, Startuart2Task, osPriorityNormal, 0, 512);
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <main+0x128>)
 800114e:	f107 0420 	add.w	r4, r7, #32
 8001152:	461d      	mov	r5, r3
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fa62 	bl	8005630 <osThreadCreate>
 800116c:	4603      	mov	r3, r0
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <main+0x12c>)
 8001170:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi1Task */
  osThreadDef(spi1Task, startspi1Task, osPriorityNormal, 0, 512);
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <main+0x130>)
 8001174:	1d3c      	adds	r4, r7, #4
 8001176:	461d      	mov	r5, r3
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spi1TaskHandle = osThreadCreate(osThread(spi1Task), NULL);
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fa51 	bl	8005630 <osThreadCreate>
 800118e:	4603      	mov	r3, r0
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <main+0x134>)
 8001192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001194:	f004 fa45 	bl	8005622 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001198:	e7fe      	b.n	8001198 <main+0x104>
 800119a:	bf00      	nop
 800119c:	40013800 	.word	0x40013800
 80011a0:	200006a0 	.word	0x200006a0
 80011a4:	200006a4 	.word	0x200006a4
 80011a8:	200006a8 	.word	0x200006a8
 80011ac:	200006ac 	.word	0x200006ac
 80011b0:	2000077c 	.word	0x2000077c
 80011b4:	0800af84 	.word	0x0800af84
 80011b8:	20000694 	.word	0x20000694
 80011bc:	0800afa0 	.word	0x0800afa0
 80011c0:	20000698 	.word	0x20000698
 80011c4:	0800afbc 	.word	0x0800afbc
 80011c8:	2000069c 	.word	0x2000069c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	; 0x58
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2244      	movs	r2, #68	; 0x44
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 ffd7 	bl	800818e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f2:	f001 fa15 	bl	8002620 <HAL_PWREx_ControlVoltageScaling>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011fc:	f000 fc58 	bl	8001ab0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001200:	f001 f9f0 	bl	80025e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <SystemClock_Config+0xa8>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <SystemClock_Config+0xa8>)
 800120c:	f023 0318 	bic.w	r3, r3, #24
 8001210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001214:	2314      	movs	r3, #20
 8001216:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fa4b 	bl	80026cc <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800123c:	f000 fc38 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fe99 	bl	8002f90 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001264:	f000 fc24 	bl	8001ab0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001268:	f002 fa6e 	bl	8003748 <HAL_RCCEx_EnableMSIPLLMode>
}
 800126c:	bf00      	nop
 800126e:	3758      	adds	r7, #88	; 0x58
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000

08001278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_SPI1_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_SPI1_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_SPI1_Init+0x74>)
 8001284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_SPI1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_SPI1_Init+0x74>)
 8001292:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001296:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_SPI1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_SPI1_Init+0x74>)
 80012a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_SPI1_Init+0x74>)
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_SPI1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_SPI1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_SPI1_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_SPI1_Init+0x74>)
 80012c6:	2207      	movs	r2, #7
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_SPI1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_SPI1_Init+0x74>)
 80012d8:	f002 fa46 	bl	8003768 <HAL_SPI_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 fbe5 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  //SPI1->CR1 |= SPI_CR1_SSM;
  /* USER CODE END SPI1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000528 	.word	0x20000528
 80012f0:	40013000 	.word	0x40013000

080012f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART1_UART_Init+0x58>)
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <MX_USART1_UART_Init+0x5c>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USART1_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART1_UART_Init+0x58>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART1_UART_Init+0x58>)
 8001338:	f003 fc70 	bl	8004c1c <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 fbb5 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000058c 	.word	0x2000058c
 8001350:	40013800 	.word	0x40013800

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART2_UART_Init+0x58>)
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <MX_USART2_UART_Init+0x5c>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001360:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_USART2_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART2_UART_Init+0x58>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART2_UART_Init+0x58>)
 8001398:	f003 fc40 	bl	8004c1c <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a2:	f000 fb85 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000610 	.word	0x20000610
 80013b0:	40004400 	.word	0x40004400

080013b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <MX_GPIO_Init+0xe8>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <MX_GPIO_Init+0xe8>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <MX_GPIO_Init+0xe8>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <MX_GPIO_Init+0xe8>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <MX_GPIO_Init+0xe8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <MX_GPIO_Init+0xe8>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <MX_GPIO_Init+0xe8>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a27      	ldr	r2, [pc, #156]	; (800149c <MX_GPIO_Init+0xe8>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <MX_GPIO_Init+0xe8>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2103      	movs	r1, #3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f001 f8b3 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f240 1101 	movw	r1, #257	; 0x101
 8001424:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_GPIO_Init+0xec>)
 8001426:	f001 f8ad 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142a:	2303      	movs	r3, #3
 800142c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f000 ff2c 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001448:	f240 1301 	movw	r3, #257	; 0x101
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	480f      	ldr	r0, [pc, #60]	; (80014a0 <MX_GPIO_Init+0xec>)
 8001462:	f000 ff1d 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <MX_GPIO_Init+0xec>)
 800147e:	f000 ff0f 	bl	80022a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2105      	movs	r1, #5
 8001486:	2028      	movs	r0, #40	; 0x28
 8001488:	f000 fe9e 	bl	80021c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800148c:	2028      	movs	r0, #40	; 0x28
 800148e:	f000 feb7 	bl	8002200 <HAL_NVIC_EnableIRQ>

}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000400 	.word	0x48000400

080014a4 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014bc:	2208      	movs	r2, #8
 80014be:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d036      	beq.n	800155e <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <USART1_IRQHandler+0xc4>)
 80014f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b0d      	cmp	r3, #13
 80014fc:	d002      	beq.n	8001504 <USART1_IRQHandler+0x60>
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b0a      	cmp	r3, #10
 8001502:	d119      	bne.n	8001538 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <USART1_IRQHandler+0xc8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d028      	beq.n	800155e <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <USART1_IRQHandler+0xc8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	4916      	ldr	r1, [pc, #88]	; (800156c <USART1_IRQHandler+0xc8>)
 8001514:	600a      	str	r2, [r1, #0]
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <USART1_IRQHandler+0xcc>)
 8001518:	2100      	movs	r1, #0
 800151a:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <USART1_IRQHandler+0xd0>)
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	463a      	mov	r2, r7
 8001522:	2300      	movs	r3, #0
 8001524:	4912      	ldr	r1, [pc, #72]	; (8001570 <USART1_IRQHandler+0xcc>)
 8001526:	f004 fc53 	bl	8005dd0 <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <USART1_IRQHandler+0xc8>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <USART1_IRQHandler+0xd4>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 8001536:	e012      	b.n	800155e <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b24      	cmp	r3, #36	; 0x24
 800153c:	d003      	beq.n	8001546 <USART1_IRQHandler+0xa2>
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <USART1_IRQHandler+0xc8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2bc8      	cmp	r3, #200	; 0xc8
 8001544:	d102      	bne.n	800154c <USART1_IRQHandler+0xa8>
				rx_index = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <USART1_IRQHandler+0xc8>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <USART1_IRQHandler+0xc8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	4906      	ldr	r1, [pc, #24]	; (800156c <USART1_IRQHandler+0xc8>)
 8001554:	600a      	str	r2, [r1, #0]
 8001556:	4906      	ldr	r1, [pc, #24]	; (8001570 <USART1_IRQHandler+0xcc>)
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 800155c:	e7ff      	b.n	800155e <USART1_IRQHandler+0xba>
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40013800 	.word	0x40013800
 800156c:	20000780 	.word	0x20000780
 8001570:	20000784 	.word	0x20000784
 8001574:	2000077c 	.word	0x2000077c
 8001578:	200004b4 	.word	0x200004b4

0800157c <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_11)
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800158c:	d105      	bne.n	800159a <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  xSemaphoreGiveFromISR(external_semHandle, NULL);
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f004 fcb6 	bl	8005f06 <xQueueGiveFromISR>
  }
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200006ac 	.word	0x200006ac

080015a8 <Startuart1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startuart1Task */
void Startuart1Task(void const * argument)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static int spi_gps_read_addr = 0;
	static SerialBuffer gps_ext_buffer;
	static int statusbuf[8];
	int num_messages = 500; //Number of FRAM messages for offset 72B -> 256KB storage =
 80015b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015b4:	60bb      	str	r3, [r7, #8]
	//Code used for external UART write, reading SPI data
  /* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <Startuart1Task+0xc0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fe0e 	bl	80061e0 <xQueueSemaphoreTake>
		//Take both semaphores to keep other tasks from running (might be unnecessary bc higher priority)
		//xSemaphoreTake(uart_semHandle, portMAX_DELAY);
		//xSemaphoreTake(spi_semHandle, portMAX_DELAY);
		USART_GPS->CR1 &= ~(USART_CR1_RXNEIE); // Disable UART Interrupt
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <Startuart1Task+0xc4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a28      	ldr	r2, [pc, #160]	; (800166c <Startuart1Task+0xc4>)
 80015ca:	f023 0320 	bic.w	r3, r3, #32
 80015ce:	6013      	str	r3, [r2, #0]
		spi_gps_read_addr = 0;
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <Startuart1Task+0xc8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < num_messages; i++){
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e03a      	b.n	8001652 <Startuart1Task+0xaa>

			//Read NMEA_LEN bytes of data
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2101      	movs	r1, #1
 80015e0:	4824      	ldr	r0, [pc, #144]	; (8001674 <Startuart1Task+0xcc>)
 80015e2:	f000 ffcf 	bl	8002584 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	4923      	ldr	r1, [pc, #140]	; (8001678 <Startuart1Task+0xd0>)
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <Startuart1Task+0xd4>)
 80015ec:	f002 f960 	bl	80038b0 <HAL_SPI_Transmit_IT>
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_gps_read_addr, 2);
 80015f0:	2202      	movs	r2, #2
 80015f2:	491f      	ldr	r1, [pc, #124]	; (8001670 <Startuart1Task+0xc8>)
 80015f4:	4821      	ldr	r0, [pc, #132]	; (800167c <Startuart1Task+0xd4>)
 80015f6:	f002 f95b 	bl	80038b0 <HAL_SPI_Transmit_IT>
			HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&gps_ext_buffer.Buffer, NMEA_LEN);
 80015fa:	2248      	movs	r2, #72	; 0x48
 80015fc:	4920      	ldr	r1, [pc, #128]	; (8001680 <Startuart1Task+0xd8>)
 80015fe:	481f      	ldr	r0, [pc, #124]	; (800167c <Startuart1Task+0xd4>)
 8001600:	f002 f9e4 	bl	80039cc <HAL_SPI_Receive_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2101      	movs	r1, #1
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <Startuart1Task+0xcc>)
 800160a:	f000 ffbb 	bl	8002584 <HAL_GPIO_WritePin>

			spi_gps_read_addr += NMEA_LEN; //Increase offset to read next data value
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <Startuart1Task+0xc8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3348      	adds	r3, #72	; 0x48
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <Startuart1Task+0xc8>)
 8001616:	6013      	str	r3, [r2, #0]

			// Read status register
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2101      	movs	r1, #1
 800161c:	4815      	ldr	r0, [pc, #84]	; (8001674 <Startuart1Task+0xcc>)
 800161e:	f000 ffb1 	bl	8002584 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 8001622:	2201      	movs	r2, #1
 8001624:	4917      	ldr	r1, [pc, #92]	; (8001684 <Startuart1Task+0xdc>)
 8001626:	4815      	ldr	r0, [pc, #84]	; (800167c <Startuart1Task+0xd4>)
 8001628:	f002 f942 	bl	80038b0 <HAL_SPI_Transmit_IT>
			HAL_SPI_Receive_IT(&hspi1, (uint8_t *)statusbuf, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	4916      	ldr	r1, [pc, #88]	; (8001688 <Startuart1Task+0xe0>)
 8001630:	4812      	ldr	r0, [pc, #72]	; (800167c <Startuart1Task+0xd4>)
 8001632:	f002 f9cb 	bl	80039cc <HAL_SPI_Receive_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2101      	movs	r1, #1
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <Startuart1Task+0xcc>)
 800163c:	f000 ffa2 	bl	8002584 <HAL_GPIO_WritePin>

			//Write NMEA message to external UART
			HAL_UART_Transmit(&huart1, (uint8_t*)&gps_ext_buffer.Buffer, NMEA_LEN, 100);
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	2248      	movs	r2, #72	; 0x48
 8001644:	490e      	ldr	r1, [pc, #56]	; (8001680 <Startuart1Task+0xd8>)
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <Startuart1Task+0xe4>)
 8001648:	f003 fb36 	bl	8004cb8 <HAL_UART_Transmit>
		for(int i = 0; i < num_messages; i++){
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3301      	adds	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbc0      	blt.n	80015dc <Startuart1Task+0x34>
		}

		//Let other tasks continue running
		USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable UART Interrupt
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <Startuart1Task+0xc4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a03      	ldr	r2, [pc, #12]	; (800166c <Startuart1Task+0xc4>)
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 8001666:	e7a6      	b.n	80015b6 <Startuart1Task+0xe>
 8001668:	200006ac 	.word	0x200006ac
 800166c:	40013800 	.word	0x40013800
 8001670:	20000850 	.word	0x20000850
 8001674:	48000400 	.word	0x48000400
 8001678:	0800b015 	.word	0x0800b015
 800167c:	20000528 	.word	0x20000528
 8001680:	20000854 	.word	0x20000854
 8001684:	0800b018 	.word	0x0800b018
 8001688:	200008b8 	.word	0x200008b8
 800168c:	2000058c 	.word	0x2000058c

08001690 <Startuart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startuart2Task */
void Startuart2Task(void const * argument)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	float latitude, longitude;

	char* message_id, *time, *data_valid, *raw_latitude, *raw_longitude, *latdir, *longdir;

	//Set RF Switch to 0 for internal antenna:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169e:	4856      	ldr	r0, [pc, #344]	; (80017f8 <Startuart2Task+0x168>)
 80016a0:	f000 ff70 	bl	8002584 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 80016a4:	4b55      	ldr	r3, [pc, #340]	; (80017fc <Startuart2Task+0x16c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fea5 	bl	80063f8 <uxQueueMessagesWaitingFromISR>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f7      	beq.n	80016a4 <Startuart2Task+0x14>
	  {


		  xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 80016b4:	4b51      	ldr	r3, [pc, #324]	; (80017fc <Startuart2Task+0x16c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4951      	ldr	r1, [pc, #324]	; (8001800 <Startuart2Task+0x170>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fcaf 	bl	8006020 <xQueueReceive>
		  //Fill and check header
		  for(int c = 0; c < 6; c++){
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c6:	e00b      	b.n	80016e0 <Startuart2Task+0x50>
			  nmea_header[c] = SerialBufferReceived.Buffer[c];
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <Startuart2Task+0x170>)
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	4413      	add	r3, r2
 80016ce:	7819      	ldrb	r1, [r3, #0]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <Startuart2Task+0x174>)
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	4413      	add	r3, r2
 80016d6:	460a      	mov	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
		  for(int c = 0; c < 6; c++){
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	3301      	adds	r3, #1
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	ddf0      	ble.n	80016c8 <Startuart2Task+0x38>
		  }
		  if(!strcmp(nmea_header, "$GPRMC")){
 80016e6:	4948      	ldr	r1, [pc, #288]	; (8001808 <Startuart2Task+0x178>)
 80016e8:	4846      	ldr	r0, [pc, #280]	; (8001804 <Startuart2Task+0x174>)
 80016ea:	f7fe fd71 	bl	80001d0 <strcmp>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d17d      	bne.n	80017f0 <Startuart2Task+0x160>
			  if(SerialBufferReceived.Buffer[18] == 'V'){
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <Startuart2Task+0x170>)
 80016f6:	7c9b      	ldrb	r3, [r3, #18]
 80016f8:	2b56      	cmp	r3, #86	; 0x56
 80016fa:	d105      	bne.n	8001708 <Startuart2Task+0x78>
				  //No fix, turn on LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2101      	movs	r1, #1
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f000 ff3e 	bl	8002584 <HAL_GPIO_WritePin>

			  }
			  if(SerialBufferReceived.Buffer[18] == 'A'){
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <Startuart2Task+0x170>)
 800170a:	7c9b      	ldrb	r3, [r3, #18]
 800170c:	2b41      	cmp	r3, #65	; 0x41
 800170e:	d16f      	bne.n	80017f0 <Startuart2Task+0x160>
				  //Got a fix, turn off LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2101      	movs	r1, #1
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 ff34 	bl	8002584 <HAL_GPIO_WritePin>

				  message_id = SerialBufferReceived.Buffer;
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <Startuart2Task+0x170>)
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
				  time = FIND_AND_NUL(message_id, time, ',');
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001724:	f006 fea5 	bl	8008472 <strchr>
 8001728:	6278      	str	r0, [r7, #36]	; 0x24
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3301      	adds	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
				  data_valid = FIND_AND_NUL(time, data_valid, ',');
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800173a:	f006 fe9a 	bl	8008472 <strchr>
 800173e:	6238      	str	r0, [r7, #32]
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	3301      	adds	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
				  raw_latitude = FIND_AND_NUL(data_valid, raw_latitude, ',');
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	6a38      	ldr	r0, [r7, #32]
 8001750:	f006 fe8f 	bl	8008472 <strchr>
 8001754:	61f8      	str	r0, [r7, #28]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	3301      	adds	r3, #1
 8001760:	61fb      	str	r3, [r7, #28]
				  latdir = FIND_AND_NUL(raw_latitude, latdir, ',');
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	69f8      	ldr	r0, [r7, #28]
 8001766:	f006 fe84 	bl	8008472 <strchr>
 800176a:	61b8      	str	r0, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3301      	adds	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
				  raw_longitude = FIND_AND_NUL(latdir, raw_longitude, ',');
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	69b8      	ldr	r0, [r7, #24]
 800177c:	f006 fe79 	bl	8008472 <strchr>
 8001780:	6178      	str	r0, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
				  longdir = FIND_AND_NUL(raw_longitude, longdir, ',');
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	6978      	ldr	r0, [r7, #20]
 8001792:	f006 fe6e 	bl	8008472 <strchr>
 8001796:	6138      	str	r0, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	3301      	adds	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]

				  latitude = GpsToDecimalDegrees(raw_latitude, *latdir);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	69f8      	ldr	r0, [r7, #28]
 80017ac:	f7ff fc10 	bl	8000fd0 <GpsToDecimalDegrees>
 80017b0:	ed87 0a03 	vstr	s0, [r7, #12]
				  longitude = GpsToDecimalDegrees(raw_longitude, *longdir);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff fc08 	bl	8000fd0 <GpsToDecimalDegrees>
 80017c0:	ed87 0a02 	vstr	s0, [r7, #8]


				  if(tim1_counter > 1000){ //Post SPI write semaphore every 1s there is a valid message
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <Startuart2Task+0x17c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017cc:	d910      	bls.n	80017f0 <Startuart2Task+0x160>
					  xSemaphoreGive(spi_semHandle);
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <Startuart2Task+0x180>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	f004 f9fc 	bl	8005bd4 <xQueueGenericSend>
					  tim1_counter = 0;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <Startuart2Task+0x17c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
					  xSemaphoreTake(uart_semHandle, portMAX_DELAY); //Wait until SPI is posted
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <Startuart2Task+0x184>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fcf8 	bl	80061e0 <xQueueSemaphoreTake>
				  }
			  }
		  }
		  got_nmea=0;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <Startuart2Task+0x188>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 80017f6:	e755      	b.n	80016a4 <Startuart2Task+0x14>
 80017f8:	48000400 	.word	0x48000400
 80017fc:	2000077c 	.word	0x2000077c
 8001800:	200006b0 	.word	0x200006b0
 8001804:	200004b8 	.word	0x200004b8
 8001808:	0800afd8 	.word	0x0800afd8
 800180c:	20000778 	.word	0x20000778
 8001810:	200006a4 	.word	0x200006a4
 8001814:	200006a8 	.word	0x200006a8
 8001818:	200004b4 	.word	0x200004b4

0800181c <startspi1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startspi1Task */
void startspi1Task(void const * argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startspi1Task */
	HAL_StatusTypeDef response = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]

	//SPI Initialization **************************
	//Write CS Pin high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2101      	movs	r1, #1
 800182c:	4885      	ldr	r0, [pc, #532]	; (8001a44 <startspi1Task+0x228>)
 800182e:	f000 fea9 	bl	8002584 <HAL_GPIO_WritePin>
	// Enable write enable latch (allow write operations)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	4883      	ldr	r0, [pc, #524]	; (8001a44 <startspi1Task+0x228>)
 8001838:	f000 fea4 	bl	8002584 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 800183c:	2201      	movs	r2, #1
 800183e:	4982      	ldr	r1, [pc, #520]	; (8001a48 <startspi1Task+0x22c>)
 8001840:	4882      	ldr	r0, [pc, #520]	; (8001a4c <startspi1Task+0x230>)
 8001842:	f002 f835 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2101      	movs	r1, #1
 800184a:	487e      	ldr	r0, [pc, #504]	; (8001a44 <startspi1Task+0x228>)
 800184c:	f000 fe9a 	bl	8002584 <HAL_GPIO_WritePin>

	// Test bytes to write to EEPROM
	spi_mout_buf[0] = 0xAB;
 8001850:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <startspi1Task+0x234>)
 8001852:	22ab      	movs	r2, #171	; 0xab
 8001854:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0xCD;
 8001856:	4b7e      	ldr	r3, [pc, #504]	; (8001a50 <startspi1Task+0x234>)
 8001858:	22cd      	movs	r2, #205	; 0xcd
 800185a:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0xEF;
 800185c:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <startspi1Task+0x234>)
 800185e:	22ef      	movs	r2, #239	; 0xef
 8001860:	709a      	strb	r2, [r3, #2]

	// Write 3 bytes starting at given address
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	4877      	ldr	r0, [pc, #476]	; (8001a44 <startspi1Task+0x228>)
 8001868:	f000 fe8c 	bl	8002584 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WRITE, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	4979      	ldr	r1, [pc, #484]	; (8001a54 <startspi1Task+0x238>)
 8001870:	4876      	ldr	r0, [pc, #472]	; (8001a4c <startspi1Task+0x230>)
 8001872:	f002 f81d 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 8001876:	2202      	movs	r2, #2
 8001878:	4977      	ldr	r1, [pc, #476]	; (8001a58 <startspi1Task+0x23c>)
 800187a:	4874      	ldr	r0, [pc, #464]	; (8001a4c <startspi1Task+0x230>)
 800187c:	f002 f818 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)spi_mout_buf, 3);
 8001880:	2203      	movs	r2, #3
 8001882:	4973      	ldr	r1, [pc, #460]	; (8001a50 <startspi1Task+0x234>)
 8001884:	4871      	ldr	r0, [pc, #452]	; (8001a4c <startspi1Task+0x230>)
 8001886:	f002 f813 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2101      	movs	r1, #1
 800188e:	486d      	ldr	r0, [pc, #436]	; (8001a44 <startspi1Task+0x228>)
 8001890:	f000 fe78 	bl	8002584 <HAL_GPIO_WritePin>
	//IO Driver for output pin enable

	// Clear buffer
	spi_mout_buf[0] = 0;
 8001894:	4b6e      	ldr	r3, [pc, #440]	; (8001a50 <startspi1Task+0x234>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0;
 800189a:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <startspi1Task+0x234>)
 800189c:	2200      	movs	r2, #0
 800189e:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0;
 80018a0:	4b6b      	ldr	r3, [pc, #428]	; (8001a50 <startspi1Task+0x234>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	709a      	strb	r2, [r3, #2]

	// Wait until WIP bit is cleared
	spi_wip = 1;
 80018a6:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <startspi1Task+0x240>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 80018ac:	e02b      	b.n	8001906 <startspi1Task+0xea>
	{
	 // Read status register
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	4864      	ldr	r0, [pc, #400]	; (8001a44 <startspi1Task+0x228>)
 80018b4:	f000 fe66 	bl	8002584 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 80018b8:	2201      	movs	r2, #1
 80018ba:	4969      	ldr	r1, [pc, #420]	; (8001a60 <startspi1Task+0x244>)
 80018bc:	4863      	ldr	r0, [pc, #396]	; (8001a4c <startspi1Task+0x230>)
 80018be:	f001 fff7 	bl	80038b0 <HAL_SPI_Transmit_IT>
	 response = HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	4962      	ldr	r1, [pc, #392]	; (8001a50 <startspi1Task+0x234>)
 80018c6:	4861      	ldr	r0, [pc, #388]	; (8001a4c <startspi1Task+0x230>)
 80018c8:	f002 f880 	bl	80039cc <HAL_SPI_Receive_IT>
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]
	 if (response == HAL_OK) {
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <startspi1Task+0xc8>
	  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 80018d6:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <startspi1Task+0x234>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4619      	mov	r1, r3
 80018dc:	4861      	ldr	r0, [pc, #388]	; (8001a64 <startspi1Task+0x248>)
 80018de:	f006 fcf3 	bl	80082c8 <iprintf>
 80018e2:	e004      	b.n	80018ee <startspi1Task+0xd2>
	 } else {
	  printf("Got error response as %d\r\n", response);
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	4619      	mov	r1, r3
 80018e8:	485f      	ldr	r0, [pc, #380]	; (8001a68 <startspi1Task+0x24c>)
 80018ea:	f006 fced 	bl	80082c8 <iprintf>
	 }
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2101      	movs	r1, #1
 80018f2:	4854      	ldr	r0, [pc, #336]	; (8001a44 <startspi1Task+0x228>)
 80018f4:	f000 fe46 	bl	8002584 <HAL_GPIO_WritePin>

	 // Mask out WIP bit
	 spi_wip = spi_mout_buf[0] & 0b00000001;
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <startspi1Task+0x234>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <startspi1Task+0x240>)
 8001904:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 8001906:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <startspi1Task+0x240>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1cf      	bne.n	80018ae <startspi1Task+0x92>
	}

	// Read the 3 bytes back
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	2101      	movs	r1, #1
 8001912:	484c      	ldr	r0, [pc, #304]	; (8001a44 <startspi1Task+0x228>)
 8001914:	f000 fe36 	bl	8002584 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 8001918:	2201      	movs	r2, #1
 800191a:	4954      	ldr	r1, [pc, #336]	; (8001a6c <startspi1Task+0x250>)
 800191c:	484b      	ldr	r0, [pc, #300]	; (8001a4c <startspi1Task+0x230>)
 800191e:	f001 ffc7 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 8001922:	2202      	movs	r2, #2
 8001924:	494c      	ldr	r1, [pc, #304]	; (8001a58 <startspi1Task+0x23c>)
 8001926:	4849      	ldr	r0, [pc, #292]	; (8001a4c <startspi1Task+0x230>)
 8001928:	f001 ffc2 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 3);
 800192c:	2203      	movs	r2, #3
 800192e:	4948      	ldr	r1, [pc, #288]	; (8001a50 <startspi1Task+0x234>)
 8001930:	4846      	ldr	r0, [pc, #280]	; (8001a4c <startspi1Task+0x230>)
 8001932:	f002 f84b 	bl	80039cc <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2101      	movs	r1, #1
 800193a:	4842      	ldr	r0, [pc, #264]	; (8001a44 <startspi1Task+0x228>)
 800193c:	f000 fe22 	bl	8002584 <HAL_GPIO_WritePin>

	// Read status register
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2101      	movs	r1, #1
 8001944:	483f      	ldr	r0, [pc, #252]	; (8001a44 <startspi1Task+0x228>)
 8001946:	f000 fe1d 	bl	8002584 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	4944      	ldr	r1, [pc, #272]	; (8001a60 <startspi1Task+0x244>)
 800194e:	483f      	ldr	r0, [pc, #252]	; (8001a4c <startspi1Task+0x230>)
 8001950:	f001 ffae 	bl	80038b0 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	493e      	ldr	r1, [pc, #248]	; (8001a50 <startspi1Task+0x234>)
 8001958:	483c      	ldr	r0, [pc, #240]	; (8001a4c <startspi1Task+0x230>)
 800195a:	f002 f837 	bl	80039cc <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4838      	ldr	r0, [pc, #224]	; (8001a44 <startspi1Task+0x228>)
 8001964:	f000 fe0e 	bl	8002584 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001968:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <startspi1Task+0x254>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fc35 	bl	80061e0 <xQueueSemaphoreTake>
	  //osDelay(1);

	  //Send over SPI to FRAM
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
		//Set Write enable latch
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2101      	movs	r1, #1
 800197a:	4832      	ldr	r0, [pc, #200]	; (8001a44 <startspi1Task+0x228>)
 800197c:	f000 fe02 	bl	8002584 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 8001980:	2201      	movs	r2, #1
 8001982:	4931      	ldr	r1, [pc, #196]	; (8001a48 <startspi1Task+0x22c>)
 8001984:	4831      	ldr	r0, [pc, #196]	; (8001a4c <startspi1Task+0x230>)
 8001986:	f001 ff93 	bl	80038b0 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	2101      	movs	r1, #1
 800198e:	482d      	ldr	r0, [pc, #180]	; (8001a44 <startspi1Task+0x228>)
 8001990:	f000 fdf8 	bl	8002584 <HAL_GPIO_WritePin>

		// Write 64 bytes starting at given address
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	482a      	ldr	r0, [pc, #168]	; (8001a44 <startspi1Task+0x228>)
 800199a:	f000 fdf3 	bl	8002584 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WRITE, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	492c      	ldr	r1, [pc, #176]	; (8001a54 <startspi1Task+0x238>)
 80019a2:	482a      	ldr	r0, [pc, #168]	; (8001a4c <startspi1Task+0x230>)
 80019a4:	f001 ff84 	bl	80038b0 <HAL_SPI_Transmit_IT>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 80019a8:	2202      	movs	r2, #2
 80019aa:	492b      	ldr	r1, [pc, #172]	; (8001a58 <startspi1Task+0x23c>)
 80019ac:	4827      	ldr	r0, [pc, #156]	; (8001a4c <startspi1Task+0x230>)
 80019ae:	f001 ff7f 	bl	80038b0 <HAL_SPI_Transmit_IT>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&SerialBufferReceived.Buffer, NMEA_LEN);
 80019b2:	2248      	movs	r2, #72	; 0x48
 80019b4:	492f      	ldr	r1, [pc, #188]	; (8001a74 <startspi1Task+0x258>)
 80019b6:	4825      	ldr	r0, [pc, #148]	; (8001a4c <startspi1Task+0x230>)
 80019b8:	f001 ff7a 	bl	80038b0 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2101      	movs	r1, #1
 80019c0:	4820      	ldr	r0, [pc, #128]	; (8001a44 <startspi1Task+0x228>)
 80019c2:	f000 fddf 	bl	8002584 <HAL_GPIO_WritePin>

		// TEST READ ECHO
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2101      	movs	r1, #1
 80019ca:	481e      	ldr	r0, [pc, #120]	; (8001a44 <startspi1Task+0x228>)
 80019cc:	f000 fdda 	bl	8002584 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <startspi1Task+0x250>)
 80019d4:	481d      	ldr	r0, [pc, #116]	; (8001a4c <startspi1Task+0x230>)
 80019d6:	f001 ff6b 	bl	80038b0 <HAL_SPI_Transmit_IT>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 80019da:	2202      	movs	r2, #2
 80019dc:	491e      	ldr	r1, [pc, #120]	; (8001a58 <startspi1Task+0x23c>)
 80019de:	481b      	ldr	r0, [pc, #108]	; (8001a4c <startspi1Task+0x230>)
 80019e0:	f001 ff66 	bl	80038b0 <HAL_SPI_Transmit_IT>
		HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&test_spi_buf.Buffer, NMEA_LEN);
 80019e4:	2248      	movs	r2, #72	; 0x48
 80019e6:	4924      	ldr	r1, [pc, #144]	; (8001a78 <startspi1Task+0x25c>)
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <startspi1Task+0x230>)
 80019ea:	f001 ffef 	bl	80039cc <HAL_SPI_Receive_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2101      	movs	r1, #1
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <startspi1Task+0x228>)
 80019f4:	f000 fdc6 	bl	8002584 <HAL_GPIO_WritePin>

		spi_addr += NMEA_LEN; //Offset within destination device to hold NMEA message
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <startspi1Task+0x23c>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	3348      	adds	r3, #72	; 0x48
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <startspi1Task+0x23c>)
 8001a02:	801a      	strh	r2, [r3, #0]

		if(spi_addr > 0x7FFF) spi_addr = 0;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <startspi1Task+0x23c>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da02      	bge.n	8001a14 <startspi1Task+0x1f8>
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <startspi1Task+0x23c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	801a      	strh	r2, [r3, #0]


		xSemaphoreGive(uart_semHandle);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <startspi1Task+0x260>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f004 f8d9 	bl	8005bd4 <xQueueGenericSend>

		//Blink LED to signal SPI write happened
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2102      	movs	r1, #2
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f000 fdab 	bl	8002584 <HAL_GPIO_WritePin>
		vTaskDelay( 200 / portTICK_PERIOD_MS );
 8001a2e:	20c8      	movs	r0, #200	; 0xc8
 8001a30:	f004 ffd2 	bl	80069d8 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2102      	movs	r1, #2
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f000 fda2 	bl	8002584 <HAL_GPIO_WritePin>
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001a40:	e792      	b.n	8001968 <startspi1Task+0x14c>
 8001a42:	bf00      	nop
 8001a44:	48000400 	.word	0x48000400
 8001a48:	0800b017 	.word	0x0800b017
 8001a4c:	20000528 	.word	0x20000528
 8001a50:	200004c0 	.word	0x200004c0
 8001a54:	0800b016 	.word	0x0800b016
 8001a58:	20000524 	.word	0x20000524
 8001a5c:	20000526 	.word	0x20000526
 8001a60:	0800b018 	.word	0x0800b018
 8001a64:	0800afe0 	.word	0x0800afe0
 8001a68:	0800aff4 	.word	0x0800aff4
 8001a6c:	0800b015 	.word	0x0800b015
 8001a70:	200006a4 	.word	0x200006a4
 8001a74:	200006b0 	.word	0x200006b0
 8001a78:	20000714 	.word	0x20000714
 8001a7c:	200006a8 	.word	0x200006a8

08001a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	tim1_counter++; //Incrementing at 1kHz (1000 in 1 second)
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a90:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8001a9c:	f000 fabc 	bl	8002018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000778 	.word	0x20000778
 8001aac:	40012c00 	.word	0x40012c00

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>
	...

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_MspInit+0x4c>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	210f      	movs	r1, #15
 8001af6:	f06f 0001 	mvn.w	r0, #1
 8001afa:	f000 fb65 	bl	80021c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_SPI_MspInit+0x8c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12f      	bne.n	8001b8e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_SPI_MspInit+0x90>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_SPI_MspInit+0x90>)
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_SPI_MspInit+0x90>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_SPI_MspInit+0x90>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_SPI_MspInit+0x90>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_SPI_MspInit+0x90>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b5e:	2338      	movs	r3, #56	; 0x38
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_SPI_MspInit+0x94>)
 8001b7a:	f000 fb91 	bl	80022a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2105      	movs	r1, #5
 8001b82:	2023      	movs	r0, #35	; 0x23
 8001b84:	f000 fb20 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b88:	2023      	movs	r0, #35	; 0x23
 8001b8a:	f000 fb39 	bl	8002200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40013000 	.word	0x40013000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000400 	.word	0x48000400

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b098      	sub	sp, #96	; 0x60
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	2234      	movs	r2, #52	; 0x34
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f006 fae2 	bl	800818e <memset>
  if(huart->Instance==USART1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <HAL_UART_MspInit+0x124>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d138      	bne.n	8001c46 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fc2b 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bec:	f7ff ff60 	bl	8001ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf4:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c32:	2307      	movs	r3, #7
 8001c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f000 fb2e 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c44:	e03b      	b.n	8001cbe <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_UART_MspInit+0x12c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d136      	bne.n	8001cbe <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fbed 	bl	800343c <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001c68:	f7ff ff22 	bl	8001ab0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_UART_MspInit+0x128>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cac:	2307      	movs	r3, #7
 8001cae:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f000 faf1 	bl	80022a0 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3760      	adds	r7, #96	; 0x60
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	2019      	movs	r0, #25
 8001cea:	f000 fa6d 	bl	80021c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cee:	2019      	movs	r0, #25
 8001cf0:	f000 fa86 	bl	8002200 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf4:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_InitTick+0x9c>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_InitTick+0x9c>)
 8001cfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_InitTick+0x9c>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d0c:	f107 0210 	add.w	r2, r7, #16
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fafe 	bl	8003318 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d1c:	f001 fae6 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8001d20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_InitTick+0xa0>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d52:	f002 fce4 	bl	800471e <HAL_TIM_Base_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d104      	bne.n	8001d66 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d5e:	f002 fd3f 	bl	80047e0 <HAL_TIM_Base_Start_IT>
 8001d62:	4603      	mov	r3, r0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3730      	adds	r7, #48	; 0x30
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	200008d8 	.word	0x200008d8
 8001d7c:	40012c00 	.word	0x40012c00

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <MemManage_Handler+0x4>

08001d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <UsageFault_Handler+0x4>

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001db2:	f002 fd69 	bl	8004888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200008d8 	.word	0x200008d8

08001dc0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <SPI1_IRQHandler+0x10>)
 8001dc6:	f001 ff61 	bl	8003c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000528 	.word	0x20000528

08001dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001dd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ddc:	f000 fbea 	bl	80025b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dfe:	f006 f895 	bl	8007f2c <__errno>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2216      	movs	r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
	return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_exit>:

void _exit (int status)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffe7 	bl	8001df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e26:	e7fe      	b.n	8001e26 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
	}

return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e009      	b.n	8001e88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf1      	blt.n	8001e74 <_write+0x12>
	}
	return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_close>:

int _close(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_isatty>:

int _isatty(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f005 fffa 	bl	8007f2c <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000a000 	.word	0x2000a000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	20000924 	.word	0x20000924
 8001f6c:	200031a0 	.word	0x200031a0

08001f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <SystemInit+0x20>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <SystemInit+0x20>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff ffea 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f006 f8af 	bl	8008124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc6:	f7ff f865 	bl	8001094 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fcc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fd8:	0800b4a4 	.word	0x0800b4a4
  ldr r2, =_sbss
 8001fdc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fe0:	200031a0 	.word	0x200031a0

08001fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>

08001fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f8de 	bl	80021b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f7ff fe6c 	bl	8001cd4 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e001      	b.n	800200c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002008:	f7ff fd58 	bl	8001abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200c:	79fb      	ldrb	r3, [r7, #7]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000008 	.word	0x20000008
 800203c:	20000928 	.word	0x20000928

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000928 	.word	0x20000928

08002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <__NVIC_EnableIRQ+0x38>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff4c 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021da:	f7ff ff61 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 80021de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f7ff ffb1 	bl	800214c <NVIC_EncodePriority>
 80021ea:	4602      	mov	r2, r0
 80021ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff80 	bl	80020f8 <__NVIC_SetPriority>
}
 80021f8:	bf00      	nop
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff54 	bl	80020bc <__NVIC_EnableIRQ>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d005      	beq.n	8002240 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e029      	b.n	8002294 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f003 021c 	and.w	r2, r3, #28
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
    }
  }
  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ae:	e14e      	b.n	800254e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8140 	beq.w	8002548 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d005      	beq.n	80022e0 <HAL_GPIO_Init+0x40>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d130      	bne.n	8002342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002316:	2201      	movs	r2, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 0201 	and.w	r2, r3, #1
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b03      	cmp	r3, #3
 800234c:	d017      	beq.n	800237e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d123      	bne.n	80023d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	6939      	ldr	r1, [r7, #16]
 80023ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0203 	and.w	r2, r3, #3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 809a 	beq.w	8002548 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <HAL_GPIO_Init+0x2cc>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	4a54      	ldr	r2, [pc, #336]	; (800256c <HAL_GPIO_Init+0x2cc>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6613      	str	r3, [r2, #96]	; 0x60
 8002420:	4b52      	ldr	r3, [pc, #328]	; (800256c <HAL_GPIO_Init+0x2cc>)
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800242c:	4a50      	ldr	r2, [pc, #320]	; (8002570 <HAL_GPIO_Init+0x2d0>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x1e0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a46      	ldr	r2, [pc, #280]	; (8002574 <HAL_GPIO_Init+0x2d4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1dc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a45      	ldr	r2, [pc, #276]	; (8002578 <HAL_GPIO_Init+0x2d8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1d8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a44      	ldr	r2, [pc, #272]	; (800257c <HAL_GPIO_Init+0x2dc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1d4>
 8002470:	2303      	movs	r3, #3
 8002472:	e006      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 8002474:	2307      	movs	r3, #7
 8002476:	e004      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 8002478:	2302      	movs	r3, #2
 800247a:	e002      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_GPIO_Init+0x1e2>
 8002480:	2300      	movs	r3, #0
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	f002 0203 	and.w	r2, r2, #3
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	4093      	lsls	r3, r2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002492:	4937      	ldr	r1, [pc, #220]	; (8002570 <HAL_GPIO_Init+0x2d0>)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c4:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <HAL_GPIO_Init+0x2e0>)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f aea9 	bne.w	80022b0 <HAL_GPIO_Init+0x10>
  }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40021000 	.word	0x40021000
 8002570:	40010000 	.word	0x40010000
 8002574:	48000400 	.word	0x48000400
 8002578:	48000800 	.word	0x48000800
 800257c:	48000c00 	.word	0x48000c00
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ffd2 	bl	800157c <HAL_GPIO_EXTI_Callback>
  }
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40007000 	.word	0x40007000

08002604 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_PWREx_GetVoltageRange+0x18>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40007000 	.word	0x40007000

08002620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262e:	d130      	bne.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d038      	beq.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002648:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2232      	movs	r2, #50	; 0x32
 8002654:	fb02 f303 	mul.w	r3, r2, r3
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0c9b      	lsrs	r3, r3, #18
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002664:	e002      	b.n	800266c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3b01      	subs	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d102      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x60>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f2      	bne.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268c:	d110      	bne.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e00f      	b.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269e:	d007      	beq.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40007000 	.word	0x40007000
 80026c4:	20000000 	.word	0x20000000
 80026c8:	431bde83 	.word	0x431bde83

080026cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f000 bc4f 	b.w	8002f7e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e0:	4b97      	ldr	r3, [pc, #604]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ea:	4b95      	ldr	r3, [pc, #596]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80e6 	beq.w	80028ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_RCC_OscConfig+0x4c>
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	f040 808d 	bne.w	800282a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 8089 	bne.w	800282a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002718:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_RCC_OscConfig+0x66>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f000 bc26 	b.w	8002f7e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <HAL_RCC_OscConfig+0x80>
 8002742:	4b7f      	ldr	r3, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274a:	e005      	b.n	8002758 <HAL_RCC_OscConfig+0x8c>
 800274c:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	4293      	cmp	r3, r2
 800275a:	d224      	bcs.n	80027a6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fe0b 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f000 bc06 	b.w	8002f7e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002772:	4b73      	ldr	r3, [pc, #460]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a72      	ldr	r2, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b70      	ldr	r3, [pc, #448]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	496d      	ldr	r1, [pc, #436]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002790:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	4968      	ldr	r1, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e025      	b.n	80027f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a6:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	4960      	ldr	r1, [pc, #384]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c4:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	495b      	ldr	r1, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fdca 	bl	800337c <RCC_SetFlashLatencyFromMSIRange>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e3c5      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f2:	f000 fccd 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b51      	ldr	r3, [pc, #324]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4950      	ldr	r1, [pc, #320]	; (8002944 <HAL_RCC_OscConfig+0x278>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a4e      	ldr	r2, [pc, #312]	; (8002948 <HAL_RCC_OscConfig+0x27c>)
 8002810:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa5c 	bl	8001cd4 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d052      	beq.n	80028cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	e3a9      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d032      	beq.n	8002898 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a42      	ldr	r2, [pc, #264]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283e:	f7ff fbff 	bl	8002040 <HAL_GetTick>
 8002842:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002846:	f7ff fbfb 	bl	8002040 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e392      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800286a:	f043 0308 	orr.w	r3, r3, #8
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b33      	ldr	r3, [pc, #204]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	4930      	ldr	r1, [pc, #192]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	492b      	ldr	r1, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
 8002896:	e01a      	b.n	80028ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fbcc 	bl	8002040 <HAL_GetTick>
 80028a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ac:	f7ff fbc8 	bl	8002040 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e35f      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1e0>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d073      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d005      	beq.n	80028ec <HAL_RCC_OscConfig+0x220>
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d10e      	bne.n	8002904 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d063      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2f4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d15f      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e33c      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x250>
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e025      	b.n	8002968 <HAL_RCC_OscConfig+0x29c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d114      	bne.n	8002950 <HAL_RCC_OscConfig+0x284>
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a02      	ldr	r2, [pc, #8]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e013      	b.n	8002968 <HAL_RCC_OscConfig+0x29c>
 8002940:	40021000 	.word	0x40021000
 8002944:	0800b01c 	.word	0x0800b01c
 8002948:	20000000 	.word	0x20000000
 800294c:	20000004 	.word	0x20000004
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a8e      	ldr	r2, [pc, #568]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b8c      	ldr	r3, [pc, #560]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8b      	ldr	r2, [pc, #556]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fb66 	bl	8002040 <HAL_GetTick>
 8002974:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fb62 	bl	8002040 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e2f9      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b81      	ldr	r3, [pc, #516]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2ac>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff fb52 	bl	8002040 <HAL_GetTick>
 800299c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff fb4e 	bl	8002040 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e2e5      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	4b77      	ldr	r3, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d4>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d060      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x314>
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x32c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e2c2      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b65      	ldr	r3, [pc, #404]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	4962      	ldr	r1, [pc, #392]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	e040      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d023      	beq.n	8002a5e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a16:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a5d      	ldr	r2, [pc, #372]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7ff fb0d 	bl	8002040 <HAL_GetTick>
 8002a26:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7ff fb09 	bl	8002040 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e2a0      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	494e      	ldr	r1, [pc, #312]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e018      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff fae9 	bl	8002040 <HAL_GetTick>
 8002a6e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7ff fae5 	bl	8002040 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e27c      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8082 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d05f      	beq.n	8002b66 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d037      	beq.n	8002b2c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e254      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01b      	beq.n	8002b16 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aee:	f7ff faa7 	bl	8002040 <HAL_GetTick>
 8002af2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af6:	f7ff faa3 	bl	8002040 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b11      	cmp	r3, #17
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e23a      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ef      	bne.n	8002af6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1c:	f023 0210 	bic.w	r2, r3, #16
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	491a      	ldr	r1, [pc, #104]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7ff fa80 	bl	8002040 <HAL_GetTick>
 8002b40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b44:	f7ff fa7c 	bl	8002040 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b11      	cmp	r3, #17
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e213      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ef      	beq.n	8002b44 <HAL_RCC_OscConfig+0x478>
 8002b64:	e01d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7ff fa63 	bl	8002040 <HAL_GetTick>
 8002b7a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7ff fa5f 	bl	8002040 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b11      	cmp	r3, #17
 8002b8a:	d903      	bls.n	8002b94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1f6      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
 8002b90:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b94:	4ba9      	ldr	r3, [pc, #676]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ed      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80bd 	beq.w	8002d2a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bb6:	4ba1      	ldr	r3, [pc, #644]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4b9e      	ldr	r3, [pc, #632]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	4a9d      	ldr	r2, [pc, #628]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bce:	4b9b      	ldr	r3, [pc, #620]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be0:	4b97      	ldr	r3, [pc, #604]	; (8002e40 <HAL_RCC_OscConfig+0x774>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d118      	bne.n	8002c1e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bec:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <HAL_RCC_OscConfig+0x774>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a93      	ldr	r2, [pc, #588]	; (8002e40 <HAL_RCC_OscConfig+0x774>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf8:	f7ff fa22 	bl	8002040 <HAL_GetTick>
 8002bfc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c00:	f7ff fa1e 	bl	8002040 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1b5      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c12:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x774>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002c2a:	4b84      	ldr	r3, [pc, #528]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	497f      	ldr	r1, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c50:	4b7a      	ldr	r3, [pc, #488]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	4a79      	ldr	r2, [pc, #484]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c60:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c70:	e018      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	4a70      	ldr	r2, [pc, #448]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c84:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a6c      	ldr	r2, [pc, #432]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c94:	4b69      	ldr	r3, [pc, #420]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	4a68      	ldr	r2, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7ff f9c8 	bl	8002040 <HAL_GetTick>
 8002cb0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7ff f9c4 	bl	8002040 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e159      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cca:	4b5c      	ldr	r3, [pc, #368]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ed      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x5e8>
 8002cd8:	e01d      	b.n	8002d16 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7ff f9b1 	bl	8002040 <HAL_GetTick>
 8002cde:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7ff f9ad 	bl	8002040 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e142      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ed      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002d06:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	4a4b      	ldr	r2, [pc, #300]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a46      	ldr	r2, [pc, #280]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d03c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d44:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f977 	bl	8002040 <HAL_GetTick>
 8002d52:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d56:	f7ff f973 	bl	8002040 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e10a      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d68:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ef      	beq.n	8002d56 <HAL_RCC_OscConfig+0x68a>
 8002d76:	e01b      	b.n	8002db0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d78:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d7e:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7ff f95a 	bl	8002040 <HAL_GetTick>
 8002d8c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d90:	f7ff f956 	bl	8002040 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0ed      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ef      	bne.n	8002d90 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80e1 	beq.w	8002f7c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 80b5 	bne.w	8002f2e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0203 	and.w	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d124      	bne.n	8002e22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	3b01      	subs	r3, #1
 8002de4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d113      	bne.n	8002e22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d05f      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	d05a      	beq.n	8002ede <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a03      	ldr	r2, [pc, #12]	; (8002e3c <HAL_RCC_OscConfig+0x770>)
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e34:	f7ff f904 	bl	8002040 <HAL_GetTick>
 8002e38:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3a:	e00c      	b.n	8002e56 <HAL_RCC_OscConfig+0x78a>
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7ff f8fc 	bl	8002040 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e093      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e56:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e62:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <HAL_RCC_OscConfig+0x8c0>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e7c:	0212      	lsls	r2, r2, #8
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e84:	0852      	lsrs	r2, r2, #1
 8002e86:	3a01      	subs	r2, #1
 8002e88:	0552      	lsls	r2, r2, #21
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e90:	0852      	lsrs	r2, r2, #1
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0652      	lsls	r2, r2, #25
 8002e96:	430a      	orrs	r2, r1
 8002e98:	493b      	ldr	r1, [pc, #236]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a39      	ldr	r2, [pc, #228]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb6:	f7ff f8c3 	bl	8002040 <HAL_GetTick>
 8002eba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7ff f8bf 	bl	8002040 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e056      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002edc:	e04e      	b.n	8002f7c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e04d      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d146      	bne.n	8002f7c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f04:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f06:	f7ff f89b 	bl	8002040 <HAL_GetTick>
 8002f0a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7ff f897 	bl	8002040 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e02e      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x842>
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d021      	beq.n	8002f78 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7ff f87e 	bl	8002040 <HAL_GetTick>
 8002f44:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7ff f87a 	bl	8002040 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e011      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_RCC_OscConfig+0x8bc>)
 8002f6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f70:	f023 0303 	bic.w	r3, r3, #3
 8002f74:	60d3      	str	r3, [r2, #12]
 8002f76:	e001      	b.n	8002f7c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	f99f808c 	.word	0xf99f808c

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0e7      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b75      	ldr	r3, [pc, #468]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b72      	ldr	r3, [pc, #456]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4970      	ldr	r1, [pc, #448]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b6e      	ldr	r3, [pc, #440]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0cf      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	4b66      	ldr	r3, [pc, #408]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4960      	ldr	r1, [pc, #384]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04c      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	4b5a      	ldr	r3, [pc, #360]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d121      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0a6      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e09a      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003046:	4b4e      	ldr	r3, [pc, #312]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e08e      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e086      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4943      	ldr	r1, [pc, #268]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe ffe2 	bl	8002040 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe ffde 	bl	8002040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e06e      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d208      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	492b      	ldr	r1, [pc, #172]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d210      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 0207 	bic.w	r2, r3, #7
 80030ec:	4923      	ldr	r1, [pc, #140]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e036      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4918      	ldr	r1, [pc, #96]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4910      	ldr	r1, [pc, #64]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003144:	f000 f824 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	490b      	ldr	r1, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1f4>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003162:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1fc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fdb3 	bl	8001cd4 <HAL_InitTick>
 800316e:	4603      	mov	r3, r0
 8003170:	72fb      	strb	r3, [r7, #11]

  return status;
 8003172:	7afb      	ldrb	r3, [r7, #11]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	0800b01c 	.word	0x0800b01c
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a8:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d121      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d11e      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c4:	4b34      	ldr	r3, [pc, #208]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d0:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d102      	bne.n	800320e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e004      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d101      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d134      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0xa6>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d003      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xac>
 8003234:	e005      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003236:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003238:	617b      	str	r3, [r7, #20]
      break;
 800323a:	e005      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800323e:	617b      	str	r3, [r7, #20]
      break;
 8003240:	e002      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	617b      	str	r3, [r7, #20]
      break;
 8003246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	3301      	adds	r3, #1
 8003254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	fb03 f202 	mul.w	r2, r3, r2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	0e5b      	lsrs	r3, r3, #25
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	3301      	adds	r3, #1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003288:	69bb      	ldr	r3, [r7, #24]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	0800b034 	.word	0x0800b034
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4904      	ldr	r1, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	0800b02c 	.word	0x0800b02c

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032f0:	f7ff ffda 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0adb      	lsrs	r3, r3, #11
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4904      	ldr	r1, [pc, #16]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	0800b02c 	.word	0x0800b02c

08003318 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	220f      	movs	r2, #15
 8003326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_GetClockConfig+0x5c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCC_GetClockConfig+0x60>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0207 	and.w	r2, r3, #7
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	40022000 	.word	0x40022000

0800337c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003394:	f7ff f936 	bl	8002604 <HAL_PWREx_GetVoltageRange>
 8003398:	6178      	str	r0, [r7, #20]
 800339a:	e014      	b.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	4a24      	ldr	r2, [pc, #144]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	6593      	str	r3, [r2, #88]	; 0x58
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033b4:	f7ff f926 	bl	8002604 <HAL_PWREx_GetVoltageRange>
 80033b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d10b      	bne.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d919      	bls.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2ba0      	cmp	r3, #160	; 0xa0
 80033d8:	d902      	bls.n	80033e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033da:	2302      	movs	r3, #2
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e013      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e0:	2301      	movs	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e010      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d902      	bls.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033ec:	2303      	movs	r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e00a      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d102      	bne.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033f8:	2302      	movs	r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e004      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b70      	cmp	r3, #112	; 0x70
 8003402:	d101      	bne.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003404:	2301      	movs	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 0207 	bic.w	r2, r3, #7
 8003410:	4909      	ldr	r1, [pc, #36]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40022000 	.word	0x40022000

0800343c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003444:	2300      	movs	r3, #0
 8003446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003448:	2300      	movs	r3, #0
 800344a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 809e 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800345e:	4b46      	ldr	r3, [pc, #280]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b40      	ldr	r3, [pc, #256]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	6593      	str	r3, [r2, #88]	; 0x58
 8003480:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348c:	2301      	movs	r3, #1
 800348e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003490:	4b3a      	ldr	r3, [pc, #232]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800349c:	f7fe fdd0 	bl	8002040 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a2:	e009      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a4:	f7fe fdcc 	bl	8002040 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d902      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	74fb      	strb	r3, [r7, #19]
        break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ef      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d15a      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01e      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d019      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f2:	4b21      	ldr	r3, [pc, #132]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003512:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d016      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe fd8c 	bl	8002040 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352a:	e00b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fe fd88 	bl	8002040 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d902      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	74fb      	strb	r3, [r7, #19]
            break;
 8003542:	e006      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ec      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	4904      	ldr	r1, [pc, #16]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800356e:	e009      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	74bb      	strb	r3, [r7, #18]
 8003574:	e006      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003584:	7c7b      	ldrb	r3, [r7, #17]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	4a6d      	ldr	r2, [pc, #436]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035a2:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f023 0203 	bic.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4964      	ldr	r1, [pc, #400]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c4:	4b5f      	ldr	r3, [pc, #380]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 020c 	bic.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	495c      	ldr	r1, [pc, #368]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035e6:	4b57      	ldr	r3, [pc, #348]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4953      	ldr	r1, [pc, #332]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003608:	4b4e      	ldr	r3, [pc, #312]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	494b      	ldr	r1, [pc, #300]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362a:	4b46      	ldr	r3, [pc, #280]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4942      	ldr	r1, [pc, #264]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800364c:	4b3d      	ldr	r3, [pc, #244]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	493a      	ldr	r1, [pc, #232]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366e:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4931      	ldr	r1, [pc, #196]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003690:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4929      	ldr	r1, [pc, #164]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4920      	ldr	r1, [pc, #128]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	4918      	ldr	r1, [pc, #96]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a12      	ldr	r2, [pc, #72]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	490a      	ldr	r1, [pc, #40]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003738:	7cbb      	ldrb	r3, [r7, #18]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a04      	ldr	r2, [pc, #16]	; (8003764 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e095      	b.n	80038a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378a:	d009      	beq.n	80037a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
 8003792:	e005      	b.n	80037a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe f9a6 	bl	8001b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e0:	d902      	bls.n	80037e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e002      	b.n	80037ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037f6:	d007      	beq.n	8003808 <HAL_SPI_Init+0xa0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003800:	d002      	beq.n	8003808 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	ea42 0103 	orr.w	r1, r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	f003 0204 	and.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_SPI_Transmit_IT+0x20>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e072      	b.n	80039b6 <HAL_SPI_Transmit_IT+0x106>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_SPI_Transmit_IT+0x34>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038e8:	e060      	b.n	80039ac <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
 80038f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038fa:	e057      	b.n	80039ac <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2203      	movs	r2, #3
 8003900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003940:	d903      	bls.n	800394a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_SPI_Transmit_IT+0x114>)
 8003946:	651a      	str	r2, [r3, #80]	; 0x50
 8003948:	e002      	b.n	8003950 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_SPI_Transmit_IT+0x118>)
 800394e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003958:	d10f      	bne.n	800397a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003978:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003988:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d008      	beq.n	80039aa <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e000      	b.n	80039ac <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80039aa:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	080041ff 	.word	0x080041ff
 80039c8:	080041b9 	.word	0x080041b9

080039cc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d110      	bne.n	8003a08 <HAL_SPI_Receive_IT+0x3c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ee:	d10b      	bne.n	8003a08 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2204      	movs	r2, #4
 80039f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f894 	bl	8003b2c <HAL_SPI_TransmitReceive_IT>
 8003a04:	4603      	mov	r3, r0
 8003a06:	e089      	b.n	8003b1c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_SPI_Receive_IT+0x4a>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e082      	b.n	8003b1c <HAL_SPI_Receive_IT+0x150>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a2e:	e070      	b.n	8003b12 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Receive_IT+0x70>
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a40:	e067      	b.n	8003b12 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2204      	movs	r2, #4
 8003a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a86:	d90b      	bls.n	8003aa0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a96:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <HAL_SPI_Receive_IT+0x158>)
 8003a9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a9e:	e00a      	b.n	8003ab6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aae:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <HAL_SPI_Receive_IT+0x15c>)
 8003ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abe:	d10f      	bne.n	8003ae0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ade:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003aee:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d008      	beq.n	8003b10 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e000      	b.n	8003b12 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8003b10:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0800416d 	.word	0x0800416d
 8003b28:	0800411d 	.word	0x0800411d

08003b2c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_SPI_TransmitReceive_IT+0x20>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e091      	b.n	8003c70 <HAL_SPI_TransmitReceive_IT+0x144>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b5a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b62:	7dbb      	ldrb	r3, [r7, #22]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d00d      	beq.n	8003b84 <HAL_SPI_TransmitReceive_IT+0x58>
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6e:	d106      	bne.n	8003b7e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <HAL_SPI_TransmitReceive_IT+0x52>
 8003b78:	7dbb      	ldrb	r3, [r7, #22]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d002      	beq.n	8003b84 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b82:	e070      	b.n	8003c66 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b90:	887b      	ldrh	r3, [r7, #2]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b9a:	e064      	b.n	8003c66 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d003      	beq.n	8003bb0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2205      	movs	r2, #5
 8003bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	887a      	ldrh	r2, [r7, #2]
 8003bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	887a      	ldrh	r2, [r7, #2]
 8003bda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003be6:	d906      	bls.n	8003bf6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_SPI_TransmitReceive_IT+0x150>)
 8003bec:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003bf2:	651a      	str	r2, [r3, #80]	; 0x50
 8003bf4:	e005      	b.n	8003c02 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003bfa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c0a:	d802      	bhi.n	8003c12 <HAL_SPI_TransmitReceive_IT+0xe6>
 8003c0c:	887b      	ldrh	r3, [r7, #2]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d908      	bls.n	8003c24 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	e007      	b.n	8003c34 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c32:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003c42:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d008      	beq.n	8003c64 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e000      	b.n	8003c66 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003c64:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	08004057 	.word	0x08004057
 8003c80:	080040bd 	.word	0x080040bd
 8003c84:	08003f07 	.word	0x08003f07
 8003c88:	08003fc5 	.word	0x08003fc5

08003c8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	099b      	lsrs	r3, r3, #6
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
    return;
 8003cce:	e0d7      	b.n	8003e80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_SPI_IRQHandler+0x66>
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	09db      	lsrs	r3, r3, #7
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
    return;
 8003cf0:	e0c6      	b.n	8003e80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_SPI_IRQHandler+0x8c>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80b4 	beq.w	8003e80 <HAL_SPI_IRQHandler+0x1f4>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80ad 	beq.w	8003e80 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d023      	beq.n	8003d7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d011      	beq.n	8003d62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	f043 0204 	orr.w	r2, r3, #4
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	e00b      	b.n	8003d7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
        return;
 8003d78:	e082      	b.n	8003e80 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d014      	beq.n	8003db0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00c      	beq.n	8003dd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	f043 0208 	orr.w	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d04f      	beq.n	8003e7e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <HAL_SPI_IRQHandler+0x17e>
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d034      	beq.n	8003e74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0203 	bic.w	r2, r2, #3
 8003e18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d011      	beq.n	8003e46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_SPI_IRQHandler+0x1fc>)
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f9f4 	bl	800221c <HAL_DMA_Abort_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	4a0d      	ldr	r2, [pc, #52]	; (8003e88 <HAL_SPI_IRQHandler+0x1fc>)
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe f9de 	bl	800221c <HAL_DMA_Abort_IT>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e72:	e003      	b.n	8003e7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f827 	bl	8003ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e7a:	e000      	b.n	8003e7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e7c:	bf00      	nop
    return;
 8003e7e:	bf00      	nop
  }
}
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	08003edd 	.word	0x08003edd

08003e8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff ffe5 	bl	8003ec8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d923      	bls.n	8003f62 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	b292      	uxth	r2, r2
 8003f26:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b02      	subs	r3, #2
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d11f      	bne.n	8003f90 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e016      	b.n	8003f90 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f103 020c 	add.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10f      	bne.n	8003fbc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003faa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fb00 	bl	80045bc <SPI_CloseRxTx_ISR>
    }
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d912      	bls.n	8003ffc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	881a      	ldrh	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b02      	subs	r3, #2
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ffa:	e012      	b.n	8004022 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	7812      	ldrb	r2, [r2, #0]
 8004008:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d110      	bne.n	800404e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800403a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fab7 	bl	80045bc <SPI_CloseRxTx_ISR>
    }
  }
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	b292      	uxth	r2, r2
 800406a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa84 	bl	80045bc <SPI_CloseRxTx_ISR>
    }
  }
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d110      	bne.n	8004114 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004100:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa54 	bl	80045bc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f103 020c 	add.w	r2, r3, #12
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa6e 	bl	8004640 <SPI_CloseRx_ISR>
  }
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	b292      	uxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa48 	bl	8004640 <SPI_CloseRx_ISR>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa55 	bl	80046a0 <SPI_CloseTx_ISR>
  }
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fa33 	bl	80046a0 <SPI_CloseTx_ISR>
  }
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004254:	f7fd fef4 	bl	8002040 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	4413      	add	r3, r2
 8004262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004264:	f7fd feec 	bl	8002040 <HAL_GetTick>
 8004268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	015b      	lsls	r3, r3, #5
 8004270:	0d1b      	lsrs	r3, r3, #20
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427a:	e054      	b.n	8004326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d050      	beq.n	8004326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004284:	f7fd fedc 	bl	8002040 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	429a      	cmp	r2, r3
 8004292:	d902      	bls.n	800429a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d13d      	bne.n	8004316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b2:	d111      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042bc:	d004      	beq.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c6:	d107      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e0:	d10f      	bne.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e017      	b.n	8004346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3b01      	subs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	429a      	cmp	r2, r3
 8004342:	d19b      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000000 	.word	0x20000000

08004354 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004366:	f7fd fe6b 	bl	8002040 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4413      	add	r3, r2
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004376:	f7fd fe63 	bl	8002040 <HAL_GetTick>
 800437a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004384:	4b3d      	ldr	r3, [pc, #244]	; (800447c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00da      	lsls	r2, r3, #3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	0d1b      	lsrs	r3, r3, #20
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800439c:	e060      	b.n	8004460 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043a4:	d107      	bne.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d050      	beq.n	8004460 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043be:	f7fd fe3f 	bl	8002040 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d902      	bls.n	80043d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d13d      	bne.n	8004450 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ec:	d111      	bne.n	8004412 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f6:	d004      	beq.n	8004402 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d107      	bne.n	8004412 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004410:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441a:	d10f      	bne.n	800443c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800443a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e010      	b.n	8004472 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	3b01      	subs	r3, #1
 800445e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d196      	bne.n	800439e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3728      	adds	r7, #40	; 0x28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000000 	.word	0x20000000

08004480 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004494:	d111      	bne.n	80044ba <SPI_EndRxTransaction+0x3a>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449e:	d004      	beq.n	80044aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a8:	d107      	bne.n	80044ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff febd 	bl	8004244 <SPI_WaitFlagStateUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e023      	b.n	8004528 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e8:	d11d      	bne.n	8004526 <SPI_EndRxTransaction+0xa6>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f2:	d004      	beq.n	80044fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fc:	d113      	bne.n	8004526 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff22 	bl	8004354 <SPI_WaitFifoStateUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e000      	b.n	8004528 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff ff03 	bl	8004354 <SPI_WaitFifoStateUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e027      	b.n	80045b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff fe68 	bl	8004244 <SPI_WaitFlagStateUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e014      	b.n	80045b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fedc 	bl	8004354 <SPI_WaitFifoStateUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e000      	b.n	80045b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c4:	f7fd fd3c 	bl	8002040 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0220 	bic.w	r2, r2, #32
 80045d8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffa6 	bl	8004530 <SPI_EndRxTxTransaction>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d115      	bne.n	800462a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b04      	cmp	r3, #4
 8004608:	d107      	bne.n	800461a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fc44 	bl	8003ea0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004618:	e00e      	b.n	8004638 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fc46 	bl	8003eb4 <HAL_SPI_TxRxCpltCallback>
}
 8004628:	e006      	b.n	8004638 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fc48 	bl	8003ec8 <HAL_SPI_ErrorCallback>
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004656:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004658:	f7fd fcf2 	bl	8002040 <HAL_GetTick>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	2164      	movs	r1, #100	; 0x64
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ff0c 	bl	8004480 <SPI_EndRxTransaction>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fc08 	bl	8003ea0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004690:	e002      	b.n	8004698 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff fc18 	bl	8003ec8 <HAL_SPI_ErrorCallback>
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a8:	f7fd fcca 	bl	8002040 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046bc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	2164      	movs	r1, #100	; 0x64
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ff34 	bl	8004530 <SPI_EndRxTxTransaction>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fbdd 	bl	8003ec8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800470e:	e002      	b.n	8004716 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fbbb 	bl	8003e8c <HAL_SPI_TxCpltCallback>
}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e049      	b.n	80047c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f841 	bl	80047cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f000 f9db 	bl	8004b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e03b      	b.n	8004870 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_TIM_Base_Start_IT+0x9c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_TIM_Base_Start_IT+0x4e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d004      	beq.n	800482e <HAL_TIM_Base_Start_IT+0x4e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_TIM_Base_Start_IT+0xa0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d115      	bne.n	800485a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_TIM_Base_Start_IT+0xa4>)
 8004836:	4013      	ands	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d015      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x8c>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d011      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	e008      	b.n	800486c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e000      	b.n	800486e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40014000 	.word	0x40014000
 8004884:	00010007 	.word	0x00010007

08004888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0202 	mvn.w	r2, #2
 80048b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f905 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8f7 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f908 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0204 	mvn.w	r2, #4
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8db 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8cd 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8de 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b08      	cmp	r3, #8
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8b1 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8a3 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8b4 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0210 	mvn.w	r2, #16
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2208      	movs	r2, #8
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f887 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f879 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f88a 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0201 	mvn.w	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd f83a 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8de 	bl	8004bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	d10e      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d107      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8d1 	bl	8004c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d10e      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d107      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f838 	bl	8004b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d10e      	bne.n	8004abe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0220 	mvn.w	r2, #32
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f891 	bl	8004be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <TIM_Base_SetConfig+0xbc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0x20>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b36:	d108      	bne.n	8004b4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <TIM_Base_SetConfig+0xbc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00b      	beq.n	8004b6a <TIM_Base_SetConfig+0x52>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d007      	beq.n	8004b6a <TIM_Base_SetConfig+0x52>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <TIM_Base_SetConfig+0xc0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_Base_SetConfig+0x52>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <TIM_Base_SetConfig+0xc4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d108      	bne.n	8004b7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	; (8004bd4 <TIM_Base_SetConfig+0xbc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_Base_SetConfig+0xa0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <TIM_Base_SetConfig+0xc0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_Base_SetConfig+0xa0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <TIM_Base_SetConfig+0xc4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d103      	bne.n	8004bc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400

08004be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e040      	b.n	8004cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc ffb0 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2224      	movs	r2, #36	; 0x24
 8004c48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8c0 	bl	8004de0 <UART_SetConfig>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e022      	b.n	8004cb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fb0e 	bl	8005294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb95 	bl	80053d8 <UART_CheckIdleState>
 8004cae:	4603      	mov	r3, r0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 8082 	bne.w	8004dd6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_UART_Transmit+0x26>
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e07a      	b.n	8004dd8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Transmit+0x38>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e073      	b.n	8004dd8 <HAL_UART_Transmit+0x120>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2221      	movs	r2, #33	; 0x21
 8004d04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d06:	f7fd f99b 	bl	8002040 <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d108      	bne.n	8004d38 <HAL_UART_Transmit+0x80>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e003      	b.n	8004d40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d48:	e02d      	b.n	8004da6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fb88 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e039      	b.n	8004dd8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d76:	b292      	uxth	r2, r2
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e008      	b.n	8004d94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3301      	adds	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1cb      	bne.n	8004d4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2140      	movs	r1, #64	; 0x40
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fb54 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e005      	b.n	8004dd8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b08a      	sub	sp, #40	; 0x28
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b9e      	ldr	r3, [pc, #632]	; (8005088 <UART_SetConfig+0x2a8>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a93      	ldr	r2, [pc, #588]	; (800508c <UART_SetConfig+0x2ac>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a8a      	ldr	r2, [pc, #552]	; (8005090 <UART_SetConfig+0x2b0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d126      	bne.n	8004eb8 <UART_SetConfig+0xd8>
 8004e6a:	4b8a      	ldr	r3, [pc, #552]	; (8005094 <UART_SetConfig+0x2b4>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d81b      	bhi.n	8004eb0 <UART_SetConfig+0xd0>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0xa0>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e0ab      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e0a7      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e0a3      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eae:	e09f      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb6:	e09b      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a76      	ldr	r2, [pc, #472]	; (8005098 <UART_SetConfig+0x2b8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d138      	bne.n	8004f34 <UART_SetConfig+0x154>
 8004ec2:	4b74      	ldr	r3, [pc, #464]	; (8005094 <UART_SetConfig+0x2b4>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b0c      	cmp	r3, #12
 8004ece:	d82d      	bhi.n	8004f2c <UART_SetConfig+0x14c>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0xf8>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f2d 	.word	0x08004f2d
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f15 	.word	0x08004f15
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e06d      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1a:	e069      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f22:	e065      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2a:	e061      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f32:	e05d      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a58      	ldr	r2, [pc, #352]	; (800509c <UART_SetConfig+0x2bc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d125      	bne.n	8004f8a <UART_SetConfig+0x1aa>
 8004f3e:	4b55      	ldr	r3, [pc, #340]	; (8005094 <UART_SetConfig+0x2b4>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f48:	2b30      	cmp	r3, #48	; 0x30
 8004f4a:	d016      	beq.n	8004f7a <UART_SetConfig+0x19a>
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d818      	bhi.n	8004f82 <UART_SetConfig+0x1a2>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d00a      	beq.n	8004f6a <UART_SetConfig+0x18a>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d814      	bhi.n	8004f82 <UART_SetConfig+0x1a2>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <UART_SetConfig+0x182>
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d008      	beq.n	8004f72 <UART_SetConfig+0x192>
 8004f60:	e00f      	b.n	8004f82 <UART_SetConfig+0x1a2>
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f68:	e042      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f70:	e03e      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f72:	2304      	movs	r3, #4
 8004f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f78:	e03a      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f80:	e036      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f82:	2310      	movs	r3, #16
 8004f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f88:	e032      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a3f      	ldr	r2, [pc, #252]	; (800508c <UART_SetConfig+0x2ac>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d12a      	bne.n	8004fea <UART_SetConfig+0x20a>
 8004f94:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <UART_SetConfig+0x2b4>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fa2:	d01a      	beq.n	8004fda <UART_SetConfig+0x1fa>
 8004fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fa8:	d81b      	bhi.n	8004fe2 <UART_SetConfig+0x202>
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d00c      	beq.n	8004fca <UART_SetConfig+0x1ea>
 8004fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb4:	d815      	bhi.n	8004fe2 <UART_SetConfig+0x202>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <UART_SetConfig+0x1e2>
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	d008      	beq.n	8004fd2 <UART_SetConfig+0x1f2>
 8004fc0:	e00f      	b.n	8004fe2 <UART_SetConfig+0x202>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc8:	e012      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd0:	e00e      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd8:	e00a      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe0:	e006      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe8:	e002      	b.n	8004ff0 <UART_SetConfig+0x210>
 8004fea:	2310      	movs	r3, #16
 8004fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a25      	ldr	r2, [pc, #148]	; (800508c <UART_SetConfig+0x2ac>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	f040 808a 	bne.w	8005110 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005000:	2b08      	cmp	r3, #8
 8005002:	d824      	bhi.n	800504e <UART_SetConfig+0x26e>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x22c>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	0800504f 	.word	0x0800504f
 8005014:	08005039 	.word	0x08005039
 8005018:	0800504f 	.word	0x0800504f
 800501c:	0800503f 	.word	0x0800503f
 8005020:	0800504f 	.word	0x0800504f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800504f 	.word	0x0800504f
 800502c:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe f946 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8005034:	61f8      	str	r0, [r7, #28]
        break;
 8005036:	e010      	b.n	800505a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <UART_SetConfig+0x2c0>)
 800503a:	61fb      	str	r3, [r7, #28]
        break;
 800503c:	e00d      	b.n	800505a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe f8a7 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8005042:	61f8      	str	r0, [r7, #28]
        break;
 8005044:	e009      	b.n	800505a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	61fb      	str	r3, [r7, #28]
        break;
 800504c:	e005      	b.n	800505a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8109 	beq.w	8005274 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	429a      	cmp	r2, r3
 8005070:	d305      	bcc.n	800507e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	429a      	cmp	r2, r3
 800507c:	d912      	bls.n	80050a4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005084:	e0f6      	b.n	8005274 <UART_SetConfig+0x494>
 8005086:	bf00      	nop
 8005088:	efff69f3 	.word	0xefff69f3
 800508c:	40008000 	.word	0x40008000
 8005090:	40013800 	.word	0x40013800
 8005094:	40021000 	.word	0x40021000
 8005098:	40004400 	.word	0x40004400
 800509c:	40004800 	.word	0x40004800
 80050a0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2200      	movs	r2, #0
 80050a8:	461c      	mov	r4, r3
 80050aa:	4615      	mov	r5, r2
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	022b      	lsls	r3, r5, #8
 80050b6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050ba:	0222      	lsls	r2, r4, #8
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	6849      	ldr	r1, [r1, #4]
 80050c0:	0849      	lsrs	r1, r1, #1
 80050c2:	2000      	movs	r0, #0
 80050c4:	4688      	mov	r8, r1
 80050c6:	4681      	mov	r9, r0
 80050c8:	eb12 0a08 	adds.w	sl, r2, r8
 80050cc:	eb43 0b09 	adc.w	fp, r3, r9
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050de:	4650      	mov	r0, sl
 80050e0:	4659      	mov	r1, fp
 80050e2:	f7fb fda3 	bl	8000c2c <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4613      	mov	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f4:	d308      	bcc.n	8005108 <UART_SetConfig+0x328>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fc:	d204      	bcs.n	8005108 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	e0b5      	b.n	8005274 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800510e:	e0b1      	b.n	8005274 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005118:	d15d      	bne.n	80051d6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800511a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800511e:	2b08      	cmp	r3, #8
 8005120:	d827      	bhi.n	8005172 <UART_SetConfig+0x392>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x348>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	08005173 	.word	0x08005173
 8005138:	08005163 	.word	0x08005163
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
 8005148:	0800516b 	.word	0x0800516b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514c:	f7fe f8b8 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8005150:	61f8      	str	r0, [r7, #28]
        break;
 8005152:	e014      	b.n	800517e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fe f8ca 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8005158:	61f8      	str	r0, [r7, #28]
        break;
 800515a:	e010      	b.n	800517e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515c:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <UART_SetConfig+0x4b0>)
 800515e:	61fb      	str	r3, [r7, #28]
        break;
 8005160:	e00d      	b.n	800517e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005162:	f7fe f815 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8005166:	61f8      	str	r0, [r7, #28]
        break;
 8005168:	e009      	b.n	800517e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	61fb      	str	r3, [r7, #28]
        break;
 8005170:	e005      	b.n	800517e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800517c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d077      	beq.n	8005274 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005a      	lsls	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b0f      	cmp	r3, #15
 800519e:	d916      	bls.n	80051ce <UART_SetConfig+0x3ee>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d212      	bcs.n	80051ce <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	b29a      	uxth	r2, r3
 80051be:	8afb      	ldrh	r3, [r7, #22]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	8afa      	ldrh	r2, [r7, #22]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e052      	b.n	8005274 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051d4:	e04e      	b.n	8005274 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d827      	bhi.n	800522e <UART_SetConfig+0x44e>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <UART_SetConfig+0x404>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	0800522f 	.word	0x0800522f
 80051f4:	0800521f 	.word	0x0800521f
 80051f8:	0800522f 	.word	0x0800522f
 80051fc:	0800522f 	.word	0x0800522f
 8005200:	0800522f 	.word	0x0800522f
 8005204:	08005227 	.word	0x08005227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fe f85a 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e014      	b.n	800523a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005210:	f7fe f86c 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8005214:	61f8      	str	r0, [r7, #28]
        break;
 8005216:	e010      	b.n	800523a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <UART_SetConfig+0x4b0>)
 800521a:	61fb      	str	r3, [r7, #28]
        break;
 800521c:	e00d      	b.n	800523a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521e:	f7fd ffb7 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8005222:	61f8      	str	r0, [r7, #28]
        break;
 8005224:	e009      	b.n	800523a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e005      	b.n	800523a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005238:	bf00      	nop
    }

    if (pclk != 0U)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	085a      	lsrs	r2, r3, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	441a      	add	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d909      	bls.n	800526e <UART_SetConfig+0x48e>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d205      	bcs.n	800526e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e002      	b.n	8005274 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528e:	bf00      	nop
 8005290:	00f42400 	.word	0x00f42400

08005294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01a      	beq.n	80053aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005392:	d10a      	bne.n	80053aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af02      	add	r7, sp, #8
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053e8:	f7fc fe2a 	bl	8002040 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d10e      	bne.n	800541a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f82d 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e023      	b.n	8005462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b04      	cmp	r3, #4
 8005426:	d10e      	bne.n	8005446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f817 	bl	800546a <UART_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e00d      	b.n	8005462 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b09c      	sub	sp, #112	; 0x70
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547a:	e0a5      	b.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	f000 80a1 	beq.w	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fc fddb 	bl	8002040 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x32>
 8005496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005498:	2b00      	cmp	r3, #0
 800549a:	d13e      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054b0:	667b      	str	r3, [r7, #100]	; 0x64
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	663b      	str	r3, [r7, #96]	; 0x60
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e067      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d04f      	beq.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005536:	d147      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005540:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
 8005562:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	613b      	str	r3, [r7, #16]
   return(result);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	66bb      	str	r3, [r7, #104]	; 0x68
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005594:	623a      	str	r2, [r7, #32]
 8005596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	69f9      	ldr	r1, [r7, #28]
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e010      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f43f af4a 	beq.w	800547c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3770      	adds	r7, #112	; 0x70
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	4603      	mov	r3, r0
 80055fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005604:	2b84      	cmp	r3, #132	; 0x84
 8005606:	d005      	beq.n	8005614 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005608:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	3303      	adds	r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005626:	f001 fa0b 	bl	8006a40 <vTaskStartScheduler>
  
  return osOK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd80      	pop	{r7, pc}

08005630 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af04      	add	r7, sp, #16
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <osThreadCreate+0x54>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01c      	beq.n	8005684 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685c      	ldr	r4, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681d      	ldr	r5, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691e      	ldr	r6, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff ffc8 	bl	80055f2 <makeFreeRtosPriority>
 8005662:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800566c:	9202      	str	r2, [sp, #8]
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	9100      	str	r1, [sp, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	4632      	mov	r2, r6
 8005676:	4629      	mov	r1, r5
 8005678:	4620      	mov	r0, r4
 800567a:	f001 f803 	bl	8006684 <xTaskCreateStatic>
 800567e:	4603      	mov	r3, r0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e01c      	b.n	80056be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685c      	ldr	r4, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005690:	b29e      	uxth	r6, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ffaa 	bl	80055f2 <makeFreeRtosPriority>
 800569e:	4602      	mov	r2, r0
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	9200      	str	r2, [sp, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4632      	mov	r2, r6
 80056ac:	4629      	mov	r1, r5
 80056ae:	4620      	mov	r0, r4
 80056b0:	f001 f845 	bl	800673e <xTaskCreate>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056c8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4619      	mov	r1, r3
 80056de:	2001      	movs	r0, #1
 80056e0:	f000 fa29 	bl	8005b36 <xQueueCreateMutexStatic>
 80056e4:	4603      	mov	r3, r0
 80056e6:	e003      	b.n	80056f0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80056e8:	2001      	movs	r0, #1
 80056ea:	f000 fa0c 	bl	8005b06 <xQueueCreateMutex>
 80056ee:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 0208 	add.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f103 0208 	add.w	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d103      	bne.n	80057ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e00c      	b.n	80057d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3308      	adds	r3, #8
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e002      	b.n	80057c8 <vListInsert+0x2e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d2f6      	bcs.n	80057c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6852      	ldr	r2, [r2, #4]
 800582c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d103      	bne.n	8005840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800588a:	f002 f83b 	bl	8007904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	3b01      	subs	r3, #1
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d114      	bne.n	800590a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3310      	adds	r3, #16
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 faf9 	bl	8006ee4 <xTaskRemoveFromEventList>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <xQueueGenericReset+0xcc>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	e009      	b.n	800591e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3310      	adds	r3, #16
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fef2 	bl	80056f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3324      	adds	r3, #36	; 0x24
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff feed 	bl	80056f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800591e:	f002 f821 	bl	8007964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005922:	2301      	movs	r3, #1
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	; 0x38
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <xQueueGenericCreateStatic+0x52>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <xQueueGenericCreateStatic+0x56>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericCreateStatic+0x58>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <xQueueGenericCreateStatic+0x7e>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericCreateStatic+0x82>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericCreateStatic+0x84>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	61fb      	str	r3, [r7, #28]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ce:	2348      	movs	r3, #72	; 0x48
 80059d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b48      	cmp	r3, #72	; 0x48
 80059d6:	d00a      	beq.n	80059ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f83f 	bl	8005a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3730      	adds	r7, #48	; 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	613b      	str	r3, [r7, #16]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3348      	adds	r3, #72	; 0x48
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f002 f875 	bl	8007b48 <pvPortMalloc>
 8005a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d011      	beq.n	8005a8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3348      	adds	r3, #72	; 0x48
 8005a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f805 	bl	8005a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	69b8      	ldr	r0, [r7, #24]
 8005ac6:	f7ff fecb 	bl	8005860 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005af2:	2300      	movs	r3, #0
 8005af4:	2200      	movs	r2, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f86b 	bl	8005bd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b10:	2301      	movs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6939      	ldr	r1, [r7, #16]
 8005b1e:	6978      	ldr	r0, [r7, #20]
 8005b20:	f7ff ff7e 	bl	8005a20 <xQueueGenericCreate>
 8005b24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff ffd3 	bl	8005ad2 <prvInitialiseMutex>

		return xNewQueue;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b088      	sub	sp, #32
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	6039      	str	r1, [r7, #0]
 8005b40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b42:	2301      	movs	r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2200      	movs	r2, #0
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	6978      	ldr	r0, [r7, #20]
 8005b56:	f7ff feeb 	bl	8005930 <xQueueGenericCreateStatic>
 8005b5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ffb8 	bl	8005ad2 <prvInitialiseMutex>

		return xNewQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
	}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	613b      	str	r3, [r7, #16]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d90a      	bls.n	8005bb0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	60fb      	str	r3, [r7, #12]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff33 	bl	8005a20 <xQueueGenericCreate>
 8005bba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005bc8:	697b      	ldr	r3, [r7, #20]
	}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	; 0x38
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005be2:	2300      	movs	r3, #0
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueGenericSend+0x32>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <xQueueGenericSend+0x40>
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <xQueueGenericSend+0x44>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <xQueueGenericSend+0x46>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <xQueueGenericSend+0x60>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d103      	bne.n	8005c42 <xQueueGenericSend+0x6e>
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <xQueueGenericSend+0x72>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xQueueGenericSend+0x74>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericSend+0x8e>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	623b      	str	r3, [r7, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c62:	f001 faff 	bl	8007264 <xTaskGetSchedulerState>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <xQueueGenericSend+0x9e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <xQueueGenericSend+0xa2>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <xQueueGenericSend+0xa4>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xQueueGenericSend+0xbe>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	61fb      	str	r3, [r7, #28]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c92:	f001 fe37 	bl	8007904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <xQueueGenericSend+0xd4>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d129      	bne.n	8005cfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cae:	f000 fbd9 	bl	8006464 <prvCopyDataToQueue>
 8005cb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d010      	beq.n	8005cde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	3324      	adds	r3, #36	; 0x24
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f90f 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ccc:	4b3f      	ldr	r3, [pc, #252]	; (8005dcc <xQueueGenericSend+0x1f8>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	e00a      	b.n	8005cf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ce4:	4b39      	ldr	r3, [pc, #228]	; (8005dcc <xQueueGenericSend+0x1f8>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cf4:	f001 fe36 	bl	8007964 <vPortExitCritical>
				return pdPASS;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e063      	b.n	8005dc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d02:	f001 fe2f 	bl	8007964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e05c      	b.n	8005dc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d10:	f107 0314 	add.w	r3, r7, #20
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f947 	bl	8006fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d1e:	f001 fe21 	bl	8007964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d22:	f000 fef7 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d26:	f001 fded 	bl	8007904 <vPortEnterCritical>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d30:	b25b      	sxtb	r3, r3
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d103      	bne.n	8005d40 <xQueueGenericSend+0x16c>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d103      	bne.n	8005d56 <xQueueGenericSend+0x182>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d56:	f001 fe05 	bl	8007964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d5a:	1d3a      	adds	r2, r7, #4
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 f936 	bl	8006fd4 <xTaskCheckForTimeOut>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d124      	bne.n	8005db8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d70:	f000 fc70 	bl	8006654 <prvIsQueueFull>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d018      	beq.n	8005dac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4611      	mov	r1, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 f88a 	bl	8006e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d8a:	f000 fbfb 	bl	8006584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d8e:	f000 fecf 	bl	8006b30 <xTaskResumeAll>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f47f af7c 	bne.w	8005c92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <xQueueGenericSend+0x1f8>)
 8005d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	e772      	b.n	8005c92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dae:	f000 fbe9 	bl	8006584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005db2:	f000 febd 	bl	8006b30 <xTaskResumeAll>
 8005db6:	e76c      	b.n	8005c92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dba:	f000 fbe3 	bl	8006584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dbe:	f000 feb7 	bl	8006b30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3738      	adds	r7, #56	; 0x38
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b090      	sub	sp, #64	; 0x40
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <xQueueGenericSendFromISR+0x3c>
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <xQueueGenericSendFromISR+0x40>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <xQueueGenericSendFromISR+0x42>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d103      	bne.n	8005e3a <xQueueGenericSendFromISR+0x6a>
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <xQueueGenericSendFromISR+0x6e>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueGenericSendFromISR+0x70>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	623b      	str	r3, [r7, #32]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e5a:	f001 fe35 	bl	8007ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	61fa      	str	r2, [r7, #28]
 8005e74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d302      	bcc.n	8005e8c <xQueueGenericSendFromISR+0xbc>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d12f      	bne.n	8005eec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ea2:	f000 fadf 	bl	8006464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ea6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d112      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d016      	beq.n	8005ee6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	3324      	adds	r3, #36	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f811 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00e      	beq.n	8005ee6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e007      	b.n	8005ee6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	b25a      	sxtb	r2, r3
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005eea:	e001      	b.n	8005ef0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005efa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3740      	adds	r7, #64	; 0x40
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b08e      	sub	sp, #56	; 0x38
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	623b      	str	r3, [r7, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61fb      	str	r3, [r7, #28]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <xQueueGiveFromISR+0x58>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <xQueueGiveFromISR+0x5c>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <xQueueGiveFromISR+0x5e>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	61bb      	str	r3, [r7, #24]
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f7e:	f001 fda3 	bl	8007ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f82:	f3ef 8211 	mrs	r2, BASEPRI
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	617a      	str	r2, [r7, #20]
 8005f98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d22b      	bcs.n	8006006 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d112      	bne.n	8005ff0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	3324      	adds	r3, #36	; 0x24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 ff84 	bl	8006ee4 <xTaskRemoveFromEventList>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	b25a      	sxtb	r2, r3
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006000:	2301      	movs	r3, #1
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	e001      	b.n	800600a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006006:	2300      	movs	r3, #0
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f383 8811 	msr	BASEPRI, r3
}
 8006014:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006018:	4618      	mov	r0, r3
 800601a:	3738      	adds	r7, #56	; 0x38
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800602c:	2300      	movs	r3, #0
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <xQueueReceive+0x30>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	623b      	str	r3, [r7, #32]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <xQueueReceive+0x3e>
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <xQueueReceive+0x42>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <xQueueReceive+0x44>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xQueueReceive+0x5e>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	61fb      	str	r3, [r7, #28]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800607e:	f001 f8f1 	bl	8007264 <xTaskGetSchedulerState>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <xQueueReceive+0x6e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <xQueueReceive+0x72>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <xQueueReceive+0x74>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueReceive+0x8e>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	61bb      	str	r3, [r7, #24]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ae:	f001 fc29 	bl	8007904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01f      	beq.n	80060fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c2:	f000 fa39 	bl	8006538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	1e5a      	subs	r2, r3, #1
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	3310      	adds	r3, #16
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 ff02 	bl	8006ee4 <xTaskRemoveFromEventList>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060e6:	4b3d      	ldr	r3, [pc, #244]	; (80061dc <xQueueReceive+0x1bc>)
 80060e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060f6:	f001 fc35 	bl	8007964 <vPortExitCritical>
				return pdPASS;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e069      	b.n	80061d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006104:	f001 fc2e 	bl	8007964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006108:	2300      	movs	r3, #0
 800610a:	e062      	b.n	80061d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006112:	f107 0310 	add.w	r3, r7, #16
 8006116:	4618      	mov	r0, r3
 8006118:	f000 ff46 	bl	8006fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800611c:	2301      	movs	r3, #1
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006120:	f001 fc20 	bl	8007964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006124:	f000 fcf6 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006128:	f001 fbec 	bl	8007904 <vPortEnterCritical>
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006132:	b25b      	sxtb	r3, r3
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d103      	bne.n	8006142 <xQueueReceive+0x122>
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006148:	b25b      	sxtb	r3, r3
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d103      	bne.n	8006158 <xQueueReceive+0x138>
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006158:	f001 fc04 	bl	8007964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800615c:	1d3a      	adds	r2, r7, #4
 800615e:	f107 0310 	add.w	r3, r7, #16
 8006162:	4611      	mov	r1, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f000 ff35 	bl	8006fd4 <xTaskCheckForTimeOut>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d123      	bne.n	80061b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006172:	f000 fa59 	bl	8006628 <prvIsQueueEmpty>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d017      	beq.n	80061ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fe89 	bl	8006e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800618a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618c:	f000 f9fa 	bl	8006584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006190:	f000 fcce 	bl	8006b30 <xTaskResumeAll>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d189      	bne.n	80060ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <xQueueReceive+0x1bc>)
 800619c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	e780      	b.n	80060ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ae:	f000 f9e9 	bl	8006584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061b2:	f000 fcbd 	bl	8006b30 <xTaskResumeAll>
 80061b6:	e77a      	b.n	80060ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ba:	f000 f9e3 	bl	8006584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061be:	f000 fcb7 	bl	8006b30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c4:	f000 fa30 	bl	8006628 <prvIsQueueEmpty>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f43f af6f 	beq.w	80060ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3730      	adds	r7, #48	; 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08e      	sub	sp, #56	; 0x38
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	61fb      	str	r3, [r7, #28]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006230:	f001 f818 	bl	8007264 <xTaskGetSchedulerState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <xQueueSemaphoreTake+0x60>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <xQueueSemaphoreTake+0x64>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <xQueueSemaphoreTake+0x66>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	61bb      	str	r3, [r7, #24]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006260:	f001 fb50 	bl	8007904 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	2b00      	cmp	r3, #0
 800626e:	d024      	beq.n	80062ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	1e5a      	subs	r2, r3, #1
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006280:	f001 f998 	bl	80075b4 <pvTaskIncrementMutexHeldCount>
 8006284:	4602      	mov	r2, r0
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	3310      	adds	r3, #16
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fe24 	bl	8006ee4 <xTaskRemoveFromEventList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d007      	beq.n	80062b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062a2:	4b54      	ldr	r3, [pc, #336]	; (80063f4 <xQueueSemaphoreTake+0x214>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062b2:	f001 fb57 	bl	8007964 <vPortExitCritical>
				return pdPASS;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e097      	b.n	80063ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d111      	bne.n	80062e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	617b      	str	r3, [r7, #20]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062dc:	f001 fb42 	bl	8007964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e082      	b.n	80063ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fe5a 	bl	8006fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062f8:	f001 fb34 	bl	8007964 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062fc:	f000 fc0a 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006300:	f001 fb00 	bl	8007904 <vPortEnterCritical>
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800630a:	b25b      	sxtb	r3, r3
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d103      	bne.n	800631a <xQueueSemaphoreTake+0x13a>
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006320:	b25b      	sxtb	r3, r3
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d103      	bne.n	8006330 <xQueueSemaphoreTake+0x150>
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006330:	f001 fb18 	bl	8007964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006334:	463a      	mov	r2, r7
 8006336:	f107 030c 	add.w	r3, r7, #12
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fe49 	bl	8006fd4 <xTaskCheckForTimeOut>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d132      	bne.n	80063ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800634a:	f000 f96d 	bl	8006628 <prvIsQueueEmpty>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d026      	beq.n	80063a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800635c:	f001 fad2 	bl	8007904 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 ff9b 	bl	80072a0 <xTaskPriorityInherit>
 800636a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800636c:	f001 fafa 	bl	8007964 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	3324      	adds	r3, #36	; 0x24
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fd8f 	bl	8006e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800637e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006380:	f000 f900 	bl	8006584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006384:	f000 fbd4 	bl	8006b30 <xTaskResumeAll>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	f47f af68 	bne.w	8006260 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006390:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <xQueueSemaphoreTake+0x214>)
 8006392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	e75e      	b.n	8006260 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063a4:	f000 f8ee 	bl	8006584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a8:	f000 fbc2 	bl	8006b30 <xTaskResumeAll>
 80063ac:	e758      	b.n	8006260 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063b0:	f000 f8e8 	bl	8006584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063b4:	f000 fbbc 	bl	8006b30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ba:	f000 f935 	bl	8006628 <prvIsQueueEmpty>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f43f af4d 	beq.w	8006260 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80063cc:	f001 fa9a 	bl	8007904 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d2:	f000 f82f 	bl	8006434 <prvGetDisinheritPriorityAfterTimeout>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f85a 	bl	8007498 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063e4:	f001 fabe 	bl	8007964 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3738      	adds	r7, #56	; 0x38
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	60fb      	str	r3, [r7, #12]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006426:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d006      	beq.n	8006452 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f1c3 0307 	rsb	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e001      	b.n	8006456 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006456:	68fb      	ldr	r3, [r7, #12]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10d      	bne.n	800649e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d14d      	bne.n	8006526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 ff7c 	bl	800738c <xTaskPriorityDisinherit>
 8006494:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	e043      	b.n	8006526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d119      	bne.n	80064d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6858      	ldr	r0, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	461a      	mov	r2, r3
 80064ae:	68b9      	ldr	r1, [r7, #8]
 80064b0:	f001 fe5f 	bl	8008172 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	441a      	add	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d32b      	bcc.n	8006526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	e026      	b.n	8006526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	68d8      	ldr	r0, [r3, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	461a      	mov	r2, r3
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	f001 fe45 	bl	8008172 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	425b      	negs	r3, r3
 80064f2:	441a      	add	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d207      	bcs.n	8006514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	425b      	negs	r3, r3
 800650e:	441a      	add	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d105      	bne.n	8006526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3b01      	subs	r3, #1
 8006524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800652e:	697b      	ldr	r3, [r7, #20]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d018      	beq.n	800657c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	441a      	add	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d303      	bcc.n	800656c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68d9      	ldr	r1, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	461a      	mov	r2, r3
 8006576:	6838      	ldr	r0, [r7, #0]
 8006578:	f001 fdfb 	bl	8008172 <memcpy>
	}
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800658c:	f001 f9ba 	bl	8007904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006598:	e011      	b.n	80065be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d012      	beq.n	80065c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3324      	adds	r3, #36	; 0x24
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fc9c 	bl	8006ee4 <xTaskRemoveFromEventList>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065b2:	f000 fd71 	bl	8007098 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dce9      	bgt.n	800659a <prvUnlockQueue+0x16>
 80065c6:	e000      	b.n	80065ca <prvUnlockQueue+0x46>
					break;
 80065c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065d2:	f001 f9c7 	bl	8007964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065d6:	f001 f995 	bl	8007904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065e2:	e011      	b.n	8006608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d012      	beq.n	8006612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3310      	adds	r3, #16
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fc77 	bl	8006ee4 <xTaskRemoveFromEventList>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065fc:	f000 fd4c 	bl	8007098 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	3b01      	subs	r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800660c:	2b00      	cmp	r3, #0
 800660e:	dce9      	bgt.n	80065e4 <prvUnlockQueue+0x60>
 8006610:	e000      	b.n	8006614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	22ff      	movs	r2, #255	; 0xff
 8006618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800661c:	f001 f9a2 	bl	8007964 <vPortExitCritical>
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006630:	f001 f968 	bl	8007904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e001      	b.n	8006646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006646:	f001 f98d 	bl	8007964 <vPortExitCritical>

	return xReturn;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800665c:	f001 f952 	bl	8007904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	429a      	cmp	r2, r3
 800666a:	d102      	bne.n	8006672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e001      	b.n	8006676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006676:	f001 f975 	bl	8007964 <vPortExitCritical>

	return xReturn;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08e      	sub	sp, #56	; 0x38
 8006688:	af04      	add	r7, sp, #16
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	623b      	str	r3, [r7, #32]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xTaskCreateStatic+0x46>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	61fb      	str	r3, [r7, #28]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066ca:	23b4      	movs	r3, #180	; 0xb4
 80066cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2bb4      	cmp	r3, #180	; 0xb4
 80066d2:	d00a      	beq.n	80066ea <xTaskCreateStatic+0x66>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61bb      	str	r3, [r7, #24]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01e      	beq.n	8006730 <xTaskCreateStatic+0xac>
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01b      	beq.n	8006730 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006700:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	2202      	movs	r2, #2
 8006706:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800670a:	2300      	movs	r3, #0
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 f850 	bl	80067c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800672a:	f000 f8eb 	bl	8006904 <prvAddNewTaskToReadyList>
 800672e:	e001      	b.n	8006734 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006734:	697b      	ldr	r3, [r7, #20]
	}
 8006736:	4618      	mov	r0, r3
 8006738:	3728      	adds	r7, #40	; 0x28
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800673e:	b580      	push	{r7, lr}
 8006740:	b08c      	sub	sp, #48	; 0x30
 8006742:	af04      	add	r7, sp, #16
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	4613      	mov	r3, r2
 800674c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f9f8 	bl	8007b48 <pvPortMalloc>
 8006758:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00e      	beq.n	800677e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006760:	20b4      	movs	r0, #180	; 0xb4
 8006762:	f001 f9f1 	bl	8007b48 <pvPortMalloc>
 8006766:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
 8006774:	e005      	b.n	8006782 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	f001 fab2 	bl	8007ce0 <vPortFree>
 800677c:	e001      	b.n	8006782 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d017      	beq.n	80067b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	2300      	movs	r3, #0
 8006794:	9303      	str	r3, [sp, #12]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f80e 	bl	80067c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067ac:	69f8      	ldr	r0, [r7, #28]
 80067ae:	f000 f8a9 	bl	8006904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	e002      	b.n	80067be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067b8:	f04f 33ff 	mov.w	r3, #4294967295
 80067bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067be:	69bb      	ldr	r3, [r7, #24]
	}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067e0:	3b01      	subs	r3, #1
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f023 0307 	bic.w	r3, r3, #7
 80067ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <prvInitialiseNewTask+0x48>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	617b      	str	r3, [r7, #20]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01f      	beq.n	8006856 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e012      	b.n	8006842 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	7819      	ldrb	r1, [r3, #0]
 8006824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	3334      	adds	r3, #52	; 0x34
 800682c:	460a      	mov	r2, r1
 800682e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d006      	beq.n	800684a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2b0f      	cmp	r3, #15
 8006846:	d9e9      	bls.n	800681c <prvInitialiseNewTask+0x54>
 8006848:	e000      	b.n	800684c <prvInitialiseNewTask+0x84>
			{
				break;
 800684a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006854:	e003      	b.n	800685e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	2b06      	cmp	r3, #6
 8006862:	d901      	bls.n	8006868 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006864:	2306      	movs	r3, #6
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800686c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006872:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	2200      	movs	r2, #0
 8006878:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	3304      	adds	r3, #4
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe ff5a 	bl	8005738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	3318      	adds	r3, #24
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe ff55 	bl	8005738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	f1c3 0207 	rsb	r2, r3, #7
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	334c      	adds	r3, #76	; 0x4c
 80068b8:	2260      	movs	r2, #96	; 0x60
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 fc66 	bl	800818e <memset>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <prvInitialiseNewTask+0x130>)
 80068c6:	651a      	str	r2, [r3, #80]	; 0x50
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	4a0c      	ldr	r2, [pc, #48]	; (80068fc <prvInitialiseNewTask+0x134>)
 80068cc:	655a      	str	r2, [r3, #84]	; 0x54
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <prvInitialiseNewTask+0x138>)
 80068d2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	69b8      	ldr	r0, [r7, #24]
 80068da:	f000 fee5 	bl	80076a8 <pxPortInitialiseStack>
 80068de:	4602      	mov	r2, r0
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f0:	bf00      	nop
 80068f2:	3720      	adds	r7, #32
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	0800b084 	.word	0x0800b084
 80068fc:	0800b0a4 	.word	0x0800b0a4
 8006900:	0800b064 	.word	0x0800b064

08006904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800690c:	f000 fffa 	bl	8007904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006910:	4b2a      	ldr	r3, [pc, #168]	; (80069bc <prvAddNewTaskToReadyList+0xb8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	4a29      	ldr	r2, [pc, #164]	; (80069bc <prvAddNewTaskToReadyList+0xb8>)
 8006918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800691a:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <prvAddNewTaskToReadyList+0xbc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006922:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <prvAddNewTaskToReadyList+0xbc>)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006928:	4b24      	ldr	r3, [pc, #144]	; (80069bc <prvAddNewTaskToReadyList+0xb8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d110      	bne.n	8006952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006930:	f000 fbd6 	bl	80070e0 <prvInitialiseTaskLists>
 8006934:	e00d      	b.n	8006952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006936:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <prvAddNewTaskToReadyList+0xc0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800693e:	4b20      	ldr	r3, [pc, #128]	; (80069c0 <prvAddNewTaskToReadyList+0xbc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	429a      	cmp	r2, r3
 800694a:	d802      	bhi.n	8006952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <prvAddNewTaskToReadyList+0xbc>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <prvAddNewTaskToReadyList+0xc4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <prvAddNewTaskToReadyList+0xc4>)
 800695a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	2201      	movs	r2, #1
 8006962:	409a      	lsls	r2, r3
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <prvAddNewTaskToReadyList+0xc8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4313      	orrs	r3, r2
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <prvAddNewTaskToReadyList+0xc8>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <prvAddNewTaskToReadyList+0xcc>)
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f7fe fee4 	bl	8005752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800698a:	f000 ffeb 	bl	8007964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <prvAddNewTaskToReadyList+0xc0>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <prvAddNewTaskToReadyList+0xbc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d207      	bcs.n	80069b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <prvAddNewTaskToReadyList+0xd0>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000a2c 	.word	0x20000a2c
 80069c0:	2000092c 	.word	0x2000092c
 80069c4:	20000a38 	.word	0x20000a38
 80069c8:	20000a48 	.word	0x20000a48
 80069cc:	20000a34 	.word	0x20000a34
 80069d0:	20000930 	.word	0x20000930
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d017      	beq.n	8006a1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <vTaskDelay+0x60>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <vTaskDelay+0x30>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60bb      	str	r3, [r7, #8]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a08:	f000 f884 	bl	8006b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fde4 	bl	80075dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a14:	f000 f88c 	bl	8006b30 <xTaskResumeAll>
 8006a18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d107      	bne.n	8006a30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <vTaskDelay+0x64>)
 8006a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000a54 	.word	0x20000a54
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a4e:	463a      	mov	r2, r7
 8006a50:	1d39      	adds	r1, r7, #4
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fa faa0 	bl	8000f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	9202      	str	r2, [sp, #8]
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	2300      	movs	r3, #0
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	460a      	mov	r2, r1
 8006a6e:	4921      	ldr	r1, [pc, #132]	; (8006af4 <vTaskStartScheduler+0xb4>)
 8006a70:	4821      	ldr	r0, [pc, #132]	; (8006af8 <vTaskStartScheduler+0xb8>)
 8006a72:	f7ff fe07 	bl	8006684 <xTaskCreateStatic>
 8006a76:	4603      	mov	r3, r0
 8006a78:	4a20      	ldr	r2, [pc, #128]	; (8006afc <vTaskStartScheduler+0xbc>)
 8006a7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a7c:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <vTaskStartScheduler+0xbc>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a84:	2301      	movs	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e001      	b.n	8006a8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11b      	bne.n	8006acc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	613b      	str	r3, [r7, #16]
}
 8006aa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006aa8:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <vTaskStartScheduler+0xc0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	334c      	adds	r3, #76	; 0x4c
 8006aae:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <vTaskStartScheduler+0xc4>)
 8006ab0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <vTaskStartScheduler+0xc8>)
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <vTaskStartScheduler+0xcc>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ac0:	4b13      	ldr	r3, [pc, #76]	; (8006b10 <vTaskStartScheduler+0xd0>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ac6:	f000 fe7b 	bl	80077c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aca:	e00e      	b.n	8006aea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d10a      	bne.n	8006aea <vTaskStartScheduler+0xaa>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <vTaskStartScheduler+0xa8>
}
 8006aea:	bf00      	nop
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	0800b010 	.word	0x0800b010
 8006af8:	080070b1 	.word	0x080070b1
 8006afc:	20000a50 	.word	0x20000a50
 8006b00:	2000092c 	.word	0x2000092c
 8006b04:	20000010 	.word	0x20000010
 8006b08:	20000a4c 	.word	0x20000a4c
 8006b0c:	20000a38 	.word	0x20000a38
 8006b10:	20000a30 	.word	0x20000a30

08006b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <vTaskSuspendAll+0x18>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <vTaskSuspendAll+0x18>)
 8006b20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	20000a54 	.word	0x20000a54

08006b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b3e:	4b41      	ldr	r3, [pc, #260]	; (8006c44 <xTaskResumeAll+0x114>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b5c:	f000 fed2 	bl	8007904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b60:	4b38      	ldr	r3, [pc, #224]	; (8006c44 <xTaskResumeAll+0x114>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	4a37      	ldr	r2, [pc, #220]	; (8006c44 <xTaskResumeAll+0x114>)
 8006b68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6a:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <xTaskResumeAll+0x114>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d161      	bne.n	8006c36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b72:	4b35      	ldr	r3, [pc, #212]	; (8006c48 <xTaskResumeAll+0x118>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05d      	beq.n	8006c36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b7a:	e02e      	b.n	8006bda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7c:	4b33      	ldr	r3, [pc, #204]	; (8006c4c <xTaskResumeAll+0x11c>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fe3f 	bl	800580c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fe3a 	bl	800580c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <xTaskResumeAll+0x120>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	4a2a      	ldr	r2, [pc, #168]	; (8006c50 <xTaskResumeAll+0x120>)
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a27      	ldr	r2, [pc, #156]	; (8006c54 <xTaskResumeAll+0x124>)
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7fe fdc6 	bl	8005752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <xTaskResumeAll+0x128>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006bd4:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <xTaskResumeAll+0x12c>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bda:	4b1c      	ldr	r3, [pc, #112]	; (8006c4c <xTaskResumeAll+0x11c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1cc      	bne.n	8006b7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006be8:	f000 fb1c 	bl	8007224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bec:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <xTaskResumeAll+0x130>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bf8:	f000 f836 	bl	8006c68 <xTaskIncrementTick>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <xTaskResumeAll+0x12c>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f1      	bne.n	8006bf8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c14:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <xTaskResumeAll+0x130>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <xTaskResumeAll+0x12c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <xTaskResumeAll+0x134>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c36:	f000 fe95 	bl	8007964 <vPortExitCritical>

	return xAlreadyYielded;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000a54 	.word	0x20000a54
 8006c48:	20000a2c 	.word	0x20000a2c
 8006c4c:	200009ec 	.word	0x200009ec
 8006c50:	20000a34 	.word	0x20000a34
 8006c54:	20000930 	.word	0x20000930
 8006c58:	2000092c 	.word	0x2000092c
 8006c5c:	20000a40 	.word	0x20000a40
 8006c60:	20000a3c 	.word	0x20000a3c
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c72:	4b4e      	ldr	r3, [pc, #312]	; (8006dac <xTaskIncrementTick+0x144>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 808e 	bne.w	8006d98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c7c:	4b4c      	ldr	r3, [pc, #304]	; (8006db0 <xTaskIncrementTick+0x148>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c84:	4a4a      	ldr	r2, [pc, #296]	; (8006db0 <xTaskIncrementTick+0x148>)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d120      	bne.n	8006cd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c90:	4b48      	ldr	r3, [pc, #288]	; (8006db4 <xTaskIncrementTick+0x14c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	603b      	str	r3, [r7, #0]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <xTaskIncrementTick+0x46>
 8006cb0:	4b40      	ldr	r3, [pc, #256]	; (8006db4 <xTaskIncrementTick+0x14c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	4b40      	ldr	r3, [pc, #256]	; (8006db8 <xTaskIncrementTick+0x150>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3e      	ldr	r2, [pc, #248]	; (8006db4 <xTaskIncrementTick+0x14c>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4a3e      	ldr	r2, [pc, #248]	; (8006db8 <xTaskIncrementTick+0x150>)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	4b3d      	ldr	r3, [pc, #244]	; (8006dbc <xTaskIncrementTick+0x154>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a3c      	ldr	r2, [pc, #240]	; (8006dbc <xTaskIncrementTick+0x154>)
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	f000 faa9 	bl	8007224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cd2:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <xTaskIncrementTick+0x158>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d348      	bcc.n	8006d6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cdc:	4b35      	ldr	r3, [pc, #212]	; (8006db4 <xTaskIncrementTick+0x14c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce6:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <xTaskIncrementTick+0x158>)
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cec:	601a      	str	r2, [r3, #0]
					break;
 8006cee:	e03e      	b.n	8006d6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf0:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <xTaskIncrementTick+0x14c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d203      	bcs.n	8006d10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d08:	4a2d      	ldr	r2, [pc, #180]	; (8006dc0 <xTaskIncrementTick+0x158>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d0e:	e02e      	b.n	8006d6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fd79 	bl	800580c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	3318      	adds	r3, #24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fd70 	bl	800580c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	2201      	movs	r2, #1
 8006d32:	409a      	lsls	r2, r3
 8006d34:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <xTaskIncrementTick+0x15c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <xTaskIncrementTick+0x15c>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	; (8006dc8 <xTaskIncrementTick+0x160>)
 8006d4c:	441a      	add	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7fe fcfc 	bl	8005752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <xTaskIncrementTick+0x164>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3b9      	bcc.n	8006cdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6c:	e7b6      	b.n	8006cdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d6e:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <xTaskIncrementTick+0x164>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	4914      	ldr	r1, [pc, #80]	; (8006dc8 <xTaskIncrementTick+0x160>)
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d901      	bls.n	8006d8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <xTaskIncrementTick+0x168>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e004      	b.n	8006da2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <xTaskIncrementTick+0x16c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <xTaskIncrementTick+0x16c>)
 8006da0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006da2:	697b      	ldr	r3, [r7, #20]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000a54 	.word	0x20000a54
 8006db0:	20000a30 	.word	0x20000a30
 8006db4:	200009e4 	.word	0x200009e4
 8006db8:	200009e8 	.word	0x200009e8
 8006dbc:	20000a44 	.word	0x20000a44
 8006dc0:	20000a4c 	.word	0x20000a4c
 8006dc4:	20000a34 	.word	0x20000a34
 8006dc8:	20000930 	.word	0x20000930
 8006dcc:	2000092c 	.word	0x2000092c
 8006dd0:	20000a40 	.word	0x20000a40
 8006dd4:	20000a3c 	.word	0x20000a3c

08006dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dde:	4b29      	ldr	r3, [pc, #164]	; (8006e84 <vTaskSwitchContext+0xac>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006de6:	4b28      	ldr	r3, [pc, #160]	; (8006e88 <vTaskSwitchContext+0xb0>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dec:	e044      	b.n	8006e78 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006dee:	4b26      	ldr	r3, [pc, #152]	; (8006e88 <vTaskSwitchContext+0xb0>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df4:	4b25      	ldr	r3, [pc, #148]	; (8006e8c <vTaskSwitchContext+0xb4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	fab3 f383 	clz	r3, r3
 8006e00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	f1c3 031f 	rsb	r3, r3, #31
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	4921      	ldr	r1, [pc, #132]	; (8006e90 <vTaskSwitchContext+0xb8>)
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	440b      	add	r3, r1
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	607b      	str	r3, [r7, #4]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <vTaskSwitchContext+0x5a>
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <vTaskSwitchContext+0xb8>)
 8006e40:	4413      	add	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3308      	adds	r3, #8
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d104      	bne.n	8006e64 <vTaskSwitchContext+0x8c>
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	605a      	str	r2, [r3, #4]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4a0a      	ldr	r2, [pc, #40]	; (8006e94 <vTaskSwitchContext+0xbc>)
 8006e6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <vTaskSwitchContext+0xbc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	334c      	adds	r3, #76	; 0x4c
 8006e74:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <vTaskSwitchContext+0xc0>)
 8006e76:	6013      	str	r3, [r2, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	20000a54 	.word	0x20000a54
 8006e88:	20000a40 	.word	0x20000a40
 8006e8c:	20000a34 	.word	0x20000a34
 8006e90:	20000930 	.word	0x20000930
 8006e94:	2000092c 	.word	0x2000092c
 8006e98:	20000010 	.word	0x20000010

08006e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vTaskPlaceOnEventList+0x44>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3318      	adds	r3, #24
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fe fc65 	bl	800579a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	6838      	ldr	r0, [r7, #0]
 8006ed4:	f000 fb82 	bl	80075dc <prvAddCurrentTaskToDelayedList>
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	2000092c 	.word	0x2000092c

08006ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	60fb      	str	r3, [r7, #12]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	3318      	adds	r3, #24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fc79 	bl	800580c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <xTaskRemoveFromEventList+0xac>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11c      	bne.n	8006f5c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fc70 	bl	800580c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	2201      	movs	r2, #1
 8006f32:	409a      	lsls	r2, r3
 8006f34:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <xTaskRemoveFromEventList+0xb0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	4a16      	ldr	r2, [pc, #88]	; (8006f94 <xTaskRemoveFromEventList+0xb0>)
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <xTaskRemoveFromEventList+0xb4>)
 8006f4c:	441a      	add	r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7fe fbfc 	bl	8005752 <vListInsertEnd>
 8006f5a:	e005      	b.n	8006f68 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3318      	adds	r3, #24
 8006f60:	4619      	mov	r1, r3
 8006f62:	480e      	ldr	r0, [pc, #56]	; (8006f9c <xTaskRemoveFromEventList+0xb8>)
 8006f64:	f7fe fbf5 	bl	8005752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <xTaskRemoveFromEventList+0xbc>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d905      	bls.n	8006f82 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f76:	2301      	movs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <xTaskRemoveFromEventList+0xc0>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e001      	b.n	8006f86 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000a54 	.word	0x20000a54
 8006f94:	20000a34 	.word	0x20000a34
 8006f98:	20000930 	.word	0x20000930
 8006f9c:	200009ec 	.word	0x200009ec
 8006fa0:	2000092c 	.word	0x2000092c
 8006fa4:	20000a40 	.word	0x20000a40

08006fa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <vTaskInternalSetTimeOutState+0x24>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <vTaskInternalSetTimeOutState+0x28>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000a44 	.word	0x20000a44
 8006fd0:	20000a30 	.word	0x20000a30

08006fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	613b      	str	r3, [r7, #16]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007016:	f000 fc75 	bl	8007904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800701a:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <xTaskCheckForTimeOut+0xbc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d102      	bne.n	800703a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007034:	2300      	movs	r3, #0
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	e023      	b.n	8007082 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <xTaskCheckForTimeOut+0xc0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d007      	beq.n	8007056 <xTaskCheckForTimeOut+0x82>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	e015      	b.n	8007082 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	429a      	cmp	r2, r3
 800705e:	d20b      	bcs.n	8007078 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff ff9b 	bl	8006fa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
 8007076:	e004      	b.n	8007082 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800707e:	2301      	movs	r3, #1
 8007080:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007082:	f000 fc6f 	bl	8007964 <vPortExitCritical>

	return xReturn;
 8007086:	69fb      	ldr	r3, [r7, #28]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3720      	adds	r7, #32
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000a30 	.word	0x20000a30
 8007094:	20000a44 	.word	0x20000a44

08007098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800709c:	4b03      	ldr	r3, [pc, #12]	; (80070ac <vTaskMissedYield+0x14>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
}
 80070a2:	bf00      	nop
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000a40 	.word	0x20000a40

080070b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070b8:	f000 f852 	bl	8007160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <prvIdleTask+0x28>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d9f9      	bls.n	80070b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <prvIdleTask+0x2c>)
 80070c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070d4:	e7f0      	b.n	80070b8 <prvIdleTask+0x8>
 80070d6:	bf00      	nop
 80070d8:	20000930 	.word	0x20000930
 80070dc:	e000ed04 	.word	0xe000ed04

080070e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	e00c      	b.n	8007106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4a12      	ldr	r2, [pc, #72]	; (8007140 <prvInitialiseTaskLists+0x60>)
 80070f8:	4413      	add	r3, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fafc 	bl	80056f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3301      	adds	r3, #1
 8007104:	607b      	str	r3, [r7, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b06      	cmp	r3, #6
 800710a:	d9ef      	bls.n	80070ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800710c:	480d      	ldr	r0, [pc, #52]	; (8007144 <prvInitialiseTaskLists+0x64>)
 800710e:	f7fe faf3 	bl	80056f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007112:	480d      	ldr	r0, [pc, #52]	; (8007148 <prvInitialiseTaskLists+0x68>)
 8007114:	f7fe faf0 	bl	80056f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007118:	480c      	ldr	r0, [pc, #48]	; (800714c <prvInitialiseTaskLists+0x6c>)
 800711a:	f7fe faed 	bl	80056f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800711e:	480c      	ldr	r0, [pc, #48]	; (8007150 <prvInitialiseTaskLists+0x70>)
 8007120:	f7fe faea 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007124:	480b      	ldr	r0, [pc, #44]	; (8007154 <prvInitialiseTaskLists+0x74>)
 8007126:	f7fe fae7 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <prvInitialiseTaskLists+0x78>)
 800712c:	4a05      	ldr	r2, [pc, #20]	; (8007144 <prvInitialiseTaskLists+0x64>)
 800712e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <prvInitialiseTaskLists+0x7c>)
 8007132:	4a05      	ldr	r2, [pc, #20]	; (8007148 <prvInitialiseTaskLists+0x68>)
 8007134:	601a      	str	r2, [r3, #0]
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000930 	.word	0x20000930
 8007144:	200009bc 	.word	0x200009bc
 8007148:	200009d0 	.word	0x200009d0
 800714c:	200009ec 	.word	0x200009ec
 8007150:	20000a00 	.word	0x20000a00
 8007154:	20000a18 	.word	0x20000a18
 8007158:	200009e4 	.word	0x200009e4
 800715c:	200009e8 	.word	0x200009e8

08007160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007166:	e019      	b.n	800719c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007168:	f000 fbcc 	bl	8007904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716c:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <prvCheckTasksWaitingTermination+0x50>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe fb47 	bl	800580c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800717e:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <prvCheckTasksWaitingTermination+0x54>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3b01      	subs	r3, #1
 8007184:	4a0b      	ldr	r2, [pc, #44]	; (80071b4 <prvCheckTasksWaitingTermination+0x54>)
 8007186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007188:	4b0b      	ldr	r3, [pc, #44]	; (80071b8 <prvCheckTasksWaitingTermination+0x58>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <prvCheckTasksWaitingTermination+0x58>)
 8007190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007192:	f000 fbe7 	bl	8007964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f810 	bl	80071bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800719c:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <prvCheckTasksWaitingTermination+0x58>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e1      	bne.n	8007168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000a00 	.word	0x20000a00
 80071b4:	20000a2c 	.word	0x20000a2c
 80071b8:	20000a14 	.word	0x20000a14

080071bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	334c      	adds	r3, #76	; 0x4c
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 f8a3 	bl	8008314 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d108      	bne.n	80071ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fd7f 	bl	8007ce0 <vPortFree>
				vPortFree( pxTCB );
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fd7c 	bl	8007ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071e8:	e018      	b.n	800721c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d103      	bne.n	80071fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fd73 	bl	8007ce0 <vPortFree>
	}
 80071fa:	e00f      	b.n	800721c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007202:	2b02      	cmp	r3, #2
 8007204:	d00a      	beq.n	800721c <prvDeleteTCB+0x60>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60fb      	str	r3, [r7, #12]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <prvDeleteTCB+0x5e>
	}
 800721c:	bf00      	nop
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722a:	4b0c      	ldr	r3, [pc, #48]	; (800725c <prvResetNextTaskUnblockTime+0x38>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <prvResetNextTaskUnblockTime+0x3c>)
 8007236:	f04f 32ff 	mov.w	r2, #4294967295
 800723a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800723c:	e008      	b.n	8007250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723e:	4b07      	ldr	r3, [pc, #28]	; (800725c <prvResetNextTaskUnblockTime+0x38>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4a04      	ldr	r2, [pc, #16]	; (8007260 <prvResetNextTaskUnblockTime+0x3c>)
 800724e:	6013      	str	r3, [r2, #0]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	200009e4 	.word	0x200009e4
 8007260:	20000a4c 	.word	0x20000a4c

08007264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <xTaskGetSchedulerState+0x34>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007272:	2301      	movs	r3, #1
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	e008      	b.n	800728a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007278:	4b08      	ldr	r3, [pc, #32]	; (800729c <xTaskGetSchedulerState+0x38>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007280:	2302      	movs	r3, #2
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e001      	b.n	800728a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007286:	2300      	movs	r3, #0
 8007288:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800728a:	687b      	ldr	r3, [r7, #4]
	}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20000a38 	.word	0x20000a38
 800729c:	20000a54 	.word	0x20000a54

080072a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d05e      	beq.n	8007374 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4b31      	ldr	r3, [pc, #196]	; (8007380 <xTaskPriorityInherit+0xe0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d24e      	bcs.n	8007362 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db06      	blt.n	80072da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <xTaskPriorityInherit+0xe0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	f1c3 0207 	rsb	r2, r3, #7
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6959      	ldr	r1, [r3, #20]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4a26      	ldr	r2, [pc, #152]	; (8007384 <xTaskPriorityInherit+0xe4>)
 80072ec:	4413      	add	r3, r2
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d12f      	bne.n	8007352 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fa88 	bl	800580c <uxListRemove>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43da      	mvns	r2, r3
 800730e:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <xTaskPriorityInherit+0xe8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4013      	ands	r3, r2
 8007314:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <xTaskPriorityInherit+0xe8>)
 8007316:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <xTaskPriorityInherit+0xe0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	2201      	movs	r2, #1
 8007328:	409a      	lsls	r2, r3
 800732a:	4b17      	ldr	r3, [pc, #92]	; (8007388 <xTaskPriorityInherit+0xe8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4313      	orrs	r3, r2
 8007330:	4a15      	ldr	r2, [pc, #84]	; (8007388 <xTaskPriorityInherit+0xe8>)
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4a10      	ldr	r2, [pc, #64]	; (8007384 <xTaskPriorityInherit+0xe4>)
 8007342:	441a      	add	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3304      	adds	r3, #4
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7fe fa01 	bl	8005752 <vListInsertEnd>
 8007350:	e004      	b.n	800735c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <xTaskPriorityInherit+0xe0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800735c:	2301      	movs	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e008      	b.n	8007374 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007366:	4b06      	ldr	r3, [pc, #24]	; (8007380 <xTaskPriorityInherit+0xe0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	429a      	cmp	r2, r3
 800736e:	d201      	bcs.n	8007374 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007374:	68fb      	ldr	r3, [r7, #12]
	}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	2000092c 	.word	0x2000092c
 8007384:	20000930 	.word	0x20000930
 8007388:	20000a34 	.word	0x20000a34

0800738c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d06e      	beq.n	8007480 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073a2:	4b3a      	ldr	r3, [pc, #232]	; (800748c <xTaskPriorityDisinherit+0x100>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d00a      	beq.n	80073c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60fb      	str	r3, [r7, #12]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60bb      	str	r3, [r7, #8]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d044      	beq.n	8007480 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d140      	bne.n	8007480 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	3304      	adds	r3, #4
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fa02 	bl	800580c <uxListRemove>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d115      	bne.n	800743a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007412:	491f      	ldr	r1, [pc, #124]	; (8007490 <xTaskPriorityDisinherit+0x104>)
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <xTaskPriorityDisinherit+0xae>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	2201      	movs	r2, #1
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	43da      	mvns	r2, r3
 8007430:	4b18      	ldr	r3, [pc, #96]	; (8007494 <xTaskPriorityDisinherit+0x108>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4013      	ands	r3, r2
 8007436:	4a17      	ldr	r2, [pc, #92]	; (8007494 <xTaskPriorityDisinherit+0x108>)
 8007438:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f1c3 0207 	rsb	r2, r3, #7
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	2201      	movs	r2, #1
 8007454:	409a      	lsls	r2, r3
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <xTaskPriorityDisinherit+0x108>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4313      	orrs	r3, r2
 800745c:	4a0d      	ldr	r2, [pc, #52]	; (8007494 <xTaskPriorityDisinherit+0x108>)
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4613      	mov	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4a08      	ldr	r2, [pc, #32]	; (8007490 <xTaskPriorityDisinherit+0x104>)
 800746e:	441a      	add	r2, r3
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	3304      	adds	r3, #4
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f7fe f96b 	bl	8005752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007480:	697b      	ldr	r3, [r7, #20]
	}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	2000092c 	.word	0x2000092c
 8007490:	20000930 	.word	0x20000930
 8007494:	20000a34 	.word	0x20000a34

08007498 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074a6:	2301      	movs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d077      	beq.n	80075a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d902      	bls.n	80074de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	e002      	b.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d058      	beq.n	80075a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d153      	bne.n	80075a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80074f8:	4b2b      	ldr	r3, [pc, #172]	; (80075a8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d10a      	bne.n	8007518 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60bb      	str	r3, [r7, #8]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	2b00      	cmp	r3, #0
 800752a:	db04      	blt.n	8007536 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f1c3 0207 	rsb	r2, r3, #7
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	6959      	ldr	r1, [r3, #20]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4a19      	ldr	r2, [pc, #100]	; (80075ac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007546:	4413      	add	r3, r2
 8007548:	4299      	cmp	r1, r3
 800754a:	d129      	bne.n	80075a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	3304      	adds	r3, #4
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe f95b 	bl	800580c <uxListRemove>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	2201      	movs	r2, #1
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43da      	mvns	r2, r3
 8007568:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4013      	ands	r3, r2
 800756e:	4a10      	ldr	r2, [pc, #64]	; (80075b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007570:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	2201      	movs	r2, #1
 8007578:	409a      	lsls	r2, r3
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4313      	orrs	r3, r2
 8007580:	4a0b      	ldr	r2, [pc, #44]	; (80075b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a06      	ldr	r2, [pc, #24]	; (80075ac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007592:	441a      	add	r2, r3
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fe f8d9 	bl	8005752 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075a0:	bf00      	nop
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	2000092c 	.word	0x2000092c
 80075ac:	20000930 	.word	0x20000930
 80075b0:	20000a34 	.word	0x20000a34

080075b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075b8:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075c6:	3201      	adds	r2, #1
 80075c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80075ca:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075cc:	681b      	ldr	r3, [r3, #0]
	}
 80075ce:	4618      	mov	r0, r3
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	2000092c 	.word	0x2000092c

080075dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075e6:	4b29      	ldr	r3, [pc, #164]	; (800768c <prvAddCurrentTaskToDelayedList+0xb0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe f90a 	bl	800580c <uxListRemove>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	2201      	movs	r2, #1
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43da      	mvns	r2, r3
 800760c:	4b21      	ldr	r3, [pc, #132]	; (8007694 <prvAddCurrentTaskToDelayedList+0xb8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4013      	ands	r3, r2
 8007612:	4a20      	ldr	r2, [pc, #128]	; (8007694 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007614:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761c:	d10a      	bne.n	8007634 <prvAddCurrentTaskToDelayedList+0x58>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d007      	beq.n	8007634 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	481a      	ldr	r0, [pc, #104]	; (8007698 <prvAddCurrentTaskToDelayedList+0xbc>)
 800762e:	f7fe f890 	bl	8005752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007632:	e026      	b.n	8007682 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	429a      	cmp	r2, r3
 800764a:	d209      	bcs.n	8007660 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <prvAddCurrentTaskToDelayedList+0xc0>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe f89e 	bl	800579a <vListInsert>
}
 800765e:	e010      	b.n	8007682 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f7fe f894 	bl	800579a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	d202      	bcs.n	8007682 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6013      	str	r3, [r2, #0]
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000a30 	.word	0x20000a30
 8007690:	2000092c 	.word	0x2000092c
 8007694:	20000a34 	.word	0x20000a34
 8007698:	20000a18 	.word	0x20000a18
 800769c:	200009e8 	.word	0x200009e8
 80076a0:	200009e4 	.word	0x200009e4
 80076a4:	20000a4c 	.word	0x20000a4c

080076a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b04      	subs	r3, #4
 80076b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076d8:	4a0c      	ldr	r2, [pc, #48]	; (800770c <pxPortInitialiseStack+0x64>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3b14      	subs	r3, #20
 80076e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f06f 0202 	mvn.w	r2, #2
 80076f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b20      	subs	r3, #32
 80076fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076fe:	68fb      	ldr	r3, [r7, #12]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	08007711 	.word	0x08007711

08007710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <prvTaskExitError+0x54>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d00a      	beq.n	800773a <prvTaskExitError+0x2a>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60fb      	str	r3, [r7, #12]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <prvTaskExitError+0x28>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60bb      	str	r3, [r7, #8]
}
 800774c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800774e:	bf00      	nop
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0fc      	beq.n	8007750 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	2000000c 	.word	0x2000000c
	...

08007770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <pxCurrentTCBConst2>)
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	6808      	ldr	r0, [r1, #0]
 8007776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777a:	f380 8809 	msr	PSP, r0
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f04f 0000 	mov.w	r0, #0
 8007786:	f380 8811 	msr	BASEPRI, r0
 800778a:	4770      	bx	lr
 800778c:	f3af 8000 	nop.w

08007790 <pxCurrentTCBConst2>:
 8007790:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop

08007798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007798:	4808      	ldr	r0, [pc, #32]	; (80077bc <prvPortStartFirstTask+0x24>)
 800779a:	6800      	ldr	r0, [r0, #0]
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f380 8808 	msr	MSP, r0
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8814 	msr	CONTROL, r0
 80077aa:	b662      	cpsie	i
 80077ac:	b661      	cpsie	f
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	df00      	svc	0
 80077b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ba:	bf00      	nop
 80077bc:	e000ed08 	.word	0xe000ed08

080077c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077c6:	4b46      	ldr	r3, [pc, #280]	; (80078e0 <xPortStartScheduler+0x120>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a46      	ldr	r2, [pc, #280]	; (80078e4 <xPortStartScheduler+0x124>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10a      	bne.n	80077e6 <xPortStartScheduler+0x26>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077e6:	4b3e      	ldr	r3, [pc, #248]	; (80078e0 <xPortStartScheduler+0x120>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a3f      	ldr	r2, [pc, #252]	; (80078e8 <xPortStartScheduler+0x128>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10a      	bne.n	8007806 <xPortStartScheduler+0x46>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007806:	4b39      	ldr	r3, [pc, #228]	; (80078ec <xPortStartScheduler+0x12c>)
 8007808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007828:	b2da      	uxtb	r2, r3
 800782a:	4b31      	ldr	r3, [pc, #196]	; (80078f0 <xPortStartScheduler+0x130>)
 800782c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <xPortStartScheduler+0x134>)
 8007830:	2207      	movs	r2, #7
 8007832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007834:	e009      	b.n	800784a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007836:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <xPortStartScheduler+0x134>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a2d      	ldr	r2, [pc, #180]	; (80078f4 <xPortStartScheduler+0x134>)
 800783e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	b2db      	uxtb	r3, r3
 8007848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b80      	cmp	r3, #128	; 0x80
 8007854:	d0ef      	beq.n	8007836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007856:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <xPortStartScheduler+0x134>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1c3 0307 	rsb	r3, r3, #7
 800785e:	2b04      	cmp	r3, #4
 8007860:	d00a      	beq.n	8007878 <xPortStartScheduler+0xb8>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60bb      	str	r3, [r7, #8]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <xPortStartScheduler+0x134>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <xPortStartScheduler+0x134>)
 8007880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <xPortStartScheduler+0x134>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800788a:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <xPortStartScheduler+0x134>)
 800788c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	b2da      	uxtb	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007896:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <xPortStartScheduler+0x138>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <xPortStartScheduler+0x138>)
 800789c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <xPortStartScheduler+0x138>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a14      	ldr	r2, [pc, #80]	; (80078f8 <xPortStartScheduler+0x138>)
 80078a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ae:	f000 f8dd 	bl	8007a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078b2:	4b12      	ldr	r3, [pc, #72]	; (80078fc <xPortStartScheduler+0x13c>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078b8:	f000 f8fc 	bl	8007ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078bc:	4b10      	ldr	r3, [pc, #64]	; (8007900 <xPortStartScheduler+0x140>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a0f      	ldr	r2, [pc, #60]	; (8007900 <xPortStartScheduler+0x140>)
 80078c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078c8:	f7ff ff66 	bl	8007798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078cc:	f7ff fa84 	bl	8006dd8 <vTaskSwitchContext>
	prvTaskExitError();
 80078d0:	f7ff ff1e 	bl	8007710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed00 	.word	0xe000ed00
 80078e4:	410fc271 	.word	0x410fc271
 80078e8:	410fc270 	.word	0x410fc270
 80078ec:	e000e400 	.word	0xe000e400
 80078f0:	20000a58 	.word	0x20000a58
 80078f4:	20000a5c 	.word	0x20000a5c
 80078f8:	e000ed20 	.word	0xe000ed20
 80078fc:	2000000c 	.word	0x2000000c
 8007900:	e000ef34 	.word	0xe000ef34

08007904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	607b      	str	r3, [r7, #4]
}
 800791c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <vPortEnterCritical+0x58>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <vPortEnterCritical+0x58>)
 8007926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007928:	4b0c      	ldr	r3, [pc, #48]	; (800795c <vPortEnterCritical+0x58>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d10f      	bne.n	8007950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <vPortEnterCritical+0x5c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <vPortEnterCritical+0x4c>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	603b      	str	r3, [r7, #0]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vPortEnterCritical+0x4a>
	}
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	2000000c 	.word	0x2000000c
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <vPortExitCritical+0x50>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <vPortExitCritical+0x24>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	607b      	str	r3, [r7, #4]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <vPortExitCritical+0x50>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3b01      	subs	r3, #1
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <vPortExitCritical+0x50>)
 8007990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <vPortExitCritical+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d105      	bne.n	80079a6 <vPortExitCritical+0x42>
 800799a:	2300      	movs	r3, #0
 800799c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f383 8811 	msr	BASEPRI, r3
}
 80079a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	2000000c 	.word	0x2000000c
	...

080079c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079c0:	f3ef 8009 	mrs	r0, PSP
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <pxCurrentTCBConst>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	f01e 0f10 	tst.w	lr, #16
 80079d0:	bf08      	it	eq
 80079d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	6010      	str	r0, [r2, #0]
 80079dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079e4:	f380 8811 	msr	BASEPRI, r0
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f7ff f9f2 	bl	8006dd8 <vTaskSwitchContext>
 80079f4:	f04f 0000 	mov.w	r0, #0
 80079f8:	f380 8811 	msr	BASEPRI, r0
 80079fc:	bc09      	pop	{r0, r3}
 80079fe:	6819      	ldr	r1, [r3, #0]
 8007a00:	6808      	ldr	r0, [r1, #0]
 8007a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a06:	f01e 0f10 	tst.w	lr, #16
 8007a0a:	bf08      	it	eq
 8007a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a10:	f380 8809 	msr	PSP, r0
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst>:
 8007a20:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a42:	f7ff f911 	bl	8006c68 <xTaskIncrementTick>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <SysTick_Handler+0x40>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
}
 8007a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <vPortSetupTimerInterrupt+0x38>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <vPortSetupTimerInterrupt+0x3c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <vPortSetupTimerInterrupt+0x40>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <vPortSetupTimerInterrupt+0x44>)
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	e000e010 	.word	0xe000e010
 8007aa4:	e000e018 	.word	0xe000e018
 8007aa8:	20000000 	.word	0x20000000
 8007aac:	10624dd3 	.word	0x10624dd3
 8007ab0:	e000e014 	.word	0xe000e014

08007ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ac4 <vPortEnableVFP+0x10>
 8007ab8:	6801      	ldr	r1, [r0, #0]
 8007aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007abe:	6001      	str	r1, [r0, #0]
 8007ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ac2:	bf00      	nop
 8007ac4:	e000ed88 	.word	0xe000ed88

08007ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ace:	f3ef 8305 	mrs	r3, IPSR
 8007ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b0f      	cmp	r3, #15
 8007ad8:	d914      	bls.n	8007b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <vPortValidateInterruptPriority+0x70>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ae4:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <vPortValidateInterruptPriority+0x74>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	7afa      	ldrb	r2, [r7, #11]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d20a      	bcs.n	8007b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b04:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <vPortValidateInterruptPriority+0x78>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <vPortValidateInterruptPriority+0x7c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d90a      	bls.n	8007b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	603b      	str	r3, [r7, #0]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <vPortValidateInterruptPriority+0x60>
	}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	e000e3f0 	.word	0xe000e3f0
 8007b3c:	20000a58 	.word	0x20000a58
 8007b40:	e000ed0c 	.word	0xe000ed0c
 8007b44:	20000a5c 	.word	0x20000a5c

08007b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b54:	f7fe ffde 	bl	8006b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b58:	4b5b      	ldr	r3, [pc, #364]	; (8007cc8 <pvPortMalloc+0x180>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b60:	f000 f920 	bl	8007da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b64:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <pvPortMalloc+0x184>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 8093 	bne.w	8007c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01d      	beq.n	8007bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b78:	2208      	movs	r2, #8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f023 0307 	bic.w	r3, r3, #7
 8007b90:	3308      	adds	r3, #8
 8007b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	617b      	str	r3, [r7, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d06e      	beq.n	8007c98 <pvPortMalloc+0x150>
 8007bba:	4b45      	ldr	r3, [pc, #276]	; (8007cd0 <pvPortMalloc+0x188>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d869      	bhi.n	8007c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bc4:	4b43      	ldr	r3, [pc, #268]	; (8007cd4 <pvPortMalloc+0x18c>)
 8007bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bc8:	4b42      	ldr	r3, [pc, #264]	; (8007cd4 <pvPortMalloc+0x18c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bce:	e004      	b.n	8007bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d903      	bls.n	8007bec <pvPortMalloc+0xa4>
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f1      	bne.n	8007bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bec:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <pvPortMalloc+0x180>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d050      	beq.n	8007c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	2308      	movs	r3, #8
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d91f      	bls.n	8007c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <pvPortMalloc+0xf8>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	613b      	str	r3, [r7, #16]
}
 8007c3c:	bf00      	nop
 8007c3e:	e7fe      	b.n	8007c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c52:	69b8      	ldr	r0, [r7, #24]
 8007c54:	f000 f908 	bl	8007e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c58:	4b1d      	ldr	r3, [pc, #116]	; (8007cd0 <pvPortMalloc+0x188>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	4a1b      	ldr	r2, [pc, #108]	; (8007cd0 <pvPortMalloc+0x188>)
 8007c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c66:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <pvPortMalloc+0x188>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <pvPortMalloc+0x190>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d203      	bcs.n	8007c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c72:	4b17      	ldr	r3, [pc, #92]	; (8007cd0 <pvPortMalloc+0x188>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <pvPortMalloc+0x190>)
 8007c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <pvPortMalloc+0x184>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <pvPortMalloc+0x194>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3301      	adds	r3, #1
 8007c94:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <pvPortMalloc+0x194>)
 8007c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c98:	f7fe ff4a 	bl	8006b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <pvPortMalloc+0x174>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <pvPortMalloc+0x172>
	return pvReturn;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3728      	adds	r7, #40	; 0x28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20003178 	.word	0x20003178
 8007ccc:	2000318c 	.word	0x2000318c
 8007cd0:	2000317c 	.word	0x2000317c
 8007cd4:	20003170 	.word	0x20003170
 8007cd8:	20003180 	.word	0x20003180
 8007cdc:	20003184 	.word	0x20003184

08007ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d04d      	beq.n	8007d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	425b      	negs	r3, r3
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <vPortFree+0xb8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <vPortFree+0x44>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60fb      	str	r3, [r7, #12]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <vPortFree+0x62>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	60bb      	str	r3, [r7, #8]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <vPortFree+0xb8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01e      	beq.n	8007d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11a      	bne.n	8007d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <vPortFree+0xb8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	43db      	mvns	r3, r3
 8007d62:	401a      	ands	r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d68:	f7fe fed4 	bl	8006b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <vPortFree+0xbc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4413      	add	r3, r2
 8007d76:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <vPortFree+0xbc>)
 8007d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d7a:	6938      	ldr	r0, [r7, #16]
 8007d7c:	f000 f874 	bl	8007e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <vPortFree+0xc0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	4a06      	ldr	r2, [pc, #24]	; (8007da0 <vPortFree+0xc0>)
 8007d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d8a:	f7fe fed1 	bl	8006b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d8e:	bf00      	nop
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000318c 	.word	0x2000318c
 8007d9c:	2000317c 	.word	0x2000317c
 8007da0:	20003188 	.word	0x20003188

08007da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007daa:	f242 7310 	movw	r3, #10000	; 0x2710
 8007dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007db0:	4b27      	ldr	r3, [pc, #156]	; (8007e50 <prvHeapInit+0xac>)
 8007db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00c      	beq.n	8007dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	4a1f      	ldr	r2, [pc, #124]	; (8007e50 <prvHeapInit+0xac>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ddc:	4a1d      	ldr	r2, [pc, #116]	; (8007e54 <prvHeapInit+0xb0>)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007de2:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <prvHeapInit+0xb0>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007df0:	2208      	movs	r2, #8
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0307 	bic.w	r3, r3, #7
 8007dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a15      	ldr	r2, [pc, #84]	; (8007e58 <prvHeapInit+0xb4>)
 8007e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e06:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <prvHeapInit+0xb4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e0e:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <prvHeapInit+0xb4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <prvHeapInit+0xb4>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4a0a      	ldr	r2, [pc, #40]	; (8007e5c <prvHeapInit+0xb8>)
 8007e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <prvHeapInit+0xbc>)
 8007e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e3c:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <prvHeapInit+0xc0>)
 8007e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20000a60 	.word	0x20000a60
 8007e54:	20003170 	.word	0x20003170
 8007e58:	20003178 	.word	0x20003178
 8007e5c:	20003180 	.word	0x20003180
 8007e60:	2000317c 	.word	0x2000317c
 8007e64:	2000318c 	.word	0x2000318c

08007e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e70:	4b28      	ldr	r3, [pc, #160]	; (8007f14 <prvInsertBlockIntoFreeList+0xac>)
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e002      	b.n	8007e7c <prvInsertBlockIntoFreeList+0x14>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d8f7      	bhi.n	8007e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4413      	add	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d108      	bne.n	8007eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d118      	bne.n	8007ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d00d      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e008      	b.n	8007ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e003      	b.n	8007ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d002      	beq.n	8007f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f06:	bf00      	nop
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20003170 	.word	0x20003170
 8007f18:	20003178 	.word	0x20003178

08007f1c <atof>:
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	f001 b8d9 	b.w	80090d4 <strtod>

08007f22 <atoi>:
 8007f22:	220a      	movs	r2, #10
 8007f24:	2100      	movs	r1, #0
 8007f26:	f001 b963 	b.w	80091f0 <strtol>
	...

08007f2c <__errno>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <__errno+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20000010 	.word	0x20000010

08007f38 <std>:
 8007f38:	2300      	movs	r3, #0
 8007f3a:	b510      	push	{r4, lr}
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f46:	6083      	str	r3, [r0, #8]
 8007f48:	8181      	strh	r1, [r0, #12]
 8007f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f4c:	81c2      	strh	r2, [r0, #14]
 8007f4e:	6183      	str	r3, [r0, #24]
 8007f50:	4619      	mov	r1, r3
 8007f52:	2208      	movs	r2, #8
 8007f54:	305c      	adds	r0, #92	; 0x5c
 8007f56:	f000 f91a 	bl	800818e <memset>
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <std+0x38>)
 8007f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <std+0x3c>)
 8007f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f62:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <std+0x40>)
 8007f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <std+0x44>)
 8007f68:	6224      	str	r4, [r4, #32]
 8007f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f6c:	bd10      	pop	{r4, pc}
 8007f6e:	bf00      	nop
 8007f70:	080083ed 	.word	0x080083ed
 8007f74:	0800840f 	.word	0x0800840f
 8007f78:	08008447 	.word	0x08008447
 8007f7c:	0800846b 	.word	0x0800846b

08007f80 <_cleanup_r>:
 8007f80:	4901      	ldr	r1, [pc, #4]	; (8007f88 <_cleanup_r+0x8>)
 8007f82:	f000 b8af 	b.w	80080e4 <_fwalk_reent>
 8007f86:	bf00      	nop
 8007f88:	08009355 	.word	0x08009355

08007f8c <__sfmoreglue>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	2268      	movs	r2, #104	; 0x68
 8007f90:	1e4d      	subs	r5, r1, #1
 8007f92:	4355      	muls	r5, r2
 8007f94:	460e      	mov	r6, r1
 8007f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f9a:	f000 f921 	bl	80081e0 <_malloc_r>
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	b140      	cbz	r0, 8007fb4 <__sfmoreglue+0x28>
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8007fa8:	300c      	adds	r0, #12
 8007faa:	60a0      	str	r0, [r4, #8]
 8007fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fb0:	f000 f8ed 	bl	800818e <memset>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}

08007fb8 <__sfp_lock_acquire>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__sfp_lock_acquire+0x8>)
 8007fba:	f000 b8d8 	b.w	800816e <__retarget_lock_acquire_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	20003191 	.word	0x20003191

08007fc4 <__sfp_lock_release>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__sfp_lock_release+0x8>)
 8007fc6:	f000 b8d3 	b.w	8008170 <__retarget_lock_release_recursive>
 8007fca:	bf00      	nop
 8007fcc:	20003191 	.word	0x20003191

08007fd0 <__sinit_lock_acquire>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__sinit_lock_acquire+0x8>)
 8007fd2:	f000 b8cc 	b.w	800816e <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	20003192 	.word	0x20003192

08007fdc <__sinit_lock_release>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__sinit_lock_release+0x8>)
 8007fde:	f000 b8c7 	b.w	8008170 <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20003192 	.word	0x20003192

08007fe8 <__sinit>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	4604      	mov	r4, r0
 8007fec:	f7ff fff0 	bl	8007fd0 <__sinit_lock_acquire>
 8007ff0:	69a3      	ldr	r3, [r4, #24]
 8007ff2:	b11b      	cbz	r3, 8007ffc <__sinit+0x14>
 8007ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff8:	f7ff bff0 	b.w	8007fdc <__sinit_lock_release>
 8007ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008000:	6523      	str	r3, [r4, #80]	; 0x50
 8008002:	4b13      	ldr	r3, [pc, #76]	; (8008050 <__sinit+0x68>)
 8008004:	4a13      	ldr	r2, [pc, #76]	; (8008054 <__sinit+0x6c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	62a2      	str	r2, [r4, #40]	; 0x28
 800800a:	42a3      	cmp	r3, r4
 800800c:	bf04      	itt	eq
 800800e:	2301      	moveq	r3, #1
 8008010:	61a3      	streq	r3, [r4, #24]
 8008012:	4620      	mov	r0, r4
 8008014:	f000 f820 	bl	8008058 <__sfp>
 8008018:	6060      	str	r0, [r4, #4]
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f81c 	bl	8008058 <__sfp>
 8008020:	60a0      	str	r0, [r4, #8]
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f818 	bl	8008058 <__sfp>
 8008028:	2200      	movs	r2, #0
 800802a:	60e0      	str	r0, [r4, #12]
 800802c:	2104      	movs	r1, #4
 800802e:	6860      	ldr	r0, [r4, #4]
 8008030:	f7ff ff82 	bl	8007f38 <std>
 8008034:	68a0      	ldr	r0, [r4, #8]
 8008036:	2201      	movs	r2, #1
 8008038:	2109      	movs	r1, #9
 800803a:	f7ff ff7d 	bl	8007f38 <std>
 800803e:	68e0      	ldr	r0, [r4, #12]
 8008040:	2202      	movs	r2, #2
 8008042:	2112      	movs	r1, #18
 8008044:	f7ff ff78 	bl	8007f38 <std>
 8008048:	2301      	movs	r3, #1
 800804a:	61a3      	str	r3, [r4, #24]
 800804c:	e7d2      	b.n	8007ff4 <__sinit+0xc>
 800804e:	bf00      	nop
 8008050:	0800b0c4 	.word	0x0800b0c4
 8008054:	08007f81 	.word	0x08007f81

08008058 <__sfp>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	4607      	mov	r7, r0
 800805c:	f7ff ffac 	bl	8007fb8 <__sfp_lock_acquire>
 8008060:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <__sfp+0x84>)
 8008062:	681e      	ldr	r6, [r3, #0]
 8008064:	69b3      	ldr	r3, [r6, #24]
 8008066:	b913      	cbnz	r3, 800806e <__sfp+0x16>
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff ffbd 	bl	8007fe8 <__sinit>
 800806e:	3648      	adds	r6, #72	; 0x48
 8008070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008074:	3b01      	subs	r3, #1
 8008076:	d503      	bpl.n	8008080 <__sfp+0x28>
 8008078:	6833      	ldr	r3, [r6, #0]
 800807a:	b30b      	cbz	r3, 80080c0 <__sfp+0x68>
 800807c:	6836      	ldr	r6, [r6, #0]
 800807e:	e7f7      	b.n	8008070 <__sfp+0x18>
 8008080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008084:	b9d5      	cbnz	r5, 80080bc <__sfp+0x64>
 8008086:	4b16      	ldr	r3, [pc, #88]	; (80080e0 <__sfp+0x88>)
 8008088:	60e3      	str	r3, [r4, #12]
 800808a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800808e:	6665      	str	r5, [r4, #100]	; 0x64
 8008090:	f000 f86c 	bl	800816c <__retarget_lock_init_recursive>
 8008094:	f7ff ff96 	bl	8007fc4 <__sfp_lock_release>
 8008098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800809c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080a0:	6025      	str	r5, [r4, #0]
 80080a2:	61a5      	str	r5, [r4, #24]
 80080a4:	2208      	movs	r2, #8
 80080a6:	4629      	mov	r1, r5
 80080a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080ac:	f000 f86f 	bl	800818e <memset>
 80080b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080b8:	4620      	mov	r0, r4
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	3468      	adds	r4, #104	; 0x68
 80080be:	e7d9      	b.n	8008074 <__sfp+0x1c>
 80080c0:	2104      	movs	r1, #4
 80080c2:	4638      	mov	r0, r7
 80080c4:	f7ff ff62 	bl	8007f8c <__sfmoreglue>
 80080c8:	4604      	mov	r4, r0
 80080ca:	6030      	str	r0, [r6, #0]
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d1d5      	bne.n	800807c <__sfp+0x24>
 80080d0:	f7ff ff78 	bl	8007fc4 <__sfp_lock_release>
 80080d4:	230c      	movs	r3, #12
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	e7ee      	b.n	80080b8 <__sfp+0x60>
 80080da:	bf00      	nop
 80080dc:	0800b0c4 	.word	0x0800b0c4
 80080e0:	ffff0001 	.word	0xffff0001

080080e4 <_fwalk_reent>:
 80080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	4606      	mov	r6, r0
 80080ea:	4688      	mov	r8, r1
 80080ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080f0:	2700      	movs	r7, #0
 80080f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080f6:	f1b9 0901 	subs.w	r9, r9, #1
 80080fa:	d505      	bpl.n	8008108 <_fwalk_reent+0x24>
 80080fc:	6824      	ldr	r4, [r4, #0]
 80080fe:	2c00      	cmp	r4, #0
 8008100:	d1f7      	bne.n	80080f2 <_fwalk_reent+0xe>
 8008102:	4638      	mov	r0, r7
 8008104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008108:	89ab      	ldrh	r3, [r5, #12]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d907      	bls.n	800811e <_fwalk_reent+0x3a>
 800810e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008112:	3301      	adds	r3, #1
 8008114:	d003      	beq.n	800811e <_fwalk_reent+0x3a>
 8008116:	4629      	mov	r1, r5
 8008118:	4630      	mov	r0, r6
 800811a:	47c0      	blx	r8
 800811c:	4307      	orrs	r7, r0
 800811e:	3568      	adds	r5, #104	; 0x68
 8008120:	e7e9      	b.n	80080f6 <_fwalk_reent+0x12>
	...

08008124 <__libc_init_array>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4d0d      	ldr	r5, [pc, #52]	; (800815c <__libc_init_array+0x38>)
 8008128:	4c0d      	ldr	r4, [pc, #52]	; (8008160 <__libc_init_array+0x3c>)
 800812a:	1b64      	subs	r4, r4, r5
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	2600      	movs	r6, #0
 8008130:	42a6      	cmp	r6, r4
 8008132:	d109      	bne.n	8008148 <__libc_init_array+0x24>
 8008134:	4d0b      	ldr	r5, [pc, #44]	; (8008164 <__libc_init_array+0x40>)
 8008136:	4c0c      	ldr	r4, [pc, #48]	; (8008168 <__libc_init_array+0x44>)
 8008138:	f002 ff04 	bl	800af44 <_init>
 800813c:	1b64      	subs	r4, r4, r5
 800813e:	10a4      	asrs	r4, r4, #2
 8008140:	2600      	movs	r6, #0
 8008142:	42a6      	cmp	r6, r4
 8008144:	d105      	bne.n	8008152 <__libc_init_array+0x2e>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	f855 3b04 	ldr.w	r3, [r5], #4
 800814c:	4798      	blx	r3
 800814e:	3601      	adds	r6, #1
 8008150:	e7ee      	b.n	8008130 <__libc_init_array+0xc>
 8008152:	f855 3b04 	ldr.w	r3, [r5], #4
 8008156:	4798      	blx	r3
 8008158:	3601      	adds	r6, #1
 800815a:	e7f2      	b.n	8008142 <__libc_init_array+0x1e>
 800815c:	0800b49c 	.word	0x0800b49c
 8008160:	0800b49c 	.word	0x0800b49c
 8008164:	0800b49c 	.word	0x0800b49c
 8008168:	0800b4a0 	.word	0x0800b4a0

0800816c <__retarget_lock_init_recursive>:
 800816c:	4770      	bx	lr

0800816e <__retarget_lock_acquire_recursive>:
 800816e:	4770      	bx	lr

08008170 <__retarget_lock_release_recursive>:
 8008170:	4770      	bx	lr

08008172 <memcpy>:
 8008172:	440a      	add	r2, r1
 8008174:	4291      	cmp	r1, r2
 8008176:	f100 33ff 	add.w	r3, r0, #4294967295
 800817a:	d100      	bne.n	800817e <memcpy+0xc>
 800817c:	4770      	bx	lr
 800817e:	b510      	push	{r4, lr}
 8008180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008188:	4291      	cmp	r1, r2
 800818a:	d1f9      	bne.n	8008180 <memcpy+0xe>
 800818c:	bd10      	pop	{r4, pc}

0800818e <memset>:
 800818e:	4402      	add	r2, r0
 8008190:	4603      	mov	r3, r0
 8008192:	4293      	cmp	r3, r2
 8008194:	d100      	bne.n	8008198 <memset+0xa>
 8008196:	4770      	bx	lr
 8008198:	f803 1b01 	strb.w	r1, [r3], #1
 800819c:	e7f9      	b.n	8008192 <memset+0x4>
	...

080081a0 <sbrk_aligned>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4e0e      	ldr	r6, [pc, #56]	; (80081dc <sbrk_aligned+0x3c>)
 80081a4:	460c      	mov	r4, r1
 80081a6:	6831      	ldr	r1, [r6, #0]
 80081a8:	4605      	mov	r5, r0
 80081aa:	b911      	cbnz	r1, 80081b2 <sbrk_aligned+0x12>
 80081ac:	f000 f90e 	bl	80083cc <_sbrk_r>
 80081b0:	6030      	str	r0, [r6, #0]
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 f909 	bl	80083cc <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d00a      	beq.n	80081d4 <sbrk_aligned+0x34>
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d007      	beq.n	80081d8 <sbrk_aligned+0x38>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f8fe 	bl	80083cc <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d101      	bne.n	80081d8 <sbrk_aligned+0x38>
 80081d4:	f04f 34ff 	mov.w	r4, #4294967295
 80081d8:	4620      	mov	r0, r4
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	20003198 	.word	0x20003198

080081e0 <_malloc_r>:
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	1ccd      	adds	r5, r1, #3
 80081e6:	f025 0503 	bic.w	r5, r5, #3
 80081ea:	3508      	adds	r5, #8
 80081ec:	2d0c      	cmp	r5, #12
 80081ee:	bf38      	it	cc
 80081f0:	250c      	movcc	r5, #12
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	4607      	mov	r7, r0
 80081f6:	db01      	blt.n	80081fc <_malloc_r+0x1c>
 80081f8:	42a9      	cmp	r1, r5
 80081fa:	d905      	bls.n	8008208 <_malloc_r+0x28>
 80081fc:	230c      	movs	r3, #12
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	2600      	movs	r6, #0
 8008202:	4630      	mov	r0, r6
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	4e2e      	ldr	r6, [pc, #184]	; (80082c4 <_malloc_r+0xe4>)
 800820a:	f001 fc73 	bl	8009af4 <__malloc_lock>
 800820e:	6833      	ldr	r3, [r6, #0]
 8008210:	461c      	mov	r4, r3
 8008212:	bb34      	cbnz	r4, 8008262 <_malloc_r+0x82>
 8008214:	4629      	mov	r1, r5
 8008216:	4638      	mov	r0, r7
 8008218:	f7ff ffc2 	bl	80081a0 <sbrk_aligned>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	4604      	mov	r4, r0
 8008220:	d14d      	bne.n	80082be <_malloc_r+0xde>
 8008222:	6834      	ldr	r4, [r6, #0]
 8008224:	4626      	mov	r6, r4
 8008226:	2e00      	cmp	r6, #0
 8008228:	d140      	bne.n	80082ac <_malloc_r+0xcc>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	4631      	mov	r1, r6
 800822e:	4638      	mov	r0, r7
 8008230:	eb04 0803 	add.w	r8, r4, r3
 8008234:	f000 f8ca 	bl	80083cc <_sbrk_r>
 8008238:	4580      	cmp	r8, r0
 800823a:	d13a      	bne.n	80082b2 <_malloc_r+0xd2>
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	3503      	adds	r5, #3
 8008240:	1a6d      	subs	r5, r5, r1
 8008242:	f025 0503 	bic.w	r5, r5, #3
 8008246:	3508      	adds	r5, #8
 8008248:	2d0c      	cmp	r5, #12
 800824a:	bf38      	it	cc
 800824c:	250c      	movcc	r5, #12
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ffa5 	bl	80081a0 <sbrk_aligned>
 8008256:	3001      	adds	r0, #1
 8008258:	d02b      	beq.n	80082b2 <_malloc_r+0xd2>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	442b      	add	r3, r5
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	e00e      	b.n	8008280 <_malloc_r+0xa0>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	1b52      	subs	r2, r2, r5
 8008266:	d41e      	bmi.n	80082a6 <_malloc_r+0xc6>
 8008268:	2a0b      	cmp	r2, #11
 800826a:	d916      	bls.n	800829a <_malloc_r+0xba>
 800826c:	1961      	adds	r1, r4, r5
 800826e:	42a3      	cmp	r3, r4
 8008270:	6025      	str	r5, [r4, #0]
 8008272:	bf18      	it	ne
 8008274:	6059      	strne	r1, [r3, #4]
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	bf08      	it	eq
 800827a:	6031      	streq	r1, [r6, #0]
 800827c:	5162      	str	r2, [r4, r5]
 800827e:	604b      	str	r3, [r1, #4]
 8008280:	4638      	mov	r0, r7
 8008282:	f104 060b 	add.w	r6, r4, #11
 8008286:	f001 fc3b 	bl	8009b00 <__malloc_unlock>
 800828a:	f026 0607 	bic.w	r6, r6, #7
 800828e:	1d23      	adds	r3, r4, #4
 8008290:	1af2      	subs	r2, r6, r3
 8008292:	d0b6      	beq.n	8008202 <_malloc_r+0x22>
 8008294:	1b9b      	subs	r3, r3, r6
 8008296:	50a3      	str	r3, [r4, r2]
 8008298:	e7b3      	b.n	8008202 <_malloc_r+0x22>
 800829a:	6862      	ldr	r2, [r4, #4]
 800829c:	42a3      	cmp	r3, r4
 800829e:	bf0c      	ite	eq
 80082a0:	6032      	streq	r2, [r6, #0]
 80082a2:	605a      	strne	r2, [r3, #4]
 80082a4:	e7ec      	b.n	8008280 <_malloc_r+0xa0>
 80082a6:	4623      	mov	r3, r4
 80082a8:	6864      	ldr	r4, [r4, #4]
 80082aa:	e7b2      	b.n	8008212 <_malloc_r+0x32>
 80082ac:	4634      	mov	r4, r6
 80082ae:	6876      	ldr	r6, [r6, #4]
 80082b0:	e7b9      	b.n	8008226 <_malloc_r+0x46>
 80082b2:	230c      	movs	r3, #12
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	4638      	mov	r0, r7
 80082b8:	f001 fc22 	bl	8009b00 <__malloc_unlock>
 80082bc:	e7a1      	b.n	8008202 <_malloc_r+0x22>
 80082be:	6025      	str	r5, [r4, #0]
 80082c0:	e7de      	b.n	8008280 <_malloc_r+0xa0>
 80082c2:	bf00      	nop
 80082c4:	20003194 	.word	0x20003194

080082c8 <iprintf>:
 80082c8:	b40f      	push	{r0, r1, r2, r3}
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <iprintf+0x2c>)
 80082cc:	b513      	push	{r0, r1, r4, lr}
 80082ce:	681c      	ldr	r4, [r3, #0]
 80082d0:	b124      	cbz	r4, 80082dc <iprintf+0x14>
 80082d2:	69a3      	ldr	r3, [r4, #24]
 80082d4:	b913      	cbnz	r3, 80082dc <iprintf+0x14>
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7ff fe86 	bl	8007fe8 <__sinit>
 80082dc:	ab05      	add	r3, sp, #20
 80082de:	9a04      	ldr	r2, [sp, #16]
 80082e0:	68a1      	ldr	r1, [r4, #8]
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	4620      	mov	r0, r4
 80082e6:	f002 f95f 	bl	800a5a8 <_vfiprintf_r>
 80082ea:	b002      	add	sp, #8
 80082ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f0:	b004      	add	sp, #16
 80082f2:	4770      	bx	lr
 80082f4:	20000010 	.word	0x20000010

080082f8 <cleanup_glue>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	460c      	mov	r4, r1
 80082fc:	6809      	ldr	r1, [r1, #0]
 80082fe:	4605      	mov	r5, r0
 8008300:	b109      	cbz	r1, 8008306 <cleanup_glue+0xe>
 8008302:	f7ff fff9 	bl	80082f8 <cleanup_glue>
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830e:	f002 b8d5 	b.w	800a4bc <_free_r>
	...

08008314 <_reclaim_reent>:
 8008314:	4b2c      	ldr	r3, [pc, #176]	; (80083c8 <_reclaim_reent+0xb4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4283      	cmp	r3, r0
 800831a:	b570      	push	{r4, r5, r6, lr}
 800831c:	4604      	mov	r4, r0
 800831e:	d051      	beq.n	80083c4 <_reclaim_reent+0xb0>
 8008320:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008322:	b143      	cbz	r3, 8008336 <_reclaim_reent+0x22>
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d14a      	bne.n	80083c0 <_reclaim_reent+0xac>
 800832a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832c:	6819      	ldr	r1, [r3, #0]
 800832e:	b111      	cbz	r1, 8008336 <_reclaim_reent+0x22>
 8008330:	4620      	mov	r0, r4
 8008332:	f002 f8c3 	bl	800a4bc <_free_r>
 8008336:	6961      	ldr	r1, [r4, #20]
 8008338:	b111      	cbz	r1, 8008340 <_reclaim_reent+0x2c>
 800833a:	4620      	mov	r0, r4
 800833c:	f002 f8be 	bl	800a4bc <_free_r>
 8008340:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008342:	b111      	cbz	r1, 800834a <_reclaim_reent+0x36>
 8008344:	4620      	mov	r0, r4
 8008346:	f002 f8b9 	bl	800a4bc <_free_r>
 800834a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800834c:	b111      	cbz	r1, 8008354 <_reclaim_reent+0x40>
 800834e:	4620      	mov	r0, r4
 8008350:	f002 f8b4 	bl	800a4bc <_free_r>
 8008354:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008356:	b111      	cbz	r1, 800835e <_reclaim_reent+0x4a>
 8008358:	4620      	mov	r0, r4
 800835a:	f002 f8af 	bl	800a4bc <_free_r>
 800835e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008360:	b111      	cbz	r1, 8008368 <_reclaim_reent+0x54>
 8008362:	4620      	mov	r0, r4
 8008364:	f002 f8aa 	bl	800a4bc <_free_r>
 8008368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800836a:	b111      	cbz	r1, 8008372 <_reclaim_reent+0x5e>
 800836c:	4620      	mov	r0, r4
 800836e:	f002 f8a5 	bl	800a4bc <_free_r>
 8008372:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008374:	b111      	cbz	r1, 800837c <_reclaim_reent+0x68>
 8008376:	4620      	mov	r0, r4
 8008378:	f002 f8a0 	bl	800a4bc <_free_r>
 800837c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800837e:	b111      	cbz	r1, 8008386 <_reclaim_reent+0x72>
 8008380:	4620      	mov	r0, r4
 8008382:	f002 f89b 	bl	800a4bc <_free_r>
 8008386:	69a3      	ldr	r3, [r4, #24]
 8008388:	b1e3      	cbz	r3, 80083c4 <_reclaim_reent+0xb0>
 800838a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800838c:	4620      	mov	r0, r4
 800838e:	4798      	blx	r3
 8008390:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008392:	b1b9      	cbz	r1, 80083c4 <_reclaim_reent+0xb0>
 8008394:	4620      	mov	r0, r4
 8008396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800839a:	f7ff bfad 	b.w	80082f8 <cleanup_glue>
 800839e:	5949      	ldr	r1, [r1, r5]
 80083a0:	b941      	cbnz	r1, 80083b4 <_reclaim_reent+0xa0>
 80083a2:	3504      	adds	r5, #4
 80083a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083a6:	2d80      	cmp	r5, #128	; 0x80
 80083a8:	68d9      	ldr	r1, [r3, #12]
 80083aa:	d1f8      	bne.n	800839e <_reclaim_reent+0x8a>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f002 f885 	bl	800a4bc <_free_r>
 80083b2:	e7ba      	b.n	800832a <_reclaim_reent+0x16>
 80083b4:	680e      	ldr	r6, [r1, #0]
 80083b6:	4620      	mov	r0, r4
 80083b8:	f002 f880 	bl	800a4bc <_free_r>
 80083bc:	4631      	mov	r1, r6
 80083be:	e7ef      	b.n	80083a0 <_reclaim_reent+0x8c>
 80083c0:	2500      	movs	r5, #0
 80083c2:	e7ef      	b.n	80083a4 <_reclaim_reent+0x90>
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	bf00      	nop
 80083c8:	20000010 	.word	0x20000010

080083cc <_sbrk_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	; (80083e8 <_sbrk_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f9 fd94 	bl	8001f04 <_sbrk>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_sbrk_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_sbrk_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	2000319c 	.word	0x2000319c

080083ec <__sread>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	f002 fb9c 	bl	800ab30 <_read_r>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	bfab      	itete	ge
 80083fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008400:	181b      	addge	r3, r3, r0
 8008402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008406:	bfac      	ite	ge
 8008408:	6563      	strge	r3, [r4, #84]	; 0x54
 800840a:	81a3      	strhlt	r3, [r4, #12]
 800840c:	bd10      	pop	{r4, pc}

0800840e <__swrite>:
 800840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	461f      	mov	r7, r3
 8008414:	898b      	ldrh	r3, [r1, #12]
 8008416:	05db      	lsls	r3, r3, #23
 8008418:	4605      	mov	r5, r0
 800841a:	460c      	mov	r4, r1
 800841c:	4616      	mov	r6, r2
 800841e:	d505      	bpl.n	800842c <__swrite+0x1e>
 8008420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008424:	2302      	movs	r3, #2
 8008426:	2200      	movs	r2, #0
 8008428:	f001 fb40 	bl	8009aac <_lseek_r>
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	4632      	mov	r2, r6
 800843a:	463b      	mov	r3, r7
 800843c:	4628      	mov	r0, r5
 800843e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008442:	f000 bedf 	b.w	8009204 <_write_r>

08008446 <__sseek>:
 8008446:	b510      	push	{r4, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844e:	f001 fb2d 	bl	8009aac <_lseek_r>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	bf15      	itete	ne
 8008458:	6560      	strne	r0, [r4, #84]	; 0x54
 800845a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800845e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008462:	81a3      	strheq	r3, [r4, #12]
 8008464:	bf18      	it	ne
 8008466:	81a3      	strhne	r3, [r4, #12]
 8008468:	bd10      	pop	{r4, pc}

0800846a <__sclose>:
 800846a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846e:	f000 bedb 	b.w	8009228 <_close_r>

08008472 <strchr>:
 8008472:	b2c9      	uxtb	r1, r1
 8008474:	4603      	mov	r3, r0
 8008476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847a:	b11a      	cbz	r2, 8008484 <strchr+0x12>
 800847c:	428a      	cmp	r2, r1
 800847e:	d1f9      	bne.n	8008474 <strchr+0x2>
 8008480:	4618      	mov	r0, r3
 8008482:	4770      	bx	lr
 8008484:	2900      	cmp	r1, #0
 8008486:	bf18      	it	ne
 8008488:	2300      	movne	r3, #0
 800848a:	e7f9      	b.n	8008480 <strchr+0xe>

0800848c <sulp>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4604      	mov	r4, r0
 8008490:	460d      	mov	r5, r1
 8008492:	ec45 4b10 	vmov	d0, r4, r5
 8008496:	4616      	mov	r6, r2
 8008498:	f001 feaa 	bl	800a1f0 <__ulp>
 800849c:	ec51 0b10 	vmov	r0, r1, d0
 80084a0:	b17e      	cbz	r6, 80084c2 <sulp+0x36>
 80084a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80084a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dd09      	ble.n	80084c2 <sulp+0x36>
 80084ae:	051b      	lsls	r3, r3, #20
 80084b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80084b4:	2400      	movs	r4, #0
 80084b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80084ba:	4622      	mov	r2, r4
 80084bc:	462b      	mov	r3, r5
 80084be:	f7f8 f8ab 	bl	8000618 <__aeabi_dmul>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	0000      	movs	r0, r0
	...

080084c8 <_strtod_l>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	ed2d 8b02 	vpush	{d8}
 80084d0:	b09d      	sub	sp, #116	; 0x74
 80084d2:	461f      	mov	r7, r3
 80084d4:	2300      	movs	r3, #0
 80084d6:	9318      	str	r3, [sp, #96]	; 0x60
 80084d8:	4ba2      	ldr	r3, [pc, #648]	; (8008764 <_strtod_l+0x29c>)
 80084da:	9213      	str	r2, [sp, #76]	; 0x4c
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	4604      	mov	r4, r0
 80084e2:	4618      	mov	r0, r3
 80084e4:	4688      	mov	r8, r1
 80084e6:	f7f7 fe7d 	bl	80001e4 <strlen>
 80084ea:	f04f 0a00 	mov.w	sl, #0
 80084ee:	4605      	mov	r5, r0
 80084f0:	f04f 0b00 	mov.w	fp, #0
 80084f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084fa:	781a      	ldrb	r2, [r3, #0]
 80084fc:	2a2b      	cmp	r2, #43	; 0x2b
 80084fe:	d04e      	beq.n	800859e <_strtod_l+0xd6>
 8008500:	d83b      	bhi.n	800857a <_strtod_l+0xb2>
 8008502:	2a0d      	cmp	r2, #13
 8008504:	d834      	bhi.n	8008570 <_strtod_l+0xa8>
 8008506:	2a08      	cmp	r2, #8
 8008508:	d834      	bhi.n	8008574 <_strtod_l+0xac>
 800850a:	2a00      	cmp	r2, #0
 800850c:	d03e      	beq.n	800858c <_strtod_l+0xc4>
 800850e:	2300      	movs	r3, #0
 8008510:	930a      	str	r3, [sp, #40]	; 0x28
 8008512:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008514:	7833      	ldrb	r3, [r6, #0]
 8008516:	2b30      	cmp	r3, #48	; 0x30
 8008518:	f040 80b0 	bne.w	800867c <_strtod_l+0x1b4>
 800851c:	7873      	ldrb	r3, [r6, #1]
 800851e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008522:	2b58      	cmp	r3, #88	; 0x58
 8008524:	d168      	bne.n	80085f8 <_strtod_l+0x130>
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	ab18      	add	r3, sp, #96	; 0x60
 800852c:	9702      	str	r7, [sp, #8]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4a8d      	ldr	r2, [pc, #564]	; (8008768 <_strtod_l+0x2a0>)
 8008532:	ab19      	add	r3, sp, #100	; 0x64
 8008534:	a917      	add	r1, sp, #92	; 0x5c
 8008536:	4620      	mov	r0, r4
 8008538:	f000 ffb0 	bl	800949c <__gethex>
 800853c:	f010 0707 	ands.w	r7, r0, #7
 8008540:	4605      	mov	r5, r0
 8008542:	d005      	beq.n	8008550 <_strtod_l+0x88>
 8008544:	2f06      	cmp	r7, #6
 8008546:	d12c      	bne.n	80085a2 <_strtod_l+0xda>
 8008548:	3601      	adds	r6, #1
 800854a:	2300      	movs	r3, #0
 800854c:	9617      	str	r6, [sp, #92]	; 0x5c
 800854e:	930a      	str	r3, [sp, #40]	; 0x28
 8008550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008552:	2b00      	cmp	r3, #0
 8008554:	f040 8590 	bne.w	8009078 <_strtod_l+0xbb0>
 8008558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855a:	b1eb      	cbz	r3, 8008598 <_strtod_l+0xd0>
 800855c:	4652      	mov	r2, sl
 800855e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008562:	ec43 2b10 	vmov	d0, r2, r3
 8008566:	b01d      	add	sp, #116	; 0x74
 8008568:	ecbd 8b02 	vpop	{d8}
 800856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008570:	2a20      	cmp	r2, #32
 8008572:	d1cc      	bne.n	800850e <_strtod_l+0x46>
 8008574:	3301      	adds	r3, #1
 8008576:	9317      	str	r3, [sp, #92]	; 0x5c
 8008578:	e7be      	b.n	80084f8 <_strtod_l+0x30>
 800857a:	2a2d      	cmp	r2, #45	; 0x2d
 800857c:	d1c7      	bne.n	800850e <_strtod_l+0x46>
 800857e:	2201      	movs	r2, #1
 8008580:	920a      	str	r2, [sp, #40]	; 0x28
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	9217      	str	r2, [sp, #92]	; 0x5c
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1c2      	bne.n	8008512 <_strtod_l+0x4a>
 800858c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800858e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 856e 	bne.w	8009074 <_strtod_l+0xbac>
 8008598:	4652      	mov	r2, sl
 800859a:	465b      	mov	r3, fp
 800859c:	e7e1      	b.n	8008562 <_strtod_l+0x9a>
 800859e:	2200      	movs	r2, #0
 80085a0:	e7ee      	b.n	8008580 <_strtod_l+0xb8>
 80085a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085a4:	b13a      	cbz	r2, 80085b6 <_strtod_l+0xee>
 80085a6:	2135      	movs	r1, #53	; 0x35
 80085a8:	a81a      	add	r0, sp, #104	; 0x68
 80085aa:	f001 ff2c 	bl	800a406 <__copybits>
 80085ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085b0:	4620      	mov	r0, r4
 80085b2:	f001 faeb 	bl	8009b8c <_Bfree>
 80085b6:	3f01      	subs	r7, #1
 80085b8:	2f04      	cmp	r7, #4
 80085ba:	d806      	bhi.n	80085ca <_strtod_l+0x102>
 80085bc:	e8df f007 	tbb	[pc, r7]
 80085c0:	1714030a 	.word	0x1714030a
 80085c4:	0a          	.byte	0x0a
 80085c5:	00          	.byte	0x00
 80085c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80085ca:	0728      	lsls	r0, r5, #28
 80085cc:	d5c0      	bpl.n	8008550 <_strtod_l+0x88>
 80085ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80085d2:	e7bd      	b.n	8008550 <_strtod_l+0x88>
 80085d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80085d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80085e6:	e7f0      	b.n	80085ca <_strtod_l+0x102>
 80085e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800876c <_strtod_l+0x2a4>
 80085ec:	e7ed      	b.n	80085ca <_strtod_l+0x102>
 80085ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80085f2:	f04f 3aff 	mov.w	sl, #4294967295
 80085f6:	e7e8      	b.n	80085ca <_strtod_l+0x102>
 80085f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b30      	cmp	r3, #48	; 0x30
 8008602:	d0f9      	beq.n	80085f8 <_strtod_l+0x130>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0a3      	beq.n	8008550 <_strtod_l+0x88>
 8008608:	2301      	movs	r3, #1
 800860a:	f04f 0900 	mov.w	r9, #0
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008612:	9308      	str	r3, [sp, #32]
 8008614:	f8cd 901c 	str.w	r9, [sp, #28]
 8008618:	464f      	mov	r7, r9
 800861a:	220a      	movs	r2, #10
 800861c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800861e:	7806      	ldrb	r6, [r0, #0]
 8008620:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008624:	b2d9      	uxtb	r1, r3
 8008626:	2909      	cmp	r1, #9
 8008628:	d92a      	bls.n	8008680 <_strtod_l+0x1b8>
 800862a:	9905      	ldr	r1, [sp, #20]
 800862c:	462a      	mov	r2, r5
 800862e:	f002 fa9b 	bl	800ab68 <strncmp>
 8008632:	b398      	cbz	r0, 800869c <_strtod_l+0x1d4>
 8008634:	2000      	movs	r0, #0
 8008636:	4632      	mov	r2, r6
 8008638:	463d      	mov	r5, r7
 800863a:	9005      	str	r0, [sp, #20]
 800863c:	4603      	mov	r3, r0
 800863e:	2a65      	cmp	r2, #101	; 0x65
 8008640:	d001      	beq.n	8008646 <_strtod_l+0x17e>
 8008642:	2a45      	cmp	r2, #69	; 0x45
 8008644:	d118      	bne.n	8008678 <_strtod_l+0x1b0>
 8008646:	b91d      	cbnz	r5, 8008650 <_strtod_l+0x188>
 8008648:	9a04      	ldr	r2, [sp, #16]
 800864a:	4302      	orrs	r2, r0
 800864c:	d09e      	beq.n	800858c <_strtod_l+0xc4>
 800864e:	2500      	movs	r5, #0
 8008650:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008654:	f108 0201 	add.w	r2, r8, #1
 8008658:	9217      	str	r2, [sp, #92]	; 0x5c
 800865a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800865e:	2a2b      	cmp	r2, #43	; 0x2b
 8008660:	d075      	beq.n	800874e <_strtod_l+0x286>
 8008662:	2a2d      	cmp	r2, #45	; 0x2d
 8008664:	d07b      	beq.n	800875e <_strtod_l+0x296>
 8008666:	f04f 0c00 	mov.w	ip, #0
 800866a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800866e:	2909      	cmp	r1, #9
 8008670:	f240 8082 	bls.w	8008778 <_strtod_l+0x2b0>
 8008674:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008678:	2600      	movs	r6, #0
 800867a:	e09d      	b.n	80087b8 <_strtod_l+0x2f0>
 800867c:	2300      	movs	r3, #0
 800867e:	e7c4      	b.n	800860a <_strtod_l+0x142>
 8008680:	2f08      	cmp	r7, #8
 8008682:	bfd8      	it	le
 8008684:	9907      	ldrle	r1, [sp, #28]
 8008686:	f100 0001 	add.w	r0, r0, #1
 800868a:	bfda      	itte	le
 800868c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008690:	9307      	strle	r3, [sp, #28]
 8008692:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008696:	3701      	adds	r7, #1
 8008698:	9017      	str	r0, [sp, #92]	; 0x5c
 800869a:	e7bf      	b.n	800861c <_strtod_l+0x154>
 800869c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800869e:	195a      	adds	r2, r3, r5
 80086a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80086a2:	5d5a      	ldrb	r2, [r3, r5]
 80086a4:	2f00      	cmp	r7, #0
 80086a6:	d037      	beq.n	8008718 <_strtod_l+0x250>
 80086a8:	9005      	str	r0, [sp, #20]
 80086aa:	463d      	mov	r5, r7
 80086ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80086b0:	2b09      	cmp	r3, #9
 80086b2:	d912      	bls.n	80086da <_strtod_l+0x212>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e7c2      	b.n	800863e <_strtod_l+0x176>
 80086b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80086be:	785a      	ldrb	r2, [r3, #1]
 80086c0:	3001      	adds	r0, #1
 80086c2:	2a30      	cmp	r2, #48	; 0x30
 80086c4:	d0f8      	beq.n	80086b8 <_strtod_l+0x1f0>
 80086c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	f200 84d9 	bhi.w	8009082 <_strtod_l+0xbba>
 80086d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086d2:	9005      	str	r0, [sp, #20]
 80086d4:	2000      	movs	r0, #0
 80086d6:	9308      	str	r3, [sp, #32]
 80086d8:	4605      	mov	r5, r0
 80086da:	3a30      	subs	r2, #48	; 0x30
 80086dc:	f100 0301 	add.w	r3, r0, #1
 80086e0:	d014      	beq.n	800870c <_strtod_l+0x244>
 80086e2:	9905      	ldr	r1, [sp, #20]
 80086e4:	4419      	add	r1, r3
 80086e6:	9105      	str	r1, [sp, #20]
 80086e8:	462b      	mov	r3, r5
 80086ea:	eb00 0e05 	add.w	lr, r0, r5
 80086ee:	210a      	movs	r1, #10
 80086f0:	4573      	cmp	r3, lr
 80086f2:	d113      	bne.n	800871c <_strtod_l+0x254>
 80086f4:	182b      	adds	r3, r5, r0
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	f105 0501 	add.w	r5, r5, #1
 80086fc:	4405      	add	r5, r0
 80086fe:	dc1c      	bgt.n	800873a <_strtod_l+0x272>
 8008700:	9907      	ldr	r1, [sp, #28]
 8008702:	230a      	movs	r3, #10
 8008704:	fb03 2301 	mla	r3, r3, r1, r2
 8008708:	9307      	str	r3, [sp, #28]
 800870a:	2300      	movs	r3, #0
 800870c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800870e:	1c51      	adds	r1, r2, #1
 8008710:	9117      	str	r1, [sp, #92]	; 0x5c
 8008712:	7852      	ldrb	r2, [r2, #1]
 8008714:	4618      	mov	r0, r3
 8008716:	e7c9      	b.n	80086ac <_strtod_l+0x1e4>
 8008718:	4638      	mov	r0, r7
 800871a:	e7d2      	b.n	80086c2 <_strtod_l+0x1fa>
 800871c:	2b08      	cmp	r3, #8
 800871e:	dc04      	bgt.n	800872a <_strtod_l+0x262>
 8008720:	9e07      	ldr	r6, [sp, #28]
 8008722:	434e      	muls	r6, r1
 8008724:	9607      	str	r6, [sp, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	e7e2      	b.n	80086f0 <_strtod_l+0x228>
 800872a:	f103 0c01 	add.w	ip, r3, #1
 800872e:	f1bc 0f10 	cmp.w	ip, #16
 8008732:	bfd8      	it	le
 8008734:	fb01 f909 	mulle.w	r9, r1, r9
 8008738:	e7f5      	b.n	8008726 <_strtod_l+0x25e>
 800873a:	2d10      	cmp	r5, #16
 800873c:	bfdc      	itt	le
 800873e:	230a      	movle	r3, #10
 8008740:	fb03 2909 	mlale	r9, r3, r9, r2
 8008744:	e7e1      	b.n	800870a <_strtod_l+0x242>
 8008746:	2300      	movs	r3, #0
 8008748:	9305      	str	r3, [sp, #20]
 800874a:	2301      	movs	r3, #1
 800874c:	e77c      	b.n	8008648 <_strtod_l+0x180>
 800874e:	f04f 0c00 	mov.w	ip, #0
 8008752:	f108 0202 	add.w	r2, r8, #2
 8008756:	9217      	str	r2, [sp, #92]	; 0x5c
 8008758:	f898 2002 	ldrb.w	r2, [r8, #2]
 800875c:	e785      	b.n	800866a <_strtod_l+0x1a2>
 800875e:	f04f 0c01 	mov.w	ip, #1
 8008762:	e7f6      	b.n	8008752 <_strtod_l+0x28a>
 8008764:	0800b2a0 	.word	0x0800b2a0
 8008768:	0800b0d4 	.word	0x0800b0d4
 800876c:	7ff00000 	.word	0x7ff00000
 8008770:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008772:	1c51      	adds	r1, r2, #1
 8008774:	9117      	str	r1, [sp, #92]	; 0x5c
 8008776:	7852      	ldrb	r2, [r2, #1]
 8008778:	2a30      	cmp	r2, #48	; 0x30
 800877a:	d0f9      	beq.n	8008770 <_strtod_l+0x2a8>
 800877c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008780:	2908      	cmp	r1, #8
 8008782:	f63f af79 	bhi.w	8008678 <_strtod_l+0x1b0>
 8008786:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800878a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800878c:	9206      	str	r2, [sp, #24]
 800878e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008790:	1c51      	adds	r1, r2, #1
 8008792:	9117      	str	r1, [sp, #92]	; 0x5c
 8008794:	7852      	ldrb	r2, [r2, #1]
 8008796:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800879a:	2e09      	cmp	r6, #9
 800879c:	d937      	bls.n	800880e <_strtod_l+0x346>
 800879e:	9e06      	ldr	r6, [sp, #24]
 80087a0:	1b89      	subs	r1, r1, r6
 80087a2:	2908      	cmp	r1, #8
 80087a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80087a8:	dc02      	bgt.n	80087b0 <_strtod_l+0x2e8>
 80087aa:	4576      	cmp	r6, lr
 80087ac:	bfa8      	it	ge
 80087ae:	4676      	movge	r6, lr
 80087b0:	f1bc 0f00 	cmp.w	ip, #0
 80087b4:	d000      	beq.n	80087b8 <_strtod_l+0x2f0>
 80087b6:	4276      	negs	r6, r6
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	d14d      	bne.n	8008858 <_strtod_l+0x390>
 80087bc:	9904      	ldr	r1, [sp, #16]
 80087be:	4301      	orrs	r1, r0
 80087c0:	f47f aec6 	bne.w	8008550 <_strtod_l+0x88>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f47f aee1 	bne.w	800858c <_strtod_l+0xc4>
 80087ca:	2a69      	cmp	r2, #105	; 0x69
 80087cc:	d027      	beq.n	800881e <_strtod_l+0x356>
 80087ce:	dc24      	bgt.n	800881a <_strtod_l+0x352>
 80087d0:	2a49      	cmp	r2, #73	; 0x49
 80087d2:	d024      	beq.n	800881e <_strtod_l+0x356>
 80087d4:	2a4e      	cmp	r2, #78	; 0x4e
 80087d6:	f47f aed9 	bne.w	800858c <_strtod_l+0xc4>
 80087da:	499f      	ldr	r1, [pc, #636]	; (8008a58 <_strtod_l+0x590>)
 80087dc:	a817      	add	r0, sp, #92	; 0x5c
 80087de:	f001 f8b5 	bl	800994c <__match>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f aed2 	beq.w	800858c <_strtod_l+0xc4>
 80087e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b28      	cmp	r3, #40	; 0x28
 80087ee:	d12d      	bne.n	800884c <_strtod_l+0x384>
 80087f0:	499a      	ldr	r1, [pc, #616]	; (8008a5c <_strtod_l+0x594>)
 80087f2:	aa1a      	add	r2, sp, #104	; 0x68
 80087f4:	a817      	add	r0, sp, #92	; 0x5c
 80087f6:	f001 f8bd 	bl	8009974 <__hexnan>
 80087fa:	2805      	cmp	r0, #5
 80087fc:	d126      	bne.n	800884c <_strtod_l+0x384>
 80087fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008800:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008804:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008808:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800880c:	e6a0      	b.n	8008550 <_strtod_l+0x88>
 800880e:	210a      	movs	r1, #10
 8008810:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008814:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008818:	e7b9      	b.n	800878e <_strtod_l+0x2c6>
 800881a:	2a6e      	cmp	r2, #110	; 0x6e
 800881c:	e7db      	b.n	80087d6 <_strtod_l+0x30e>
 800881e:	4990      	ldr	r1, [pc, #576]	; (8008a60 <_strtod_l+0x598>)
 8008820:	a817      	add	r0, sp, #92	; 0x5c
 8008822:	f001 f893 	bl	800994c <__match>
 8008826:	2800      	cmp	r0, #0
 8008828:	f43f aeb0 	beq.w	800858c <_strtod_l+0xc4>
 800882c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800882e:	498d      	ldr	r1, [pc, #564]	; (8008a64 <_strtod_l+0x59c>)
 8008830:	3b01      	subs	r3, #1
 8008832:	a817      	add	r0, sp, #92	; 0x5c
 8008834:	9317      	str	r3, [sp, #92]	; 0x5c
 8008836:	f001 f889 	bl	800994c <__match>
 800883a:	b910      	cbnz	r0, 8008842 <_strtod_l+0x37a>
 800883c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800883e:	3301      	adds	r3, #1
 8008840:	9317      	str	r3, [sp, #92]	; 0x5c
 8008842:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008a74 <_strtod_l+0x5ac>
 8008846:	f04f 0a00 	mov.w	sl, #0
 800884a:	e681      	b.n	8008550 <_strtod_l+0x88>
 800884c:	4886      	ldr	r0, [pc, #536]	; (8008a68 <_strtod_l+0x5a0>)
 800884e:	f002 f983 	bl	800ab58 <nan>
 8008852:	ec5b ab10 	vmov	sl, fp, d0
 8008856:	e67b      	b.n	8008550 <_strtod_l+0x88>
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	9807      	ldr	r0, [sp, #28]
 800885c:	1af3      	subs	r3, r6, r3
 800885e:	2f00      	cmp	r7, #0
 8008860:	bf08      	it	eq
 8008862:	462f      	moveq	r7, r5
 8008864:	2d10      	cmp	r5, #16
 8008866:	9306      	str	r3, [sp, #24]
 8008868:	46a8      	mov	r8, r5
 800886a:	bfa8      	it	ge
 800886c:	f04f 0810 	movge.w	r8, #16
 8008870:	f7f7 fe58 	bl	8000524 <__aeabi_ui2d>
 8008874:	2d09      	cmp	r5, #9
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	dd13      	ble.n	80088a4 <_strtod_l+0x3dc>
 800887c:	4b7b      	ldr	r3, [pc, #492]	; (8008a6c <_strtod_l+0x5a4>)
 800887e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008882:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008886:	f7f7 fec7 	bl	8000618 <__aeabi_dmul>
 800888a:	4682      	mov	sl, r0
 800888c:	4648      	mov	r0, r9
 800888e:	468b      	mov	fp, r1
 8008890:	f7f7 fe48 	bl	8000524 <__aeabi_ui2d>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	f7f7 fd06 	bl	80002ac <__adddf3>
 80088a0:	4682      	mov	sl, r0
 80088a2:	468b      	mov	fp, r1
 80088a4:	2d0f      	cmp	r5, #15
 80088a6:	dc38      	bgt.n	800891a <_strtod_l+0x452>
 80088a8:	9b06      	ldr	r3, [sp, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f43f ae50 	beq.w	8008550 <_strtod_l+0x88>
 80088b0:	dd24      	ble.n	80088fc <_strtod_l+0x434>
 80088b2:	2b16      	cmp	r3, #22
 80088b4:	dc0b      	bgt.n	80088ce <_strtod_l+0x406>
 80088b6:	496d      	ldr	r1, [pc, #436]	; (8008a6c <_strtod_l+0x5a4>)
 80088b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c0:	4652      	mov	r2, sl
 80088c2:	465b      	mov	r3, fp
 80088c4:	f7f7 fea8 	bl	8000618 <__aeabi_dmul>
 80088c8:	4682      	mov	sl, r0
 80088ca:	468b      	mov	fp, r1
 80088cc:	e640      	b.n	8008550 <_strtod_l+0x88>
 80088ce:	9a06      	ldr	r2, [sp, #24]
 80088d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80088d4:	4293      	cmp	r3, r2
 80088d6:	db20      	blt.n	800891a <_strtod_l+0x452>
 80088d8:	4c64      	ldr	r4, [pc, #400]	; (8008a6c <_strtod_l+0x5a4>)
 80088da:	f1c5 050f 	rsb	r5, r5, #15
 80088de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088e2:	4652      	mov	r2, sl
 80088e4:	465b      	mov	r3, fp
 80088e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ea:	f7f7 fe95 	bl	8000618 <__aeabi_dmul>
 80088ee:	9b06      	ldr	r3, [sp, #24]
 80088f0:	1b5d      	subs	r5, r3, r5
 80088f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088fa:	e7e3      	b.n	80088c4 <_strtod_l+0x3fc>
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	3316      	adds	r3, #22
 8008900:	db0b      	blt.n	800891a <_strtod_l+0x452>
 8008902:	9b05      	ldr	r3, [sp, #20]
 8008904:	1b9e      	subs	r6, r3, r6
 8008906:	4b59      	ldr	r3, [pc, #356]	; (8008a6c <_strtod_l+0x5a4>)
 8008908:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800890c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008910:	4650      	mov	r0, sl
 8008912:	4659      	mov	r1, fp
 8008914:	f7f7 ffaa 	bl	800086c <__aeabi_ddiv>
 8008918:	e7d6      	b.n	80088c8 <_strtod_l+0x400>
 800891a:	9b06      	ldr	r3, [sp, #24]
 800891c:	eba5 0808 	sub.w	r8, r5, r8
 8008920:	4498      	add	r8, r3
 8008922:	f1b8 0f00 	cmp.w	r8, #0
 8008926:	dd74      	ble.n	8008a12 <_strtod_l+0x54a>
 8008928:	f018 030f 	ands.w	r3, r8, #15
 800892c:	d00a      	beq.n	8008944 <_strtod_l+0x47c>
 800892e:	494f      	ldr	r1, [pc, #316]	; (8008a6c <_strtod_l+0x5a4>)
 8008930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008934:	4652      	mov	r2, sl
 8008936:	465b      	mov	r3, fp
 8008938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893c:	f7f7 fe6c 	bl	8000618 <__aeabi_dmul>
 8008940:	4682      	mov	sl, r0
 8008942:	468b      	mov	fp, r1
 8008944:	f038 080f 	bics.w	r8, r8, #15
 8008948:	d04f      	beq.n	80089ea <_strtod_l+0x522>
 800894a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800894e:	dd22      	ble.n	8008996 <_strtod_l+0x4ce>
 8008950:	2500      	movs	r5, #0
 8008952:	462e      	mov	r6, r5
 8008954:	9507      	str	r5, [sp, #28]
 8008956:	9505      	str	r5, [sp, #20]
 8008958:	2322      	movs	r3, #34	; 0x22
 800895a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008a74 <_strtod_l+0x5ac>
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	f04f 0a00 	mov.w	sl, #0
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f43f adf2 	beq.w	8008550 <_strtod_l+0x88>
 800896c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800896e:	4620      	mov	r0, r4
 8008970:	f001 f90c 	bl	8009b8c <_Bfree>
 8008974:	9905      	ldr	r1, [sp, #20]
 8008976:	4620      	mov	r0, r4
 8008978:	f001 f908 	bl	8009b8c <_Bfree>
 800897c:	4631      	mov	r1, r6
 800897e:	4620      	mov	r0, r4
 8008980:	f001 f904 	bl	8009b8c <_Bfree>
 8008984:	9907      	ldr	r1, [sp, #28]
 8008986:	4620      	mov	r0, r4
 8008988:	f001 f900 	bl	8009b8c <_Bfree>
 800898c:	4629      	mov	r1, r5
 800898e:	4620      	mov	r0, r4
 8008990:	f001 f8fc 	bl	8009b8c <_Bfree>
 8008994:	e5dc      	b.n	8008550 <_strtod_l+0x88>
 8008996:	4b36      	ldr	r3, [pc, #216]	; (8008a70 <_strtod_l+0x5a8>)
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	2300      	movs	r3, #0
 800899c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80089a0:	4650      	mov	r0, sl
 80089a2:	4659      	mov	r1, fp
 80089a4:	4699      	mov	r9, r3
 80089a6:	f1b8 0f01 	cmp.w	r8, #1
 80089aa:	dc21      	bgt.n	80089f0 <_strtod_l+0x528>
 80089ac:	b10b      	cbz	r3, 80089b2 <_strtod_l+0x4ea>
 80089ae:	4682      	mov	sl, r0
 80089b0:	468b      	mov	fp, r1
 80089b2:	4b2f      	ldr	r3, [pc, #188]	; (8008a70 <_strtod_l+0x5a8>)
 80089b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80089b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80089bc:	4652      	mov	r2, sl
 80089be:	465b      	mov	r3, fp
 80089c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80089c4:	f7f7 fe28 	bl	8000618 <__aeabi_dmul>
 80089c8:	4b2a      	ldr	r3, [pc, #168]	; (8008a74 <_strtod_l+0x5ac>)
 80089ca:	460a      	mov	r2, r1
 80089cc:	400b      	ands	r3, r1
 80089ce:	492a      	ldr	r1, [pc, #168]	; (8008a78 <_strtod_l+0x5b0>)
 80089d0:	428b      	cmp	r3, r1
 80089d2:	4682      	mov	sl, r0
 80089d4:	d8bc      	bhi.n	8008950 <_strtod_l+0x488>
 80089d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80089da:	428b      	cmp	r3, r1
 80089dc:	bf86      	itte	hi
 80089de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008a7c <_strtod_l+0x5b4>
 80089e2:	f04f 3aff 	movhi.w	sl, #4294967295
 80089e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80089ea:	2300      	movs	r3, #0
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	e084      	b.n	8008afa <_strtod_l+0x632>
 80089f0:	f018 0f01 	tst.w	r8, #1
 80089f4:	d005      	beq.n	8008a02 <_strtod_l+0x53a>
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fe0c 	bl	8000618 <__aeabi_dmul>
 8008a00:	2301      	movs	r3, #1
 8008a02:	9a04      	ldr	r2, [sp, #16]
 8008a04:	3208      	adds	r2, #8
 8008a06:	f109 0901 	add.w	r9, r9, #1
 8008a0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a0e:	9204      	str	r2, [sp, #16]
 8008a10:	e7c9      	b.n	80089a6 <_strtod_l+0x4de>
 8008a12:	d0ea      	beq.n	80089ea <_strtod_l+0x522>
 8008a14:	f1c8 0800 	rsb	r8, r8, #0
 8008a18:	f018 020f 	ands.w	r2, r8, #15
 8008a1c:	d00a      	beq.n	8008a34 <_strtod_l+0x56c>
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <_strtod_l+0x5a4>)
 8008a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a24:	4650      	mov	r0, sl
 8008a26:	4659      	mov	r1, fp
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 ff1e 	bl	800086c <__aeabi_ddiv>
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a38:	d0d7      	beq.n	80089ea <_strtod_l+0x522>
 8008a3a:	f1b8 0f1f 	cmp.w	r8, #31
 8008a3e:	dd1f      	ble.n	8008a80 <_strtod_l+0x5b8>
 8008a40:	2500      	movs	r5, #0
 8008a42:	462e      	mov	r6, r5
 8008a44:	9507      	str	r5, [sp, #28]
 8008a46:	9505      	str	r5, [sp, #20]
 8008a48:	2322      	movs	r3, #34	; 0x22
 8008a4a:	f04f 0a00 	mov.w	sl, #0
 8008a4e:	f04f 0b00 	mov.w	fp, #0
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	e786      	b.n	8008964 <_strtod_l+0x49c>
 8008a56:	bf00      	nop
 8008a58:	0800b0d1 	.word	0x0800b0d1
 8008a5c:	0800b0e8 	.word	0x0800b0e8
 8008a60:	0800b0c8 	.word	0x0800b0c8
 8008a64:	0800b0cb 	.word	0x0800b0cb
 8008a68:	0800b492 	.word	0x0800b492
 8008a6c:	0800b350 	.word	0x0800b350
 8008a70:	0800b328 	.word	0x0800b328
 8008a74:	7ff00000 	.word	0x7ff00000
 8008a78:	7ca00000 	.word	0x7ca00000
 8008a7c:	7fefffff 	.word	0x7fefffff
 8008a80:	f018 0310 	ands.w	r3, r8, #16
 8008a84:	bf18      	it	ne
 8008a86:	236a      	movne	r3, #106	; 0x6a
 8008a88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008e38 <_strtod_l+0x970>
 8008a8c:	9304      	str	r3, [sp, #16]
 8008a8e:	4650      	mov	r0, sl
 8008a90:	4659      	mov	r1, fp
 8008a92:	2300      	movs	r3, #0
 8008a94:	f018 0f01 	tst.w	r8, #1
 8008a98:	d004      	beq.n	8008aa4 <_strtod_l+0x5dc>
 8008a9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008a9e:	f7f7 fdbb 	bl	8000618 <__aeabi_dmul>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008aa8:	f109 0908 	add.w	r9, r9, #8
 8008aac:	d1f2      	bne.n	8008a94 <_strtod_l+0x5cc>
 8008aae:	b10b      	cbz	r3, 8008ab4 <_strtod_l+0x5ec>
 8008ab0:	4682      	mov	sl, r0
 8008ab2:	468b      	mov	fp, r1
 8008ab4:	9b04      	ldr	r3, [sp, #16]
 8008ab6:	b1c3      	cbz	r3, 8008aea <_strtod_l+0x622>
 8008ab8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008abc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	dd11      	ble.n	8008aea <_strtod_l+0x622>
 8008ac6:	2b1f      	cmp	r3, #31
 8008ac8:	f340 8124 	ble.w	8008d14 <_strtod_l+0x84c>
 8008acc:	2b34      	cmp	r3, #52	; 0x34
 8008ace:	bfde      	ittt	le
 8008ad0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ad4:	f04f 33ff 	movle.w	r3, #4294967295
 8008ad8:	fa03 f202 	lslle.w	r2, r3, r2
 8008adc:	f04f 0a00 	mov.w	sl, #0
 8008ae0:	bfcc      	ite	gt
 8008ae2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008ae6:	ea02 0b01 	andle.w	fp, r2, r1
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	4650      	mov	r0, sl
 8008af0:	4659      	mov	r1, fp
 8008af2:	f7f7 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d1a2      	bne.n	8008a40 <_strtod_l+0x578>
 8008afa:	9b07      	ldr	r3, [sp, #28]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	9908      	ldr	r1, [sp, #32]
 8008b00:	462b      	mov	r3, r5
 8008b02:	463a      	mov	r2, r7
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 f8a9 	bl	8009c5c <__s2b>
 8008b0a:	9007      	str	r0, [sp, #28]
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f43f af1f 	beq.w	8008950 <_strtod_l+0x488>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	1b9e      	subs	r6, r3, r6
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	bfb4      	ite	lt
 8008b1c:	4633      	movlt	r3, r6
 8008b1e:	2300      	movge	r3, #0
 8008b20:	930c      	str	r3, [sp, #48]	; 0x30
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	2500      	movs	r5, #0
 8008b26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008b2c:	462e      	mov	r6, r5
 8008b2e:	9b07      	ldr	r3, [sp, #28]
 8008b30:	4620      	mov	r0, r4
 8008b32:	6859      	ldr	r1, [r3, #4]
 8008b34:	f000 ffea 	bl	8009b0c <_Balloc>
 8008b38:	9005      	str	r0, [sp, #20]
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	f43f af0c 	beq.w	8008958 <_strtod_l+0x490>
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	3202      	adds	r2, #2
 8008b46:	f103 010c 	add.w	r1, r3, #12
 8008b4a:	0092      	lsls	r2, r2, #2
 8008b4c:	300c      	adds	r0, #12
 8008b4e:	f7ff fb10 	bl	8008172 <memcpy>
 8008b52:	ec4b ab10 	vmov	d0, sl, fp
 8008b56:	aa1a      	add	r2, sp, #104	; 0x68
 8008b58:	a919      	add	r1, sp, #100	; 0x64
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 fbc4 	bl	800a2e8 <__d2b>
 8008b60:	ec4b ab18 	vmov	d8, sl, fp
 8008b64:	9018      	str	r0, [sp, #96]	; 0x60
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f aef6 	beq.w	8008958 <_strtod_l+0x490>
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f001 f90e 	bl	8009d90 <__i2b>
 8008b74:	4606      	mov	r6, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f aeee 	beq.w	8008958 <_strtod_l+0x490>
 8008b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b7e:	9904      	ldr	r1, [sp, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bfab      	itete	ge
 8008b84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008b86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008b88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008b8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008b8e:	bfac      	ite	ge
 8008b90:	eb03 0902 	addge.w	r9, r3, r2
 8008b94:	1ad7      	sublt	r7, r2, r3
 8008b96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b98:	eba3 0801 	sub.w	r8, r3, r1
 8008b9c:	4490      	add	r8, r2
 8008b9e:	4ba1      	ldr	r3, [pc, #644]	; (8008e24 <_strtod_l+0x95c>)
 8008ba0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ba4:	4598      	cmp	r8, r3
 8008ba6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008baa:	f280 80c7 	bge.w	8008d3c <_strtod_l+0x874>
 8008bae:	eba3 0308 	sub.w	r3, r3, r8
 8008bb2:	2b1f      	cmp	r3, #31
 8008bb4:	eba2 0203 	sub.w	r2, r2, r3
 8008bb8:	f04f 0101 	mov.w	r1, #1
 8008bbc:	f300 80b1 	bgt.w	8008d22 <_strtod_l+0x85a>
 8008bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc4:	930d      	str	r3, [sp, #52]	; 0x34
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9308      	str	r3, [sp, #32]
 8008bca:	eb09 0802 	add.w	r8, r9, r2
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	45c1      	cmp	r9, r8
 8008bd2:	4417      	add	r7, r2
 8008bd4:	441f      	add	r7, r3
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	bfa8      	it	ge
 8008bda:	4643      	movge	r3, r8
 8008bdc:	42bb      	cmp	r3, r7
 8008bde:	bfa8      	it	ge
 8008be0:	463b      	movge	r3, r7
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfc2      	ittt	gt
 8008be6:	eba8 0803 	subgt.w	r8, r8, r3
 8008bea:	1aff      	subgt	r7, r7, r3
 8008bec:	eba9 0903 	subgt.w	r9, r9, r3
 8008bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd17      	ble.n	8008c26 <_strtod_l+0x75e>
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f001 f988 	bl	8009f10 <__pow5mult>
 8008c00:	4606      	mov	r6, r0
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f43f aea8 	beq.w	8008958 <_strtod_l+0x490>
 8008c08:	4601      	mov	r1, r0
 8008c0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f001 f8d5 	bl	8009dbc <__multiply>
 8008c12:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f43f ae9f 	beq.w	8008958 <_strtod_l+0x490>
 8008c1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 ffb5 	bl	8009b8c <_Bfree>
 8008c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c24:	9318      	str	r3, [sp, #96]	; 0x60
 8008c26:	f1b8 0f00 	cmp.w	r8, #0
 8008c2a:	f300 808c 	bgt.w	8008d46 <_strtod_l+0x87e>
 8008c2e:	9b06      	ldr	r3, [sp, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dd08      	ble.n	8008c46 <_strtod_l+0x77e>
 8008c34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c36:	9905      	ldr	r1, [sp, #20]
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f001 f969 	bl	8009f10 <__pow5mult>
 8008c3e:	9005      	str	r0, [sp, #20]
 8008c40:	2800      	cmp	r0, #0
 8008c42:	f43f ae89 	beq.w	8008958 <_strtod_l+0x490>
 8008c46:	2f00      	cmp	r7, #0
 8008c48:	dd08      	ble.n	8008c5c <_strtod_l+0x794>
 8008c4a:	9905      	ldr	r1, [sp, #20]
 8008c4c:	463a      	mov	r2, r7
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f001 f9b8 	bl	8009fc4 <__lshift>
 8008c54:	9005      	str	r0, [sp, #20]
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f43f ae7e 	beq.w	8008958 <_strtod_l+0x490>
 8008c5c:	f1b9 0f00 	cmp.w	r9, #0
 8008c60:	dd08      	ble.n	8008c74 <_strtod_l+0x7ac>
 8008c62:	4631      	mov	r1, r6
 8008c64:	464a      	mov	r2, r9
 8008c66:	4620      	mov	r0, r4
 8008c68:	f001 f9ac 	bl	8009fc4 <__lshift>
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f ae72 	beq.w	8008958 <_strtod_l+0x490>
 8008c74:	9a05      	ldr	r2, [sp, #20]
 8008c76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f001 fa2f 	bl	800a0dc <__mdiff>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	2800      	cmp	r0, #0
 8008c82:	f43f ae69 	beq.w	8008958 <_strtod_l+0x490>
 8008c86:	68c3      	ldr	r3, [r0, #12]
 8008c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60c3      	str	r3, [r0, #12]
 8008c8e:	4631      	mov	r1, r6
 8008c90:	f001 fa08 	bl	800a0a4 <__mcmp>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	da60      	bge.n	8008d5a <_strtod_l+0x892>
 8008c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9a:	ea53 030a 	orrs.w	r3, r3, sl
 8008c9e:	f040 8082 	bne.w	8008da6 <_strtod_l+0x8de>
 8008ca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d17d      	bne.n	8008da6 <_strtod_l+0x8de>
 8008caa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cae:	0d1b      	lsrs	r3, r3, #20
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008cb6:	d976      	bls.n	8008da6 <_strtod_l+0x8de>
 8008cb8:	696b      	ldr	r3, [r5, #20]
 8008cba:	b913      	cbnz	r3, 8008cc2 <_strtod_l+0x7fa>
 8008cbc:	692b      	ldr	r3, [r5, #16]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	dd71      	ble.n	8008da6 <_strtod_l+0x8de>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f001 f97c 	bl	8009fc4 <__lshift>
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4605      	mov	r5, r0
 8008cd0:	f001 f9e8 	bl	800a0a4 <__mcmp>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	dd66      	ble.n	8008da6 <_strtod_l+0x8de>
 8008cd8:	9904      	ldr	r1, [sp, #16]
 8008cda:	4a53      	ldr	r2, [pc, #332]	; (8008e28 <_strtod_l+0x960>)
 8008cdc:	465b      	mov	r3, fp
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	f000 8081 	beq.w	8008de6 <_strtod_l+0x91e>
 8008ce4:	ea02 010b 	and.w	r1, r2, fp
 8008ce8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008cec:	dc7b      	bgt.n	8008de6 <_strtod_l+0x91e>
 8008cee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008cf2:	f77f aea9 	ble.w	8008a48 <_strtod_l+0x580>
 8008cf6:	4b4d      	ldr	r3, [pc, #308]	; (8008e2c <_strtod_l+0x964>)
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	4659      	mov	r1, fp
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f7f7 fc8b 	bl	8000618 <__aeabi_dmul>
 8008d02:	460b      	mov	r3, r1
 8008d04:	4303      	orrs	r3, r0
 8008d06:	bf08      	it	eq
 8008d08:	2322      	moveq	r3, #34	; 0x22
 8008d0a:	4682      	mov	sl, r0
 8008d0c:	468b      	mov	fp, r1
 8008d0e:	bf08      	it	eq
 8008d10:	6023      	streq	r3, [r4, #0]
 8008d12:	e62b      	b.n	800896c <_strtod_l+0x4a4>
 8008d14:	f04f 32ff 	mov.w	r2, #4294967295
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	ea03 0a0a 	and.w	sl, r3, sl
 8008d20:	e6e3      	b.n	8008aea <_strtod_l+0x622>
 8008d22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008d26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008d2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008d2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008d32:	fa01 f308 	lsl.w	r3, r1, r8
 8008d36:	9308      	str	r3, [sp, #32]
 8008d38:	910d      	str	r1, [sp, #52]	; 0x34
 8008d3a:	e746      	b.n	8008bca <_strtod_l+0x702>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9308      	str	r3, [sp, #32]
 8008d40:	2301      	movs	r3, #1
 8008d42:	930d      	str	r3, [sp, #52]	; 0x34
 8008d44:	e741      	b.n	8008bca <_strtod_l+0x702>
 8008d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d48:	4642      	mov	r2, r8
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f001 f93a 	bl	8009fc4 <__lshift>
 8008d50:	9018      	str	r0, [sp, #96]	; 0x60
 8008d52:	2800      	cmp	r0, #0
 8008d54:	f47f af6b 	bne.w	8008c2e <_strtod_l+0x766>
 8008d58:	e5fe      	b.n	8008958 <_strtod_l+0x490>
 8008d5a:	465f      	mov	r7, fp
 8008d5c:	d16e      	bne.n	8008e3c <_strtod_l+0x974>
 8008d5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d64:	b342      	cbz	r2, 8008db8 <_strtod_l+0x8f0>
 8008d66:	4a32      	ldr	r2, [pc, #200]	; (8008e30 <_strtod_l+0x968>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d128      	bne.n	8008dbe <_strtod_l+0x8f6>
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	4651      	mov	r1, sl
 8008d70:	b1eb      	cbz	r3, 8008dae <_strtod_l+0x8e6>
 8008d72:	4b2d      	ldr	r3, [pc, #180]	; (8008e28 <_strtod_l+0x960>)
 8008d74:	403b      	ands	r3, r7
 8008d76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7e:	d819      	bhi.n	8008db4 <_strtod_l+0x8ec>
 8008d80:	0d1b      	lsrs	r3, r3, #20
 8008d82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	4299      	cmp	r1, r3
 8008d8c:	d117      	bne.n	8008dbe <_strtod_l+0x8f6>
 8008d8e:	4b29      	ldr	r3, [pc, #164]	; (8008e34 <_strtod_l+0x96c>)
 8008d90:	429f      	cmp	r7, r3
 8008d92:	d102      	bne.n	8008d9a <_strtod_l+0x8d2>
 8008d94:	3101      	adds	r1, #1
 8008d96:	f43f addf 	beq.w	8008958 <_strtod_l+0x490>
 8008d9a:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <_strtod_l+0x960>)
 8008d9c:	403b      	ands	r3, r7
 8008d9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008da2:	f04f 0a00 	mov.w	sl, #0
 8008da6:	9b04      	ldr	r3, [sp, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1a4      	bne.n	8008cf6 <_strtod_l+0x82e>
 8008dac:	e5de      	b.n	800896c <_strtod_l+0x4a4>
 8008dae:	f04f 33ff 	mov.w	r3, #4294967295
 8008db2:	e7ea      	b.n	8008d8a <_strtod_l+0x8c2>
 8008db4:	4613      	mov	r3, r2
 8008db6:	e7e8      	b.n	8008d8a <_strtod_l+0x8c2>
 8008db8:	ea53 030a 	orrs.w	r3, r3, sl
 8008dbc:	d08c      	beq.n	8008cd8 <_strtod_l+0x810>
 8008dbe:	9b08      	ldr	r3, [sp, #32]
 8008dc0:	b1db      	cbz	r3, 8008dfa <_strtod_l+0x932>
 8008dc2:	423b      	tst	r3, r7
 8008dc4:	d0ef      	beq.n	8008da6 <_strtod_l+0x8de>
 8008dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc8:	9a04      	ldr	r2, [sp, #16]
 8008dca:	4650      	mov	r0, sl
 8008dcc:	4659      	mov	r1, fp
 8008dce:	b1c3      	cbz	r3, 8008e02 <_strtod_l+0x93a>
 8008dd0:	f7ff fb5c 	bl	800848c <sulp>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	ec51 0b18 	vmov	r0, r1, d8
 8008ddc:	f7f7 fa66 	bl	80002ac <__adddf3>
 8008de0:	4682      	mov	sl, r0
 8008de2:	468b      	mov	fp, r1
 8008de4:	e7df      	b.n	8008da6 <_strtod_l+0x8de>
 8008de6:	4013      	ands	r3, r2
 8008de8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008dec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008df0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008df4:	f04f 3aff 	mov.w	sl, #4294967295
 8008df8:	e7d5      	b.n	8008da6 <_strtod_l+0x8de>
 8008dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfc:	ea13 0f0a 	tst.w	r3, sl
 8008e00:	e7e0      	b.n	8008dc4 <_strtod_l+0x8fc>
 8008e02:	f7ff fb43 	bl	800848c <sulp>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	ec51 0b18 	vmov	r0, r1, d8
 8008e0e:	f7f7 fa4b 	bl	80002a8 <__aeabi_dsub>
 8008e12:	2200      	movs	r2, #0
 8008e14:	2300      	movs	r3, #0
 8008e16:	4682      	mov	sl, r0
 8008e18:	468b      	mov	fp, r1
 8008e1a:	f7f7 fe65 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d0c1      	beq.n	8008da6 <_strtod_l+0x8de>
 8008e22:	e611      	b.n	8008a48 <_strtod_l+0x580>
 8008e24:	fffffc02 	.word	0xfffffc02
 8008e28:	7ff00000 	.word	0x7ff00000
 8008e2c:	39500000 	.word	0x39500000
 8008e30:	000fffff 	.word	0x000fffff
 8008e34:	7fefffff 	.word	0x7fefffff
 8008e38:	0800b100 	.word	0x0800b100
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f001 faae 	bl	800a3a0 <__ratio>
 8008e44:	ec59 8b10 	vmov	r8, r9, d0
 8008e48:	ee10 0a10 	vmov	r0, s0
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fe5c 	bl	8000b10 <__aeabi_dcmple>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d07a      	beq.n	8008f52 <_strtod_l+0xa8a>
 8008e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d04a      	beq.n	8008ef8 <_strtod_l+0xa30>
 8008e62:	4b95      	ldr	r3, [pc, #596]	; (80090b8 <_strtod_l+0xbf0>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80090b8 <_strtod_l+0xbf0>
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	4b92      	ldr	r3, [pc, #584]	; (80090bc <_strtod_l+0xbf4>)
 8008e74:	403b      	ands	r3, r7
 8008e76:	930d      	str	r3, [sp, #52]	; 0x34
 8008e78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e7a:	4b91      	ldr	r3, [pc, #580]	; (80090c0 <_strtod_l+0xbf8>)
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	f040 80b0 	bne.w	8008fe2 <_strtod_l+0xb1a>
 8008e82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008e8a:	ec4b ab10 	vmov	d0, sl, fp
 8008e8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e92:	f001 f9ad 	bl	800a1f0 <__ulp>
 8008e96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e9a:	ec53 2b10 	vmov	r2, r3, d0
 8008e9e:	f7f7 fbbb 	bl	8000618 <__aeabi_dmul>
 8008ea2:	4652      	mov	r2, sl
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	f7f7 fa01 	bl	80002ac <__adddf3>
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4983      	ldr	r1, [pc, #524]	; (80090bc <_strtod_l+0xbf4>)
 8008eae:	4a85      	ldr	r2, [pc, #532]	; (80090c4 <_strtod_l+0xbfc>)
 8008eb0:	4019      	ands	r1, r3
 8008eb2:	4291      	cmp	r1, r2
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	d960      	bls.n	8008f7a <_strtod_l+0xab2>
 8008eb8:	ee18 3a90 	vmov	r3, s17
 8008ebc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d104      	bne.n	8008ece <_strtod_l+0xa06>
 8008ec4:	ee18 3a10 	vmov	r3, s16
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f43f ad45 	beq.w	8008958 <_strtod_l+0x490>
 8008ece:	f8df b200 	ldr.w	fp, [pc, #512]	; 80090d0 <_strtod_l+0xc08>
 8008ed2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fe57 	bl	8009b8c <_Bfree>
 8008ede:	9905      	ldr	r1, [sp, #20]
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 fe53 	bl	8009b8c <_Bfree>
 8008ee6:	4631      	mov	r1, r6
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fe4f 	bl	8009b8c <_Bfree>
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fe4b 	bl	8009b8c <_Bfree>
 8008ef6:	e61a      	b.n	8008b2e <_strtod_l+0x666>
 8008ef8:	f1ba 0f00 	cmp.w	sl, #0
 8008efc:	d11b      	bne.n	8008f36 <_strtod_l+0xa6e>
 8008efe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f02:	b9f3      	cbnz	r3, 8008f42 <_strtod_l+0xa7a>
 8008f04:	4b6c      	ldr	r3, [pc, #432]	; (80090b8 <_strtod_l+0xbf0>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fdf6 	bl	8000afc <__aeabi_dcmplt>
 8008f10:	b9d0      	cbnz	r0, 8008f48 <_strtod_l+0xa80>
 8008f12:	4640      	mov	r0, r8
 8008f14:	4649      	mov	r1, r9
 8008f16:	4b6c      	ldr	r3, [pc, #432]	; (80090c8 <_strtod_l+0xc00>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7f7 fb7d 	bl	8000618 <__aeabi_dmul>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	4689      	mov	r9, r1
 8008f22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008f2a:	9315      	str	r3, [sp, #84]	; 0x54
 8008f2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f34:	e79d      	b.n	8008e72 <_strtod_l+0x9aa>
 8008f36:	f1ba 0f01 	cmp.w	sl, #1
 8008f3a:	d102      	bne.n	8008f42 <_strtod_l+0xa7a>
 8008f3c:	2f00      	cmp	r7, #0
 8008f3e:	f43f ad83 	beq.w	8008a48 <_strtod_l+0x580>
 8008f42:	4b62      	ldr	r3, [pc, #392]	; (80090cc <_strtod_l+0xc04>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	e78e      	b.n	8008e66 <_strtod_l+0x99e>
 8008f48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80090c8 <_strtod_l+0xc00>
 8008f4c:	f04f 0800 	mov.w	r8, #0
 8008f50:	e7e7      	b.n	8008f22 <_strtod_l+0xa5a>
 8008f52:	4b5d      	ldr	r3, [pc, #372]	; (80090c8 <_strtod_l+0xc00>)
 8008f54:	4640      	mov	r0, r8
 8008f56:	4649      	mov	r1, r9
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f7f7 fb5d 	bl	8000618 <__aeabi_dmul>
 8008f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f60:	4680      	mov	r8, r0
 8008f62:	4689      	mov	r9, r1
 8008f64:	b933      	cbnz	r3, 8008f74 <_strtod_l+0xaac>
 8008f66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f6a:	900e      	str	r0, [sp, #56]	; 0x38
 8008f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008f72:	e7dd      	b.n	8008f30 <_strtod_l+0xa68>
 8008f74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008f78:	e7f9      	b.n	8008f6e <_strtod_l+0xaa6>
 8008f7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1a8      	bne.n	8008ed6 <_strtod_l+0xa0e>
 8008f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f8a:	0d1b      	lsrs	r3, r3, #20
 8008f8c:	051b      	lsls	r3, r3, #20
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d1a1      	bne.n	8008ed6 <_strtod_l+0xa0e>
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f7f7 fe61 	bl	8000c5c <__aeabi_d2lz>
 8008f9a:	f7f7 fb0f 	bl	80005bc <__aeabi_l2d>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f97f 	bl	80002a8 <__aeabi_dsub>
 8008faa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fb0:	ea43 030a 	orr.w	r3, r3, sl
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	4680      	mov	r8, r0
 8008fb8:	4689      	mov	r9, r1
 8008fba:	d055      	beq.n	8009068 <_strtod_l+0xba0>
 8008fbc:	a336      	add	r3, pc, #216	; (adr r3, 8009098 <_strtod_l+0xbd0>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f7f7 fd9b 	bl	8000afc <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f47f acd0 	bne.w	800896c <_strtod_l+0x4a4>
 8008fcc:	a334      	add	r3, pc, #208	; (adr r3, 80090a0 <_strtod_l+0xbd8>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f af7b 	beq.w	8008ed6 <_strtod_l+0xa0e>
 8008fe0:	e4c4      	b.n	800896c <_strtod_l+0x4a4>
 8008fe2:	9b04      	ldr	r3, [sp, #16]
 8008fe4:	b333      	cbz	r3, 8009034 <_strtod_l+0xb6c>
 8008fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008fec:	d822      	bhi.n	8009034 <_strtod_l+0xb6c>
 8008fee:	a32e      	add	r3, pc, #184	; (adr r3, 80090a8 <_strtod_l+0xbe0>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	f7f7 fd8a 	bl	8000b10 <__aeabi_dcmple>
 8008ffc:	b1a0      	cbz	r0, 8009028 <_strtod_l+0xb60>
 8008ffe:	4649      	mov	r1, r9
 8009000:	4640      	mov	r0, r8
 8009002:	f7f7 fda3 	bl	8000b4c <__aeabi_d2uiz>
 8009006:	2801      	cmp	r0, #1
 8009008:	bf38      	it	cc
 800900a:	2001      	movcc	r0, #1
 800900c:	f7f7 fa8a 	bl	8000524 <__aeabi_ui2d>
 8009010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009012:	4680      	mov	r8, r0
 8009014:	4689      	mov	r9, r1
 8009016:	bb23      	cbnz	r3, 8009062 <_strtod_l+0xb9a>
 8009018:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800901c:	9010      	str	r0, [sp, #64]	; 0x40
 800901e:	9311      	str	r3, [sp, #68]	; 0x44
 8009020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009024:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800902c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	9309      	str	r3, [sp, #36]	; 0x24
 8009034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009038:	eeb0 0a48 	vmov.f32	s0, s16
 800903c:	eef0 0a68 	vmov.f32	s1, s17
 8009040:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009044:	f001 f8d4 	bl	800a1f0 <__ulp>
 8009048:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800904c:	ec53 2b10 	vmov	r2, r3, d0
 8009050:	f7f7 fae2 	bl	8000618 <__aeabi_dmul>
 8009054:	ec53 2b18 	vmov	r2, r3, d8
 8009058:	f7f7 f928 	bl	80002ac <__adddf3>
 800905c:	4682      	mov	sl, r0
 800905e:	468b      	mov	fp, r1
 8009060:	e78d      	b.n	8008f7e <_strtod_l+0xab6>
 8009062:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009066:	e7db      	b.n	8009020 <_strtod_l+0xb58>
 8009068:	a311      	add	r3, pc, #68	; (adr r3, 80090b0 <_strtod_l+0xbe8>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 fd45 	bl	8000afc <__aeabi_dcmplt>
 8009072:	e7b2      	b.n	8008fda <_strtod_l+0xb12>
 8009074:	2300      	movs	r3, #0
 8009076:	930a      	str	r3, [sp, #40]	; 0x28
 8009078:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800907a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	f7ff ba6b 	b.w	8008558 <_strtod_l+0x90>
 8009082:	2a65      	cmp	r2, #101	; 0x65
 8009084:	f43f ab5f 	beq.w	8008746 <_strtod_l+0x27e>
 8009088:	2a45      	cmp	r2, #69	; 0x45
 800908a:	f43f ab5c 	beq.w	8008746 <_strtod_l+0x27e>
 800908e:	2301      	movs	r3, #1
 8009090:	f7ff bb94 	b.w	80087bc <_strtod_l+0x2f4>
 8009094:	f3af 8000 	nop.w
 8009098:	94a03595 	.word	0x94a03595
 800909c:	3fdfffff 	.word	0x3fdfffff
 80090a0:	35afe535 	.word	0x35afe535
 80090a4:	3fe00000 	.word	0x3fe00000
 80090a8:	ffc00000 	.word	0xffc00000
 80090ac:	41dfffff 	.word	0x41dfffff
 80090b0:	94a03595 	.word	0x94a03595
 80090b4:	3fcfffff 	.word	0x3fcfffff
 80090b8:	3ff00000 	.word	0x3ff00000
 80090bc:	7ff00000 	.word	0x7ff00000
 80090c0:	7fe00000 	.word	0x7fe00000
 80090c4:	7c9fffff 	.word	0x7c9fffff
 80090c8:	3fe00000 	.word	0x3fe00000
 80090cc:	bff00000 	.word	0xbff00000
 80090d0:	7fefffff 	.word	0x7fefffff

080090d4 <strtod>:
 80090d4:	460a      	mov	r2, r1
 80090d6:	4601      	mov	r1, r0
 80090d8:	4802      	ldr	r0, [pc, #8]	; (80090e4 <strtod+0x10>)
 80090da:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <strtod+0x14>)
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f7ff b9f3 	b.w	80084c8 <_strtod_l>
 80090e2:	bf00      	nop
 80090e4:	20000010 	.word	0x20000010
 80090e8:	20000078 	.word	0x20000078

080090ec <_strtol_l.constprop.0>:
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f2:	d001      	beq.n	80090f8 <_strtol_l.constprop.0+0xc>
 80090f4:	2b24      	cmp	r3, #36	; 0x24
 80090f6:	d906      	bls.n	8009106 <_strtol_l.constprop.0+0x1a>
 80090f8:	f7fe ff18 	bl	8007f2c <__errno>
 80090fc:	2316      	movs	r3, #22
 80090fe:	6003      	str	r3, [r0, #0]
 8009100:	2000      	movs	r0, #0
 8009102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009106:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80091ec <_strtol_l.constprop.0+0x100>
 800910a:	460d      	mov	r5, r1
 800910c:	462e      	mov	r6, r5
 800910e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009112:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009116:	f017 0708 	ands.w	r7, r7, #8
 800911a:	d1f7      	bne.n	800910c <_strtol_l.constprop.0+0x20>
 800911c:	2c2d      	cmp	r4, #45	; 0x2d
 800911e:	d132      	bne.n	8009186 <_strtol_l.constprop.0+0x9a>
 8009120:	782c      	ldrb	r4, [r5, #0]
 8009122:	2701      	movs	r7, #1
 8009124:	1cb5      	adds	r5, r6, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d05b      	beq.n	80091e2 <_strtol_l.constprop.0+0xf6>
 800912a:	2b10      	cmp	r3, #16
 800912c:	d109      	bne.n	8009142 <_strtol_l.constprop.0+0x56>
 800912e:	2c30      	cmp	r4, #48	; 0x30
 8009130:	d107      	bne.n	8009142 <_strtol_l.constprop.0+0x56>
 8009132:	782c      	ldrb	r4, [r5, #0]
 8009134:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009138:	2c58      	cmp	r4, #88	; 0x58
 800913a:	d14d      	bne.n	80091d8 <_strtol_l.constprop.0+0xec>
 800913c:	786c      	ldrb	r4, [r5, #1]
 800913e:	2310      	movs	r3, #16
 8009140:	3502      	adds	r5, #2
 8009142:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009146:	f108 38ff 	add.w	r8, r8, #4294967295
 800914a:	f04f 0c00 	mov.w	ip, #0
 800914e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009152:	4666      	mov	r6, ip
 8009154:	fb03 8a19 	mls	sl, r3, r9, r8
 8009158:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800915c:	f1be 0f09 	cmp.w	lr, #9
 8009160:	d816      	bhi.n	8009190 <_strtol_l.constprop.0+0xa4>
 8009162:	4674      	mov	r4, lr
 8009164:	42a3      	cmp	r3, r4
 8009166:	dd24      	ble.n	80091b2 <_strtol_l.constprop.0+0xc6>
 8009168:	f1bc 0f00 	cmp.w	ip, #0
 800916c:	db1e      	blt.n	80091ac <_strtol_l.constprop.0+0xc0>
 800916e:	45b1      	cmp	r9, r6
 8009170:	d31c      	bcc.n	80091ac <_strtol_l.constprop.0+0xc0>
 8009172:	d101      	bne.n	8009178 <_strtol_l.constprop.0+0x8c>
 8009174:	45a2      	cmp	sl, r4
 8009176:	db19      	blt.n	80091ac <_strtol_l.constprop.0+0xc0>
 8009178:	fb06 4603 	mla	r6, r6, r3, r4
 800917c:	f04f 0c01 	mov.w	ip, #1
 8009180:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009184:	e7e8      	b.n	8009158 <_strtol_l.constprop.0+0x6c>
 8009186:	2c2b      	cmp	r4, #43	; 0x2b
 8009188:	bf04      	itt	eq
 800918a:	782c      	ldrbeq	r4, [r5, #0]
 800918c:	1cb5      	addeq	r5, r6, #2
 800918e:	e7ca      	b.n	8009126 <_strtol_l.constprop.0+0x3a>
 8009190:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009194:	f1be 0f19 	cmp.w	lr, #25
 8009198:	d801      	bhi.n	800919e <_strtol_l.constprop.0+0xb2>
 800919a:	3c37      	subs	r4, #55	; 0x37
 800919c:	e7e2      	b.n	8009164 <_strtol_l.constprop.0+0x78>
 800919e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80091a2:	f1be 0f19 	cmp.w	lr, #25
 80091a6:	d804      	bhi.n	80091b2 <_strtol_l.constprop.0+0xc6>
 80091a8:	3c57      	subs	r4, #87	; 0x57
 80091aa:	e7db      	b.n	8009164 <_strtol_l.constprop.0+0x78>
 80091ac:	f04f 3cff 	mov.w	ip, #4294967295
 80091b0:	e7e6      	b.n	8009180 <_strtol_l.constprop.0+0x94>
 80091b2:	f1bc 0f00 	cmp.w	ip, #0
 80091b6:	da05      	bge.n	80091c4 <_strtol_l.constprop.0+0xd8>
 80091b8:	2322      	movs	r3, #34	; 0x22
 80091ba:	6003      	str	r3, [r0, #0]
 80091bc:	4646      	mov	r6, r8
 80091be:	b942      	cbnz	r2, 80091d2 <_strtol_l.constprop.0+0xe6>
 80091c0:	4630      	mov	r0, r6
 80091c2:	e79e      	b.n	8009102 <_strtol_l.constprop.0+0x16>
 80091c4:	b107      	cbz	r7, 80091c8 <_strtol_l.constprop.0+0xdc>
 80091c6:	4276      	negs	r6, r6
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	d0f9      	beq.n	80091c0 <_strtol_l.constprop.0+0xd4>
 80091cc:	f1bc 0f00 	cmp.w	ip, #0
 80091d0:	d000      	beq.n	80091d4 <_strtol_l.constprop.0+0xe8>
 80091d2:	1e69      	subs	r1, r5, #1
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	e7f3      	b.n	80091c0 <_strtol_l.constprop.0+0xd4>
 80091d8:	2430      	movs	r4, #48	; 0x30
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1b1      	bne.n	8009142 <_strtol_l.constprop.0+0x56>
 80091de:	2308      	movs	r3, #8
 80091e0:	e7af      	b.n	8009142 <_strtol_l.constprop.0+0x56>
 80091e2:	2c30      	cmp	r4, #48	; 0x30
 80091e4:	d0a5      	beq.n	8009132 <_strtol_l.constprop.0+0x46>
 80091e6:	230a      	movs	r3, #10
 80091e8:	e7ab      	b.n	8009142 <_strtol_l.constprop.0+0x56>
 80091ea:	bf00      	nop
 80091ec:	0800b129 	.word	0x0800b129

080091f0 <strtol>:
 80091f0:	4613      	mov	r3, r2
 80091f2:	460a      	mov	r2, r1
 80091f4:	4601      	mov	r1, r0
 80091f6:	4802      	ldr	r0, [pc, #8]	; (8009200 <strtol+0x10>)
 80091f8:	6800      	ldr	r0, [r0, #0]
 80091fa:	f7ff bf77 	b.w	80090ec <_strtol_l.constprop.0>
 80091fe:	bf00      	nop
 8009200:	20000010 	.word	0x20000010

08009204 <_write_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	; (8009224 <_write_r+0x20>)
 8009208:	4604      	mov	r4, r0
 800920a:	4608      	mov	r0, r1
 800920c:	4611      	mov	r1, r2
 800920e:	2200      	movs	r2, #0
 8009210:	602a      	str	r2, [r5, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f7f8 fe25 	bl	8001e62 <_write>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_write_r+0x1e>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_write_r+0x1e>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	2000319c 	.word	0x2000319c

08009228 <_close_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	; (8009244 <_close_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7f8 fe31 	bl	8001e9a <_close>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_close_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_close_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	2000319c 	.word	0x2000319c

08009248 <__sflush_r>:
 8009248:	898a      	ldrh	r2, [r1, #12]
 800924a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	4605      	mov	r5, r0
 8009250:	0710      	lsls	r0, r2, #28
 8009252:	460c      	mov	r4, r1
 8009254:	d458      	bmi.n	8009308 <__sflush_r+0xc0>
 8009256:	684b      	ldr	r3, [r1, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc05      	bgt.n	8009268 <__sflush_r+0x20>
 800925c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	dc02      	bgt.n	8009268 <__sflush_r+0x20>
 8009262:	2000      	movs	r0, #0
 8009264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800926a:	2e00      	cmp	r6, #0
 800926c:	d0f9      	beq.n	8009262 <__sflush_r+0x1a>
 800926e:	2300      	movs	r3, #0
 8009270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009274:	682f      	ldr	r7, [r5, #0]
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	d032      	beq.n	80092e0 <__sflush_r+0x98>
 800927a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	075a      	lsls	r2, r3, #29
 8009280:	d505      	bpl.n	800928e <__sflush_r+0x46>
 8009282:	6863      	ldr	r3, [r4, #4]
 8009284:	1ac0      	subs	r0, r0, r3
 8009286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009288:	b10b      	cbz	r3, 800928e <__sflush_r+0x46>
 800928a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800928c:	1ac0      	subs	r0, r0, r3
 800928e:	2300      	movs	r3, #0
 8009290:	4602      	mov	r2, r0
 8009292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009294:	6a21      	ldr	r1, [r4, #32]
 8009296:	4628      	mov	r0, r5
 8009298:	47b0      	blx	r6
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	d106      	bne.n	80092ae <__sflush_r+0x66>
 80092a0:	6829      	ldr	r1, [r5, #0]
 80092a2:	291d      	cmp	r1, #29
 80092a4:	d82c      	bhi.n	8009300 <__sflush_r+0xb8>
 80092a6:	4a2a      	ldr	r2, [pc, #168]	; (8009350 <__sflush_r+0x108>)
 80092a8:	40ca      	lsrs	r2, r1
 80092aa:	07d6      	lsls	r6, r2, #31
 80092ac:	d528      	bpl.n	8009300 <__sflush_r+0xb8>
 80092ae:	2200      	movs	r2, #0
 80092b0:	6062      	str	r2, [r4, #4]
 80092b2:	04d9      	lsls	r1, r3, #19
 80092b4:	6922      	ldr	r2, [r4, #16]
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	d504      	bpl.n	80092c4 <__sflush_r+0x7c>
 80092ba:	1c42      	adds	r2, r0, #1
 80092bc:	d101      	bne.n	80092c2 <__sflush_r+0x7a>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	b903      	cbnz	r3, 80092c4 <__sflush_r+0x7c>
 80092c2:	6560      	str	r0, [r4, #84]	; 0x54
 80092c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092c6:	602f      	str	r7, [r5, #0]
 80092c8:	2900      	cmp	r1, #0
 80092ca:	d0ca      	beq.n	8009262 <__sflush_r+0x1a>
 80092cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d0:	4299      	cmp	r1, r3
 80092d2:	d002      	beq.n	80092da <__sflush_r+0x92>
 80092d4:	4628      	mov	r0, r5
 80092d6:	f001 f8f1 	bl	800a4bc <_free_r>
 80092da:	2000      	movs	r0, #0
 80092dc:	6360      	str	r0, [r4, #52]	; 0x34
 80092de:	e7c1      	b.n	8009264 <__sflush_r+0x1c>
 80092e0:	6a21      	ldr	r1, [r4, #32]
 80092e2:	2301      	movs	r3, #1
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	1c41      	adds	r1, r0, #1
 80092ea:	d1c7      	bne.n	800927c <__sflush_r+0x34>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0c4      	beq.n	800927c <__sflush_r+0x34>
 80092f2:	2b1d      	cmp	r3, #29
 80092f4:	d001      	beq.n	80092fa <__sflush_r+0xb2>
 80092f6:	2b16      	cmp	r3, #22
 80092f8:	d101      	bne.n	80092fe <__sflush_r+0xb6>
 80092fa:	602f      	str	r7, [r5, #0]
 80092fc:	e7b1      	b.n	8009262 <__sflush_r+0x1a>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7ad      	b.n	8009264 <__sflush_r+0x1c>
 8009308:	690f      	ldr	r7, [r1, #16]
 800930a:	2f00      	cmp	r7, #0
 800930c:	d0a9      	beq.n	8009262 <__sflush_r+0x1a>
 800930e:	0793      	lsls	r3, r2, #30
 8009310:	680e      	ldr	r6, [r1, #0]
 8009312:	bf08      	it	eq
 8009314:	694b      	ldreq	r3, [r1, #20]
 8009316:	600f      	str	r7, [r1, #0]
 8009318:	bf18      	it	ne
 800931a:	2300      	movne	r3, #0
 800931c:	eba6 0807 	sub.w	r8, r6, r7
 8009320:	608b      	str	r3, [r1, #8]
 8009322:	f1b8 0f00 	cmp.w	r8, #0
 8009326:	dd9c      	ble.n	8009262 <__sflush_r+0x1a>
 8009328:	6a21      	ldr	r1, [r4, #32]
 800932a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800932c:	4643      	mov	r3, r8
 800932e:	463a      	mov	r2, r7
 8009330:	4628      	mov	r0, r5
 8009332:	47b0      	blx	r6
 8009334:	2800      	cmp	r0, #0
 8009336:	dc06      	bgt.n	8009346 <__sflush_r+0xfe>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	e78e      	b.n	8009264 <__sflush_r+0x1c>
 8009346:	4407      	add	r7, r0
 8009348:	eba8 0800 	sub.w	r8, r8, r0
 800934c:	e7e9      	b.n	8009322 <__sflush_r+0xda>
 800934e:	bf00      	nop
 8009350:	20400001 	.word	0x20400001

08009354 <_fflush_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	690b      	ldr	r3, [r1, #16]
 8009358:	4605      	mov	r5, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b913      	cbnz	r3, 8009364 <_fflush_r+0x10>
 800935e:	2500      	movs	r5, #0
 8009360:	4628      	mov	r0, r5
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	b118      	cbz	r0, 800936e <_fflush_r+0x1a>
 8009366:	6983      	ldr	r3, [r0, #24]
 8009368:	b90b      	cbnz	r3, 800936e <_fflush_r+0x1a>
 800936a:	f7fe fe3d 	bl	8007fe8 <__sinit>
 800936e:	4b14      	ldr	r3, [pc, #80]	; (80093c0 <_fflush_r+0x6c>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d11b      	bne.n	80093ac <_fflush_r+0x58>
 8009374:	686c      	ldr	r4, [r5, #4]
 8009376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0ef      	beq.n	800935e <_fflush_r+0xa>
 800937e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009380:	07d0      	lsls	r0, r2, #31
 8009382:	d404      	bmi.n	800938e <_fflush_r+0x3a>
 8009384:	0599      	lsls	r1, r3, #22
 8009386:	d402      	bmi.n	800938e <_fflush_r+0x3a>
 8009388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938a:	f7fe fef0 	bl	800816e <__retarget_lock_acquire_recursive>
 800938e:	4628      	mov	r0, r5
 8009390:	4621      	mov	r1, r4
 8009392:	f7ff ff59 	bl	8009248 <__sflush_r>
 8009396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009398:	07da      	lsls	r2, r3, #31
 800939a:	4605      	mov	r5, r0
 800939c:	d4e0      	bmi.n	8009360 <_fflush_r+0xc>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	059b      	lsls	r3, r3, #22
 80093a2:	d4dd      	bmi.n	8009360 <_fflush_r+0xc>
 80093a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a6:	f7fe fee3 	bl	8008170 <__retarget_lock_release_recursive>
 80093aa:	e7d9      	b.n	8009360 <_fflush_r+0xc>
 80093ac:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <_fflush_r+0x70>)
 80093ae:	429c      	cmp	r4, r3
 80093b0:	d101      	bne.n	80093b6 <_fflush_r+0x62>
 80093b2:	68ac      	ldr	r4, [r5, #8]
 80093b4:	e7df      	b.n	8009376 <_fflush_r+0x22>
 80093b6:	4b04      	ldr	r3, [pc, #16]	; (80093c8 <_fflush_r+0x74>)
 80093b8:	429c      	cmp	r4, r3
 80093ba:	bf08      	it	eq
 80093bc:	68ec      	ldreq	r4, [r5, #12]
 80093be:	e7da      	b.n	8009376 <_fflush_r+0x22>
 80093c0:	0800b084 	.word	0x0800b084
 80093c4:	0800b0a4 	.word	0x0800b0a4
 80093c8:	0800b064 	.word	0x0800b064

080093cc <rshift>:
 80093cc:	6903      	ldr	r3, [r0, #16]
 80093ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093da:	f100 0414 	add.w	r4, r0, #20
 80093de:	dd45      	ble.n	800946c <rshift+0xa0>
 80093e0:	f011 011f 	ands.w	r1, r1, #31
 80093e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093ec:	d10c      	bne.n	8009408 <rshift+0x3c>
 80093ee:	f100 0710 	add.w	r7, r0, #16
 80093f2:	4629      	mov	r1, r5
 80093f4:	42b1      	cmp	r1, r6
 80093f6:	d334      	bcc.n	8009462 <rshift+0x96>
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	1eea      	subs	r2, r5, #3
 80093fe:	4296      	cmp	r6, r2
 8009400:	bf38      	it	cc
 8009402:	2300      	movcc	r3, #0
 8009404:	4423      	add	r3, r4
 8009406:	e015      	b.n	8009434 <rshift+0x68>
 8009408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800940c:	f1c1 0820 	rsb	r8, r1, #32
 8009410:	40cf      	lsrs	r7, r1
 8009412:	f105 0e04 	add.w	lr, r5, #4
 8009416:	46a1      	mov	r9, r4
 8009418:	4576      	cmp	r6, lr
 800941a:	46f4      	mov	ip, lr
 800941c:	d815      	bhi.n	800944a <rshift+0x7e>
 800941e:	1a9a      	subs	r2, r3, r2
 8009420:	0092      	lsls	r2, r2, #2
 8009422:	3a04      	subs	r2, #4
 8009424:	3501      	adds	r5, #1
 8009426:	42ae      	cmp	r6, r5
 8009428:	bf38      	it	cc
 800942a:	2200      	movcc	r2, #0
 800942c:	18a3      	adds	r3, r4, r2
 800942e:	50a7      	str	r7, [r4, r2]
 8009430:	b107      	cbz	r7, 8009434 <rshift+0x68>
 8009432:	3304      	adds	r3, #4
 8009434:	1b1a      	subs	r2, r3, r4
 8009436:	42a3      	cmp	r3, r4
 8009438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800943c:	bf08      	it	eq
 800943e:	2300      	moveq	r3, #0
 8009440:	6102      	str	r2, [r0, #16]
 8009442:	bf08      	it	eq
 8009444:	6143      	streq	r3, [r0, #20]
 8009446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944a:	f8dc c000 	ldr.w	ip, [ip]
 800944e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009452:	ea4c 0707 	orr.w	r7, ip, r7
 8009456:	f849 7b04 	str.w	r7, [r9], #4
 800945a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800945e:	40cf      	lsrs	r7, r1
 8009460:	e7da      	b.n	8009418 <rshift+0x4c>
 8009462:	f851 cb04 	ldr.w	ip, [r1], #4
 8009466:	f847 cf04 	str.w	ip, [r7, #4]!
 800946a:	e7c3      	b.n	80093f4 <rshift+0x28>
 800946c:	4623      	mov	r3, r4
 800946e:	e7e1      	b.n	8009434 <rshift+0x68>

08009470 <__hexdig_fun>:
 8009470:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009474:	2b09      	cmp	r3, #9
 8009476:	d802      	bhi.n	800947e <__hexdig_fun+0xe>
 8009478:	3820      	subs	r0, #32
 800947a:	b2c0      	uxtb	r0, r0
 800947c:	4770      	bx	lr
 800947e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009482:	2b05      	cmp	r3, #5
 8009484:	d801      	bhi.n	800948a <__hexdig_fun+0x1a>
 8009486:	3847      	subs	r0, #71	; 0x47
 8009488:	e7f7      	b.n	800947a <__hexdig_fun+0xa>
 800948a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800948e:	2b05      	cmp	r3, #5
 8009490:	d801      	bhi.n	8009496 <__hexdig_fun+0x26>
 8009492:	3827      	subs	r0, #39	; 0x27
 8009494:	e7f1      	b.n	800947a <__hexdig_fun+0xa>
 8009496:	2000      	movs	r0, #0
 8009498:	4770      	bx	lr
	...

0800949c <__gethex>:
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	ed2d 8b02 	vpush	{d8}
 80094a4:	b089      	sub	sp, #36	; 0x24
 80094a6:	ee08 0a10 	vmov	s16, r0
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	4bb4      	ldr	r3, [pc, #720]	; (8009780 <__gethex+0x2e4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	4618      	mov	r0, r3
 80094b4:	468b      	mov	fp, r1
 80094b6:	4690      	mov	r8, r2
 80094b8:	f7f6 fe94 	bl	80001e4 <strlen>
 80094bc:	9b01      	ldr	r3, [sp, #4]
 80094be:	f8db 2000 	ldr.w	r2, [fp]
 80094c2:	4403      	add	r3, r0
 80094c4:	4682      	mov	sl, r0
 80094c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	1c93      	adds	r3, r2, #2
 80094ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80094d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80094d6:	32fe      	adds	r2, #254	; 0xfe
 80094d8:	18d1      	adds	r1, r2, r3
 80094da:	461f      	mov	r7, r3
 80094dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094e0:	9100      	str	r1, [sp, #0]
 80094e2:	2830      	cmp	r0, #48	; 0x30
 80094e4:	d0f8      	beq.n	80094d8 <__gethex+0x3c>
 80094e6:	f7ff ffc3 	bl	8009470 <__hexdig_fun>
 80094ea:	4604      	mov	r4, r0
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d13a      	bne.n	8009566 <__gethex+0xca>
 80094f0:	9901      	ldr	r1, [sp, #4]
 80094f2:	4652      	mov	r2, sl
 80094f4:	4638      	mov	r0, r7
 80094f6:	f001 fb37 	bl	800ab68 <strncmp>
 80094fa:	4605      	mov	r5, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d168      	bne.n	80095d2 <__gethex+0x136>
 8009500:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009504:	eb07 060a 	add.w	r6, r7, sl
 8009508:	f7ff ffb2 	bl	8009470 <__hexdig_fun>
 800950c:	2800      	cmp	r0, #0
 800950e:	d062      	beq.n	80095d6 <__gethex+0x13a>
 8009510:	4633      	mov	r3, r6
 8009512:	7818      	ldrb	r0, [r3, #0]
 8009514:	2830      	cmp	r0, #48	; 0x30
 8009516:	461f      	mov	r7, r3
 8009518:	f103 0301 	add.w	r3, r3, #1
 800951c:	d0f9      	beq.n	8009512 <__gethex+0x76>
 800951e:	f7ff ffa7 	bl	8009470 <__hexdig_fun>
 8009522:	2301      	movs	r3, #1
 8009524:	fab0 f480 	clz	r4, r0
 8009528:	0964      	lsrs	r4, r4, #5
 800952a:	4635      	mov	r5, r6
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	463a      	mov	r2, r7
 8009530:	4616      	mov	r6, r2
 8009532:	3201      	adds	r2, #1
 8009534:	7830      	ldrb	r0, [r6, #0]
 8009536:	f7ff ff9b 	bl	8009470 <__hexdig_fun>
 800953a:	2800      	cmp	r0, #0
 800953c:	d1f8      	bne.n	8009530 <__gethex+0x94>
 800953e:	9901      	ldr	r1, [sp, #4]
 8009540:	4652      	mov	r2, sl
 8009542:	4630      	mov	r0, r6
 8009544:	f001 fb10 	bl	800ab68 <strncmp>
 8009548:	b980      	cbnz	r0, 800956c <__gethex+0xd0>
 800954a:	b94d      	cbnz	r5, 8009560 <__gethex+0xc4>
 800954c:	eb06 050a 	add.w	r5, r6, sl
 8009550:	462a      	mov	r2, r5
 8009552:	4616      	mov	r6, r2
 8009554:	3201      	adds	r2, #1
 8009556:	7830      	ldrb	r0, [r6, #0]
 8009558:	f7ff ff8a 	bl	8009470 <__hexdig_fun>
 800955c:	2800      	cmp	r0, #0
 800955e:	d1f8      	bne.n	8009552 <__gethex+0xb6>
 8009560:	1bad      	subs	r5, r5, r6
 8009562:	00ad      	lsls	r5, r5, #2
 8009564:	e004      	b.n	8009570 <__gethex+0xd4>
 8009566:	2400      	movs	r4, #0
 8009568:	4625      	mov	r5, r4
 800956a:	e7e0      	b.n	800952e <__gethex+0x92>
 800956c:	2d00      	cmp	r5, #0
 800956e:	d1f7      	bne.n	8009560 <__gethex+0xc4>
 8009570:	7833      	ldrb	r3, [r6, #0]
 8009572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009576:	2b50      	cmp	r3, #80	; 0x50
 8009578:	d13b      	bne.n	80095f2 <__gethex+0x156>
 800957a:	7873      	ldrb	r3, [r6, #1]
 800957c:	2b2b      	cmp	r3, #43	; 0x2b
 800957e:	d02c      	beq.n	80095da <__gethex+0x13e>
 8009580:	2b2d      	cmp	r3, #45	; 0x2d
 8009582:	d02e      	beq.n	80095e2 <__gethex+0x146>
 8009584:	1c71      	adds	r1, r6, #1
 8009586:	f04f 0900 	mov.w	r9, #0
 800958a:	7808      	ldrb	r0, [r1, #0]
 800958c:	f7ff ff70 	bl	8009470 <__hexdig_fun>
 8009590:	1e43      	subs	r3, r0, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b18      	cmp	r3, #24
 8009596:	d82c      	bhi.n	80095f2 <__gethex+0x156>
 8009598:	f1a0 0210 	sub.w	r2, r0, #16
 800959c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095a0:	f7ff ff66 	bl	8009470 <__hexdig_fun>
 80095a4:	1e43      	subs	r3, r0, #1
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b18      	cmp	r3, #24
 80095aa:	d91d      	bls.n	80095e8 <__gethex+0x14c>
 80095ac:	f1b9 0f00 	cmp.w	r9, #0
 80095b0:	d000      	beq.n	80095b4 <__gethex+0x118>
 80095b2:	4252      	negs	r2, r2
 80095b4:	4415      	add	r5, r2
 80095b6:	f8cb 1000 	str.w	r1, [fp]
 80095ba:	b1e4      	cbz	r4, 80095f6 <__gethex+0x15a>
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bf14      	ite	ne
 80095c2:	2700      	movne	r7, #0
 80095c4:	2706      	moveq	r7, #6
 80095c6:	4638      	mov	r0, r7
 80095c8:	b009      	add	sp, #36	; 0x24
 80095ca:	ecbd 8b02 	vpop	{d8}
 80095ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d2:	463e      	mov	r6, r7
 80095d4:	4625      	mov	r5, r4
 80095d6:	2401      	movs	r4, #1
 80095d8:	e7ca      	b.n	8009570 <__gethex+0xd4>
 80095da:	f04f 0900 	mov.w	r9, #0
 80095de:	1cb1      	adds	r1, r6, #2
 80095e0:	e7d3      	b.n	800958a <__gethex+0xee>
 80095e2:	f04f 0901 	mov.w	r9, #1
 80095e6:	e7fa      	b.n	80095de <__gethex+0x142>
 80095e8:	230a      	movs	r3, #10
 80095ea:	fb03 0202 	mla	r2, r3, r2, r0
 80095ee:	3a10      	subs	r2, #16
 80095f0:	e7d4      	b.n	800959c <__gethex+0x100>
 80095f2:	4631      	mov	r1, r6
 80095f4:	e7df      	b.n	80095b6 <__gethex+0x11a>
 80095f6:	1bf3      	subs	r3, r6, r7
 80095f8:	3b01      	subs	r3, #1
 80095fa:	4621      	mov	r1, r4
 80095fc:	2b07      	cmp	r3, #7
 80095fe:	dc0b      	bgt.n	8009618 <__gethex+0x17c>
 8009600:	ee18 0a10 	vmov	r0, s16
 8009604:	f000 fa82 	bl	8009b0c <_Balloc>
 8009608:	4604      	mov	r4, r0
 800960a:	b940      	cbnz	r0, 800961e <__gethex+0x182>
 800960c:	4b5d      	ldr	r3, [pc, #372]	; (8009784 <__gethex+0x2e8>)
 800960e:	4602      	mov	r2, r0
 8009610:	21de      	movs	r1, #222	; 0xde
 8009612:	485d      	ldr	r0, [pc, #372]	; (8009788 <__gethex+0x2ec>)
 8009614:	f001 fb8a 	bl	800ad2c <__assert_func>
 8009618:	3101      	adds	r1, #1
 800961a:	105b      	asrs	r3, r3, #1
 800961c:	e7ee      	b.n	80095fc <__gethex+0x160>
 800961e:	f100 0914 	add.w	r9, r0, #20
 8009622:	f04f 0b00 	mov.w	fp, #0
 8009626:	f1ca 0301 	rsb	r3, sl, #1
 800962a:	f8cd 9008 	str.w	r9, [sp, #8]
 800962e:	f8cd b000 	str.w	fp, [sp]
 8009632:	9306      	str	r3, [sp, #24]
 8009634:	42b7      	cmp	r7, r6
 8009636:	d340      	bcc.n	80096ba <__gethex+0x21e>
 8009638:	9802      	ldr	r0, [sp, #8]
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	f840 3b04 	str.w	r3, [r0], #4
 8009640:	eba0 0009 	sub.w	r0, r0, r9
 8009644:	1080      	asrs	r0, r0, #2
 8009646:	0146      	lsls	r6, r0, #5
 8009648:	6120      	str	r0, [r4, #16]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fb50 	bl	8009cf0 <__hi0bits>
 8009650:	1a30      	subs	r0, r6, r0
 8009652:	f8d8 6000 	ldr.w	r6, [r8]
 8009656:	42b0      	cmp	r0, r6
 8009658:	dd63      	ble.n	8009722 <__gethex+0x286>
 800965a:	1b87      	subs	r7, r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fef4 	bl	800a44c <__any_on>
 8009664:	4682      	mov	sl, r0
 8009666:	b1a8      	cbz	r0, 8009694 <__gethex+0x1f8>
 8009668:	1e7b      	subs	r3, r7, #1
 800966a:	1159      	asrs	r1, r3, #5
 800966c:	f003 021f 	and.w	r2, r3, #31
 8009670:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009674:	f04f 0a01 	mov.w	sl, #1
 8009678:	fa0a f202 	lsl.w	r2, sl, r2
 800967c:	420a      	tst	r2, r1
 800967e:	d009      	beq.n	8009694 <__gethex+0x1f8>
 8009680:	4553      	cmp	r3, sl
 8009682:	dd05      	ble.n	8009690 <__gethex+0x1f4>
 8009684:	1eb9      	subs	r1, r7, #2
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fee0 	bl	800a44c <__any_on>
 800968c:	2800      	cmp	r0, #0
 800968e:	d145      	bne.n	800971c <__gethex+0x280>
 8009690:	f04f 0a02 	mov.w	sl, #2
 8009694:	4639      	mov	r1, r7
 8009696:	4620      	mov	r0, r4
 8009698:	f7ff fe98 	bl	80093cc <rshift>
 800969c:	443d      	add	r5, r7
 800969e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096a2:	42ab      	cmp	r3, r5
 80096a4:	da4c      	bge.n	8009740 <__gethex+0x2a4>
 80096a6:	ee18 0a10 	vmov	r0, s16
 80096aa:	4621      	mov	r1, r4
 80096ac:	f000 fa6e 	bl	8009b8c <_Bfree>
 80096b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096b2:	2300      	movs	r3, #0
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	27a3      	movs	r7, #163	; 0xa3
 80096b8:	e785      	b.n	80095c6 <__gethex+0x12a>
 80096ba:	1e73      	subs	r3, r6, #1
 80096bc:	9a05      	ldr	r2, [sp, #20]
 80096be:	9303      	str	r3, [sp, #12]
 80096c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d019      	beq.n	80096fc <__gethex+0x260>
 80096c8:	f1bb 0f20 	cmp.w	fp, #32
 80096cc:	d107      	bne.n	80096de <__gethex+0x242>
 80096ce:	9b02      	ldr	r3, [sp, #8]
 80096d0:	9a00      	ldr	r2, [sp, #0]
 80096d2:	f843 2b04 	str.w	r2, [r3], #4
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	2300      	movs	r3, #0
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	469b      	mov	fp, r3
 80096de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80096e2:	f7ff fec5 	bl	8009470 <__hexdig_fun>
 80096e6:	9b00      	ldr	r3, [sp, #0]
 80096e8:	f000 000f 	and.w	r0, r0, #15
 80096ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80096f0:	4303      	orrs	r3, r0
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	f10b 0b04 	add.w	fp, fp, #4
 80096f8:	9b03      	ldr	r3, [sp, #12]
 80096fa:	e00d      	b.n	8009718 <__gethex+0x27c>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	9a06      	ldr	r2, [sp, #24]
 8009700:	4413      	add	r3, r2
 8009702:	42bb      	cmp	r3, r7
 8009704:	d3e0      	bcc.n	80096c8 <__gethex+0x22c>
 8009706:	4618      	mov	r0, r3
 8009708:	9901      	ldr	r1, [sp, #4]
 800970a:	9307      	str	r3, [sp, #28]
 800970c:	4652      	mov	r2, sl
 800970e:	f001 fa2b 	bl	800ab68 <strncmp>
 8009712:	9b07      	ldr	r3, [sp, #28]
 8009714:	2800      	cmp	r0, #0
 8009716:	d1d7      	bne.n	80096c8 <__gethex+0x22c>
 8009718:	461e      	mov	r6, r3
 800971a:	e78b      	b.n	8009634 <__gethex+0x198>
 800971c:	f04f 0a03 	mov.w	sl, #3
 8009720:	e7b8      	b.n	8009694 <__gethex+0x1f8>
 8009722:	da0a      	bge.n	800973a <__gethex+0x29e>
 8009724:	1a37      	subs	r7, r6, r0
 8009726:	4621      	mov	r1, r4
 8009728:	ee18 0a10 	vmov	r0, s16
 800972c:	463a      	mov	r2, r7
 800972e:	f000 fc49 	bl	8009fc4 <__lshift>
 8009732:	1bed      	subs	r5, r5, r7
 8009734:	4604      	mov	r4, r0
 8009736:	f100 0914 	add.w	r9, r0, #20
 800973a:	f04f 0a00 	mov.w	sl, #0
 800973e:	e7ae      	b.n	800969e <__gethex+0x202>
 8009740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009744:	42a8      	cmp	r0, r5
 8009746:	dd72      	ble.n	800982e <__gethex+0x392>
 8009748:	1b45      	subs	r5, r0, r5
 800974a:	42ae      	cmp	r6, r5
 800974c:	dc36      	bgt.n	80097bc <__gethex+0x320>
 800974e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d02a      	beq.n	80097ac <__gethex+0x310>
 8009756:	2b03      	cmp	r3, #3
 8009758:	d02c      	beq.n	80097b4 <__gethex+0x318>
 800975a:	2b01      	cmp	r3, #1
 800975c:	d11c      	bne.n	8009798 <__gethex+0x2fc>
 800975e:	42ae      	cmp	r6, r5
 8009760:	d11a      	bne.n	8009798 <__gethex+0x2fc>
 8009762:	2e01      	cmp	r6, #1
 8009764:	d112      	bne.n	800978c <__gethex+0x2f0>
 8009766:	9a04      	ldr	r2, [sp, #16]
 8009768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	2301      	movs	r3, #1
 8009770:	6123      	str	r3, [r4, #16]
 8009772:	f8c9 3000 	str.w	r3, [r9]
 8009776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009778:	2762      	movs	r7, #98	; 0x62
 800977a:	601c      	str	r4, [r3, #0]
 800977c:	e723      	b.n	80095c6 <__gethex+0x12a>
 800977e:	bf00      	nop
 8009780:	0800b2a0 	.word	0x0800b2a0
 8009784:	0800b229 	.word	0x0800b229
 8009788:	0800b23a 	.word	0x0800b23a
 800978c:	1e71      	subs	r1, r6, #1
 800978e:	4620      	mov	r0, r4
 8009790:	f000 fe5c 	bl	800a44c <__any_on>
 8009794:	2800      	cmp	r0, #0
 8009796:	d1e6      	bne.n	8009766 <__gethex+0x2ca>
 8009798:	ee18 0a10 	vmov	r0, s16
 800979c:	4621      	mov	r1, r4
 800979e:	f000 f9f5 	bl	8009b8c <_Bfree>
 80097a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097a4:	2300      	movs	r3, #0
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	2750      	movs	r7, #80	; 0x50
 80097aa:	e70c      	b.n	80095c6 <__gethex+0x12a>
 80097ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1f2      	bne.n	8009798 <__gethex+0x2fc>
 80097b2:	e7d8      	b.n	8009766 <__gethex+0x2ca>
 80097b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1d5      	bne.n	8009766 <__gethex+0x2ca>
 80097ba:	e7ed      	b.n	8009798 <__gethex+0x2fc>
 80097bc:	1e6f      	subs	r7, r5, #1
 80097be:	f1ba 0f00 	cmp.w	sl, #0
 80097c2:	d131      	bne.n	8009828 <__gethex+0x38c>
 80097c4:	b127      	cbz	r7, 80097d0 <__gethex+0x334>
 80097c6:	4639      	mov	r1, r7
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fe3f 	bl	800a44c <__any_on>
 80097ce:	4682      	mov	sl, r0
 80097d0:	117b      	asrs	r3, r7, #5
 80097d2:	2101      	movs	r1, #1
 80097d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80097d8:	f007 071f 	and.w	r7, r7, #31
 80097dc:	fa01 f707 	lsl.w	r7, r1, r7
 80097e0:	421f      	tst	r7, r3
 80097e2:	4629      	mov	r1, r5
 80097e4:	4620      	mov	r0, r4
 80097e6:	bf18      	it	ne
 80097e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80097ec:	1b76      	subs	r6, r6, r5
 80097ee:	f7ff fded 	bl	80093cc <rshift>
 80097f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097f6:	2702      	movs	r7, #2
 80097f8:	f1ba 0f00 	cmp.w	sl, #0
 80097fc:	d048      	beq.n	8009890 <__gethex+0x3f4>
 80097fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d015      	beq.n	8009832 <__gethex+0x396>
 8009806:	2b03      	cmp	r3, #3
 8009808:	d017      	beq.n	800983a <__gethex+0x39e>
 800980a:	2b01      	cmp	r3, #1
 800980c:	d109      	bne.n	8009822 <__gethex+0x386>
 800980e:	f01a 0f02 	tst.w	sl, #2
 8009812:	d006      	beq.n	8009822 <__gethex+0x386>
 8009814:	f8d9 0000 	ldr.w	r0, [r9]
 8009818:	ea4a 0a00 	orr.w	sl, sl, r0
 800981c:	f01a 0f01 	tst.w	sl, #1
 8009820:	d10e      	bne.n	8009840 <__gethex+0x3a4>
 8009822:	f047 0710 	orr.w	r7, r7, #16
 8009826:	e033      	b.n	8009890 <__gethex+0x3f4>
 8009828:	f04f 0a01 	mov.w	sl, #1
 800982c:	e7d0      	b.n	80097d0 <__gethex+0x334>
 800982e:	2701      	movs	r7, #1
 8009830:	e7e2      	b.n	80097f8 <__gethex+0x35c>
 8009832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009834:	f1c3 0301 	rsb	r3, r3, #1
 8009838:	9315      	str	r3, [sp, #84]	; 0x54
 800983a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0f0      	beq.n	8009822 <__gethex+0x386>
 8009840:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009844:	f104 0314 	add.w	r3, r4, #20
 8009848:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800984c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009850:	f04f 0c00 	mov.w	ip, #0
 8009854:	4618      	mov	r0, r3
 8009856:	f853 2b04 	ldr.w	r2, [r3], #4
 800985a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800985e:	d01c      	beq.n	800989a <__gethex+0x3fe>
 8009860:	3201      	adds	r2, #1
 8009862:	6002      	str	r2, [r0, #0]
 8009864:	2f02      	cmp	r7, #2
 8009866:	f104 0314 	add.w	r3, r4, #20
 800986a:	d13f      	bne.n	80098ec <__gethex+0x450>
 800986c:	f8d8 2000 	ldr.w	r2, [r8]
 8009870:	3a01      	subs	r2, #1
 8009872:	42b2      	cmp	r2, r6
 8009874:	d10a      	bne.n	800988c <__gethex+0x3f0>
 8009876:	1171      	asrs	r1, r6, #5
 8009878:	2201      	movs	r2, #1
 800987a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800987e:	f006 061f 	and.w	r6, r6, #31
 8009882:	fa02 f606 	lsl.w	r6, r2, r6
 8009886:	421e      	tst	r6, r3
 8009888:	bf18      	it	ne
 800988a:	4617      	movne	r7, r2
 800988c:	f047 0720 	orr.w	r7, r7, #32
 8009890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009892:	601c      	str	r4, [r3, #0]
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	601d      	str	r5, [r3, #0]
 8009898:	e695      	b.n	80095c6 <__gethex+0x12a>
 800989a:	4299      	cmp	r1, r3
 800989c:	f843 cc04 	str.w	ip, [r3, #-4]
 80098a0:	d8d8      	bhi.n	8009854 <__gethex+0x3b8>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	459b      	cmp	fp, r3
 80098a6:	db19      	blt.n	80098dc <__gethex+0x440>
 80098a8:	6861      	ldr	r1, [r4, #4]
 80098aa:	ee18 0a10 	vmov	r0, s16
 80098ae:	3101      	adds	r1, #1
 80098b0:	f000 f92c 	bl	8009b0c <_Balloc>
 80098b4:	4681      	mov	r9, r0
 80098b6:	b918      	cbnz	r0, 80098c0 <__gethex+0x424>
 80098b8:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <__gethex+0x488>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	2184      	movs	r1, #132	; 0x84
 80098be:	e6a8      	b.n	8009612 <__gethex+0x176>
 80098c0:	6922      	ldr	r2, [r4, #16]
 80098c2:	3202      	adds	r2, #2
 80098c4:	f104 010c 	add.w	r1, r4, #12
 80098c8:	0092      	lsls	r2, r2, #2
 80098ca:	300c      	adds	r0, #12
 80098cc:	f7fe fc51 	bl	8008172 <memcpy>
 80098d0:	4621      	mov	r1, r4
 80098d2:	ee18 0a10 	vmov	r0, s16
 80098d6:	f000 f959 	bl	8009b8c <_Bfree>
 80098da:	464c      	mov	r4, r9
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098e4:	6122      	str	r2, [r4, #16]
 80098e6:	2201      	movs	r2, #1
 80098e8:	615a      	str	r2, [r3, #20]
 80098ea:	e7bb      	b.n	8009864 <__gethex+0x3c8>
 80098ec:	6922      	ldr	r2, [r4, #16]
 80098ee:	455a      	cmp	r2, fp
 80098f0:	dd0b      	ble.n	800990a <__gethex+0x46e>
 80098f2:	2101      	movs	r1, #1
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7ff fd69 	bl	80093cc <rshift>
 80098fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098fe:	3501      	adds	r5, #1
 8009900:	42ab      	cmp	r3, r5
 8009902:	f6ff aed0 	blt.w	80096a6 <__gethex+0x20a>
 8009906:	2701      	movs	r7, #1
 8009908:	e7c0      	b.n	800988c <__gethex+0x3f0>
 800990a:	f016 061f 	ands.w	r6, r6, #31
 800990e:	d0fa      	beq.n	8009906 <__gethex+0x46a>
 8009910:	4453      	add	r3, sl
 8009912:	f1c6 0620 	rsb	r6, r6, #32
 8009916:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800991a:	f000 f9e9 	bl	8009cf0 <__hi0bits>
 800991e:	42b0      	cmp	r0, r6
 8009920:	dbe7      	blt.n	80098f2 <__gethex+0x456>
 8009922:	e7f0      	b.n	8009906 <__gethex+0x46a>
 8009924:	0800b229 	.word	0x0800b229

08009928 <L_shift>:
 8009928:	f1c2 0208 	rsb	r2, r2, #8
 800992c:	0092      	lsls	r2, r2, #2
 800992e:	b570      	push	{r4, r5, r6, lr}
 8009930:	f1c2 0620 	rsb	r6, r2, #32
 8009934:	6843      	ldr	r3, [r0, #4]
 8009936:	6804      	ldr	r4, [r0, #0]
 8009938:	fa03 f506 	lsl.w	r5, r3, r6
 800993c:	432c      	orrs	r4, r5
 800993e:	40d3      	lsrs	r3, r2
 8009940:	6004      	str	r4, [r0, #0]
 8009942:	f840 3f04 	str.w	r3, [r0, #4]!
 8009946:	4288      	cmp	r0, r1
 8009948:	d3f4      	bcc.n	8009934 <L_shift+0xc>
 800994a:	bd70      	pop	{r4, r5, r6, pc}

0800994c <__match>:
 800994c:	b530      	push	{r4, r5, lr}
 800994e:	6803      	ldr	r3, [r0, #0]
 8009950:	3301      	adds	r3, #1
 8009952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009956:	b914      	cbnz	r4, 800995e <__match+0x12>
 8009958:	6003      	str	r3, [r0, #0]
 800995a:	2001      	movs	r0, #1
 800995c:	bd30      	pop	{r4, r5, pc}
 800995e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009962:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009966:	2d19      	cmp	r5, #25
 8009968:	bf98      	it	ls
 800996a:	3220      	addls	r2, #32
 800996c:	42a2      	cmp	r2, r4
 800996e:	d0f0      	beq.n	8009952 <__match+0x6>
 8009970:	2000      	movs	r0, #0
 8009972:	e7f3      	b.n	800995c <__match+0x10>

08009974 <__hexnan>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	680b      	ldr	r3, [r1, #0]
 800997a:	115e      	asrs	r6, r3, #5
 800997c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009980:	f013 031f 	ands.w	r3, r3, #31
 8009984:	b087      	sub	sp, #28
 8009986:	bf18      	it	ne
 8009988:	3604      	addne	r6, #4
 800998a:	2500      	movs	r5, #0
 800998c:	1f37      	subs	r7, r6, #4
 800998e:	4690      	mov	r8, r2
 8009990:	6802      	ldr	r2, [r0, #0]
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	4682      	mov	sl, r0
 8009996:	f846 5c04 	str.w	r5, [r6, #-4]
 800999a:	46b9      	mov	r9, r7
 800999c:	463c      	mov	r4, r7
 800999e:	9502      	str	r5, [sp, #8]
 80099a0:	46ab      	mov	fp, r5
 80099a2:	7851      	ldrb	r1, [r2, #1]
 80099a4:	1c53      	adds	r3, r2, #1
 80099a6:	9303      	str	r3, [sp, #12]
 80099a8:	b341      	cbz	r1, 80099fc <__hexnan+0x88>
 80099aa:	4608      	mov	r0, r1
 80099ac:	9205      	str	r2, [sp, #20]
 80099ae:	9104      	str	r1, [sp, #16]
 80099b0:	f7ff fd5e 	bl	8009470 <__hexdig_fun>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d14f      	bne.n	8009a58 <__hexnan+0xe4>
 80099b8:	9904      	ldr	r1, [sp, #16]
 80099ba:	9a05      	ldr	r2, [sp, #20]
 80099bc:	2920      	cmp	r1, #32
 80099be:	d818      	bhi.n	80099f2 <__hexnan+0x7e>
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	459b      	cmp	fp, r3
 80099c4:	dd13      	ble.n	80099ee <__hexnan+0x7a>
 80099c6:	454c      	cmp	r4, r9
 80099c8:	d206      	bcs.n	80099d8 <__hexnan+0x64>
 80099ca:	2d07      	cmp	r5, #7
 80099cc:	dc04      	bgt.n	80099d8 <__hexnan+0x64>
 80099ce:	462a      	mov	r2, r5
 80099d0:	4649      	mov	r1, r9
 80099d2:	4620      	mov	r0, r4
 80099d4:	f7ff ffa8 	bl	8009928 <L_shift>
 80099d8:	4544      	cmp	r4, r8
 80099da:	d950      	bls.n	8009a7e <__hexnan+0x10a>
 80099dc:	2300      	movs	r3, #0
 80099de:	f1a4 0904 	sub.w	r9, r4, #4
 80099e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80099e6:	f8cd b008 	str.w	fp, [sp, #8]
 80099ea:	464c      	mov	r4, r9
 80099ec:	461d      	mov	r5, r3
 80099ee:	9a03      	ldr	r2, [sp, #12]
 80099f0:	e7d7      	b.n	80099a2 <__hexnan+0x2e>
 80099f2:	2929      	cmp	r1, #41	; 0x29
 80099f4:	d156      	bne.n	8009aa4 <__hexnan+0x130>
 80099f6:	3202      	adds	r2, #2
 80099f8:	f8ca 2000 	str.w	r2, [sl]
 80099fc:	f1bb 0f00 	cmp.w	fp, #0
 8009a00:	d050      	beq.n	8009aa4 <__hexnan+0x130>
 8009a02:	454c      	cmp	r4, r9
 8009a04:	d206      	bcs.n	8009a14 <__hexnan+0xa0>
 8009a06:	2d07      	cmp	r5, #7
 8009a08:	dc04      	bgt.n	8009a14 <__hexnan+0xa0>
 8009a0a:	462a      	mov	r2, r5
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff ff8a 	bl	8009928 <L_shift>
 8009a14:	4544      	cmp	r4, r8
 8009a16:	d934      	bls.n	8009a82 <__hexnan+0x10e>
 8009a18:	f1a8 0204 	sub.w	r2, r8, #4
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a22:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a26:	429f      	cmp	r7, r3
 8009a28:	d2f9      	bcs.n	8009a1e <__hexnan+0xaa>
 8009a2a:	1b3b      	subs	r3, r7, r4
 8009a2c:	f023 0303 	bic.w	r3, r3, #3
 8009a30:	3304      	adds	r3, #4
 8009a32:	3401      	adds	r4, #1
 8009a34:	3e03      	subs	r6, #3
 8009a36:	42b4      	cmp	r4, r6
 8009a38:	bf88      	it	hi
 8009a3a:	2304      	movhi	r3, #4
 8009a3c:	4443      	add	r3, r8
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f843 2b04 	str.w	r2, [r3], #4
 8009a44:	429f      	cmp	r7, r3
 8009a46:	d2fb      	bcs.n	8009a40 <__hexnan+0xcc>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	b91b      	cbnz	r3, 8009a54 <__hexnan+0xe0>
 8009a4c:	4547      	cmp	r7, r8
 8009a4e:	d127      	bne.n	8009aa0 <__hexnan+0x12c>
 8009a50:	2301      	movs	r3, #1
 8009a52:	603b      	str	r3, [r7, #0]
 8009a54:	2005      	movs	r0, #5
 8009a56:	e026      	b.n	8009aa6 <__hexnan+0x132>
 8009a58:	3501      	adds	r5, #1
 8009a5a:	2d08      	cmp	r5, #8
 8009a5c:	f10b 0b01 	add.w	fp, fp, #1
 8009a60:	dd06      	ble.n	8009a70 <__hexnan+0xfc>
 8009a62:	4544      	cmp	r4, r8
 8009a64:	d9c3      	bls.n	80099ee <__hexnan+0x7a>
 8009a66:	2300      	movs	r3, #0
 8009a68:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a6c:	2501      	movs	r5, #1
 8009a6e:	3c04      	subs	r4, #4
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	f000 000f 	and.w	r0, r0, #15
 8009a76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a7a:	6022      	str	r2, [r4, #0]
 8009a7c:	e7b7      	b.n	80099ee <__hexnan+0x7a>
 8009a7e:	2508      	movs	r5, #8
 8009a80:	e7b5      	b.n	80099ee <__hexnan+0x7a>
 8009a82:	9b01      	ldr	r3, [sp, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d0df      	beq.n	8009a48 <__hexnan+0xd4>
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	f1c3 0320 	rsb	r3, r3, #32
 8009a90:	fa22 f303 	lsr.w	r3, r2, r3
 8009a94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a98:	401a      	ands	r2, r3
 8009a9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a9e:	e7d3      	b.n	8009a48 <__hexnan+0xd4>
 8009aa0:	3f04      	subs	r7, #4
 8009aa2:	e7d1      	b.n	8009a48 <__hexnan+0xd4>
 8009aa4:	2004      	movs	r0, #4
 8009aa6:	b007      	add	sp, #28
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009aac <_lseek_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_lseek_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f8 fa14 	bl	8001ee8 <_lseek>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_lseek_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_lseek_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	2000319c 	.word	0x2000319c

08009ad0 <__ascii_mbtowc>:
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	b901      	cbnz	r1, 8009ad6 <__ascii_mbtowc+0x6>
 8009ad4:	a901      	add	r1, sp, #4
 8009ad6:	b142      	cbz	r2, 8009aea <__ascii_mbtowc+0x1a>
 8009ad8:	b14b      	cbz	r3, 8009aee <__ascii_mbtowc+0x1e>
 8009ada:	7813      	ldrb	r3, [r2, #0]
 8009adc:	600b      	str	r3, [r1, #0]
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	1e10      	subs	r0, r2, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2001      	movne	r0, #1
 8009ae6:	b002      	add	sp, #8
 8009ae8:	4770      	bx	lr
 8009aea:	4610      	mov	r0, r2
 8009aec:	e7fb      	b.n	8009ae6 <__ascii_mbtowc+0x16>
 8009aee:	f06f 0001 	mvn.w	r0, #1
 8009af2:	e7f8      	b.n	8009ae6 <__ascii_mbtowc+0x16>

08009af4 <__malloc_lock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__malloc_lock+0x8>)
 8009af6:	f7fe bb3a 	b.w	800816e <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20003190 	.word	0x20003190

08009b00 <__malloc_unlock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__malloc_unlock+0x8>)
 8009b02:	f7fe bb35 	b.w	8008170 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20003190 	.word	0x20003190

08009b0c <_Balloc>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	b976      	cbnz	r6, 8009b34 <_Balloc+0x28>
 8009b16:	2010      	movs	r0, #16
 8009b18:	f001 f99e 	bl	800ae58 <malloc>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009b20:	b920      	cbnz	r0, 8009b2c <_Balloc+0x20>
 8009b22:	4b18      	ldr	r3, [pc, #96]	; (8009b84 <_Balloc+0x78>)
 8009b24:	4818      	ldr	r0, [pc, #96]	; (8009b88 <_Balloc+0x7c>)
 8009b26:	2166      	movs	r1, #102	; 0x66
 8009b28:	f001 f900 	bl	800ad2c <__assert_func>
 8009b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b30:	6006      	str	r6, [r0, #0]
 8009b32:	60c6      	str	r6, [r0, #12]
 8009b34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b36:	68f3      	ldr	r3, [r6, #12]
 8009b38:	b183      	cbz	r3, 8009b5c <_Balloc+0x50>
 8009b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b42:	b9b8      	cbnz	r0, 8009b74 <_Balloc+0x68>
 8009b44:	2101      	movs	r1, #1
 8009b46:	fa01 f605 	lsl.w	r6, r1, r5
 8009b4a:	1d72      	adds	r2, r6, #5
 8009b4c:	0092      	lsls	r2, r2, #2
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fc9d 	bl	800a48e <_calloc_r>
 8009b54:	b160      	cbz	r0, 8009b70 <_Balloc+0x64>
 8009b56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b5a:	e00e      	b.n	8009b7a <_Balloc+0x6e>
 8009b5c:	2221      	movs	r2, #33	; 0x21
 8009b5e:	2104      	movs	r1, #4
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fc94 	bl	800a48e <_calloc_r>
 8009b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b68:	60f0      	str	r0, [r6, #12]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e4      	bne.n	8009b3a <_Balloc+0x2e>
 8009b70:	2000      	movs	r0, #0
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	6802      	ldr	r2, [r0, #0]
 8009b76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b80:	e7f7      	b.n	8009b72 <_Balloc+0x66>
 8009b82:	bf00      	nop
 8009b84:	0800b2b4 	.word	0x0800b2b4
 8009b88:	0800b2cb 	.word	0x0800b2cb

08009b8c <_Bfree>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b976      	cbnz	r6, 8009bb4 <_Bfree+0x28>
 8009b96:	2010      	movs	r0, #16
 8009b98:	f001 f95e 	bl	800ae58 <malloc>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009ba0:	b920      	cbnz	r0, 8009bac <_Bfree+0x20>
 8009ba2:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <_Bfree+0x3c>)
 8009ba4:	4809      	ldr	r0, [pc, #36]	; (8009bcc <_Bfree+0x40>)
 8009ba6:	218a      	movs	r1, #138	; 0x8a
 8009ba8:	f001 f8c0 	bl	800ad2c <__assert_func>
 8009bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb0:	6006      	str	r6, [r0, #0]
 8009bb2:	60c6      	str	r6, [r0, #12]
 8009bb4:	b13c      	cbz	r4, 8009bc6 <_Bfree+0x3a>
 8009bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bb8:	6862      	ldr	r2, [r4, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc0:	6021      	str	r1, [r4, #0]
 8009bc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	0800b2b4 	.word	0x0800b2b4
 8009bcc:	0800b2cb 	.word	0x0800b2cb

08009bd0 <__multadd>:
 8009bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd4:	690d      	ldr	r5, [r1, #16]
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	461e      	mov	r6, r3
 8009bdc:	f101 0c14 	add.w	ip, r1, #20
 8009be0:	2000      	movs	r0, #0
 8009be2:	f8dc 3000 	ldr.w	r3, [ip]
 8009be6:	b299      	uxth	r1, r3
 8009be8:	fb02 6101 	mla	r1, r2, r1, r6
 8009bec:	0c1e      	lsrs	r6, r3, #16
 8009bee:	0c0b      	lsrs	r3, r1, #16
 8009bf0:	fb02 3306 	mla	r3, r2, r6, r3
 8009bf4:	b289      	uxth	r1, r1
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bfc:	4285      	cmp	r5, r0
 8009bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8009c02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c06:	dcec      	bgt.n	8009be2 <__multadd+0x12>
 8009c08:	b30e      	cbz	r6, 8009c4e <__multadd+0x7e>
 8009c0a:	68a3      	ldr	r3, [r4, #8]
 8009c0c:	42ab      	cmp	r3, r5
 8009c0e:	dc19      	bgt.n	8009c44 <__multadd+0x74>
 8009c10:	6861      	ldr	r1, [r4, #4]
 8009c12:	4638      	mov	r0, r7
 8009c14:	3101      	adds	r1, #1
 8009c16:	f7ff ff79 	bl	8009b0c <_Balloc>
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	b928      	cbnz	r0, 8009c2a <__multadd+0x5a>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <__multadd+0x84>)
 8009c22:	480d      	ldr	r0, [pc, #52]	; (8009c58 <__multadd+0x88>)
 8009c24:	21b5      	movs	r1, #181	; 0xb5
 8009c26:	f001 f881 	bl	800ad2c <__assert_func>
 8009c2a:	6922      	ldr	r2, [r4, #16]
 8009c2c:	3202      	adds	r2, #2
 8009c2e:	f104 010c 	add.w	r1, r4, #12
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	300c      	adds	r0, #12
 8009c36:	f7fe fa9c 	bl	8008172 <memcpy>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7ff ffa5 	bl	8009b8c <_Bfree>
 8009c42:	4644      	mov	r4, r8
 8009c44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c48:	3501      	adds	r5, #1
 8009c4a:	615e      	str	r6, [r3, #20]
 8009c4c:	6125      	str	r5, [r4, #16]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	0800b229 	.word	0x0800b229
 8009c58:	0800b2cb 	.word	0x0800b2cb

08009c5c <__s2b>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	460c      	mov	r4, r1
 8009c62:	4615      	mov	r5, r2
 8009c64:	461f      	mov	r7, r3
 8009c66:	2209      	movs	r2, #9
 8009c68:	3308      	adds	r3, #8
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c70:	2100      	movs	r1, #0
 8009c72:	2201      	movs	r2, #1
 8009c74:	429a      	cmp	r2, r3
 8009c76:	db09      	blt.n	8009c8c <__s2b+0x30>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7ff ff47 	bl	8009b0c <_Balloc>
 8009c7e:	b940      	cbnz	r0, 8009c92 <__s2b+0x36>
 8009c80:	4602      	mov	r2, r0
 8009c82:	4b19      	ldr	r3, [pc, #100]	; (8009ce8 <__s2b+0x8c>)
 8009c84:	4819      	ldr	r0, [pc, #100]	; (8009cec <__s2b+0x90>)
 8009c86:	21ce      	movs	r1, #206	; 0xce
 8009c88:	f001 f850 	bl	800ad2c <__assert_func>
 8009c8c:	0052      	lsls	r2, r2, #1
 8009c8e:	3101      	adds	r1, #1
 8009c90:	e7f0      	b.n	8009c74 <__s2b+0x18>
 8009c92:	9b08      	ldr	r3, [sp, #32]
 8009c94:	6143      	str	r3, [r0, #20]
 8009c96:	2d09      	cmp	r5, #9
 8009c98:	f04f 0301 	mov.w	r3, #1
 8009c9c:	6103      	str	r3, [r0, #16]
 8009c9e:	dd16      	ble.n	8009cce <__s2b+0x72>
 8009ca0:	f104 0909 	add.w	r9, r4, #9
 8009ca4:	46c8      	mov	r8, r9
 8009ca6:	442c      	add	r4, r5
 8009ca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009cac:	4601      	mov	r1, r0
 8009cae:	3b30      	subs	r3, #48	; 0x30
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff8c 	bl	8009bd0 <__multadd>
 8009cb8:	45a0      	cmp	r8, r4
 8009cba:	d1f5      	bne.n	8009ca8 <__s2b+0x4c>
 8009cbc:	f1a5 0408 	sub.w	r4, r5, #8
 8009cc0:	444c      	add	r4, r9
 8009cc2:	1b2d      	subs	r5, r5, r4
 8009cc4:	1963      	adds	r3, r4, r5
 8009cc6:	42bb      	cmp	r3, r7
 8009cc8:	db04      	blt.n	8009cd4 <__s2b+0x78>
 8009cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cce:	340a      	adds	r4, #10
 8009cd0:	2509      	movs	r5, #9
 8009cd2:	e7f6      	b.n	8009cc2 <__s2b+0x66>
 8009cd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cd8:	4601      	mov	r1, r0
 8009cda:	3b30      	subs	r3, #48	; 0x30
 8009cdc:	220a      	movs	r2, #10
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ff76 	bl	8009bd0 <__multadd>
 8009ce4:	e7ee      	b.n	8009cc4 <__s2b+0x68>
 8009ce6:	bf00      	nop
 8009ce8:	0800b229 	.word	0x0800b229
 8009cec:	0800b2cb 	.word	0x0800b2cb

08009cf0 <__hi0bits>:
 8009cf0:	0c03      	lsrs	r3, r0, #16
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	b9d3      	cbnz	r3, 8009d2c <__hi0bits+0x3c>
 8009cf6:	0400      	lsls	r0, r0, #16
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cfe:	bf04      	itt	eq
 8009d00:	0200      	lsleq	r0, r0, #8
 8009d02:	3308      	addeq	r3, #8
 8009d04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d08:	bf04      	itt	eq
 8009d0a:	0100      	lsleq	r0, r0, #4
 8009d0c:	3304      	addeq	r3, #4
 8009d0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d12:	bf04      	itt	eq
 8009d14:	0080      	lsleq	r0, r0, #2
 8009d16:	3302      	addeq	r3, #2
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	db05      	blt.n	8009d28 <__hi0bits+0x38>
 8009d1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d20:	f103 0301 	add.w	r3, r3, #1
 8009d24:	bf08      	it	eq
 8009d26:	2320      	moveq	r3, #32
 8009d28:	4618      	mov	r0, r3
 8009d2a:	4770      	bx	lr
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e7e4      	b.n	8009cfa <__hi0bits+0xa>

08009d30 <__lo0bits>:
 8009d30:	6803      	ldr	r3, [r0, #0]
 8009d32:	f013 0207 	ands.w	r2, r3, #7
 8009d36:	4601      	mov	r1, r0
 8009d38:	d00b      	beq.n	8009d52 <__lo0bits+0x22>
 8009d3a:	07da      	lsls	r2, r3, #31
 8009d3c:	d423      	bmi.n	8009d86 <__lo0bits+0x56>
 8009d3e:	0798      	lsls	r0, r3, #30
 8009d40:	bf49      	itett	mi
 8009d42:	085b      	lsrmi	r3, r3, #1
 8009d44:	089b      	lsrpl	r3, r3, #2
 8009d46:	2001      	movmi	r0, #1
 8009d48:	600b      	strmi	r3, [r1, #0]
 8009d4a:	bf5c      	itt	pl
 8009d4c:	600b      	strpl	r3, [r1, #0]
 8009d4e:	2002      	movpl	r0, #2
 8009d50:	4770      	bx	lr
 8009d52:	b298      	uxth	r0, r3
 8009d54:	b9a8      	cbnz	r0, 8009d82 <__lo0bits+0x52>
 8009d56:	0c1b      	lsrs	r3, r3, #16
 8009d58:	2010      	movs	r0, #16
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	b90a      	cbnz	r2, 8009d62 <__lo0bits+0x32>
 8009d5e:	3008      	adds	r0, #8
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	071a      	lsls	r2, r3, #28
 8009d64:	bf04      	itt	eq
 8009d66:	091b      	lsreq	r3, r3, #4
 8009d68:	3004      	addeq	r0, #4
 8009d6a:	079a      	lsls	r2, r3, #30
 8009d6c:	bf04      	itt	eq
 8009d6e:	089b      	lsreq	r3, r3, #2
 8009d70:	3002      	addeq	r0, #2
 8009d72:	07da      	lsls	r2, r3, #31
 8009d74:	d403      	bmi.n	8009d7e <__lo0bits+0x4e>
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	f100 0001 	add.w	r0, r0, #1
 8009d7c:	d005      	beq.n	8009d8a <__lo0bits+0x5a>
 8009d7e:	600b      	str	r3, [r1, #0]
 8009d80:	4770      	bx	lr
 8009d82:	4610      	mov	r0, r2
 8009d84:	e7e9      	b.n	8009d5a <__lo0bits+0x2a>
 8009d86:	2000      	movs	r0, #0
 8009d88:	4770      	bx	lr
 8009d8a:	2020      	movs	r0, #32
 8009d8c:	4770      	bx	lr
	...

08009d90 <__i2b>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	2101      	movs	r1, #1
 8009d96:	f7ff feb9 	bl	8009b0c <_Balloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	b928      	cbnz	r0, 8009daa <__i2b+0x1a>
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <__i2b+0x24>)
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <__i2b+0x28>)
 8009da2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009da6:	f000 ffc1 	bl	800ad2c <__assert_func>
 8009daa:	2301      	movs	r3, #1
 8009dac:	6144      	str	r4, [r0, #20]
 8009dae:	6103      	str	r3, [r0, #16]
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	0800b229 	.word	0x0800b229
 8009db8:	0800b2cb 	.word	0x0800b2cb

08009dbc <__multiply>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	4691      	mov	r9, r2
 8009dc2:	690a      	ldr	r2, [r1, #16]
 8009dc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	bfb8      	it	lt
 8009dcc:	460b      	movlt	r3, r1
 8009dce:	460c      	mov	r4, r1
 8009dd0:	bfbc      	itt	lt
 8009dd2:	464c      	movlt	r4, r9
 8009dd4:	4699      	movlt	r9, r3
 8009dd6:	6927      	ldr	r7, [r4, #16]
 8009dd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	6861      	ldr	r1, [r4, #4]
 8009de0:	eb07 060a 	add.w	r6, r7, sl
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	b085      	sub	sp, #20
 8009de8:	bfb8      	it	lt
 8009dea:	3101      	addlt	r1, #1
 8009dec:	f7ff fe8e 	bl	8009b0c <_Balloc>
 8009df0:	b930      	cbnz	r0, 8009e00 <__multiply+0x44>
 8009df2:	4602      	mov	r2, r0
 8009df4:	4b44      	ldr	r3, [pc, #272]	; (8009f08 <__multiply+0x14c>)
 8009df6:	4845      	ldr	r0, [pc, #276]	; (8009f0c <__multiply+0x150>)
 8009df8:	f240 115d 	movw	r1, #349	; 0x15d
 8009dfc:	f000 ff96 	bl	800ad2c <__assert_func>
 8009e00:	f100 0514 	add.w	r5, r0, #20
 8009e04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e08:	462b      	mov	r3, r5
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	d321      	bcc.n	8009e54 <__multiply+0x98>
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e18:	f109 0314 	add.w	r3, r9, #20
 8009e1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	1b3a      	subs	r2, r7, r4
 8009e24:	3a15      	subs	r2, #21
 8009e26:	f022 0203 	bic.w	r2, r2, #3
 8009e2a:	3204      	adds	r2, #4
 8009e2c:	f104 0115 	add.w	r1, r4, #21
 8009e30:	428f      	cmp	r7, r1
 8009e32:	bf38      	it	cc
 8009e34:	2204      	movcc	r2, #4
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	9a02      	ldr	r2, [sp, #8]
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d80c      	bhi.n	8009e5a <__multiply+0x9e>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	dd03      	ble.n	8009e4c <__multiply+0x90>
 8009e44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d05a      	beq.n	8009f02 <__multiply+0x146>
 8009e4c:	6106      	str	r6, [r0, #16]
 8009e4e:	b005      	add	sp, #20
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	f843 2b04 	str.w	r2, [r3], #4
 8009e58:	e7d8      	b.n	8009e0c <__multiply+0x50>
 8009e5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	d024      	beq.n	8009eae <__multiply+0xf2>
 8009e64:	f104 0e14 	add.w	lr, r4, #20
 8009e68:	46a9      	mov	r9, r5
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e72:	f8d9 1000 	ldr.w	r1, [r9]
 8009e76:	fa1f fb82 	uxth.w	fp, r2
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e84:	f8d9 2000 	ldr.w	r2, [r9]
 8009e88:	4461      	add	r1, ip
 8009e8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e96:	b289      	uxth	r1, r1
 8009e98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e9c:	4577      	cmp	r7, lr
 8009e9e:	f849 1b04 	str.w	r1, [r9], #4
 8009ea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ea6:	d8e2      	bhi.n	8009e6e <__multiply+0xb2>
 8009ea8:	9a01      	ldr	r2, [sp, #4]
 8009eaa:	f845 c002 	str.w	ip, [r5, r2]
 8009eae:	9a03      	ldr	r2, [sp, #12]
 8009eb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	f1b9 0f00 	cmp.w	r9, #0
 8009eba:	d020      	beq.n	8009efe <__multiply+0x142>
 8009ebc:	6829      	ldr	r1, [r5, #0]
 8009ebe:	f104 0c14 	add.w	ip, r4, #20
 8009ec2:	46ae      	mov	lr, r5
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ed0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ed4:	4492      	add	sl, r2
 8009ed6:	b289      	uxth	r1, r1
 8009ed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009edc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ee4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ee8:	0c12      	lsrs	r2, r2, #16
 8009eea:	fb09 1102 	mla	r1, r9, r2, r1
 8009eee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ef2:	4567      	cmp	r7, ip
 8009ef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ef8:	d8e6      	bhi.n	8009ec8 <__multiply+0x10c>
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	50a9      	str	r1, [r5, r2]
 8009efe:	3504      	adds	r5, #4
 8009f00:	e79a      	b.n	8009e38 <__multiply+0x7c>
 8009f02:	3e01      	subs	r6, #1
 8009f04:	e79c      	b.n	8009e40 <__multiply+0x84>
 8009f06:	bf00      	nop
 8009f08:	0800b229 	.word	0x0800b229
 8009f0c:	0800b2cb 	.word	0x0800b2cb

08009f10 <__pow5mult>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4615      	mov	r5, r2
 8009f16:	f012 0203 	ands.w	r2, r2, #3
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	d007      	beq.n	8009f30 <__pow5mult+0x20>
 8009f20:	4c25      	ldr	r4, [pc, #148]	; (8009fb8 <__pow5mult+0xa8>)
 8009f22:	3a01      	subs	r2, #1
 8009f24:	2300      	movs	r3, #0
 8009f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f2a:	f7ff fe51 	bl	8009bd0 <__multadd>
 8009f2e:	4607      	mov	r7, r0
 8009f30:	10ad      	asrs	r5, r5, #2
 8009f32:	d03d      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f36:	b97c      	cbnz	r4, 8009f58 <__pow5mult+0x48>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	f000 ff8d 	bl	800ae58 <malloc>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6270      	str	r0, [r6, #36]	; 0x24
 8009f42:	b928      	cbnz	r0, 8009f50 <__pow5mult+0x40>
 8009f44:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <__pow5mult+0xac>)
 8009f46:	481e      	ldr	r0, [pc, #120]	; (8009fc0 <__pow5mult+0xb0>)
 8009f48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f4c:	f000 feee 	bl	800ad2c <__assert_func>
 8009f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f54:	6004      	str	r4, [r0, #0]
 8009f56:	60c4      	str	r4, [r0, #12]
 8009f58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f60:	b94c      	cbnz	r4, 8009f76 <__pow5mult+0x66>
 8009f62:	f240 2171 	movw	r1, #625	; 0x271
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ff12 	bl	8009d90 <__i2b>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f72:	4604      	mov	r4, r0
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	f04f 0900 	mov.w	r9, #0
 8009f7a:	07eb      	lsls	r3, r5, #31
 8009f7c:	d50a      	bpl.n	8009f94 <__pow5mult+0x84>
 8009f7e:	4639      	mov	r1, r7
 8009f80:	4622      	mov	r2, r4
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ff1a 	bl	8009dbc <__multiply>
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff fdfd 	bl	8009b8c <_Bfree>
 8009f92:	4647      	mov	r7, r8
 8009f94:	106d      	asrs	r5, r5, #1
 8009f96:	d00b      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	b938      	cbnz	r0, 8009fac <__pow5mult+0x9c>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ff0b 	bl	8009dbc <__multiply>
 8009fa6:	6020      	str	r0, [r4, #0]
 8009fa8:	f8c0 9000 	str.w	r9, [r0]
 8009fac:	4604      	mov	r4, r0
 8009fae:	e7e4      	b.n	8009f7a <__pow5mult+0x6a>
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800b418 	.word	0x0800b418
 8009fbc:	0800b2b4 	.word	0x0800b2b4
 8009fc0:	0800b2cb 	.word	0x0800b2cb

08009fc4 <__lshift>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	6849      	ldr	r1, [r1, #4]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	4691      	mov	r9, r2
 8009fd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fdc:	f108 0601 	add.w	r6, r8, #1
 8009fe0:	42b3      	cmp	r3, r6
 8009fe2:	db0b      	blt.n	8009ffc <__lshift+0x38>
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff fd91 	bl	8009b0c <_Balloc>
 8009fea:	4605      	mov	r5, r0
 8009fec:	b948      	cbnz	r0, 800a002 <__lshift+0x3e>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <__lshift+0xd8>)
 8009ff2:	482b      	ldr	r0, [pc, #172]	; (800a0a0 <__lshift+0xdc>)
 8009ff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ff8:	f000 fe98 	bl	800ad2c <__assert_func>
 8009ffc:	3101      	adds	r1, #1
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	e7ee      	b.n	8009fe0 <__lshift+0x1c>
 800a002:	2300      	movs	r3, #0
 800a004:	f100 0114 	add.w	r1, r0, #20
 800a008:	f100 0210 	add.w	r2, r0, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	4553      	cmp	r3, sl
 800a010:	db37      	blt.n	800a082 <__lshift+0xbe>
 800a012:	6920      	ldr	r0, [r4, #16]
 800a014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a018:	f104 0314 	add.w	r3, r4, #20
 800a01c:	f019 091f 	ands.w	r9, r9, #31
 800a020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a028:	d02f      	beq.n	800a08a <__lshift+0xc6>
 800a02a:	f1c9 0e20 	rsb	lr, r9, #32
 800a02e:	468a      	mov	sl, r1
 800a030:	f04f 0c00 	mov.w	ip, #0
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	fa02 f209 	lsl.w	r2, r2, r9
 800a03a:	ea42 020c 	orr.w	r2, r2, ip
 800a03e:	f84a 2b04 	str.w	r2, [sl], #4
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	4298      	cmp	r0, r3
 800a048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a04c:	d8f2      	bhi.n	800a034 <__lshift+0x70>
 800a04e:	1b03      	subs	r3, r0, r4
 800a050:	3b15      	subs	r3, #21
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	3304      	adds	r3, #4
 800a058:	f104 0215 	add.w	r2, r4, #21
 800a05c:	4290      	cmp	r0, r2
 800a05e:	bf38      	it	cc
 800a060:	2304      	movcc	r3, #4
 800a062:	f841 c003 	str.w	ip, [r1, r3]
 800a066:	f1bc 0f00 	cmp.w	ip, #0
 800a06a:	d001      	beq.n	800a070 <__lshift+0xac>
 800a06c:	f108 0602 	add.w	r6, r8, #2
 800a070:	3e01      	subs	r6, #1
 800a072:	4638      	mov	r0, r7
 800a074:	612e      	str	r6, [r5, #16]
 800a076:	4621      	mov	r1, r4
 800a078:	f7ff fd88 	bl	8009b8c <_Bfree>
 800a07c:	4628      	mov	r0, r5
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	f842 0f04 	str.w	r0, [r2, #4]!
 800a086:	3301      	adds	r3, #1
 800a088:	e7c1      	b.n	800a00e <__lshift+0x4a>
 800a08a:	3904      	subs	r1, #4
 800a08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a090:	f841 2f04 	str.w	r2, [r1, #4]!
 800a094:	4298      	cmp	r0, r3
 800a096:	d8f9      	bhi.n	800a08c <__lshift+0xc8>
 800a098:	e7ea      	b.n	800a070 <__lshift+0xac>
 800a09a:	bf00      	nop
 800a09c:	0800b229 	.word	0x0800b229
 800a0a0:	0800b2cb 	.word	0x0800b2cb

0800a0a4 <__mcmp>:
 800a0a4:	b530      	push	{r4, r5, lr}
 800a0a6:	6902      	ldr	r2, [r0, #16]
 800a0a8:	690c      	ldr	r4, [r1, #16]
 800a0aa:	1b12      	subs	r2, r2, r4
 800a0ac:	d10e      	bne.n	800a0cc <__mcmp+0x28>
 800a0ae:	f100 0314 	add.w	r3, r0, #20
 800a0b2:	3114      	adds	r1, #20
 800a0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d003      	beq.n	800a0d0 <__mcmp+0x2c>
 800a0c8:	d305      	bcc.n	800a0d6 <__mcmp+0x32>
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	bd30      	pop	{r4, r5, pc}
 800a0d0:	4283      	cmp	r3, r0
 800a0d2:	d3f3      	bcc.n	800a0bc <__mcmp+0x18>
 800a0d4:	e7fa      	b.n	800a0cc <__mcmp+0x28>
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0da:	e7f7      	b.n	800a0cc <__mcmp+0x28>

0800a0dc <__mdiff>:
 800a0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4690      	mov	r8, r2
 800a0ea:	f7ff ffdb 	bl	800a0a4 <__mcmp>
 800a0ee:	1e05      	subs	r5, r0, #0
 800a0f0:	d110      	bne.n	800a114 <__mdiff+0x38>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff fd09 	bl	8009b0c <_Balloc>
 800a0fa:	b930      	cbnz	r0, 800a10a <__mdiff+0x2e>
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <__mdiff+0x10c>)
 800a0fe:	4602      	mov	r2, r0
 800a100:	f240 2132 	movw	r1, #562	; 0x232
 800a104:	4839      	ldr	r0, [pc, #228]	; (800a1ec <__mdiff+0x110>)
 800a106:	f000 fe11 	bl	800ad2c <__assert_func>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	bfa4      	itt	ge
 800a116:	4643      	movge	r3, r8
 800a118:	46a0      	movge	r8, r4
 800a11a:	4630      	mov	r0, r6
 800a11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a120:	bfa6      	itte	ge
 800a122:	461c      	movge	r4, r3
 800a124:	2500      	movge	r5, #0
 800a126:	2501      	movlt	r5, #1
 800a128:	f7ff fcf0 	bl	8009b0c <_Balloc>
 800a12c:	b920      	cbnz	r0, 800a138 <__mdiff+0x5c>
 800a12e:	4b2e      	ldr	r3, [pc, #184]	; (800a1e8 <__mdiff+0x10c>)
 800a130:	4602      	mov	r2, r0
 800a132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a136:	e7e5      	b.n	800a104 <__mdiff+0x28>
 800a138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a13c:	6926      	ldr	r6, [r4, #16]
 800a13e:	60c5      	str	r5, [r0, #12]
 800a140:	f104 0914 	add.w	r9, r4, #20
 800a144:	f108 0514 	add.w	r5, r8, #20
 800a148:	f100 0e14 	add.w	lr, r0, #20
 800a14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a154:	f108 0210 	add.w	r2, r8, #16
 800a158:	46f2      	mov	sl, lr
 800a15a:	2100      	movs	r1, #0
 800a15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a164:	fa1f f883 	uxth.w	r8, r3
 800a168:	fa11 f18b 	uxtah	r1, r1, fp
 800a16c:	0c1b      	lsrs	r3, r3, #16
 800a16e:	eba1 0808 	sub.w	r8, r1, r8
 800a172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a17a:	fa1f f888 	uxth.w	r8, r8
 800a17e:	1419      	asrs	r1, r3, #16
 800a180:	454e      	cmp	r6, r9
 800a182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a186:	f84a 3b04 	str.w	r3, [sl], #4
 800a18a:	d8e7      	bhi.n	800a15c <__mdiff+0x80>
 800a18c:	1b33      	subs	r3, r6, r4
 800a18e:	3b15      	subs	r3, #21
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	3304      	adds	r3, #4
 800a196:	3415      	adds	r4, #21
 800a198:	42a6      	cmp	r6, r4
 800a19a:	bf38      	it	cc
 800a19c:	2304      	movcc	r3, #4
 800a19e:	441d      	add	r5, r3
 800a1a0:	4473      	add	r3, lr
 800a1a2:	469e      	mov	lr, r3
 800a1a4:	462e      	mov	r6, r5
 800a1a6:	4566      	cmp	r6, ip
 800a1a8:	d30e      	bcc.n	800a1c8 <__mdiff+0xec>
 800a1aa:	f10c 0203 	add.w	r2, ip, #3
 800a1ae:	1b52      	subs	r2, r2, r5
 800a1b0:	f022 0203 	bic.w	r2, r2, #3
 800a1b4:	3d03      	subs	r5, #3
 800a1b6:	45ac      	cmp	ip, r5
 800a1b8:	bf38      	it	cc
 800a1ba:	2200      	movcc	r2, #0
 800a1bc:	441a      	add	r2, r3
 800a1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1c2:	b17b      	cbz	r3, 800a1e4 <__mdiff+0x108>
 800a1c4:	6107      	str	r7, [r0, #16]
 800a1c6:	e7a3      	b.n	800a110 <__mdiff+0x34>
 800a1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1cc:	fa11 f288 	uxtah	r2, r1, r8
 800a1d0:	1414      	asrs	r4, r2, #16
 800a1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a1e0:	1421      	asrs	r1, r4, #16
 800a1e2:	e7e0      	b.n	800a1a6 <__mdiff+0xca>
 800a1e4:	3f01      	subs	r7, #1
 800a1e6:	e7ea      	b.n	800a1be <__mdiff+0xe2>
 800a1e8:	0800b229 	.word	0x0800b229
 800a1ec:	0800b2cb 	.word	0x0800b2cb

0800a1f0 <__ulp>:
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	ed8d 0b00 	vstr	d0, [sp]
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	4912      	ldr	r1, [pc, #72]	; (800a244 <__ulp+0x54>)
 800a1fa:	4019      	ands	r1, r3
 800a1fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a200:	2900      	cmp	r1, #0
 800a202:	dd05      	ble.n	800a210 <__ulp+0x20>
 800a204:	2200      	movs	r2, #0
 800a206:	460b      	mov	r3, r1
 800a208:	ec43 2b10 	vmov	d0, r2, r3
 800a20c:	b002      	add	sp, #8
 800a20e:	4770      	bx	lr
 800a210:	4249      	negs	r1, r1
 800a212:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a216:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	f04f 0300 	mov.w	r3, #0
 800a222:	da04      	bge.n	800a22e <__ulp+0x3e>
 800a224:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a228:	fa41 f300 	asr.w	r3, r1, r0
 800a22c:	e7ec      	b.n	800a208 <__ulp+0x18>
 800a22e:	f1a0 0114 	sub.w	r1, r0, #20
 800a232:	291e      	cmp	r1, #30
 800a234:	bfda      	itte	le
 800a236:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a23a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a23e:	2101      	movgt	r1, #1
 800a240:	460a      	mov	r2, r1
 800a242:	e7e1      	b.n	800a208 <__ulp+0x18>
 800a244:	7ff00000 	.word	0x7ff00000

0800a248 <__b2d>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	6905      	ldr	r5, [r0, #16]
 800a24c:	f100 0714 	add.w	r7, r0, #20
 800a250:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a254:	1f2e      	subs	r6, r5, #4
 800a256:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff fd48 	bl	8009cf0 <__hi0bits>
 800a260:	f1c0 0320 	rsb	r3, r0, #32
 800a264:	280a      	cmp	r0, #10
 800a266:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a2e4 <__b2d+0x9c>
 800a26a:	600b      	str	r3, [r1, #0]
 800a26c:	dc14      	bgt.n	800a298 <__b2d+0x50>
 800a26e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a272:	fa24 f10e 	lsr.w	r1, r4, lr
 800a276:	42b7      	cmp	r7, r6
 800a278:	ea41 030c 	orr.w	r3, r1, ip
 800a27c:	bf34      	ite	cc
 800a27e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a282:	2100      	movcs	r1, #0
 800a284:	3015      	adds	r0, #21
 800a286:	fa04 f000 	lsl.w	r0, r4, r0
 800a28a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a28e:	ea40 0201 	orr.w	r2, r0, r1
 800a292:	ec43 2b10 	vmov	d0, r2, r3
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a298:	42b7      	cmp	r7, r6
 800a29a:	bf3a      	itte	cc
 800a29c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a2a4:	2100      	movcs	r1, #0
 800a2a6:	380b      	subs	r0, #11
 800a2a8:	d017      	beq.n	800a2da <__b2d+0x92>
 800a2aa:	f1c0 0c20 	rsb	ip, r0, #32
 800a2ae:	fa04 f500 	lsl.w	r5, r4, r0
 800a2b2:	42be      	cmp	r6, r7
 800a2b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a2b8:	ea45 0504 	orr.w	r5, r5, r4
 800a2bc:	bf8c      	ite	hi
 800a2be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a2c2:	2400      	movls	r4, #0
 800a2c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a2c8:	fa01 f000 	lsl.w	r0, r1, r0
 800a2cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a2d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2d4:	ea40 0204 	orr.w	r2, r0, r4
 800a2d8:	e7db      	b.n	800a292 <__b2d+0x4a>
 800a2da:	ea44 030c 	orr.w	r3, r4, ip
 800a2de:	460a      	mov	r2, r1
 800a2e0:	e7d7      	b.n	800a292 <__b2d+0x4a>
 800a2e2:	bf00      	nop
 800a2e4:	3ff00000 	.word	0x3ff00000

0800a2e8 <__d2b>:
 800a2e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2ec:	4689      	mov	r9, r1
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	ec57 6b10 	vmov	r6, r7, d0
 800a2f4:	4690      	mov	r8, r2
 800a2f6:	f7ff fc09 	bl	8009b0c <_Balloc>
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	b930      	cbnz	r0, 800a30c <__d2b+0x24>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b25      	ldr	r3, [pc, #148]	; (800a398 <__d2b+0xb0>)
 800a302:	4826      	ldr	r0, [pc, #152]	; (800a39c <__d2b+0xb4>)
 800a304:	f240 310a 	movw	r1, #778	; 0x30a
 800a308:	f000 fd10 	bl	800ad2c <__assert_func>
 800a30c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a314:	bb35      	cbnz	r5, 800a364 <__d2b+0x7c>
 800a316:	2e00      	cmp	r6, #0
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	d028      	beq.n	800a36e <__d2b+0x86>
 800a31c:	4668      	mov	r0, sp
 800a31e:	9600      	str	r6, [sp, #0]
 800a320:	f7ff fd06 	bl	8009d30 <__lo0bits>
 800a324:	9900      	ldr	r1, [sp, #0]
 800a326:	b300      	cbz	r0, 800a36a <__d2b+0x82>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	f1c0 0320 	rsb	r3, r0, #32
 800a32e:	fa02 f303 	lsl.w	r3, r2, r3
 800a332:	430b      	orrs	r3, r1
 800a334:	40c2      	lsrs	r2, r0
 800a336:	6163      	str	r3, [r4, #20]
 800a338:	9201      	str	r2, [sp, #4]
 800a33a:	9b01      	ldr	r3, [sp, #4]
 800a33c:	61a3      	str	r3, [r4, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bf14      	ite	ne
 800a342:	2202      	movne	r2, #2
 800a344:	2201      	moveq	r2, #1
 800a346:	6122      	str	r2, [r4, #16]
 800a348:	b1d5      	cbz	r5, 800a380 <__d2b+0x98>
 800a34a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a34e:	4405      	add	r5, r0
 800a350:	f8c9 5000 	str.w	r5, [r9]
 800a354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a358:	f8c8 0000 	str.w	r0, [r8]
 800a35c:	4620      	mov	r0, r4
 800a35e:	b003      	add	sp, #12
 800a360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a368:	e7d5      	b.n	800a316 <__d2b+0x2e>
 800a36a:	6161      	str	r1, [r4, #20]
 800a36c:	e7e5      	b.n	800a33a <__d2b+0x52>
 800a36e:	a801      	add	r0, sp, #4
 800a370:	f7ff fcde 	bl	8009d30 <__lo0bits>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	2201      	movs	r2, #1
 800a37a:	6122      	str	r2, [r4, #16]
 800a37c:	3020      	adds	r0, #32
 800a37e:	e7e3      	b.n	800a348 <__d2b+0x60>
 800a380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a388:	f8c9 0000 	str.w	r0, [r9]
 800a38c:	6918      	ldr	r0, [r3, #16]
 800a38e:	f7ff fcaf 	bl	8009cf0 <__hi0bits>
 800a392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a396:	e7df      	b.n	800a358 <__d2b+0x70>
 800a398:	0800b229 	.word	0x0800b229
 800a39c:	0800b2cb 	.word	0x0800b2cb

0800a3a0 <__ratio>:
 800a3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	4688      	mov	r8, r1
 800a3a6:	4669      	mov	r1, sp
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	f7ff ff4d 	bl	800a248 <__b2d>
 800a3ae:	a901      	add	r1, sp, #4
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	ec55 4b10 	vmov	r4, r5, d0
 800a3b6:	f7ff ff47 	bl	800a248 <__b2d>
 800a3ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3c2:	eba3 0c02 	sub.w	ip, r3, r2
 800a3c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3d0:	ec51 0b10 	vmov	r0, r1, d0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfd6      	itet	le
 800a3d8:	460a      	movle	r2, r1
 800a3da:	462a      	movgt	r2, r5
 800a3dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3e0:	468b      	mov	fp, r1
 800a3e2:	462f      	mov	r7, r5
 800a3e4:	bfd4      	ite	le
 800a3e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	ee10 2a10 	vmov	r2, s0
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	f7f6 fa38 	bl	800086c <__aeabi_ddiv>
 800a3fc:	ec41 0b10 	vmov	d0, r0, r1
 800a400:	b003      	add	sp, #12
 800a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a406 <__copybits>:
 800a406:	3901      	subs	r1, #1
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	1149      	asrs	r1, r1, #5
 800a40c:	6914      	ldr	r4, [r2, #16]
 800a40e:	3101      	adds	r1, #1
 800a410:	f102 0314 	add.w	r3, r2, #20
 800a414:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a418:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a41c:	1f05      	subs	r5, r0, #4
 800a41e:	42a3      	cmp	r3, r4
 800a420:	d30c      	bcc.n	800a43c <__copybits+0x36>
 800a422:	1aa3      	subs	r3, r4, r2
 800a424:	3b11      	subs	r3, #17
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	3211      	adds	r2, #17
 800a42c:	42a2      	cmp	r2, r4
 800a42e:	bf88      	it	hi
 800a430:	2300      	movhi	r3, #0
 800a432:	4418      	add	r0, r3
 800a434:	2300      	movs	r3, #0
 800a436:	4288      	cmp	r0, r1
 800a438:	d305      	bcc.n	800a446 <__copybits+0x40>
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a440:	f845 6f04 	str.w	r6, [r5, #4]!
 800a444:	e7eb      	b.n	800a41e <__copybits+0x18>
 800a446:	f840 3b04 	str.w	r3, [r0], #4
 800a44a:	e7f4      	b.n	800a436 <__copybits+0x30>

0800a44c <__any_on>:
 800a44c:	f100 0214 	add.w	r2, r0, #20
 800a450:	6900      	ldr	r0, [r0, #16]
 800a452:	114b      	asrs	r3, r1, #5
 800a454:	4298      	cmp	r0, r3
 800a456:	b510      	push	{r4, lr}
 800a458:	db11      	blt.n	800a47e <__any_on+0x32>
 800a45a:	dd0a      	ble.n	800a472 <__any_on+0x26>
 800a45c:	f011 011f 	ands.w	r1, r1, #31
 800a460:	d007      	beq.n	800a472 <__any_on+0x26>
 800a462:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a466:	fa24 f001 	lsr.w	r0, r4, r1
 800a46a:	fa00 f101 	lsl.w	r1, r0, r1
 800a46e:	428c      	cmp	r4, r1
 800a470:	d10b      	bne.n	800a48a <__any_on+0x3e>
 800a472:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a476:	4293      	cmp	r3, r2
 800a478:	d803      	bhi.n	800a482 <__any_on+0x36>
 800a47a:	2000      	movs	r0, #0
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	4603      	mov	r3, r0
 800a480:	e7f7      	b.n	800a472 <__any_on+0x26>
 800a482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a486:	2900      	cmp	r1, #0
 800a488:	d0f5      	beq.n	800a476 <__any_on+0x2a>
 800a48a:	2001      	movs	r0, #1
 800a48c:	e7f6      	b.n	800a47c <__any_on+0x30>

0800a48e <_calloc_r>:
 800a48e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a490:	fba1 2402 	umull	r2, r4, r1, r2
 800a494:	b94c      	cbnz	r4, 800a4aa <_calloc_r+0x1c>
 800a496:	4611      	mov	r1, r2
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	f7fd fea1 	bl	80081e0 <_malloc_r>
 800a49e:	9a01      	ldr	r2, [sp, #4]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	b930      	cbnz	r0, 800a4b2 <_calloc_r+0x24>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	b003      	add	sp, #12
 800a4a8:	bd30      	pop	{r4, r5, pc}
 800a4aa:	220c      	movs	r2, #12
 800a4ac:	6002      	str	r2, [r0, #0]
 800a4ae:	2500      	movs	r5, #0
 800a4b0:	e7f8      	b.n	800a4a4 <_calloc_r+0x16>
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f7fd fe6b 	bl	800818e <memset>
 800a4b8:	e7f4      	b.n	800a4a4 <_calloc_r+0x16>
	...

0800a4bc <_free_r>:
 800a4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	d044      	beq.n	800a54c <_free_r+0x90>
 800a4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c6:	9001      	str	r0, [sp, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ce:	bfb8      	it	lt
 800a4d0:	18e4      	addlt	r4, r4, r3
 800a4d2:	f7ff fb0f 	bl	8009af4 <__malloc_lock>
 800a4d6:	4a1e      	ldr	r2, [pc, #120]	; (800a550 <_free_r+0x94>)
 800a4d8:	9801      	ldr	r0, [sp, #4]
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	b933      	cbnz	r3, 800a4ec <_free_r+0x30>
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	6014      	str	r4, [r2, #0]
 800a4e2:	b003      	add	sp, #12
 800a4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e8:	f7ff bb0a 	b.w	8009b00 <__malloc_unlock>
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d908      	bls.n	800a502 <_free_r+0x46>
 800a4f0:	6825      	ldr	r5, [r4, #0]
 800a4f2:	1961      	adds	r1, r4, r5
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	bf01      	itttt	eq
 800a4f8:	6819      	ldreq	r1, [r3, #0]
 800a4fa:	685b      	ldreq	r3, [r3, #4]
 800a4fc:	1949      	addeq	r1, r1, r5
 800a4fe:	6021      	streq	r1, [r4, #0]
 800a500:	e7ed      	b.n	800a4de <_free_r+0x22>
 800a502:	461a      	mov	r2, r3
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	b10b      	cbz	r3, 800a50c <_free_r+0x50>
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d9fa      	bls.n	800a502 <_free_r+0x46>
 800a50c:	6811      	ldr	r1, [r2, #0]
 800a50e:	1855      	adds	r5, r2, r1
 800a510:	42a5      	cmp	r5, r4
 800a512:	d10b      	bne.n	800a52c <_free_r+0x70>
 800a514:	6824      	ldr	r4, [r4, #0]
 800a516:	4421      	add	r1, r4
 800a518:	1854      	adds	r4, r2, r1
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	6011      	str	r1, [r2, #0]
 800a51e:	d1e0      	bne.n	800a4e2 <_free_r+0x26>
 800a520:	681c      	ldr	r4, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	6053      	str	r3, [r2, #4]
 800a526:	4421      	add	r1, r4
 800a528:	6011      	str	r1, [r2, #0]
 800a52a:	e7da      	b.n	800a4e2 <_free_r+0x26>
 800a52c:	d902      	bls.n	800a534 <_free_r+0x78>
 800a52e:	230c      	movs	r3, #12
 800a530:	6003      	str	r3, [r0, #0]
 800a532:	e7d6      	b.n	800a4e2 <_free_r+0x26>
 800a534:	6825      	ldr	r5, [r4, #0]
 800a536:	1961      	adds	r1, r4, r5
 800a538:	428b      	cmp	r3, r1
 800a53a:	bf04      	itt	eq
 800a53c:	6819      	ldreq	r1, [r3, #0]
 800a53e:	685b      	ldreq	r3, [r3, #4]
 800a540:	6063      	str	r3, [r4, #4]
 800a542:	bf04      	itt	eq
 800a544:	1949      	addeq	r1, r1, r5
 800a546:	6021      	streq	r1, [r4, #0]
 800a548:	6054      	str	r4, [r2, #4]
 800a54a:	e7ca      	b.n	800a4e2 <_free_r+0x26>
 800a54c:	b003      	add	sp, #12
 800a54e:	bd30      	pop	{r4, r5, pc}
 800a550:	20003194 	.word	0x20003194

0800a554 <__sfputc_r>:
 800a554:	6893      	ldr	r3, [r2, #8]
 800a556:	3b01      	subs	r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	b410      	push	{r4}
 800a55c:	6093      	str	r3, [r2, #8]
 800a55e:	da08      	bge.n	800a572 <__sfputc_r+0x1e>
 800a560:	6994      	ldr	r4, [r2, #24]
 800a562:	42a3      	cmp	r3, r4
 800a564:	db01      	blt.n	800a56a <__sfputc_r+0x16>
 800a566:	290a      	cmp	r1, #10
 800a568:	d103      	bne.n	800a572 <__sfputc_r+0x1e>
 800a56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56e:	f000 bb0f 	b.w	800ab90 <__swbuf_r>
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	1c58      	adds	r0, r3, #1
 800a576:	6010      	str	r0, [r2, #0]
 800a578:	7019      	strb	r1, [r3, #0]
 800a57a:	4608      	mov	r0, r1
 800a57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <__sfputs_r>:
 800a582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a584:	4606      	mov	r6, r0
 800a586:	460f      	mov	r7, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	18d5      	adds	r5, r2, r3
 800a58c:	42ac      	cmp	r4, r5
 800a58e:	d101      	bne.n	800a594 <__sfputs_r+0x12>
 800a590:	2000      	movs	r0, #0
 800a592:	e007      	b.n	800a5a4 <__sfputs_r+0x22>
 800a594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a598:	463a      	mov	r2, r7
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ffda 	bl	800a554 <__sfputc_r>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d1f3      	bne.n	800a58c <__sfputs_r+0xa>
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5a8 <_vfiprintf_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	460d      	mov	r5, r1
 800a5ae:	b09d      	sub	sp, #116	; 0x74
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	4698      	mov	r8, r3
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	b118      	cbz	r0, 800a5c0 <_vfiprintf_r+0x18>
 800a5b8:	6983      	ldr	r3, [r0, #24]
 800a5ba:	b90b      	cbnz	r3, 800a5c0 <_vfiprintf_r+0x18>
 800a5bc:	f7fd fd14 	bl	8007fe8 <__sinit>
 800a5c0:	4b89      	ldr	r3, [pc, #548]	; (800a7e8 <_vfiprintf_r+0x240>)
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	d11b      	bne.n	800a5fe <_vfiprintf_r+0x56>
 800a5c6:	6875      	ldr	r5, [r6, #4]
 800a5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ca:	07d9      	lsls	r1, r3, #31
 800a5cc:	d405      	bmi.n	800a5da <_vfiprintf_r+0x32>
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	059a      	lsls	r2, r3, #22
 800a5d2:	d402      	bmi.n	800a5da <_vfiprintf_r+0x32>
 800a5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d6:	f7fd fdca 	bl	800816e <__retarget_lock_acquire_recursive>
 800a5da:	89ab      	ldrh	r3, [r5, #12]
 800a5dc:	071b      	lsls	r3, r3, #28
 800a5de:	d501      	bpl.n	800a5e4 <_vfiprintf_r+0x3c>
 800a5e0:	692b      	ldr	r3, [r5, #16]
 800a5e2:	b9eb      	cbnz	r3, 800a620 <_vfiprintf_r+0x78>
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f000 fb32 	bl	800ac50 <__swsetup_r>
 800a5ec:	b1c0      	cbz	r0, 800a620 <_vfiprintf_r+0x78>
 800a5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f0:	07dc      	lsls	r4, r3, #31
 800a5f2:	d50e      	bpl.n	800a612 <_vfiprintf_r+0x6a>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	b01d      	add	sp, #116	; 0x74
 800a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fe:	4b7b      	ldr	r3, [pc, #492]	; (800a7ec <_vfiprintf_r+0x244>)
 800a600:	429d      	cmp	r5, r3
 800a602:	d101      	bne.n	800a608 <_vfiprintf_r+0x60>
 800a604:	68b5      	ldr	r5, [r6, #8]
 800a606:	e7df      	b.n	800a5c8 <_vfiprintf_r+0x20>
 800a608:	4b79      	ldr	r3, [pc, #484]	; (800a7f0 <_vfiprintf_r+0x248>)
 800a60a:	429d      	cmp	r5, r3
 800a60c:	bf08      	it	eq
 800a60e:	68f5      	ldreq	r5, [r6, #12]
 800a610:	e7da      	b.n	800a5c8 <_vfiprintf_r+0x20>
 800a612:	89ab      	ldrh	r3, [r5, #12]
 800a614:	0598      	lsls	r0, r3, #22
 800a616:	d4ed      	bmi.n	800a5f4 <_vfiprintf_r+0x4c>
 800a618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61a:	f7fd fda9 	bl	8008170 <__retarget_lock_release_recursive>
 800a61e:	e7e9      	b.n	800a5f4 <_vfiprintf_r+0x4c>
 800a620:	2300      	movs	r3, #0
 800a622:	9309      	str	r3, [sp, #36]	; 0x24
 800a624:	2320      	movs	r3, #32
 800a626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a62a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62e:	2330      	movs	r3, #48	; 0x30
 800a630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7f4 <_vfiprintf_r+0x24c>
 800a634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a638:	f04f 0901 	mov.w	r9, #1
 800a63c:	4623      	mov	r3, r4
 800a63e:	469a      	mov	sl, r3
 800a640:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a644:	b10a      	cbz	r2, 800a64a <_vfiprintf_r+0xa2>
 800a646:	2a25      	cmp	r2, #37	; 0x25
 800a648:	d1f9      	bne.n	800a63e <_vfiprintf_r+0x96>
 800a64a:	ebba 0b04 	subs.w	fp, sl, r4
 800a64e:	d00b      	beq.n	800a668 <_vfiprintf_r+0xc0>
 800a650:	465b      	mov	r3, fp
 800a652:	4622      	mov	r2, r4
 800a654:	4629      	mov	r1, r5
 800a656:	4630      	mov	r0, r6
 800a658:	f7ff ff93 	bl	800a582 <__sfputs_r>
 800a65c:	3001      	adds	r0, #1
 800a65e:	f000 80aa 	beq.w	800a7b6 <_vfiprintf_r+0x20e>
 800a662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a664:	445a      	add	r2, fp
 800a666:	9209      	str	r2, [sp, #36]	; 0x24
 800a668:	f89a 3000 	ldrb.w	r3, [sl]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80a2 	beq.w	800a7b6 <_vfiprintf_r+0x20e>
 800a672:	2300      	movs	r3, #0
 800a674:	f04f 32ff 	mov.w	r2, #4294967295
 800a678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67c:	f10a 0a01 	add.w	sl, sl, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a688:	931a      	str	r3, [sp, #104]	; 0x68
 800a68a:	4654      	mov	r4, sl
 800a68c:	2205      	movs	r2, #5
 800a68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a692:	4858      	ldr	r0, [pc, #352]	; (800a7f4 <_vfiprintf_r+0x24c>)
 800a694:	f7f5 fdb4 	bl	8000200 <memchr>
 800a698:	9a04      	ldr	r2, [sp, #16]
 800a69a:	b9d8      	cbnz	r0, 800a6d4 <_vfiprintf_r+0x12c>
 800a69c:	06d1      	lsls	r1, r2, #27
 800a69e:	bf44      	itt	mi
 800a6a0:	2320      	movmi	r3, #32
 800a6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a6:	0713      	lsls	r3, r2, #28
 800a6a8:	bf44      	itt	mi
 800a6aa:	232b      	movmi	r3, #43	; 0x2b
 800a6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b6:	d015      	beq.n	800a6e4 <_vfiprintf_r+0x13c>
 800a6b8:	9a07      	ldr	r2, [sp, #28]
 800a6ba:	4654      	mov	r4, sl
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f04f 0c0a 	mov.w	ip, #10
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c8:	3b30      	subs	r3, #48	; 0x30
 800a6ca:	2b09      	cmp	r3, #9
 800a6cc:	d94e      	bls.n	800a76c <_vfiprintf_r+0x1c4>
 800a6ce:	b1b0      	cbz	r0, 800a6fe <_vfiprintf_r+0x156>
 800a6d0:	9207      	str	r2, [sp, #28]
 800a6d2:	e014      	b.n	800a6fe <_vfiprintf_r+0x156>
 800a6d4:	eba0 0308 	sub.w	r3, r0, r8
 800a6d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	46a2      	mov	sl, r4
 800a6e2:	e7d2      	b.n	800a68a <_vfiprintf_r+0xe2>
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	1d19      	adds	r1, r3, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	9103      	str	r1, [sp, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bfbb      	ittet	lt
 800a6f0:	425b      	neglt	r3, r3
 800a6f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f6:	9307      	strge	r3, [sp, #28]
 800a6f8:	9307      	strlt	r3, [sp, #28]
 800a6fa:	bfb8      	it	lt
 800a6fc:	9204      	strlt	r2, [sp, #16]
 800a6fe:	7823      	ldrb	r3, [r4, #0]
 800a700:	2b2e      	cmp	r3, #46	; 0x2e
 800a702:	d10c      	bne.n	800a71e <_vfiprintf_r+0x176>
 800a704:	7863      	ldrb	r3, [r4, #1]
 800a706:	2b2a      	cmp	r3, #42	; 0x2a
 800a708:	d135      	bne.n	800a776 <_vfiprintf_r+0x1ce>
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	1d1a      	adds	r2, r3, #4
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	9203      	str	r2, [sp, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	bfb8      	it	lt
 800a716:	f04f 33ff 	movlt.w	r3, #4294967295
 800a71a:	3402      	adds	r4, #2
 800a71c:	9305      	str	r3, [sp, #20]
 800a71e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a804 <_vfiprintf_r+0x25c>
 800a722:	7821      	ldrb	r1, [r4, #0]
 800a724:	2203      	movs	r2, #3
 800a726:	4650      	mov	r0, sl
 800a728:	f7f5 fd6a 	bl	8000200 <memchr>
 800a72c:	b140      	cbz	r0, 800a740 <_vfiprintf_r+0x198>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	eba0 000a 	sub.w	r0, r0, sl
 800a734:	fa03 f000 	lsl.w	r0, r3, r0
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	4303      	orrs	r3, r0
 800a73c:	3401      	adds	r4, #1
 800a73e:	9304      	str	r3, [sp, #16]
 800a740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a744:	482c      	ldr	r0, [pc, #176]	; (800a7f8 <_vfiprintf_r+0x250>)
 800a746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a74a:	2206      	movs	r2, #6
 800a74c:	f7f5 fd58 	bl	8000200 <memchr>
 800a750:	2800      	cmp	r0, #0
 800a752:	d03f      	beq.n	800a7d4 <_vfiprintf_r+0x22c>
 800a754:	4b29      	ldr	r3, [pc, #164]	; (800a7fc <_vfiprintf_r+0x254>)
 800a756:	bb1b      	cbnz	r3, 800a7a0 <_vfiprintf_r+0x1f8>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	3307      	adds	r3, #7
 800a75c:	f023 0307 	bic.w	r3, r3, #7
 800a760:	3308      	adds	r3, #8
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a766:	443b      	add	r3, r7
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	e767      	b.n	800a63c <_vfiprintf_r+0x94>
 800a76c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a770:	460c      	mov	r4, r1
 800a772:	2001      	movs	r0, #1
 800a774:	e7a5      	b.n	800a6c2 <_vfiprintf_r+0x11a>
 800a776:	2300      	movs	r3, #0
 800a778:	3401      	adds	r4, #1
 800a77a:	9305      	str	r3, [sp, #20]
 800a77c:	4619      	mov	r1, r3
 800a77e:	f04f 0c0a 	mov.w	ip, #10
 800a782:	4620      	mov	r0, r4
 800a784:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a788:	3a30      	subs	r2, #48	; 0x30
 800a78a:	2a09      	cmp	r2, #9
 800a78c:	d903      	bls.n	800a796 <_vfiprintf_r+0x1ee>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0c5      	beq.n	800a71e <_vfiprintf_r+0x176>
 800a792:	9105      	str	r1, [sp, #20]
 800a794:	e7c3      	b.n	800a71e <_vfiprintf_r+0x176>
 800a796:	fb0c 2101 	mla	r1, ip, r1, r2
 800a79a:	4604      	mov	r4, r0
 800a79c:	2301      	movs	r3, #1
 800a79e:	e7f0      	b.n	800a782 <_vfiprintf_r+0x1da>
 800a7a0:	ab03      	add	r3, sp, #12
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	4b16      	ldr	r3, [pc, #88]	; (800a800 <_vfiprintf_r+0x258>)
 800a7a8:	a904      	add	r1, sp, #16
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	1c78      	adds	r0, r7, #1
 800a7b4:	d1d6      	bne.n	800a764 <_vfiprintf_r+0x1bc>
 800a7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b8:	07d9      	lsls	r1, r3, #31
 800a7ba:	d405      	bmi.n	800a7c8 <_vfiprintf_r+0x220>
 800a7bc:	89ab      	ldrh	r3, [r5, #12]
 800a7be:	059a      	lsls	r2, r3, #22
 800a7c0:	d402      	bmi.n	800a7c8 <_vfiprintf_r+0x220>
 800a7c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7c4:	f7fd fcd4 	bl	8008170 <__retarget_lock_release_recursive>
 800a7c8:	89ab      	ldrh	r3, [r5, #12]
 800a7ca:	065b      	lsls	r3, r3, #25
 800a7cc:	f53f af12 	bmi.w	800a5f4 <_vfiprintf_r+0x4c>
 800a7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7d2:	e711      	b.n	800a5f8 <_vfiprintf_r+0x50>
 800a7d4:	ab03      	add	r3, sp, #12
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	462a      	mov	r2, r5
 800a7da:	4b09      	ldr	r3, [pc, #36]	; (800a800 <_vfiprintf_r+0x258>)
 800a7dc:	a904      	add	r1, sp, #16
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f000 f880 	bl	800a8e4 <_printf_i>
 800a7e4:	e7e4      	b.n	800a7b0 <_vfiprintf_r+0x208>
 800a7e6:	bf00      	nop
 800a7e8:	0800b084 	.word	0x0800b084
 800a7ec:	0800b0a4 	.word	0x0800b0a4
 800a7f0:	0800b064 	.word	0x0800b064
 800a7f4:	0800b424 	.word	0x0800b424
 800a7f8:	0800b42e 	.word	0x0800b42e
 800a7fc:	00000000 	.word	0x00000000
 800a800:	0800a583 	.word	0x0800a583
 800a804:	0800b42a 	.word	0x0800b42a

0800a808 <_printf_common>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	4616      	mov	r6, r2
 800a80e:	4699      	mov	r9, r3
 800a810:	688a      	ldr	r2, [r1, #8]
 800a812:	690b      	ldr	r3, [r1, #16]
 800a814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a818:	4293      	cmp	r3, r2
 800a81a:	bfb8      	it	lt
 800a81c:	4613      	movlt	r3, r2
 800a81e:	6033      	str	r3, [r6, #0]
 800a820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a824:	4607      	mov	r7, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b10a      	cbz	r2, 800a82e <_printf_common+0x26>
 800a82a:	3301      	adds	r3, #1
 800a82c:	6033      	str	r3, [r6, #0]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	0699      	lsls	r1, r3, #26
 800a832:	bf42      	ittt	mi
 800a834:	6833      	ldrmi	r3, [r6, #0]
 800a836:	3302      	addmi	r3, #2
 800a838:	6033      	strmi	r3, [r6, #0]
 800a83a:	6825      	ldr	r5, [r4, #0]
 800a83c:	f015 0506 	ands.w	r5, r5, #6
 800a840:	d106      	bne.n	800a850 <_printf_common+0x48>
 800a842:	f104 0a19 	add.w	sl, r4, #25
 800a846:	68e3      	ldr	r3, [r4, #12]
 800a848:	6832      	ldr	r2, [r6, #0]
 800a84a:	1a9b      	subs	r3, r3, r2
 800a84c:	42ab      	cmp	r3, r5
 800a84e:	dc26      	bgt.n	800a89e <_printf_common+0x96>
 800a850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a854:	1e13      	subs	r3, r2, #0
 800a856:	6822      	ldr	r2, [r4, #0]
 800a858:	bf18      	it	ne
 800a85a:	2301      	movne	r3, #1
 800a85c:	0692      	lsls	r2, r2, #26
 800a85e:	d42b      	bmi.n	800a8b8 <_printf_common+0xb0>
 800a860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a864:	4649      	mov	r1, r9
 800a866:	4638      	mov	r0, r7
 800a868:	47c0      	blx	r8
 800a86a:	3001      	adds	r0, #1
 800a86c:	d01e      	beq.n	800a8ac <_printf_common+0xa4>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	68e5      	ldr	r5, [r4, #12]
 800a872:	6832      	ldr	r2, [r6, #0]
 800a874:	f003 0306 	and.w	r3, r3, #6
 800a878:	2b04      	cmp	r3, #4
 800a87a:	bf08      	it	eq
 800a87c:	1aad      	subeq	r5, r5, r2
 800a87e:	68a3      	ldr	r3, [r4, #8]
 800a880:	6922      	ldr	r2, [r4, #16]
 800a882:	bf0c      	ite	eq
 800a884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a888:	2500      	movne	r5, #0
 800a88a:	4293      	cmp	r3, r2
 800a88c:	bfc4      	itt	gt
 800a88e:	1a9b      	subgt	r3, r3, r2
 800a890:	18ed      	addgt	r5, r5, r3
 800a892:	2600      	movs	r6, #0
 800a894:	341a      	adds	r4, #26
 800a896:	42b5      	cmp	r5, r6
 800a898:	d11a      	bne.n	800a8d0 <_printf_common+0xc8>
 800a89a:	2000      	movs	r0, #0
 800a89c:	e008      	b.n	800a8b0 <_printf_common+0xa8>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	47c0      	blx	r8
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d103      	bne.n	800a8b4 <_printf_common+0xac>
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	e7c6      	b.n	800a846 <_printf_common+0x3e>
 800a8b8:	18e1      	adds	r1, r4, r3
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	2030      	movs	r0, #48	; 0x30
 800a8be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8c2:	4422      	add	r2, r4
 800a8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	e7c7      	b.n	800a860 <_printf_common+0x58>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	47c0      	blx	r8
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d0e6      	beq.n	800a8ac <_printf_common+0xa4>
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7d9      	b.n	800a896 <_printf_common+0x8e>
	...

0800a8e4 <_printf_i>:
 800a8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8ec:	2f78      	cmp	r7, #120	; 0x78
 800a8ee:	4691      	mov	r9, r2
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	469a      	mov	sl, r3
 800a8f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8fa:	d807      	bhi.n	800a90c <_printf_i+0x28>
 800a8fc:	2f62      	cmp	r7, #98	; 0x62
 800a8fe:	d80a      	bhi.n	800a916 <_printf_i+0x32>
 800a900:	2f00      	cmp	r7, #0
 800a902:	f000 80d8 	beq.w	800aab6 <_printf_i+0x1d2>
 800a906:	2f58      	cmp	r7, #88	; 0x58
 800a908:	f000 80a3 	beq.w	800aa52 <_printf_i+0x16e>
 800a90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a914:	e03a      	b.n	800a98c <_printf_i+0xa8>
 800a916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a91a:	2b15      	cmp	r3, #21
 800a91c:	d8f6      	bhi.n	800a90c <_printf_i+0x28>
 800a91e:	a101      	add	r1, pc, #4	; (adr r1, 800a924 <_printf_i+0x40>)
 800a920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a924:	0800a97d 	.word	0x0800a97d
 800a928:	0800a991 	.word	0x0800a991
 800a92c:	0800a90d 	.word	0x0800a90d
 800a930:	0800a90d 	.word	0x0800a90d
 800a934:	0800a90d 	.word	0x0800a90d
 800a938:	0800a90d 	.word	0x0800a90d
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a90d 	.word	0x0800a90d
 800a944:	0800a90d 	.word	0x0800a90d
 800a948:	0800a90d 	.word	0x0800a90d
 800a94c:	0800a90d 	.word	0x0800a90d
 800a950:	0800aa9d 	.word	0x0800aa9d
 800a954:	0800a9c1 	.word	0x0800a9c1
 800a958:	0800aa7f 	.word	0x0800aa7f
 800a95c:	0800a90d 	.word	0x0800a90d
 800a960:	0800a90d 	.word	0x0800a90d
 800a964:	0800aabf 	.word	0x0800aabf
 800a968:	0800a90d 	.word	0x0800a90d
 800a96c:	0800a9c1 	.word	0x0800a9c1
 800a970:	0800a90d 	.word	0x0800a90d
 800a974:	0800a90d 	.word	0x0800a90d
 800a978:	0800aa87 	.word	0x0800aa87
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	1d1a      	adds	r2, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	602a      	str	r2, [r5, #0]
 800a984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a98c:	2301      	movs	r3, #1
 800a98e:	e0a3      	b.n	800aad8 <_printf_i+0x1f4>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	6829      	ldr	r1, [r5, #0]
 800a994:	0606      	lsls	r6, r0, #24
 800a996:	f101 0304 	add.w	r3, r1, #4
 800a99a:	d50a      	bpl.n	800a9b2 <_printf_i+0xce>
 800a99c:	680e      	ldr	r6, [r1, #0]
 800a99e:	602b      	str	r3, [r5, #0]
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	da03      	bge.n	800a9ac <_printf_i+0xc8>
 800a9a4:	232d      	movs	r3, #45	; 0x2d
 800a9a6:	4276      	negs	r6, r6
 800a9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ac:	485e      	ldr	r0, [pc, #376]	; (800ab28 <_printf_i+0x244>)
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	e019      	b.n	800a9e6 <_printf_i+0x102>
 800a9b2:	680e      	ldr	r6, [r1, #0]
 800a9b4:	602b      	str	r3, [r5, #0]
 800a9b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ba:	bf18      	it	ne
 800a9bc:	b236      	sxthne	r6, r6
 800a9be:	e7ef      	b.n	800a9a0 <_printf_i+0xbc>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	6820      	ldr	r0, [r4, #0]
 800a9c4:	1d19      	adds	r1, r3, #4
 800a9c6:	6029      	str	r1, [r5, #0]
 800a9c8:	0601      	lsls	r1, r0, #24
 800a9ca:	d501      	bpl.n	800a9d0 <_printf_i+0xec>
 800a9cc:	681e      	ldr	r6, [r3, #0]
 800a9ce:	e002      	b.n	800a9d6 <_printf_i+0xf2>
 800a9d0:	0646      	lsls	r6, r0, #25
 800a9d2:	d5fb      	bpl.n	800a9cc <_printf_i+0xe8>
 800a9d4:	881e      	ldrh	r6, [r3, #0]
 800a9d6:	4854      	ldr	r0, [pc, #336]	; (800ab28 <_printf_i+0x244>)
 800a9d8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9da:	bf0c      	ite	eq
 800a9dc:	2308      	moveq	r3, #8
 800a9de:	230a      	movne	r3, #10
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9e6:	6865      	ldr	r5, [r4, #4]
 800a9e8:	60a5      	str	r5, [r4, #8]
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	bfa2      	ittt	ge
 800a9ee:	6821      	ldrge	r1, [r4, #0]
 800a9f0:	f021 0104 	bicge.w	r1, r1, #4
 800a9f4:	6021      	strge	r1, [r4, #0]
 800a9f6:	b90e      	cbnz	r6, 800a9fc <_printf_i+0x118>
 800a9f8:	2d00      	cmp	r5, #0
 800a9fa:	d04d      	beq.n	800aa98 <_printf_i+0x1b4>
 800a9fc:	4615      	mov	r5, r2
 800a9fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa02:	fb03 6711 	mls	r7, r3, r1, r6
 800aa06:	5dc7      	ldrb	r7, [r0, r7]
 800aa08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa0c:	4637      	mov	r7, r6
 800aa0e:	42bb      	cmp	r3, r7
 800aa10:	460e      	mov	r6, r1
 800aa12:	d9f4      	bls.n	800a9fe <_printf_i+0x11a>
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d10b      	bne.n	800aa30 <_printf_i+0x14c>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	07de      	lsls	r6, r3, #31
 800aa1c:	d508      	bpl.n	800aa30 <_printf_i+0x14c>
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	6861      	ldr	r1, [r4, #4]
 800aa22:	4299      	cmp	r1, r3
 800aa24:	bfde      	ittt	le
 800aa26:	2330      	movle	r3, #48	; 0x30
 800aa28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa30:	1b52      	subs	r2, r2, r5
 800aa32:	6122      	str	r2, [r4, #16]
 800aa34:	f8cd a000 	str.w	sl, [sp]
 800aa38:	464b      	mov	r3, r9
 800aa3a:	aa03      	add	r2, sp, #12
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4640      	mov	r0, r8
 800aa40:	f7ff fee2 	bl	800a808 <_printf_common>
 800aa44:	3001      	adds	r0, #1
 800aa46:	d14c      	bne.n	800aae2 <_printf_i+0x1fe>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4c:	b004      	add	sp, #16
 800aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa52:	4835      	ldr	r0, [pc, #212]	; (800ab28 <_printf_i+0x244>)
 800aa54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa58:	6829      	ldr	r1, [r5, #0]
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa60:	6029      	str	r1, [r5, #0]
 800aa62:	061d      	lsls	r5, r3, #24
 800aa64:	d514      	bpl.n	800aa90 <_printf_i+0x1ac>
 800aa66:	07df      	lsls	r7, r3, #31
 800aa68:	bf44      	itt	mi
 800aa6a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa6e:	6023      	strmi	r3, [r4, #0]
 800aa70:	b91e      	cbnz	r6, 800aa7a <_printf_i+0x196>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	f023 0320 	bic.w	r3, r3, #32
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	2310      	movs	r3, #16
 800aa7c:	e7b0      	b.n	800a9e0 <_printf_i+0xfc>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	2378      	movs	r3, #120	; 0x78
 800aa88:	4828      	ldr	r0, [pc, #160]	; (800ab2c <_printf_i+0x248>)
 800aa8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa8e:	e7e3      	b.n	800aa58 <_printf_i+0x174>
 800aa90:	0659      	lsls	r1, r3, #25
 800aa92:	bf48      	it	mi
 800aa94:	b2b6      	uxthmi	r6, r6
 800aa96:	e7e6      	b.n	800aa66 <_printf_i+0x182>
 800aa98:	4615      	mov	r5, r2
 800aa9a:	e7bb      	b.n	800aa14 <_printf_i+0x130>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	6826      	ldr	r6, [r4, #0]
 800aaa0:	6961      	ldr	r1, [r4, #20]
 800aaa2:	1d18      	adds	r0, r3, #4
 800aaa4:	6028      	str	r0, [r5, #0]
 800aaa6:	0635      	lsls	r5, r6, #24
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	d501      	bpl.n	800aab0 <_printf_i+0x1cc>
 800aaac:	6019      	str	r1, [r3, #0]
 800aaae:	e002      	b.n	800aab6 <_printf_i+0x1d2>
 800aab0:	0670      	lsls	r0, r6, #25
 800aab2:	d5fb      	bpl.n	800aaac <_printf_i+0x1c8>
 800aab4:	8019      	strh	r1, [r3, #0]
 800aab6:	2300      	movs	r3, #0
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	4615      	mov	r5, r2
 800aabc:	e7ba      	b.n	800aa34 <_printf_i+0x150>
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	1d1a      	adds	r2, r3, #4
 800aac2:	602a      	str	r2, [r5, #0]
 800aac4:	681d      	ldr	r5, [r3, #0]
 800aac6:	6862      	ldr	r2, [r4, #4]
 800aac8:	2100      	movs	r1, #0
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7f5 fb98 	bl	8000200 <memchr>
 800aad0:	b108      	cbz	r0, 800aad6 <_printf_i+0x1f2>
 800aad2:	1b40      	subs	r0, r0, r5
 800aad4:	6060      	str	r0, [r4, #4]
 800aad6:	6863      	ldr	r3, [r4, #4]
 800aad8:	6123      	str	r3, [r4, #16]
 800aada:	2300      	movs	r3, #0
 800aadc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae0:	e7a8      	b.n	800aa34 <_printf_i+0x150>
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	462a      	mov	r2, r5
 800aae6:	4649      	mov	r1, r9
 800aae8:	4640      	mov	r0, r8
 800aaea:	47d0      	blx	sl
 800aaec:	3001      	adds	r0, #1
 800aaee:	d0ab      	beq.n	800aa48 <_printf_i+0x164>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	079b      	lsls	r3, r3, #30
 800aaf4:	d413      	bmi.n	800ab1e <_printf_i+0x23a>
 800aaf6:	68e0      	ldr	r0, [r4, #12]
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	4298      	cmp	r0, r3
 800aafc:	bfb8      	it	lt
 800aafe:	4618      	movlt	r0, r3
 800ab00:	e7a4      	b.n	800aa4c <_printf_i+0x168>
 800ab02:	2301      	movs	r3, #1
 800ab04:	4632      	mov	r2, r6
 800ab06:	4649      	mov	r1, r9
 800ab08:	4640      	mov	r0, r8
 800ab0a:	47d0      	blx	sl
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d09b      	beq.n	800aa48 <_printf_i+0x164>
 800ab10:	3501      	adds	r5, #1
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	9903      	ldr	r1, [sp, #12]
 800ab16:	1a5b      	subs	r3, r3, r1
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dcf2      	bgt.n	800ab02 <_printf_i+0x21e>
 800ab1c:	e7eb      	b.n	800aaf6 <_printf_i+0x212>
 800ab1e:	2500      	movs	r5, #0
 800ab20:	f104 0619 	add.w	r6, r4, #25
 800ab24:	e7f5      	b.n	800ab12 <_printf_i+0x22e>
 800ab26:	bf00      	nop
 800ab28:	0800b435 	.word	0x0800b435
 800ab2c:	0800b446 	.word	0x0800b446

0800ab30 <_read_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	; (800ab50 <_read_r+0x20>)
 800ab34:	4604      	mov	r4, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	4611      	mov	r1, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7f7 f972 	bl	8001e28 <_read>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_read_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_read_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	2000319c 	.word	0x2000319c
 800ab54:	00000000 	.word	0x00000000

0800ab58 <nan>:
 800ab58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab60 <nan+0x8>
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	00000000 	.word	0x00000000
 800ab64:	7ff80000 	.word	0x7ff80000

0800ab68 <strncmp>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	b17a      	cbz	r2, 800ab8c <strncmp+0x24>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	3901      	subs	r1, #1
 800ab70:	1884      	adds	r4, r0, r2
 800ab72:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab7a:	4290      	cmp	r0, r2
 800ab7c:	d101      	bne.n	800ab82 <strncmp+0x1a>
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	d101      	bne.n	800ab86 <strncmp+0x1e>
 800ab82:	1a80      	subs	r0, r0, r2
 800ab84:	bd10      	pop	{r4, pc}
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d1f3      	bne.n	800ab72 <strncmp+0xa>
 800ab8a:	e7fa      	b.n	800ab82 <strncmp+0x1a>
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	e7f9      	b.n	800ab84 <strncmp+0x1c>

0800ab90 <__swbuf_r>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	460e      	mov	r6, r1
 800ab94:	4614      	mov	r4, r2
 800ab96:	4605      	mov	r5, r0
 800ab98:	b118      	cbz	r0, 800aba2 <__swbuf_r+0x12>
 800ab9a:	6983      	ldr	r3, [r0, #24]
 800ab9c:	b90b      	cbnz	r3, 800aba2 <__swbuf_r+0x12>
 800ab9e:	f7fd fa23 	bl	8007fe8 <__sinit>
 800aba2:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <__swbuf_r+0x98>)
 800aba4:	429c      	cmp	r4, r3
 800aba6:	d12b      	bne.n	800ac00 <__swbuf_r+0x70>
 800aba8:	686c      	ldr	r4, [r5, #4]
 800abaa:	69a3      	ldr	r3, [r4, #24]
 800abac:	60a3      	str	r3, [r4, #8]
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	071a      	lsls	r2, r3, #28
 800abb2:	d52f      	bpl.n	800ac14 <__swbuf_r+0x84>
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	b36b      	cbz	r3, 800ac14 <__swbuf_r+0x84>
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	6820      	ldr	r0, [r4, #0]
 800abbc:	1ac0      	subs	r0, r0, r3
 800abbe:	6963      	ldr	r3, [r4, #20]
 800abc0:	b2f6      	uxtb	r6, r6
 800abc2:	4283      	cmp	r3, r0
 800abc4:	4637      	mov	r7, r6
 800abc6:	dc04      	bgt.n	800abd2 <__swbuf_r+0x42>
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f7fe fbc2 	bl	8009354 <_fflush_r>
 800abd0:	bb30      	cbnz	r0, 800ac20 <__swbuf_r+0x90>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	60a3      	str	r3, [r4, #8]
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	701e      	strb	r6, [r3, #0]
 800abe0:	6963      	ldr	r3, [r4, #20]
 800abe2:	3001      	adds	r0, #1
 800abe4:	4283      	cmp	r3, r0
 800abe6:	d004      	beq.n	800abf2 <__swbuf_r+0x62>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	07db      	lsls	r3, r3, #31
 800abec:	d506      	bpl.n	800abfc <__swbuf_r+0x6c>
 800abee:	2e0a      	cmp	r6, #10
 800abf0:	d104      	bne.n	800abfc <__swbuf_r+0x6c>
 800abf2:	4621      	mov	r1, r4
 800abf4:	4628      	mov	r0, r5
 800abf6:	f7fe fbad 	bl	8009354 <_fflush_r>
 800abfa:	b988      	cbnz	r0, 800ac20 <__swbuf_r+0x90>
 800abfc:	4638      	mov	r0, r7
 800abfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <__swbuf_r+0x9c>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	d101      	bne.n	800ac0a <__swbuf_r+0x7a>
 800ac06:	68ac      	ldr	r4, [r5, #8]
 800ac08:	e7cf      	b.n	800abaa <__swbuf_r+0x1a>
 800ac0a:	4b09      	ldr	r3, [pc, #36]	; (800ac30 <__swbuf_r+0xa0>)
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	bf08      	it	eq
 800ac10:	68ec      	ldreq	r4, [r5, #12]
 800ac12:	e7ca      	b.n	800abaa <__swbuf_r+0x1a>
 800ac14:	4621      	mov	r1, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f81a 	bl	800ac50 <__swsetup_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0cb      	beq.n	800abb8 <__swbuf_r+0x28>
 800ac20:	f04f 37ff 	mov.w	r7, #4294967295
 800ac24:	e7ea      	b.n	800abfc <__swbuf_r+0x6c>
 800ac26:	bf00      	nop
 800ac28:	0800b084 	.word	0x0800b084
 800ac2c:	0800b0a4 	.word	0x0800b0a4
 800ac30:	0800b064 	.word	0x0800b064

0800ac34 <__ascii_wctomb>:
 800ac34:	b149      	cbz	r1, 800ac4a <__ascii_wctomb+0x16>
 800ac36:	2aff      	cmp	r2, #255	; 0xff
 800ac38:	bf85      	ittet	hi
 800ac3a:	238a      	movhi	r3, #138	; 0x8a
 800ac3c:	6003      	strhi	r3, [r0, #0]
 800ac3e:	700a      	strbls	r2, [r1, #0]
 800ac40:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac44:	bf98      	it	ls
 800ac46:	2001      	movls	r0, #1
 800ac48:	4770      	bx	lr
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4770      	bx	lr
	...

0800ac50 <__swsetup_r>:
 800ac50:	4b32      	ldr	r3, [pc, #200]	; (800ad1c <__swsetup_r+0xcc>)
 800ac52:	b570      	push	{r4, r5, r6, lr}
 800ac54:	681d      	ldr	r5, [r3, #0]
 800ac56:	4606      	mov	r6, r0
 800ac58:	460c      	mov	r4, r1
 800ac5a:	b125      	cbz	r5, 800ac66 <__swsetup_r+0x16>
 800ac5c:	69ab      	ldr	r3, [r5, #24]
 800ac5e:	b913      	cbnz	r3, 800ac66 <__swsetup_r+0x16>
 800ac60:	4628      	mov	r0, r5
 800ac62:	f7fd f9c1 	bl	8007fe8 <__sinit>
 800ac66:	4b2e      	ldr	r3, [pc, #184]	; (800ad20 <__swsetup_r+0xd0>)
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	d10f      	bne.n	800ac8c <__swsetup_r+0x3c>
 800ac6c:	686c      	ldr	r4, [r5, #4]
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac74:	0719      	lsls	r1, r3, #28
 800ac76:	d42c      	bmi.n	800acd2 <__swsetup_r+0x82>
 800ac78:	06dd      	lsls	r5, r3, #27
 800ac7a:	d411      	bmi.n	800aca0 <__swsetup_r+0x50>
 800ac7c:	2309      	movs	r3, #9
 800ac7e:	6033      	str	r3, [r6, #0]
 800ac80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8a:	e03e      	b.n	800ad0a <__swsetup_r+0xba>
 800ac8c:	4b25      	ldr	r3, [pc, #148]	; (800ad24 <__swsetup_r+0xd4>)
 800ac8e:	429c      	cmp	r4, r3
 800ac90:	d101      	bne.n	800ac96 <__swsetup_r+0x46>
 800ac92:	68ac      	ldr	r4, [r5, #8]
 800ac94:	e7eb      	b.n	800ac6e <__swsetup_r+0x1e>
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <__swsetup_r+0xd8>)
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	bf08      	it	eq
 800ac9c:	68ec      	ldreq	r4, [r5, #12]
 800ac9e:	e7e6      	b.n	800ac6e <__swsetup_r+0x1e>
 800aca0:	0758      	lsls	r0, r3, #29
 800aca2:	d512      	bpl.n	800acca <__swsetup_r+0x7a>
 800aca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aca6:	b141      	cbz	r1, 800acba <__swsetup_r+0x6a>
 800aca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acac:	4299      	cmp	r1, r3
 800acae:	d002      	beq.n	800acb6 <__swsetup_r+0x66>
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff fc03 	bl	800a4bc <_free_r>
 800acb6:	2300      	movs	r3, #0
 800acb8:	6363      	str	r3, [r4, #52]	; 0x34
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acc0:	81a3      	strh	r3, [r4, #12]
 800acc2:	2300      	movs	r3, #0
 800acc4:	6063      	str	r3, [r4, #4]
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f043 0308 	orr.w	r3, r3, #8
 800acd0:	81a3      	strh	r3, [r4, #12]
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	b94b      	cbnz	r3, 800acea <__swsetup_r+0x9a>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ace0:	d003      	beq.n	800acea <__swsetup_r+0x9a>
 800ace2:	4621      	mov	r1, r4
 800ace4:	4630      	mov	r0, r6
 800ace6:	f000 f877 	bl	800add8 <__smakebuf_r>
 800acea:	89a0      	ldrh	r0, [r4, #12]
 800acec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf0:	f010 0301 	ands.w	r3, r0, #1
 800acf4:	d00a      	beq.n	800ad0c <__swsetup_r+0xbc>
 800acf6:	2300      	movs	r3, #0
 800acf8:	60a3      	str	r3, [r4, #8]
 800acfa:	6963      	ldr	r3, [r4, #20]
 800acfc:	425b      	negs	r3, r3
 800acfe:	61a3      	str	r3, [r4, #24]
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	b943      	cbnz	r3, 800ad16 <__swsetup_r+0xc6>
 800ad04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad08:	d1ba      	bne.n	800ac80 <__swsetup_r+0x30>
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	0781      	lsls	r1, r0, #30
 800ad0e:	bf58      	it	pl
 800ad10:	6963      	ldrpl	r3, [r4, #20]
 800ad12:	60a3      	str	r3, [r4, #8]
 800ad14:	e7f4      	b.n	800ad00 <__swsetup_r+0xb0>
 800ad16:	2000      	movs	r0, #0
 800ad18:	e7f7      	b.n	800ad0a <__swsetup_r+0xba>
 800ad1a:	bf00      	nop
 800ad1c:	20000010 	.word	0x20000010
 800ad20:	0800b084 	.word	0x0800b084
 800ad24:	0800b0a4 	.word	0x0800b0a4
 800ad28:	0800b064 	.word	0x0800b064

0800ad2c <__assert_func>:
 800ad2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad2e:	4614      	mov	r4, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <__assert_func+0x2c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	68d8      	ldr	r0, [r3, #12]
 800ad3a:	b14c      	cbz	r4, 800ad50 <__assert_func+0x24>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <__assert_func+0x30>)
 800ad3e:	9100      	str	r1, [sp, #0]
 800ad40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad44:	4906      	ldr	r1, [pc, #24]	; (800ad60 <__assert_func+0x34>)
 800ad46:	462b      	mov	r3, r5
 800ad48:	f000 f80e 	bl	800ad68 <fiprintf>
 800ad4c:	f000 f88c 	bl	800ae68 <abort>
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <__assert_func+0x38>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e7f3      	b.n	800ad3e <__assert_func+0x12>
 800ad56:	bf00      	nop
 800ad58:	20000010 	.word	0x20000010
 800ad5c:	0800b457 	.word	0x0800b457
 800ad60:	0800b464 	.word	0x0800b464
 800ad64:	0800b492 	.word	0x0800b492

0800ad68 <fiprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b503      	push	{r0, r1, lr}
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	4805      	ldr	r0, [pc, #20]	; (800ad88 <fiprintf+0x20>)
 800ad72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f7ff fc15 	bl	800a5a8 <_vfiprintf_r>
 800ad7e:	b002      	add	sp, #8
 800ad80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad84:	b003      	add	sp, #12
 800ad86:	4770      	bx	lr
 800ad88:	20000010 	.word	0x20000010

0800ad8c <__swhatbuf_r>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	460e      	mov	r6, r1
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	2900      	cmp	r1, #0
 800ad96:	b096      	sub	sp, #88	; 0x58
 800ad98:	4614      	mov	r4, r2
 800ad9a:	461d      	mov	r5, r3
 800ad9c:	da08      	bge.n	800adb0 <__swhatbuf_r+0x24>
 800ad9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	602a      	str	r2, [r5, #0]
 800ada6:	061a      	lsls	r2, r3, #24
 800ada8:	d410      	bmi.n	800adcc <__swhatbuf_r+0x40>
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	e00e      	b.n	800adce <__swhatbuf_r+0x42>
 800adb0:	466a      	mov	r2, sp
 800adb2:	f000 f861 	bl	800ae78 <_fstat_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	dbf1      	blt.n	800ad9e <__swhatbuf_r+0x12>
 800adba:	9a01      	ldr	r2, [sp, #4]
 800adbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adc4:	425a      	negs	r2, r3
 800adc6:	415a      	adcs	r2, r3
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	e7ee      	b.n	800adaa <__swhatbuf_r+0x1e>
 800adcc:	2340      	movs	r3, #64	; 0x40
 800adce:	2000      	movs	r0, #0
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	b016      	add	sp, #88	; 0x58
 800add4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800add8 <__smakebuf_r>:
 800add8:	898b      	ldrh	r3, [r1, #12]
 800adda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800addc:	079d      	lsls	r5, r3, #30
 800adde:	4606      	mov	r6, r0
 800ade0:	460c      	mov	r4, r1
 800ade2:	d507      	bpl.n	800adf4 <__smakebuf_r+0x1c>
 800ade4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	6123      	str	r3, [r4, #16]
 800adec:	2301      	movs	r3, #1
 800adee:	6163      	str	r3, [r4, #20]
 800adf0:	b002      	add	sp, #8
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	ab01      	add	r3, sp, #4
 800adf6:	466a      	mov	r2, sp
 800adf8:	f7ff ffc8 	bl	800ad8c <__swhatbuf_r>
 800adfc:	9900      	ldr	r1, [sp, #0]
 800adfe:	4605      	mov	r5, r0
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7fd f9ed 	bl	80081e0 <_malloc_r>
 800ae06:	b948      	cbnz	r0, 800ae1c <__smakebuf_r+0x44>
 800ae08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae0c:	059a      	lsls	r2, r3, #22
 800ae0e:	d4ef      	bmi.n	800adf0 <__smakebuf_r+0x18>
 800ae10:	f023 0303 	bic.w	r3, r3, #3
 800ae14:	f043 0302 	orr.w	r3, r3, #2
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e7e3      	b.n	800ade4 <__smakebuf_r+0xc>
 800ae1c:	4b0d      	ldr	r3, [pc, #52]	; (800ae54 <__smakebuf_r+0x7c>)
 800ae1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	6020      	str	r0, [r4, #0]
 800ae24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	9b00      	ldr	r3, [sp, #0]
 800ae2c:	6163      	str	r3, [r4, #20]
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	6120      	str	r0, [r4, #16]
 800ae32:	b15b      	cbz	r3, 800ae4c <__smakebuf_r+0x74>
 800ae34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f82f 	bl	800ae9c <_isatty_r>
 800ae3e:	b128      	cbz	r0, 800ae4c <__smakebuf_r+0x74>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f023 0303 	bic.w	r3, r3, #3
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	89a0      	ldrh	r0, [r4, #12]
 800ae4e:	4305      	orrs	r5, r0
 800ae50:	81a5      	strh	r5, [r4, #12]
 800ae52:	e7cd      	b.n	800adf0 <__smakebuf_r+0x18>
 800ae54:	08007f81 	.word	0x08007f81

0800ae58 <malloc>:
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <malloc+0xc>)
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f7fd b9bf 	b.w	80081e0 <_malloc_r>
 800ae62:	bf00      	nop
 800ae64:	20000010 	.word	0x20000010

0800ae68 <abort>:
 800ae68:	b508      	push	{r3, lr}
 800ae6a:	2006      	movs	r0, #6
 800ae6c:	f000 f84e 	bl	800af0c <raise>
 800ae70:	2001      	movs	r0, #1
 800ae72:	f7f6 ffcf 	bl	8001e14 <_exit>
	...

0800ae78 <_fstat_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	; (800ae98 <_fstat_r+0x20>)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	4611      	mov	r1, r2
 800ae84:	602b      	str	r3, [r5, #0]
 800ae86:	f7f7 f814 	bl	8001eb2 <_fstat>
 800ae8a:	1c43      	adds	r3, r0, #1
 800ae8c:	d102      	bne.n	800ae94 <_fstat_r+0x1c>
 800ae8e:	682b      	ldr	r3, [r5, #0]
 800ae90:	b103      	cbz	r3, 800ae94 <_fstat_r+0x1c>
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	bd38      	pop	{r3, r4, r5, pc}
 800ae96:	bf00      	nop
 800ae98:	2000319c 	.word	0x2000319c

0800ae9c <_isatty_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d06      	ldr	r5, [pc, #24]	; (800aeb8 <_isatty_r+0x1c>)
 800aea0:	2300      	movs	r3, #0
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	f7f7 f813 	bl	8001ed2 <_isatty>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_isatty_r+0x1a>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_isatty_r+0x1a>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	2000319c 	.word	0x2000319c

0800aebc <_raise_r>:
 800aebc:	291f      	cmp	r1, #31
 800aebe:	b538      	push	{r3, r4, r5, lr}
 800aec0:	4604      	mov	r4, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	d904      	bls.n	800aed0 <_raise_r+0x14>
 800aec6:	2316      	movs	r3, #22
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aed2:	b112      	cbz	r2, 800aeda <_raise_r+0x1e>
 800aed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aed8:	b94b      	cbnz	r3, 800aeee <_raise_r+0x32>
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 f830 	bl	800af40 <_getpid_r>
 800aee0:	462a      	mov	r2, r5
 800aee2:	4601      	mov	r1, r0
 800aee4:	4620      	mov	r0, r4
 800aee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeea:	f000 b817 	b.w	800af1c <_kill_r>
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d00a      	beq.n	800af08 <_raise_r+0x4c>
 800aef2:	1c59      	adds	r1, r3, #1
 800aef4:	d103      	bne.n	800aefe <_raise_r+0x42>
 800aef6:	2316      	movs	r3, #22
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	2001      	movs	r0, #1
 800aefc:	e7e7      	b.n	800aece <_raise_r+0x12>
 800aefe:	2400      	movs	r4, #0
 800af00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af04:	4628      	mov	r0, r5
 800af06:	4798      	blx	r3
 800af08:	2000      	movs	r0, #0
 800af0a:	e7e0      	b.n	800aece <_raise_r+0x12>

0800af0c <raise>:
 800af0c:	4b02      	ldr	r3, [pc, #8]	; (800af18 <raise+0xc>)
 800af0e:	4601      	mov	r1, r0
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	f7ff bfd3 	b.w	800aebc <_raise_r>
 800af16:	bf00      	nop
 800af18:	20000010 	.word	0x20000010

0800af1c <_kill_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d07      	ldr	r5, [pc, #28]	; (800af3c <_kill_r+0x20>)
 800af20:	2300      	movs	r3, #0
 800af22:	4604      	mov	r4, r0
 800af24:	4608      	mov	r0, r1
 800af26:	4611      	mov	r1, r2
 800af28:	602b      	str	r3, [r5, #0]
 800af2a:	f7f6 ff63 	bl	8001df4 <_kill>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d102      	bne.n	800af38 <_kill_r+0x1c>
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	b103      	cbz	r3, 800af38 <_kill_r+0x1c>
 800af36:	6023      	str	r3, [r4, #0]
 800af38:	bd38      	pop	{r3, r4, r5, pc}
 800af3a:	bf00      	nop
 800af3c:	2000319c 	.word	0x2000319c

0800af40 <_getpid_r>:
 800af40:	f7f6 bf50 	b.w	8001de4 <_getpid>

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
