
SolarTracker_STM32L412CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800adb0  0800adb0  0001adb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e4  0800b2e4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2ec  0800b2ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f58  200001e4  0800b4d8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000313c  0800b4d8  0002313c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c127  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003889  00000000  00000000  0003c33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00041318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de15  00000000  00000000  00042900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1ae  00000000  00000000  00060715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7fba  00000000  00000000  0007a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013287d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074c4  00000000  00000000  001328d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad94 	.word	0x0800ad94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800ad94 	.word	0x0800ad94

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9aa 	b.w	8000f98 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <vApplicationGetIdleTaskMemory+0x30>)
 8000fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000200 	.word	0x20000200
 8000fcc:	200002b4 	.word	0x200002b4

08000fd0 <GpsToDecimalDegrees>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  float v= 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  if(strlen(nmeaPos)>5)
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f8fe 	bl	80001e4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d948      	bls.n	8001080 <GpsToDecimalDegrees+0xb0>
  {
    char integerPart[3+1];
    int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff6:	d101      	bne.n	8000ffc <GpsToDecimalDegrees+0x2c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <GpsToDecimalDegrees+0x2e>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	613b      	str	r3, [r7, #16]
    memcpy(integerPart, nmeaPos, digitCount);
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f006 ffda 	bl	8007fc2 <memcpy>
    integerPart[digitCount]= 0;
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    nmeaPos+= digitCount;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	607b      	str	r3, [r7, #4]
    v= atoi(integerPart) + atof(nmeaPos)/60.;
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fea3 	bl	8007d72 <atoi>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa88 	bl	8000544 <__aeabi_i2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 fe97 	bl	8007d6c <atof>
 800103e:	ec51 0b10 	vmov	r0, r1, d0
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <GpsToDecimalDegrees+0xc0>)
 8001048:	f7ff fc10 	bl	800086c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff f92a 	bl	80002ac <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd94 	bl	8000b8c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
    if(quadrant=='W' || quadrant=='S')
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b57      	cmp	r3, #87	; 0x57
 800106c:	d002      	beq.n	8001074 <GpsToDecimalDegrees+0xa4>
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b53      	cmp	r3, #83	; 0x53
 8001072:	d105      	bne.n	8001080 <GpsToDecimalDegrees+0xb0>
      v= -v;
 8001074:	edd7 7a05 	vldr	s15, [r7, #20]
 8001078:	eef1 7a67 	vneg.f32	s15, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return v;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	404e0000 	.word	0x404e0000

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b09c      	sub	sp, #112	; 0x70
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 ff34 	bl	8001f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f895 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 f97d 	bl	80013a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010a6:	f000 f8d7 	bl	8001258 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010aa:	f000 f919 	bl	80012e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010ae:	f000 f947 	bl	8001340 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 7, 6);
 80010b2:	2206      	movs	r2, #6
 80010b4:	2107      	movs	r1, #7
 80010b6:	2025      	movs	r0, #37	; 0x25
 80010b8:	f001 f816 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80010bc:	2025      	movs	r0, #37	; 0x25
 80010be:	f001 f82f 	bl	8002120 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <main+0x10c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <main+0x10c>)
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of spi_mutex */
  osMutexDef(spi_mutex);
 80010ce:	2300      	movs	r3, #0
 80010d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80010d2:	2300      	movs	r3, #0
 80010d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  spi_mutexHandle = osMutexCreate(osMutex(spi_mutex));
 80010d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fa64 	bl	80055a8 <osMutexCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <main+0x110>)
 80010e4:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spi_sem */
  osSemaphoreDef(spi_sem);
 80010e6:	2300      	movs	r3, #0
 80010e8:	663b      	str	r3, [r7, #96]	; 0x60
 80010ea:	2300      	movs	r3, #0
 80010ec:	667b      	str	r3, [r7, #100]	; 0x64
  spi_semHandle = osSemaphoreCreate(osSemaphore(spi_sem), 1);
 80010ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f2:	2101      	movs	r1, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 fa6f 	bl	80055d8 <osSemaphoreCreate>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <main+0x114>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_sem */
  osSemaphoreDef(uart_sem);
 8001100:	2300      	movs	r3, #0
 8001102:	65bb      	str	r3, [r7, #88]	; 0x58
 8001104:	2300      	movs	r3, #0
 8001106:	65fb      	str	r3, [r7, #92]	; 0x5c
  uart_semHandle = osSemaphoreCreate(osSemaphore(uart_sem), 1);
 8001108:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fa62 	bl	80055d8 <osSemaphoreCreate>
 8001114:	4603      	mov	r3, r0
 8001116:	4a25      	ldr	r2, [pc, #148]	; (80011ac <main+0x118>)
 8001118:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 800111a:	2200      	movs	r2, #0
 800111c:	2164      	movs	r1, #100	; 0x64
 800111e:	2002      	movs	r0, #2
 8001120:	f004 fc2e 	bl	8005980 <xQueueGenericCreate>
 8001124:	4603      	mov	r3, r0
 8001126:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <main+0x11c>)
 8001128:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart1Task */
  osThreadDef(uart1Task, Startuart1Task, osPriorityNormal, 0, 512);
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <main+0x120>)
 800112c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001130:	461d      	mov	r5, r3
 8001132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800113a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 800113e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f004 f9e3 	bl	8005510 <osThreadCreate>
 800114a:	4603      	mov	r3, r0
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <main+0x124>)
 800114e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart2Task */
  osThreadDef(uart2Task, Startuart2Task, osPriorityNormal, 0, 512);
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <main+0x128>)
 8001152:	f107 0420 	add.w	r4, r7, #32
 8001156:	461d      	mov	r5, r3
 8001158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001160:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f004 f9d0 	bl	8005510 <osThreadCreate>
 8001170:	4603      	mov	r3, r0
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <main+0x12c>)
 8001174:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi1Task */
  osThreadDef(spi1Task, startspi1Task, osPriorityHigh, 0, 512); //TODO: See if need a mutex instead
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <main+0x130>)
 8001178:	1d3c      	adds	r4, r7, #4
 800117a:	461d      	mov	r5, r3
 800117c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001180:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001184:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spi1TaskHandle = osThreadCreate(osThread(spi1Task), NULL);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f9bf 	bl	8005510 <osThreadCreate>
 8001192:	4603      	mov	r3, r0
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <main+0x134>)
 8001196:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001198:	f004 f9b3 	bl	8005502 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119c:	e7fe      	b.n	800119c <main+0x108>
 800119e:	bf00      	nop
 80011a0:	40013800 	.word	0x40013800
 80011a4:	200006a0 	.word	0x200006a0
 80011a8:	200006a4 	.word	0x200006a4
 80011ac:	200006a8 	.word	0x200006a8
 80011b0:	20000710 	.word	0x20000710
 80011b4:	0800add4 	.word	0x0800add4
 80011b8:	20000694 	.word	0x20000694
 80011bc:	0800adf0 	.word	0x0800adf0
 80011c0:	20000698 	.word	0x20000698
 80011c4:	0800ae0c 	.word	0x0800ae0c
 80011c8:	2000069c 	.word	0x2000069c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	; 0x58
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2244      	movs	r2, #68	; 0x44
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 feff 	bl	8007fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f2:	f001 f995 	bl	8002520 <HAL_PWREx_ControlVoltageScaling>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011fc:	f000 fbe8 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001200:	2310      	movs	r3, #16
 8001202:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f001 f9d7 	bl	80025cc <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001224:	f000 fbd4 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fe25 	bl	8002e90 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800124c:	f000 fbc0 	bl	80019d0 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3758      	adds	r7, #88	; 0x58
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_SPI1_Init+0x80>)
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <MX_SPI1_Init+0x84>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_SPI1_Init+0x80>)
 8001264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_SPI1_Init+0x80>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_SPI1_Init+0x80>)
 8001272:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001276:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_SPI1_Init+0x80>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_SPI1_Init+0x80>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_SPI1_Init+0x80>)
 8001286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_SPI1_Init+0x80>)
 800128e:	2230      	movs	r2, #48	; 0x30
 8001290:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_SPI1_Init+0x80>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_SPI1_Init+0x80>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_SPI1_Init+0x80>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_SPI1_Init+0x80>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_SPI1_Init+0x80>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_SPI1_Init+0x80>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <MX_SPI1_Init+0x80>)
 80012b8:	f002 f9c6 	bl	8003648 <HAL_SPI_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f000 fb85 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SSM;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <MX_SPI1_Init+0x84>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <MX_SPI1_Init+0x84>)
 80012cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000528 	.word	0x20000528
 80012dc:	40013000 	.word	0x40013000

080012e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <MX_USART1_UART_Init+0x5c>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART1_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART1_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001324:	f003 fbea 	bl	8004afc <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800132e:	f000 fb4f 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000058c 	.word	0x2000058c
 800133c:	40013800 	.word	0x40013800

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001346:	4a15      	ldr	r2, [pc, #84]	; (800139c <MX_USART2_UART_Init+0x5c>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800134c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART2_UART_Init+0x58>)
 8001384:	f003 fbba 	bl	8004afc <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800138e:	f000 fb1f 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000610 	.word	0x20000610
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_GPIO_Init+0xa4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <MX_GPIO_Init+0xa4>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_GPIO_Init+0xa4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_GPIO_Init+0xa4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_GPIO_Init+0xa4>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_GPIO_Init+0xa4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f240 1101 	movw	r1, #257	; 0x101
 80013ec:	4816      	ldr	r0, [pc, #88]	; (8001448 <MX_GPIO_Init+0xa8>)
 80013ee:	f001 f859 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 80013f2:	f240 1301 	movw	r3, #257	; 0x101
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	480f      	ldr	r0, [pc, #60]	; (8001448 <MX_GPIO_Init+0xa8>)
 800140c:	f000 fed8 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001416:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_GPIO_Init+0xa8>)
 8001428:	f000 feca 	bl	80021c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2105      	movs	r1, #5
 8001430:	2028      	movs	r0, #40	; 0x28
 8001432:	f000 fe59 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f000 fe72 	bl	8002120 <HAL_NVIC_EnableIRQ>

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <USART1_IRQHandler+0xc4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <USART1_IRQHandler+0xc4>)
 8001464:	2208      	movs	r2, #8
 8001466:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <USART1_IRQHandler+0xc4>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <USART1_IRQHandler+0xc4>)
 8001476:	2204      	movs	r2, #4
 8001478:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <USART1_IRQHandler+0xc4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <USART1_IRQHandler+0xc4>)
 8001488:	2202      	movs	r2, #2
 800148a:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <USART1_IRQHandler+0xc4>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	2b00      	cmp	r3, #0
 8001496:	d036      	beq.n	8001506 <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <USART1_IRQHandler+0xc4>)
 800149a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800149c:	b29b      	uxth	r3, r3
 800149e:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b0d      	cmp	r3, #13
 80014a4:	d002      	beq.n	80014ac <USART1_IRQHandler+0x60>
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b0a      	cmp	r3, #10
 80014aa:	d119      	bne.n	80014e0 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d028      	beq.n	8001506 <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	4916      	ldr	r1, [pc, #88]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014bc:	600a      	str	r2, [r1, #0]
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <USART1_IRQHandler+0xcc>)
 80014c0:	2100      	movs	r1, #0
 80014c2:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <USART1_IRQHandler+0xd0>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	463a      	mov	r2, r7
 80014ca:	2300      	movs	r3, #0
 80014cc:	4912      	ldr	r1, [pc, #72]	; (8001518 <USART1_IRQHandler+0xcc>)
 80014ce:	f004 fc65 	bl	8005d9c <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <USART1_IRQHandler+0xd4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 80014de:	e012      	b.n	8001506 <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b24      	cmp	r3, #36	; 0x24
 80014e4:	d003      	beq.n	80014ee <USART1_IRQHandler+0xa2>
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2bc8      	cmp	r3, #200	; 0xc8
 80014ec:	d102      	bne.n	80014f4 <USART1_IRQHandler+0xa8>
				rx_index = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4906      	ldr	r1, [pc, #24]	; (8001514 <USART1_IRQHandler+0xc8>)
 80014fc:	600a      	str	r2, [r1, #0]
 80014fe:	4906      	ldr	r1, [pc, #24]	; (8001518 <USART1_IRQHandler+0xcc>)
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8001504:	e7ff      	b.n	8001506 <USART1_IRQHandler+0xba>
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40013800 	.word	0x40013800
 8001514:	20000718 	.word	0x20000718
 8001518:	2000071c 	.word	0x2000071c
 800151c:	20000710 	.word	0x20000710
 8001520:	200004b4 	.word	0x200004b4

08001524 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_11)
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001534:	d102      	bne.n	800153c <HAL_GPIO_EXTI_Callback+0x18>
  {
    write_external = 1;
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_GPIO_EXTI_Callback+0x24>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
  }
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20000714 	.word	0x20000714

0800154c <Startuart1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startuart1Task */
void Startuart1Task(void const * argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static int spi_gps_read_addr = 0;
	static SerialBuffer gps_ext_buffer;
	static int statusbuf[8];
	int num_messages = 4000; //Number of FRAM messages for offset 64B -> 256KB storage.
 8001554:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001558:	60bb      	str	r3, [r7, #8]
	//Code used for external UART write, reading SPI data
  /* Infinite loop */
	for(;;)
	{
		if (write_external) {
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <Startuart1Task+0xdc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0fb      	beq.n	800155a <Startuart1Task+0xe>

			//Take both semaphores to keep other tasks from running (might be unnecessary bc higher priority)
			xSemaphoreTake(uart_semHandle, portMAX_DELAY);
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <Startuart1Task+0xe0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 31ff 	mov.w	r1, #4294967295
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fd92 	bl	8006094 <xQueueSemaphoreTake>
			xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <Startuart1Task+0xe4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	4618      	mov	r0, r3
 800157a:	f004 fd8b 	bl	8006094 <xQueueSemaphoreTake>
			spi_gps_read_addr = 0;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <Startuart1Task+0xe8>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

			for(int i = 0; i < num_messages; i++){
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e03a      	b.n	8001600 <Startuart1Task+0xb4>

				//Read 64 bytes of data
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2101      	movs	r1, #1
 800158e:	482a      	ldr	r0, [pc, #168]	; (8001638 <Startuart1Task+0xec>)
 8001590:	f000 ff88 	bl	80024a4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	4929      	ldr	r1, [pc, #164]	; (800163c <Startuart1Task+0xf0>)
 8001598:	4829      	ldr	r0, [pc, #164]	; (8001640 <Startuart1Task+0xf4>)
 800159a:	f002 f8f9 	bl	8003790 <HAL_SPI_Transmit_IT>
				HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_gps_read_addr, 2);
 800159e:	2202      	movs	r2, #2
 80015a0:	4924      	ldr	r1, [pc, #144]	; (8001634 <Startuart1Task+0xe8>)
 80015a2:	4827      	ldr	r0, [pc, #156]	; (8001640 <Startuart1Task+0xf4>)
 80015a4:	f002 f8f4 	bl	8003790 <HAL_SPI_Transmit_IT>
				HAL_SPI_Receive_IT(&hspi1, (uint8_t *)&gps_ext_buffer.Buffer, 3);
 80015a8:	2203      	movs	r2, #3
 80015aa:	4926      	ldr	r1, [pc, #152]	; (8001644 <Startuart1Task+0xf8>)
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <Startuart1Task+0xf4>)
 80015ae:	f002 f97d 	bl	80038ac <HAL_SPI_Receive_IT>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	4820      	ldr	r0, [pc, #128]	; (8001638 <Startuart1Task+0xec>)
 80015b8:	f000 ff74 	bl	80024a4 <HAL_GPIO_WritePin>

				spi_gps_read_addr += 64; //Increase offset to read next data value
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <Startuart1Task+0xe8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3340      	adds	r3, #64	; 0x40
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <Startuart1Task+0xe8>)
 80015c4:	6013      	str	r3, [r2, #0]

				// Read status register
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2101      	movs	r1, #1
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <Startuart1Task+0xec>)
 80015cc:	f000 ff6a 	bl	80024a4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	491d      	ldr	r1, [pc, #116]	; (8001648 <Startuart1Task+0xfc>)
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <Startuart1Task+0xf4>)
 80015d6:	f002 f8db 	bl	8003790 <HAL_SPI_Transmit_IT>
				HAL_SPI_Receive_IT(&hspi1, (uint8_t *)statusbuf, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	491b      	ldr	r1, [pc, #108]	; (800164c <Startuart1Task+0x100>)
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <Startuart1Task+0xf4>)
 80015e0:	f002 f964 	bl	80038ac <HAL_SPI_Receive_IT>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2101      	movs	r1, #1
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <Startuart1Task+0xec>)
 80015ea:	f000 ff5b 	bl	80024a4 <HAL_GPIO_WritePin>

				//Write NMEA message to external UART
				HAL_UART_Transmit(&huart1, (uint8_t*)&gps_ext_buffer.Buffer, 64, 100);
 80015ee:	2364      	movs	r3, #100	; 0x64
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	4914      	ldr	r1, [pc, #80]	; (8001644 <Startuart1Task+0xf8>)
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <Startuart1Task+0x104>)
 80015f6:	f003 facf 	bl	8004b98 <HAL_UART_Transmit>
			for(int i = 0; i < num_messages; i++){
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbc0      	blt.n	800158a <Startuart1Task+0x3e>
			}

			//Let other tasks continue running
			xSemaphoreGive(uart_semHandle);
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <Startuart1Task+0xe0>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	f004 fac5 	bl	8005ba0 <xQueueGenericSend>
			xSemaphoreGive(spi_semHandle);
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <Startuart1Task+0xe4>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	f004 fabe 	bl	8005ba0 <xQueueGenericSend>
		if (write_external) {
 8001624:	e799      	b.n	800155a <Startuart1Task+0xe>
 8001626:	bf00      	nop
 8001628:	20000714 	.word	0x20000714
 800162c:	200006a8 	.word	0x200006a8
 8001630:	200006a4 	.word	0x200006a4
 8001634:	200007e8 	.word	0x200007e8
 8001638:	48000400 	.word	0x48000400
 800163c:	0800ae65 	.word	0x0800ae65
 8001640:	20000528 	.word	0x20000528
 8001644:	200007ec 	.word	0x200007ec
 8001648:	0800ae68 	.word	0x0800ae68
 800164c:	20000850 	.word	0x20000850
 8001650:	2000058c 	.word	0x2000058c

08001654 <Startuart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startuart2Task */
void Startuart2Task(void const * argument)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	float latitude, longitude;

	char* message_id, *time, *data_valid, *raw_latitude, *raw_longitude, *latdir, *longdir;

	//Set RF Switch to 0 for internal antenna:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001662:	4851      	ldr	r0, [pc, #324]	; (80017a8 <Startuart2Task+0x154>)
 8001664:	f000 ff1e 	bl	80024a4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <Startuart2Task+0x158>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fe1d 	bl	80062ac <uxQueueMessagesWaitingFromISR>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f7      	beq.n	8001668 <Startuart2Task+0x14>
	  {
		  if(valid_count == 0) {
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <Startuart2Task+0x15c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d106      	bne.n	800168e <Startuart2Task+0x3a>
			  //osSemaphoreAcquire(UART_semHandle, osWaitForever); //Grab semaphore for new message
			  xSemaphoreTake(uart_semHandle, portMAX_DELAY);
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <Startuart2Task+0x160>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fd03 	bl	8006094 <xQueueSemaphoreTake>
		  }

		  xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <Startuart2Task+0x158>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	4948      	ldr	r1, [pc, #288]	; (80017b8 <Startuart2Task+0x164>)
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fc1c 	bl	8005ed4 <xQueueReceive>
		  valid_count++;
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <Startuart2Task+0x15c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <Startuart2Task+0x15c>)
 80016a6:	701a      	strb	r2, [r3, #0]
		  //Fill and check header
		  for(int c = 0; c < 6; c++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ac:	e00b      	b.n	80016c6 <Startuart2Task+0x72>
			  nmea_header[c] = SerialBufferReceived.Buffer[c];
 80016ae:	4a42      	ldr	r2, [pc, #264]	; (80017b8 <Startuart2Task+0x164>)
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	4413      	add	r3, r2
 80016b4:	7819      	ldrb	r1, [r3, #0]
 80016b6:	4a41      	ldr	r2, [pc, #260]	; (80017bc <Startuart2Task+0x168>)
 80016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ba:	4413      	add	r3, r2
 80016bc:	460a      	mov	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
		  for(int c = 0; c < 6; c++){
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	3301      	adds	r3, #1
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	ddf0      	ble.n	80016ae <Startuart2Task+0x5a>
		  }
		  if(!strcmp(nmea_header, "$GPRMC")){
 80016cc:	493c      	ldr	r1, [pc, #240]	; (80017c0 <Startuart2Task+0x16c>)
 80016ce:	483b      	ldr	r0, [pc, #236]	; (80017bc <Startuart2Task+0x168>)
 80016d0:	f7fe fd7e 	bl	80001d0 <strcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d161      	bne.n	800179e <Startuart2Task+0x14a>
			  if(SerialBufferReceived.Buffer[18] == 'A'){
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <Startuart2Task+0x164>)
 80016dc:	7c9b      	ldrb	r3, [r3, #18]
 80016de:	2b41      	cmp	r3, #65	; 0x41
 80016e0:	d15d      	bne.n	800179e <Startuart2Task+0x14a>
				  //Got a fix0000
				  message_id = SerialBufferReceived.Buffer;
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <Startuart2Task+0x164>)
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
				  time = FIND_AND_NUL(message_id, time, ',');
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ea:	f006 fdea 	bl	80082c2 <strchr>
 80016ee:	6278      	str	r0, [r7, #36]	; 0x24
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	3301      	adds	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
				  data_valid = FIND_AND_NUL(time, data_valid, ',');
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001700:	f006 fddf 	bl	80082c2 <strchr>
 8001704:	6238      	str	r0, [r7, #32]
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	3301      	adds	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
				  raw_latitude = FIND_AND_NUL(data_valid, raw_latitude, ',');
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	6a38      	ldr	r0, [r7, #32]
 8001716:	f006 fdd4 	bl	80082c2 <strchr>
 800171a:	61f8      	str	r0, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3301      	adds	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
				  latdir = FIND_AND_NUL(raw_latitude, latdir, ',');
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	69f8      	ldr	r0, [r7, #28]
 800172c:	f006 fdc9 	bl	80082c2 <strchr>
 8001730:	61b8      	str	r0, [r7, #24]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3301      	adds	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
				  raw_longitude = FIND_AND_NUL(latdir, raw_longitude, ',');
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	69b8      	ldr	r0, [r7, #24]
 8001742:	f006 fdbe 	bl	80082c2 <strchr>
 8001746:	6178      	str	r0, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
				  longdir = FIND_AND_NUL(raw_longitude, longdir, ',');
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f006 fdb3 	bl	80082c2 <strchr>
 800175c:	6138      	str	r0, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3301      	adds	r3, #1
 8001768:	613b      	str	r3, [r7, #16]

				  latitude = GpsToDecimalDegrees(raw_latitude, *latdir);
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	69f8      	ldr	r0, [r7, #28]
 8001772:	f7ff fc2d 	bl	8000fd0 <GpsToDecimalDegrees>
 8001776:	ed87 0a03 	vstr	s0, [r7, #12]
				  longitude = GpsToDecimalDegrees(raw_longitude, *longdir);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	6978      	ldr	r0, [r7, #20]
 8001782:	f7ff fc25 	bl	8000fd0 <GpsToDecimalDegrees>
 8001786:	ed87 0a02 	vstr	s0, [r7, #8]



				  valid_count = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <Startuart2Task+0x15c>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
				  xSemaphoreGive(spi_semHandle);
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <Startuart2Task+0x170>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	f004 fa01 	bl	8005ba0 <xQueueGenericSend>
//					  //osSemaphoreRelease(SPI_semHandle);
//
//				  }
			  }
		  }
		  got_nmea=0;
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <Startuart2Task+0x174>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 80017a4:	e760      	b.n	8001668 <Startuart2Task+0x14>
 80017a6:	bf00      	nop
 80017a8:	48000400 	.word	0x48000400
 80017ac:	20000710 	.word	0x20000710
 80017b0:	20000870 	.word	0x20000870
 80017b4:	200006a8 	.word	0x200006a8
 80017b8:	200006ac 	.word	0x200006ac
 80017bc:	200004b8 	.word	0x200004b8
 80017c0:	0800ae28 	.word	0x0800ae28
 80017c4:	200006a4 	.word	0x200006a4
 80017c8:	200004b4 	.word	0x200004b4

080017cc <startspi1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startspi1Task */
void startspi1Task(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startspi1Task */
	HAL_StatusTypeDef response = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]

	//SPI Initialization **************************
	//Write CS Pin high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2101      	movs	r1, #1
 80017dc:	4865      	ldr	r0, [pc, #404]	; (8001974 <startspi1Task+0x1a8>)
 80017de:	f000 fe61 	bl	80024a4 <HAL_GPIO_WritePin>
	// Enable write enable latch (allow write operations)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2101      	movs	r1, #1
 80017e6:	4863      	ldr	r0, [pc, #396]	; (8001974 <startspi1Task+0x1a8>)
 80017e8:	f000 fe5c 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 80017ec:	2201      	movs	r2, #1
 80017ee:	4962      	ldr	r1, [pc, #392]	; (8001978 <startspi1Task+0x1ac>)
 80017f0:	4862      	ldr	r0, [pc, #392]	; (800197c <startspi1Task+0x1b0>)
 80017f2:	f001 ffcd 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2101      	movs	r1, #1
 80017fa:	485e      	ldr	r0, [pc, #376]	; (8001974 <startspi1Task+0x1a8>)
 80017fc:	f000 fe52 	bl	80024a4 <HAL_GPIO_WritePin>

	// Test bytes to write to EEPROM
	spi_mout_buf[0] = 0xAB;
 8001800:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <startspi1Task+0x1b4>)
 8001802:	22ab      	movs	r2, #171	; 0xab
 8001804:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0xCD;
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <startspi1Task+0x1b4>)
 8001808:	22cd      	movs	r2, #205	; 0xcd
 800180a:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0xEF;
 800180c:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <startspi1Task+0x1b4>)
 800180e:	22ef      	movs	r2, #239	; 0xef
 8001810:	709a      	strb	r2, [r3, #2]

	// Write 3 bytes starting at given address
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2101      	movs	r1, #1
 8001816:	4857      	ldr	r0, [pc, #348]	; (8001974 <startspi1Task+0x1a8>)
 8001818:	f000 fe44 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WRITE, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	4959      	ldr	r1, [pc, #356]	; (8001984 <startspi1Task+0x1b8>)
 8001820:	4856      	ldr	r0, [pc, #344]	; (800197c <startspi1Task+0x1b0>)
 8001822:	f001 ffb5 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 8001826:	2202      	movs	r2, #2
 8001828:	4957      	ldr	r1, [pc, #348]	; (8001988 <startspi1Task+0x1bc>)
 800182a:	4854      	ldr	r0, [pc, #336]	; (800197c <startspi1Task+0x1b0>)
 800182c:	f001 ffb0 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)spi_mout_buf, 3);
 8001830:	2203      	movs	r2, #3
 8001832:	4953      	ldr	r1, [pc, #332]	; (8001980 <startspi1Task+0x1b4>)
 8001834:	4851      	ldr	r0, [pc, #324]	; (800197c <startspi1Task+0x1b0>)
 8001836:	f001 ffab 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	2101      	movs	r1, #1
 800183e:	484d      	ldr	r0, [pc, #308]	; (8001974 <startspi1Task+0x1a8>)
 8001840:	f000 fe30 	bl	80024a4 <HAL_GPIO_WritePin>
	//IO Driver for output pin enable

	// Clear buffer
	spi_mout_buf[0] = 0;
 8001844:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <startspi1Task+0x1b4>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0;
 800184a:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <startspi1Task+0x1b4>)
 800184c:	2200      	movs	r2, #0
 800184e:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0;
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <startspi1Task+0x1b4>)
 8001852:	2200      	movs	r2, #0
 8001854:	709a      	strb	r2, [r3, #2]

	// Wait until WIP bit is cleared
	spi_wip = 1;
 8001856:	4b4d      	ldr	r3, [pc, #308]	; (800198c <startspi1Task+0x1c0>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 800185c:	e02b      	b.n	80018b6 <startspi1Task+0xea>
	{
	 // Read status register
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	4844      	ldr	r0, [pc, #272]	; (8001974 <startspi1Task+0x1a8>)
 8001864:	f000 fe1e 	bl	80024a4 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	4949      	ldr	r1, [pc, #292]	; (8001990 <startspi1Task+0x1c4>)
 800186c:	4843      	ldr	r0, [pc, #268]	; (800197c <startspi1Task+0x1b0>)
 800186e:	f001 ff8f 	bl	8003790 <HAL_SPI_Transmit_IT>
	 response = HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	4942      	ldr	r1, [pc, #264]	; (8001980 <startspi1Task+0x1b4>)
 8001876:	4841      	ldr	r0, [pc, #260]	; (800197c <startspi1Task+0x1b0>)
 8001878:	f002 f818 	bl	80038ac <HAL_SPI_Receive_IT>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
	 if (response == HAL_OK) {
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <startspi1Task+0xc8>
	  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 8001886:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <startspi1Task+0x1b4>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4841      	ldr	r0, [pc, #260]	; (8001994 <startspi1Task+0x1c8>)
 800188e:	f006 fc43 	bl	8008118 <iprintf>
 8001892:	e004      	b.n	800189e <startspi1Task+0xd2>
	 } else {
	  printf("Got error response as %d\r\n", response);
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	4619      	mov	r1, r3
 8001898:	483f      	ldr	r0, [pc, #252]	; (8001998 <startspi1Task+0x1cc>)
 800189a:	f006 fc3d 	bl	8008118 <iprintf>
	 }
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2101      	movs	r1, #1
 80018a2:	4834      	ldr	r0, [pc, #208]	; (8001974 <startspi1Task+0x1a8>)
 80018a4:	f000 fdfe 	bl	80024a4 <HAL_GPIO_WritePin>

	 // Mask out WIP bit
	 spi_wip = spi_mout_buf[0] & 0b00000001;
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <startspi1Task+0x1b4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <startspi1Task+0x1c0>)
 80018b4:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <startspi1Task+0x1c0>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1cf      	bne.n	800185e <startspi1Task+0x92>
	}

	// Read the 3 bytes back
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2101      	movs	r1, #1
 80018c2:	482c      	ldr	r0, [pc, #176]	; (8001974 <startspi1Task+0x1a8>)
 80018c4:	f000 fdee 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&READ, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	4934      	ldr	r1, [pc, #208]	; (800199c <startspi1Task+0x1d0>)
 80018cc:	482b      	ldr	r0, [pc, #172]	; (800197c <startspi1Task+0x1b0>)
 80018ce:	f001 ff5f 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 80018d2:	2202      	movs	r2, #2
 80018d4:	492c      	ldr	r1, [pc, #176]	; (8001988 <startspi1Task+0x1bc>)
 80018d6:	4829      	ldr	r0, [pc, #164]	; (800197c <startspi1Task+0x1b0>)
 80018d8:	f001 ff5a 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 3);
 80018dc:	2203      	movs	r2, #3
 80018de:	4928      	ldr	r1, [pc, #160]	; (8001980 <startspi1Task+0x1b4>)
 80018e0:	4826      	ldr	r0, [pc, #152]	; (800197c <startspi1Task+0x1b0>)
 80018e2:	f001 ffe3 	bl	80038ac <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2101      	movs	r1, #1
 80018ea:	4822      	ldr	r0, [pc, #136]	; (8001974 <startspi1Task+0x1a8>)
 80018ec:	f000 fdda 	bl	80024a4 <HAL_GPIO_WritePin>

	// Read status register
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2101      	movs	r1, #1
 80018f4:	481f      	ldr	r0, [pc, #124]	; (8001974 <startspi1Task+0x1a8>)
 80018f6:	f000 fdd5 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&RDSR, 1);
 80018fa:	2201      	movs	r2, #1
 80018fc:	4924      	ldr	r1, [pc, #144]	; (8001990 <startspi1Task+0x1c4>)
 80018fe:	481f      	ldr	r0, [pc, #124]	; (800197c <startspi1Task+0x1b0>)
 8001900:	f001 ff46 	bl	8003790 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_mout_buf, 1);
 8001904:	2201      	movs	r2, #1
 8001906:	491e      	ldr	r1, [pc, #120]	; (8001980 <startspi1Task+0x1b4>)
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <startspi1Task+0x1b0>)
 800190a:	f001 ffcf 	bl	80038ac <HAL_SPI_Receive_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2101      	movs	r1, #1
 8001912:	4818      	ldr	r0, [pc, #96]	; (8001974 <startspi1Task+0x1a8>)
 8001914:	f000 fdc6 	bl	80024a4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
	  xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <startspi1Task+0x1d4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fbb7 	bl	8006094 <xQueueSemaphoreTake>

	  //Send over SPI to FRAM
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data

	  // Write 3 bytes starting at given address
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2101      	movs	r1, #1
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <startspi1Task+0x1a8>)
 800192c:	f000 fdba 	bl	80024a4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WRITE, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4914      	ldr	r1, [pc, #80]	; (8001984 <startspi1Task+0x1b8>)
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <startspi1Task+0x1b0>)
 8001936:	f001 ff2b 	bl	8003790 <HAL_SPI_Transmit_IT>
	  HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&spi_addr, 2);
 800193a:	2202      	movs	r2, #2
 800193c:	4912      	ldr	r1, [pc, #72]	; (8001988 <startspi1Task+0x1bc>)
 800193e:	480f      	ldr	r0, [pc, #60]	; (800197c <startspi1Task+0x1b0>)
 8001940:	f001 ff26 	bl	8003790 <HAL_SPI_Transmit_IT>
	  HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&SerialBufferReceived.Buffer, 64);
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	4917      	ldr	r1, [pc, #92]	; (80019a4 <startspi1Task+0x1d8>)
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <startspi1Task+0x1b0>)
 800194a:	f001 ff21 	bl	8003790 <HAL_SPI_Transmit_IT>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2101      	movs	r1, #1
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <startspi1Task+0x1a8>)
 8001954:	f000 fda6 	bl	80024a4 <HAL_GPIO_WritePin>

	  spi_addr += 64; //Offset within destination device to hold NMEA message
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <startspi1Task+0x1bc>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	3340      	adds	r3, #64	; 0x40
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <startspi1Task+0x1bc>)
 8001962:	801a      	strh	r2, [r3, #0]

	  xSemaphoreGive(uart_semHandle);
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <startspi1Task+0x1dc>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	f004 f917 	bl	8005ba0 <xQueueGenericSend>
	  xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8001972:	e7d1      	b.n	8001918 <startspi1Task+0x14c>
 8001974:	48000400 	.word	0x48000400
 8001978:	0800ae67 	.word	0x0800ae67
 800197c:	20000528 	.word	0x20000528
 8001980:	200004c0 	.word	0x200004c0
 8001984:	0800ae66 	.word	0x0800ae66
 8001988:	20000524 	.word	0x20000524
 800198c:	20000526 	.word	0x20000526
 8001990:	0800ae68 	.word	0x0800ae68
 8001994:	0800ae30 	.word	0x0800ae30
 8001998:	0800ae44 	.word	0x0800ae44
 800199c:	0800ae65 	.word	0x0800ae65
 80019a0:	200006a4 	.word	0x200006a4
 80019a4:	200006ac 	.word	0x200006ac
 80019a8:	200006a8 	.word	0x200006a8

080019ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019be:	f000 fabb 	bl	8001f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>
	...

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_MspInit+0x4c>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6613      	str	r3, [r2, #96]	; 0x60
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_MspInit+0x4c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_MspInit+0x4c>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	f06f 0001 	mvn.w	r0, #1
 8001a1a:	f000 fb65 	bl	80020e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_SPI_MspInit+0x8c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12f      	bne.n	8001aae <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_SPI_MspInit+0x90>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a7e:	2338      	movs	r3, #56	; 0x38
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_SPI_MspInit+0x94>)
 8001a9a:	f000 fb91 	bl	80021c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	2023      	movs	r0, #35	; 0x23
 8001aa4:	f000 fb20 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001aa8:	2023      	movs	r0, #35	; 0x23
 8001aaa:	f000 fb39 	bl	8002120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40013000 	.word	0x40013000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000400 	.word	0x48000400

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b098      	sub	sp, #96	; 0x60
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	2234      	movs	r2, #52	; 0x34
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f006 fa7a 	bl	8007fde <memset>
  if(huart->Instance==USART1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a3e      	ldr	r2, [pc, #248]	; (8001be8 <HAL_UART_MspInit+0x124>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d138      	bne.n	8001b66 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 fc1b 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b0c:	f7ff ff60 	bl	80019d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b14:	4a35      	ldr	r2, [pc, #212]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b52:	2307      	movs	r3, #7
 8001b54:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f000 fb2e 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b64:	e03b      	b.n	8001bde <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_UART_MspInit+0x12c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d136      	bne.n	8001bde <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fbdd 	bl	800333c <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001b88:	f7ff ff22 	bl	80019d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b96:	6593      	str	r3, [r2, #88]	; 0x58
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_UART_MspInit+0x128>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bda:	f000 faf1 	bl	80021c0 <HAL_GPIO_Init>
}
 8001bde:	bf00      	nop
 8001be0:	3760      	adds	r7, #96	; 0x60
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40013800 	.word	0x40013800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2019      	movs	r0, #25
 8001c0a:	f000 fa6d 	bl	80020e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c0e:	2019      	movs	r0, #25
 8001c10:	f000 fa86 	bl	8002120 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c2c:	f107 0210 	add.w	r2, r7, #16
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 faee 	bl	8003218 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c3c:	f001 fad6 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8001c40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_InitTick+0xa0>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_InitTick+0xa8>)
 8001c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c72:	f002 fcc4 	bl	80045fe <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c7c:	4806      	ldr	r0, [pc, #24]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c7e:	f002 fd1f 	bl	80046c0 <HAL_TIM_Base_Start_IT>
 8001c82:	4603      	mov	r3, r0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	20000874 	.word	0x20000874
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cd2:	f002 fd49 	bl	8004768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000874 	.word	0x20000874

08001ce0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <SPI1_IRQHandler+0x10>)
 8001ce6:	f001 ff41 	bl	8003b6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000528 	.word	0x20000528

08001cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001cf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cfc:	f000 fbea 	bl	80024d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
	return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_kill>:

int _kill(int pid, int sig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d1e:	f006 f82d 	bl	8007d7c <__errno>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2216      	movs	r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
	return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_exit>:

void _exit (int status)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffe7 	bl	8001d14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d46:	e7fe      	b.n	8001d46 <_exit+0x12>

08001d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00a      	b.n	8001d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d5a:	f3af 8000 	nop.w
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf0      	blt.n	8001d5a <_read+0x12>
	}

return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e009      	b.n	8001da8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	60ba      	str	r2, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf1      	blt.n	8001d94 <_write+0x12>
	}
	return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_close>:

int _close(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de2:	605a      	str	r2, [r3, #4]
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_isatty>:

int _isatty(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f005 ff92 	bl	8007d7c <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000a000 	.word	0x2000a000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	200008c0 	.word	0x200008c0
 8001e8c:	20003140 	.word	0x20003140

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb8:	f7ff ffea 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <LoopForever+0xe>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	; (8001f00 <LoopForever+0x16>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f006 f847 	bl	8007f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee6:	f7ff f8d5 	bl	8001094 <main>

08001eea <LoopForever>:

LoopForever:
    b LoopForever
 8001eea:	e7fe      	b.n	8001eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001eec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ef8:	0800b2f4 	.word	0x0800b2f4
  ldr r2, =_sbss
 8001efc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f00:	2000313c 	.word	0x2000313c

08001f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_2_IRQHandler>

08001f06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f8de 	bl	80020d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f16:	200f      	movs	r0, #15
 8001f18:	f7ff fe6c 	bl	8001bf4 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e001      	b.n	8001f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f28:	f7ff fd58 	bl	80019dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	200008c4 	.word	0x200008c4

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200008c4 	.word	0x200008c4

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff4c 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020fa:	f7ff ff61 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 80020fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	6978      	ldr	r0, [r7, #20]
 8002106:	f7ff ffb1 	bl	800206c <NVIC_EncodePriority>
 800210a:	4602      	mov	r2, r0
 800210c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff80 	bl	8002018 <__NVIC_SetPriority>
}
 8002118:	bf00      	nop
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff54 	bl	8001fdc <__NVIC_EnableIRQ>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d005      	beq.n	8002160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2204      	movs	r2, #4
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e029      	b.n	80021b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020e 	bic.w	r2, r2, #14
 800216e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f003 021c 	and.w	r2, r3, #28
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f202 	lsl.w	r2, r1, r2
 8002192:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
    }
  }
  return status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ce:	e14e      	b.n	800246e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8140 	beq.w	8002468 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d005      	beq.n	8002200 <HAL_GPIO_Init+0x40>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 0201 	and.w	r2, r3, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b03      	cmp	r3, #3
 800226c:	d017      	beq.n	800229e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d123      	bne.n	80022f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	6939      	ldr	r1, [r7, #16]
 80022ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 809a 	beq.w	8002468 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_GPIO_Init+0x2cc>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_GPIO_Init+0x2cc>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6613      	str	r3, [r2, #96]	; 0x60
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <HAL_GPIO_Init+0x2cc>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800234c:	4a50      	ldr	r2, [pc, #320]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002376:	d013      	beq.n	80023a0 <HAL_GPIO_Init+0x1e0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a46      	ldr	r2, [pc, #280]	; (8002494 <HAL_GPIO_Init+0x2d4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00d      	beq.n	800239c <HAL_GPIO_Init+0x1dc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_GPIO_Init+0x2d8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <HAL_GPIO_Init+0x1d8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a44      	ldr	r2, [pc, #272]	; (800249c <HAL_GPIO_Init+0x2dc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_GPIO_Init+0x1d4>
 8002390:	2303      	movs	r3, #3
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x1e2>
 8002394:	2307      	movs	r3, #7
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x1e2>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x1e2>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x1e2>
 80023a0:	2300      	movs	r3, #0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b2:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c0:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e4:	4a2e      	ldr	r2, [pc, #184]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_GPIO_Init+0x2e0>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f aea9 	bne.w	80021d0 <HAL_GPIO_Init+0x10>
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000
 8002494:	48000400 	.word	0x48000400
 8002498:	48000800 	.word	0x48000800
 800249c:	48000c00 	.word	0x48000c00
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f816 	bl	8001524 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_PWREx_GetVoltageRange+0x18>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40007000 	.word	0x40007000

08002520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252e:	d130      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800253c:	d038      	beq.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2232      	movs	r2, #50	; 0x32
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0c9b      	lsrs	r3, r3, #18
 8002560:	3301      	adds	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002564:	e002      	b.n	800256c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3b01      	subs	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002578:	d102      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0x60>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f2      	bne.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258c:	d110      	bne.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e00f      	b.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d007      	beq.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40007000 	.word	0x40007000
 80025c4:	20000000 	.word	0x20000000
 80025c8:	431bde83 	.word	0x431bde83

080025cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f000 bc4f 	b.w	8002e7e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e0:	4b97      	ldr	r3, [pc, #604]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ea:	4b95      	ldr	r3, [pc, #596]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80e6 	beq.w	80027ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_RCC_OscConfig+0x4c>
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	f040 808d 	bne.w	800272a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 8089 	bne.w	800272a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002618:	4b89      	ldr	r3, [pc, #548]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_RCC_OscConfig+0x66>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f000 bc26 	b.w	8002e7e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002636:	4b82      	ldr	r3, [pc, #520]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_RCC_OscConfig+0x80>
 8002642:	4b7f      	ldr	r3, [pc, #508]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264a:	e005      	b.n	8002658 <HAL_RCC_OscConfig+0x8c>
 800264c:	4b7c      	ldr	r3, [pc, #496]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	4293      	cmp	r3, r2
 800265a:	d224      	bcs.n	80026a6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fe0b 	bl	800327c <RCC_SetFlashLatencyFromMSIRange>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	f000 bc06 	b.w	8002e7e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002672:	4b73      	ldr	r3, [pc, #460]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a72      	ldr	r2, [pc, #456]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002678:	f043 0308 	orr.w	r3, r3, #8
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	496d      	ldr	r1, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002690:	4b6b      	ldr	r3, [pc, #428]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4968      	ldr	r1, [pc, #416]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e025      	b.n	80026f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a6:	4b66      	ldr	r3, [pc, #408]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a65      	ldr	r2, [pc, #404]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026ac:	f043 0308 	orr.w	r3, r3, #8
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4960      	ldr	r1, [pc, #384]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c4:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	495b      	ldr	r1, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fdca 	bl	800327c <RCC_SetFlashLatencyFromMSIRange>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e3c5      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f2:	f000 fccd 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4950      	ldr	r1, [pc, #320]	; (8002844 <HAL_RCC_OscConfig+0x278>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_RCC_OscConfig+0x27c>)
 8002710:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002712:	4b4e      	ldr	r3, [pc, #312]	; (800284c <HAL_RCC_OscConfig+0x280>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fa6c 	bl	8001bf4 <HAL_InitTick>
 800271c:	4603      	mov	r3, r0
 800271e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d052      	beq.n	80027cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	e3a9      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d032      	beq.n	8002798 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a42      	ldr	r2, [pc, #264]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800273e:	f7ff fc0f 	bl	8001f60 <HAL_GetTick>
 8002742:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002746:	f7ff fc0b 	bl	8001f60 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e392      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	4930      	ldr	r1, [pc, #192]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	492b      	ldr	r1, [pc, #172]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
 8002796:	e01a      	b.n	80027ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a28      	ldr	r2, [pc, #160]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a4:	f7ff fbdc 	bl	8001f60 <HAL_GetTick>
 80027a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ac:	f7ff fbd8 	bl	8001f60 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e35f      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x1e0>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d073      	beq.n	80028c2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x220>
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d10e      	bne.n	8002804 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d063      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2f4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d15f      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e33c      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x250>
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e025      	b.n	8002868 <HAL_RCC_OscConfig+0x29c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d114      	bne.n	8002850 <HAL_RCC_OscConfig+0x284>
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a02      	ldr	r2, [pc, #8]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e013      	b.n	8002868 <HAL_RCC_OscConfig+0x29c>
 8002840:	40021000 	.word	0x40021000
 8002844:	0800ae6c 	.word	0x0800ae6c
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004
 8002850:	4b8f      	ldr	r3, [pc, #572]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8e      	ldr	r2, [pc, #568]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b8c      	ldr	r3, [pc, #560]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a8b      	ldr	r2, [pc, #556]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff fb76 	bl	8001f60 <HAL_GetTick>
 8002874:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff fb72 	bl	8001f60 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e2f9      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288a:	4b81      	ldr	r3, [pc, #516]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x2ac>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff fb62 	bl	8001f60 <HAL_GetTick>
 800289c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff fb5e 	bl	8001f60 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e2e5      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2d4>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d060      	beq.n	8002990 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_OscConfig+0x314>
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d119      	bne.n	800290e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d116      	bne.n	800290e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e0:	4b6b      	ldr	r3, [pc, #428]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x32c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2c2      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	4962      	ldr	r1, [pc, #392]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290c:	e040      	b.n	8002990 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d023      	beq.n	800295e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002916:	4b5e      	ldr	r3, [pc, #376]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7ff fb1d 	bl	8001f60 <HAL_GetTick>
 8002926:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292a:	f7ff fb19 	bl	8001f60 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e2a0      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293c:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	494e      	ldr	r1, [pc, #312]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
 800295c:	e018      	b.n	8002990 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295e:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7ff faf9 	bl	8001f60 <HAL_GetTick>
 800296e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7ff faf5 	bl	8001f60 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e27c      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8082 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d05f      	beq.n	8002a66 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d037      	beq.n	8002a2c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e254      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029ee:	f7ff fab7 	bl	8001f60 <HAL_GetTick>
 80029f2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f6:	f7ff fab3 	bl	8001f60 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b11      	cmp	r3, #17
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e23a      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ef      	bne.n	80029f6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1c:	f023 0210 	bic.w	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	491a      	ldr	r1, [pc, #104]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7ff fa90 	bl	8001f60 <HAL_GetTick>
 8002a40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7ff fa8c 	bl	8001f60 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e213      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ef      	beq.n	8002a44 <HAL_RCC_OscConfig+0x478>
 8002a64:	e01d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7ff fa73 	bl	8001f60 <HAL_GetTick>
 8002a7a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7ff fa6f 	bl	8001f60 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b11      	cmp	r3, #17
 8002a8a:	d903      	bls.n	8002a94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1f6      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
 8002a90:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a94:	4ba9      	ldr	r3, [pc, #676]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ed      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80bd 	beq.w	8002c2a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ab6:	4ba1      	ldr	r3, [pc, #644]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b9e      	ldr	r3, [pc, #632]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	4a9d      	ldr	r2, [pc, #628]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ace:	4b9b      	ldr	r3, [pc, #620]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	4b97      	ldr	r3, [pc, #604]	; (8002d40 <HAL_RCC_OscConfig+0x774>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d118      	bne.n	8002b1e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aec:	4b94      	ldr	r3, [pc, #592]	; (8002d40 <HAL_RCC_OscConfig+0x774>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a93      	ldr	r2, [pc, #588]	; (8002d40 <HAL_RCC_OscConfig+0x774>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af8:	f7ff fa32 	bl	8001f60 <HAL_GetTick>
 8002afc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7ff fa2e 	bl	8001f60 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1b5      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b12:	4b8b      	ldr	r3, [pc, #556]	; (8002d40 <HAL_RCC_OscConfig+0x774>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	497f      	ldr	r1, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b50:	4b7a      	ldr	r3, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	4a79      	ldr	r2, [pc, #484]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b60:	4b76      	ldr	r3, [pc, #472]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	4a75      	ldr	r2, [pc, #468]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b70:	e018      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	4a70      	ldr	r2, [pc, #448]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b84:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a6c      	ldr	r2, [pc, #432]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b94:	4b69      	ldr	r3, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a68      	ldr	r2, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7ff f9d8 	bl	8001f60 <HAL_GetTick>
 8002bb0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f9d4 	bl	8001f60 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e159      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ed      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x5e8>
 8002bd8:	e01d      	b.n	8002c16 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7ff f9c1 	bl	8001f60 <HAL_GetTick>
 8002bde:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7ff f9bd 	bl	8001f60 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e142      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ed      	bne.n	8002be2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002c06:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d105      	bne.n	8002c2a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	4a46      	ldr	r2, [pc, #280]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c44:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7ff f987 	bl	8001f60 <HAL_GetTick>
 8002c52:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c56:	f7ff f983 	bl	8001f60 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e10a      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ef      	beq.n	8002c56 <HAL_RCC_OscConfig+0x68a>
 8002c76:	e01b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c78:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7ff f96a 	bl	8001f60 <HAL_GetTick>
 8002c8c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c90:	f7ff f966 	bl	8001f60 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0ed      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ef      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80e1 	beq.w	8002e7c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	f040 80b5 	bne.w	8002e2e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d124      	bne.n	8002d22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d113      	bne.n	8002d22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d05f      	beq.n	8002de2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d05a      	beq.n	8002dde <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_RCC_OscConfig+0x770>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d34:	f7ff f914 	bl	8001f60 <HAL_GetTick>
 8002d38:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3a:	e00c      	b.n	8002d56 <HAL_RCC_OscConfig+0x78a>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7ff f90c 	bl	8001f60 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e093      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	4b49      	ldr	r3, [pc, #292]	; (8002e8c <HAL_RCC_OscConfig+0x8c0>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d7c:	0212      	lsls	r2, r2, #8
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0552      	lsls	r2, r2, #21
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d90:	0852      	lsrs	r2, r2, #1
 8002d92:	3a01      	subs	r2, #1
 8002d94:	0652      	lsls	r2, r2, #25
 8002d96:	430a      	orrs	r2, r1
 8002d98:	493b      	ldr	r1, [pc, #236]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a39      	ldr	r2, [pc, #228]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002db6:	f7ff f8d3 	bl	8001f60 <HAL_GetTick>
 8002dba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7ff f8cf 	bl	8001f60 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e056      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ddc:	e04e      	b.n	8002e7c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e04d      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d146      	bne.n	8002e7c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e04:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e06:	f7ff f8ab 	bl	8001f60 <HAL_GetTick>
 8002e0a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7ff f8a7 	bl	8001f60 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e02e      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x842>
 8002e2c:	e026      	b.n	8002e7c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d021      	beq.n	8002e78 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff f88e 	bl	8001f60 <HAL_GetTick>
 8002e44:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7ff f88a 	bl	8001f60 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e011      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_RCC_OscConfig+0x8bc>)
 8002e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e70:	f023 0303 	bic.w	r3, r3, #3
 8002e74:	60d3      	str	r3, [r2, #12]
 8002e76:	e001      	b.n	8002e7c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3728      	adds	r7, #40	; 0x28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	f99f808c 	.word	0xf99f808c

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0e7      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b72      	ldr	r3, [pc, #456]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4970      	ldr	r1, [pc, #448]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cf      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d908      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4960      	ldr	r1, [pc, #384]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04c      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d121      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0a6      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e09a      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e08e      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e086      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4943      	ldr	r1, [pc, #268]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fe fff2 	bl	8001f60 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe ffee 	bl	8001f60 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e06e      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d208      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	492b      	ldr	r1, [pc, #172]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d210      	bcs.n	8003006 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 0207 	bic.w	r2, r3, #7
 8002fec:	4923      	ldr	r1, [pc, #140]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_ClockConfig+0x1ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d001      	beq.n	8003006 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e036      	b.n	8003074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4918      	ldr	r1, [pc, #96]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4910      	ldr	r1, [pc, #64]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003044:	f000 f824 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	490b      	ldr	r1, [pc, #44]	; (8003084 <HAL_RCC_ClockConfig+0x1f4>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1f8>)
 8003062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_ClockConfig+0x1fc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fdc3 	bl	8001bf4 <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	72fb      	strb	r3, [r7, #11]

  return status;
 8003072:	7afb      	ldrb	r3, [r7, #11]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40022000 	.word	0x40022000
 8003080:	40021000 	.word	0x40021000
 8003084:	0800ae6c 	.word	0x0800ae6c
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x34>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d121      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d11e      	bne.n	8003102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030c4:	4b34      	ldr	r3, [pc, #208]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030d0:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e005      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d102      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e004      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d101      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003116:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d134      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0xa6>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d003      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0xac>
 8003134:	e005      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	e005      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800313e:	617b      	str	r3, [r7, #20]
      break;
 8003140:	e002      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	617b      	str	r3, [r7, #20]
      break;
 8003146:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	fb03 f202 	mul.w	r2, r3, r2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	0e5b      	lsrs	r3, r3, #25
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	3301      	adds	r3, #1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003188:	69bb      	ldr	r3, [r7, #24]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	0800ae84 	.word	0x0800ae84
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	007a1200 	.word	0x007a1200

080031a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4904      	ldr	r1, [pc, #16]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	0800ae7c 	.word	0x0800ae7c

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f0:	f7ff ffda 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0adb      	lsrs	r3, r3, #11
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4904      	ldr	r1, [pc, #16]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	0800ae7c 	.word	0x0800ae7c

08003218 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	220f      	movs	r2, #15
 8003226:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_RCC_GetClockConfig+0x60>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40022000 	.word	0x40022000

0800327c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003294:	f7ff f936 	bl	8002504 <HAL_PWREx_GetVoltageRange>
 8003298:	6178      	str	r0, [r7, #20]
 800329a:	e014      	b.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	4a24      	ldr	r2, [pc, #144]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6593      	str	r3, [r2, #88]	; 0x58
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032b4:	f7ff f926 	bl	8002504 <HAL_PWREx_GetVoltageRange>
 80032b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d10b      	bne.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d919      	bls.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2ba0      	cmp	r3, #160	; 0xa0
 80032d8:	d902      	bls.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032da:	2302      	movs	r3, #2
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	e013      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e0:	2301      	movs	r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e010      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d902      	bls.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032ec:	2303      	movs	r3, #3
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	e00a      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d102      	bne.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032f8:	2302      	movs	r3, #2
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	e004      	b.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b70      	cmp	r3, #112	; 0x70
 8003302:	d101      	bne.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003304:	2301      	movs	r3, #1
 8003306:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	4909      	ldr	r1, [pc, #36]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	40022000 	.word	0x40022000

0800333c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003344:	2300      	movs	r3, #0
 8003346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003348:	2300      	movs	r3, #0
 800334a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 809e 	beq.w	8003496 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800335e:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800336e:	2300      	movs	r3, #0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b40      	ldr	r3, [pc, #256]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	4a3f      	ldr	r2, [pc, #252]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	; 0x58
 8003380:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338c:	2301      	movs	r3, #1
 800338e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a39      	ldr	r2, [pc, #228]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339c:	f7fe fde0 	bl	8001f60 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033a2:	e009      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fe fddc 	bl	8001f60 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	74fb      	strb	r3, [r7, #19]
        break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d15a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d019      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003412:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fd9c 	bl	8001f60 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	e00b      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe fd98 	bl	8001f60 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
            break;
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ec      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003484:	7c7b      	ldrb	r3, [r7, #17]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	4a6d      	ldr	r2, [pc, #436]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a2:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4964      	ldr	r1, [pc, #400]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c4:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 020c 	bic.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	495c      	ldr	r1, [pc, #368]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e6:	4b57      	ldr	r3, [pc, #348]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4953      	ldr	r1, [pc, #332]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003508:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	494b      	ldr	r1, [pc, #300]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4942      	ldr	r1, [pc, #264]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354c:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	493a      	ldr	r1, [pc, #232]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356e:	4b35      	ldr	r3, [pc, #212]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4931      	ldr	r1, [pc, #196]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003590:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	4929      	ldr	r1, [pc, #164]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4920      	ldr	r1, [pc, #128]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4918      	ldr	r1, [pc, #96]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a12      	ldr	r2, [pc, #72]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	490a      	ldr	r1, [pc, #40]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362a:	d105      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003636:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003638:	7cbb      	ldrb	r3, [r7, #18]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e095      	b.n	8003786 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366a:	d009      	beq.n	8003680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
 8003672:	e005      	b.n	8003680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe f9c6 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c0:	d902      	bls.n	80036c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e002      	b.n	80036ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036d6:	d007      	beq.n	80036e8 <HAL_SPI_Init+0xa0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036e0:	d002      	beq.n	80036e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	ea42 0103 	orr.w	r1, r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	f003 0204 	and.w	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003764:	ea42 0103 	orr.w	r1, r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_SPI_Transmit_IT+0x20>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e072      	b.n	8003896 <HAL_SPI_Transmit_IT+0x106>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Transmit_IT+0x34>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037c8:	e060      	b.n	800388c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037da:	e057      	b.n	800388c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2203      	movs	r2, #3
 80037e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	88fa      	ldrh	r2, [r7, #6]
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003820:	d903      	bls.n	800382a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_SPI_Transmit_IT+0x114>)
 8003826:	651a      	str	r2, [r3, #80]	; 0x50
 8003828:	e002      	b.n	8003830 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <HAL_SPI_Transmit_IT+0x118>)
 800382e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003838:	d10f      	bne.n	800385a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003848:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003858:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003868:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d008      	beq.n	800388a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e000      	b.n	800388c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800388a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	080040df 	.word	0x080040df
 80038a8:	08004099 	.word	0x08004099

080038ac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d110      	bne.n	80038e8 <HAL_SPI_Receive_IT+0x3c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d10b      	bne.n	80038e8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2204      	movs	r2, #4
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f894 	bl	8003a0c <HAL_SPI_TransmitReceive_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	e089      	b.n	80039fc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_SPI_Receive_IT+0x4a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e082      	b.n	80039fc <HAL_SPI_Receive_IT+0x150>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800390a:	2302      	movs	r3, #2
 800390c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800390e:	e070      	b.n	80039f2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_Receive_IT+0x70>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003920:	e067      	b.n	80039f2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2204      	movs	r2, #4
 8003926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003966:	d90b      	bls.n	8003980 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003976:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_SPI_Receive_IT+0x158>)
 800397c:	64da      	str	r2, [r3, #76]	; 0x4c
 800397e:	e00a      	b.n	8003996 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800398e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_SPI_Receive_IT+0x15c>)
 8003994:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d10f      	bne.n	80039c0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039be:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d008      	beq.n	80039f0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e000      	b.n	80039f2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80039f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0800404d 	.word	0x0800404d
 8003a08:	08003ffd 	.word	0x08003ffd

08003a0c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_SPI_TransmitReceive_IT+0x20>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e091      	b.n	8003b50 <HAL_SPI_TransmitReceive_IT+0x144>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a42:	7dbb      	ldrb	r3, [r7, #22]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d00d      	beq.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x58>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4e:	d106      	bne.n	8003a5e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <HAL_SPI_TransmitReceive_IT+0x52>
 8003a58:	7dbb      	ldrb	r3, [r7, #22]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a62:	e070      	b.n	8003b46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a7a:	e064      	b.n	8003b46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d003      	beq.n	8003a90 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2205      	movs	r2, #5
 8003a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	887a      	ldrh	r2, [r7, #2]
 8003aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac6:	d906      	bls.n	8003ad6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <HAL_SPI_TransmitReceive_IT+0x150>)
 8003acc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <HAL_SPI_TransmitReceive_IT+0x154>)
 8003ad2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ad4:	e005      	b.n	8003ae2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003ada:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8003ae0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aea:	d802      	bhi.n	8003af2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d908      	bls.n	8003b04 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e007      	b.n	8003b14 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003b22:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d008      	beq.n	8003b44 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e000      	b.n	8003b46 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003b44:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	08003f37 	.word	0x08003f37
 8003b60:	08003f9d 	.word	0x08003f9d
 8003b64:	08003de7 	.word	0x08003de7
 8003b68:	08003ea5 	.word	0x08003ea5

08003b6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    return;
 8003bae:	e0d7      	b.n	8003d60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x66>
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	09db      	lsrs	r3, r3, #7
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
    return;
 8003bd0:	e0c6      	b.n	8003d60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_SPI_IRQHandler+0x8c>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80b4 	beq.w	8003d60 <HAL_SPI_IRQHandler+0x1f4>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80ad 	beq.w	8003d60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d023      	beq.n	8003c5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d011      	beq.n	8003c42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	e00b      	b.n	8003c5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]
        return;
 8003c58:	e082      	b.n	8003d60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d014      	beq.n	8003c90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	f043 0208 	orr.w	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04f      	beq.n	8003d5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ccc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <HAL_SPI_IRQHandler+0x17e>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0203 	bic.w	r2, r2, #3
 8003cf8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_SPI_IRQHandler+0x1fc>)
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fa14 	bl	800213c <HAL_DMA_Abort_IT>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <HAL_SPI_IRQHandler+0x1fc>)
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe f9fe 	bl	800213c <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003d52:	e003      	b.n	8003d5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f827 	bl	8003da8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d5a:	e000      	b.n	8003d5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d5c:	bf00      	nop
    return;
 8003d5e:	bf00      	nop
  }
}
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08003dbd 	.word	0x08003dbd

08003d6c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff ffe5 	bl	8003da8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d923      	bls.n	8003e42 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	b292      	uxth	r2, r2
 8003e06:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	1c9a      	adds	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b02      	subs	r3, #2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d11f      	bne.n	8003e70 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	e016      	b.n	8003e70 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f103 020c 	add.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10f      	bne.n	8003e9c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e8a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fb00 	bl	800449c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d912      	bls.n	8003edc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b02      	subs	r3, #2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eda:	e012      	b.n	8003f02 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fab7 	bl	800449c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	b292      	uxth	r2, r2
 8003f4a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa84 	bl	800449c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d110      	bne.n	8003ff4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa54 	bl	800449c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f103 020c 	add.w	r2, r3, #12
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa6e 	bl	8004520 <SPI_CloseRx_ISR>
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	b292      	uxth	r2, r2
 8004060:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	1c9a      	adds	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa48 	bl	8004520 <SPI_CloseRx_ISR>
  }
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fa55 	bl	8004580 <SPI_CloseTx_ISR>
  }
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	881a      	ldrh	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	1c9a      	adds	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fa33 	bl	8004580 <SPI_CloseTx_ISR>
  }
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004134:	f7fd ff14 	bl	8001f60 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	4413      	add	r3, r2
 8004142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004144:	f7fd ff0c 	bl	8001f60 <HAL_GetTick>
 8004148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	0d1b      	lsrs	r3, r3, #20
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800415a:	e054      	b.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d050      	beq.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004164:	f7fd fefc 	bl	8001f60 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	429a      	cmp	r2, r3
 8004172:	d902      	bls.n	800417a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d13d      	bne.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004192:	d111      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d004      	beq.n	80041a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a6:	d107      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c0:	d10f      	bne.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e017      	b.n	8004226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3b01      	subs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d19b      	bne.n	800415c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000000 	.word	0x20000000

08004234 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004246:	f7fd fe8b 	bl	8001f60 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004256:	f7fd fe83 	bl	8001f60 <HAL_GetTick>
 800425a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004264:	4b3d      	ldr	r3, [pc, #244]	; (800435c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00da      	lsls	r2, r3, #3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	0d1b      	lsrs	r3, r3, #20
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800427c:	e060      	b.n	8004340 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004284:	d107      	bne.n	8004296 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004294:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d050      	beq.n	8004340 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800429e:	f7fd fe5f 	bl	8001f60 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d902      	bls.n	80042b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d13d      	bne.n	8004330 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042cc:	d111      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	d004      	beq.n	80042e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d107      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	d10f      	bne.n	800431c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800431a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e010      	b.n	8004352 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	3b01      	subs	r3, #1
 800433e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d196      	bne.n	800427e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000000 	.word	0x20000000

08004360 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004374:	d111      	bne.n	800439a <SPI_EndRxTransaction+0x3a>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437e:	d004      	beq.n	800438a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d107      	bne.n	800439a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004398:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff febd 	bl	8004124 <SPI_WaitFlagStateUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e023      	b.n	8004408 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c8:	d11d      	bne.n	8004406 <SPI_EndRxTransaction+0xa6>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d2:	d004      	beq.n	80043de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043dc:	d113      	bne.n	8004406 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ff22 	bl	8004234 <SPI_WaitFifoStateUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e000      	b.n	8004408 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff ff03 	bl	8004234 <SPI_WaitFifoStateUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e027      	b.n	8004494 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2200      	movs	r2, #0
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff fe68 	bl	8004124 <SPI_WaitFlagStateUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e014      	b.n	8004494 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fedc 	bl	8004234 <SPI_WaitFifoStateUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e000      	b.n	8004494 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044a4:	f7fd fd5c 	bl	8001f60 <HAL_GetTick>
 80044a8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0220 	bic.w	r2, r2, #32
 80044b8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	2164      	movs	r1, #100	; 0x64
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff ffa6 	bl	8004410 <SPI_EndRxTxTransaction>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d107      	bne.n	80044fa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fc44 	bl	8003d80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80044f8:	e00e      	b.n	8004518 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fc46 	bl	8003d94 <HAL_SPI_TxRxCpltCallback>
}
 8004508:	e006      	b.n	8004518 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fc48 	bl	8003da8 <HAL_SPI_ErrorCallback>
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004536:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004538:	f7fd fd12 	bl	8001f60 <HAL_GetTick>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	2164      	movs	r1, #100	; 0x64
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff0c 	bl	8004360 <SPI_EndRxTransaction>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fc08 	bl	8003d80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004570:	e002      	b.n	8004578 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff fc18 	bl	8003da8 <HAL_SPI_ErrorCallback>
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004588:	f7fd fcea 	bl	8001f60 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800459c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	2164      	movs	r1, #100	; 0x64
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ff34 	bl	8004410 <SPI_EndRxTxTransaction>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fbdd 	bl	8003da8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80045ee:	e002      	b.n	80045f6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fbbb 	bl	8003d6c <HAL_SPI_TxCpltCallback>
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e049      	b.n	80046a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d106      	bne.n	800462a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f841 	bl	80046ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f000 f9db 	bl	80049f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e03b      	b.n	8004750 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_TIM_Base_Start_IT+0x9c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x4e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d004      	beq.n	800470e <HAL_TIM_Base_Start_IT+0x4e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a15      	ldr	r2, [pc, #84]	; (8004760 <HAL_TIM_Base_Start_IT+0xa0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d115      	bne.n	800473a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <HAL_TIM_Base_Start_IT+0xa4>)
 8004716:	4013      	ands	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b06      	cmp	r3, #6
 800471e:	d015      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x8c>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004726:	d011      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004738:	e008      	b.n	800474c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e000      	b.n	800474e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40014000 	.word	0x40014000
 8004764:	00010007 	.word	0x00010007

08004768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d122      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11b      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f905 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8f7 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f908 	bl	80049ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d122      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0204 	mvn.w	r2, #4
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8db 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 8004804:	e005      	b.n	8004812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f8cd 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8de 	bl	80049ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b08      	cmp	r3, #8
 8004824:	d122      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b08      	cmp	r3, #8
 8004832:	d11b      	bne.n	800486c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0208 	mvn.w	r2, #8
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2204      	movs	r2, #4
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8b1 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8a3 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8b4 	bl	80049ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b10      	cmp	r3, #16
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b10      	cmp	r3, #16
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0210 	mvn.w	r2, #16
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2208      	movs	r2, #8
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f887 	bl	80049ba <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f879 	bl	80049a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f88a 	bl	80049ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0201 	mvn.w	r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd f860 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8de 	bl	8004ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004926:	d10e      	bne.n	8004946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d107      	bne.n	8004946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800493e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8d1 	bl	8004ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d10e      	bne.n	8004972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d107      	bne.n	8004972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f838 	bl	80049e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b20      	cmp	r3, #32
 800497e:	d10e      	bne.n	800499e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b20      	cmp	r3, #32
 800498c:	d107      	bne.n	800499e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f06f 0220 	mvn.w	r2, #32
 8004996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f891 	bl	8004ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a2a      	ldr	r2, [pc, #168]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0x20>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d108      	bne.n	8004a2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <TIM_Base_SetConfig+0x52>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d007      	beq.n	8004a4a <TIM_Base_SetConfig+0x52>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <TIM_Base_SetConfig+0xc0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_Base_SetConfig+0x52>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <TIM_Base_SetConfig+0xc4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d108      	bne.n	8004a5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <TIM_Base_SetConfig+0xbc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_Base_SetConfig+0xa0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <TIM_Base_SetConfig+0xc0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_Base_SetConfig+0xa0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <TIM_Base_SetConfig+0xc4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d103      	bne.n	8004aa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	615a      	str	r2, [r3, #20]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400

08004ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e040      	b.n	8004b90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc ffd0 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2224      	movs	r2, #36	; 0x24
 8004b28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8c0 	bl	8004cc0 <UART_SetConfig>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e022      	b.n	8004b90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb0e 	bl	8005174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fb95 	bl	80052b8 <UART_CheckIdleState>
 8004b8e:	4603      	mov	r3, r0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	f040 8082 	bne.w	8004cb6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_UART_Transmit+0x26>
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07a      	b.n	8004cb8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit+0x38>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e073      	b.n	8004cb8 <HAL_UART_Transmit+0x120>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2221      	movs	r2, #33	; 0x21
 8004be4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be6:	f7fd f9bb 	bl	8001f60 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x80>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c28:	e02d      	b.n	8004c86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fb88 	bl	800534a <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e039      	b.n	8004cb8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c56:	b292      	uxth	r2, r2
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e008      	b.n	8004c74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1cb      	bne.n	8004c2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2140      	movs	r1, #64	; 0x40
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fb54 	bl	800534a <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e005      	b.n	8004cb8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc4:	b08a      	sub	sp, #40	; 0x28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b9e      	ldr	r3, [pc, #632]	; (8004f68 <UART_SetConfig+0x2a8>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a93      	ldr	r2, [pc, #588]	; (8004f6c <UART_SetConfig+0x2ac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a8a      	ldr	r2, [pc, #552]	; (8004f70 <UART_SetConfig+0x2b0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d126      	bne.n	8004d98 <UART_SetConfig+0xd8>
 8004d4a:	4b8a      	ldr	r3, [pc, #552]	; (8004f74 <UART_SetConfig+0x2b4>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0xd0>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0xa0>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d81 	.word	0x08004d81
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e0ab      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e0a7      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e0a3      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e09f      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e09b      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a76      	ldr	r2, [pc, #472]	; (8004f78 <UART_SetConfig+0x2b8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d138      	bne.n	8004e14 <UART_SetConfig+0x154>
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <UART_SetConfig+0x2b4>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d82d      	bhi.n	8004e0c <UART_SetConfig+0x14c>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0xf8>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004e0d 	.word	0x08004e0d
 8004dc4:	08004e0d 	.word	0x08004e0d
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e0d 	.word	0x08004e0d
 8004dd0:	08004e0d 	.word	0x08004e0d
 8004dd4:	08004e0d 	.word	0x08004e0d
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004e0d 	.word	0x08004e0d
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e05 	.word	0x08004e05
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e06d      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e069      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e065      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e061      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e05d      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <UART_SetConfig+0x2bc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d125      	bne.n	8004e6a <UART_SetConfig+0x1aa>
 8004e1e:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <UART_SetConfig+0x2b4>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d016      	beq.n	8004e5a <UART_SetConfig+0x19a>
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	d818      	bhi.n	8004e62 <UART_SetConfig+0x1a2>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d00a      	beq.n	8004e4a <UART_SetConfig+0x18a>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d814      	bhi.n	8004e62 <UART_SetConfig+0x1a2>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <UART_SetConfig+0x182>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d008      	beq.n	8004e52 <UART_SetConfig+0x192>
 8004e40:	e00f      	b.n	8004e62 <UART_SetConfig+0x1a2>
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e48:	e042      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e50:	e03e      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e52:	2304      	movs	r3, #4
 8004e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e58:	e03a      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e60:	e036      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e62:	2310      	movs	r3, #16
 8004e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e68:	e032      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3f      	ldr	r2, [pc, #252]	; (8004f6c <UART_SetConfig+0x2ac>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d12a      	bne.n	8004eca <UART_SetConfig+0x20a>
 8004e74:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <UART_SetConfig+0x2b4>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e82:	d01a      	beq.n	8004eba <UART_SetConfig+0x1fa>
 8004e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e88:	d81b      	bhi.n	8004ec2 <UART_SetConfig+0x202>
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8e:	d00c      	beq.n	8004eaa <UART_SetConfig+0x1ea>
 8004e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e94:	d815      	bhi.n	8004ec2 <UART_SetConfig+0x202>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <UART_SetConfig+0x1e2>
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d008      	beq.n	8004eb2 <UART_SetConfig+0x1f2>
 8004ea0:	e00f      	b.n	8004ec2 <UART_SetConfig+0x202>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea8:	e012      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb0:	e00e      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb8:	e00a      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec0:	e006      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec8:	e002      	b.n	8004ed0 <UART_SetConfig+0x210>
 8004eca:	2310      	movs	r3, #16
 8004ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <UART_SetConfig+0x2ac>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f040 808a 	bne.w	8004ff0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d824      	bhi.n	8004f2e <UART_SetConfig+0x26e>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <UART_SetConfig+0x22c>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f2f 	.word	0x08004f2f
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f2f 	.word	0x08004f2f
 8004efc:	08004f1f 	.word	0x08004f1f
 8004f00:	08004f2f 	.word	0x08004f2f
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f2f 	.word	0x08004f2f
 8004f0c:	08004f27 	.word	0x08004f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fe f956 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8004f14:	61f8      	str	r0, [r7, #28]
        break;
 8004f16:	e010      	b.n	8004f3a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <UART_SetConfig+0x2c0>)
 8004f1a:	61fb      	str	r3, [r7, #28]
        break;
 8004f1c:	e00d      	b.n	8004f3a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1e:	f7fe f8b7 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8004f22:	61f8      	str	r0, [r7, #28]
        break;
 8004f24:	e009      	b.n	8004f3a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e005      	b.n	8004f3a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8109 	beq.w	8005154 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d305      	bcc.n	8004f5e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d912      	bls.n	8004f84 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f64:	e0f6      	b.n	8005154 <UART_SetConfig+0x494>
 8004f66:	bf00      	nop
 8004f68:	efff69f3 	.word	0xefff69f3
 8004f6c:	40008000 	.word	0x40008000
 8004f70:	40013800 	.word	0x40013800
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40004400 	.word	0x40004400
 8004f7c:	40004800 	.word	0x40004800
 8004f80:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2200      	movs	r2, #0
 8004f88:	461c      	mov	r4, r3
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	022b      	lsls	r3, r5, #8
 8004f96:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f9a:	0222      	lsls	r2, r4, #8
 8004f9c:	68f9      	ldr	r1, [r7, #12]
 8004f9e:	6849      	ldr	r1, [r1, #4]
 8004fa0:	0849      	lsrs	r1, r1, #1
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	4688      	mov	r8, r1
 8004fa6:	4681      	mov	r9, r0
 8004fa8:	eb12 0a08 	adds.w	sl, r2, r8
 8004fac:	eb43 0b09 	adc.w	fp, r3, r9
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fbe:	4650      	mov	r0, sl
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	f7fb fe33 	bl	8000c2c <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4613      	mov	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd4:	d308      	bcc.n	8004fe8 <UART_SetConfig+0x328>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fdc:	d204      	bcs.n	8004fe8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e0b5      	b.n	8005154 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fee:	e0b1      	b.n	8005154 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d15d      	bne.n	80050b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d827      	bhi.n	8005052 <UART_SetConfig+0x392>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x348>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	08005053 	.word	0x08005053
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
 8005020:	08005053 	.word	0x08005053
 8005024:	08005053 	.word	0x08005053
 8005028:	0800504b 	.word	0x0800504b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe f8c8 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8005030:	61f8      	str	r0, [r7, #28]
        break;
 8005032:	e014      	b.n	800505e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005034:	f7fe f8da 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8005038:	61f8      	str	r0, [r7, #28]
        break;
 800503a:	e010      	b.n	800505e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800503c:	4b4c      	ldr	r3, [pc, #304]	; (8005170 <UART_SetConfig+0x4b0>)
 800503e:	61fb      	str	r3, [r7, #28]
        break;
 8005040:	e00d      	b.n	800505e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005042:	f7fe f825 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8005046:	61f8      	str	r0, [r7, #28]
        break;
 8005048:	e009      	b.n	800505e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	61fb      	str	r3, [r7, #28]
        break;
 8005050:	e005      	b.n	800505e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800505c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d077      	beq.n	8005154 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005a      	lsls	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d916      	bls.n	80050ae <UART_SetConfig+0x3ee>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005086:	d212      	bcs.n	80050ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f023 030f 	bic.w	r3, r3, #15
 8005090:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	b29a      	uxth	r2, r3
 800509e:	8afb      	ldrh	r3, [r7, #22]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	8afa      	ldrh	r2, [r7, #22]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e052      	b.n	8005154 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050b4:	e04e      	b.n	8005154 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d827      	bhi.n	800510e <UART_SetConfig+0x44e>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0x404>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	0800510f 	.word	0x0800510f
 80050d4:	080050ff 	.word	0x080050ff
 80050d8:	0800510f 	.word	0x0800510f
 80050dc:	0800510f 	.word	0x0800510f
 80050e0:	0800510f 	.word	0x0800510f
 80050e4:	08005107 	.word	0x08005107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7fe f86a 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 80050ec:	61f8      	str	r0, [r7, #28]
        break;
 80050ee:	e014      	b.n	800511a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f0:	f7fe f87c 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 80050f4:	61f8      	str	r0, [r7, #28]
        break;
 80050f6:	e010      	b.n	800511a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <UART_SetConfig+0x4b0>)
 80050fa:	61fb      	str	r3, [r7, #28]
        break;
 80050fc:	e00d      	b.n	800511a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fe:	f7fd ffc7 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 8005102:	61f8      	str	r0, [r7, #28]
        break;
 8005104:	e009      	b.n	800511a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510a:	61fb      	str	r3, [r7, #28]
        break;
 800510c:	e005      	b.n	800511a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005118:	bf00      	nop
    }

    if (pclk != 0U)
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d019      	beq.n	8005154 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085a      	lsrs	r2, r3, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	441a      	add	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005132:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d909      	bls.n	800514e <UART_SetConfig+0x48e>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d205      	bcs.n	800514e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	e002      	b.n	8005154 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005160:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005164:	4618      	mov	r0, r3
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516e:	bf00      	nop
 8005170:	00f42400 	.word	0x00f42400

08005174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005272:	d10a      	bne.n	800528a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c8:	f7fc fe4a 	bl	8001f60 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d10e      	bne.n	80052fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f82d 	bl	800534a <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e023      	b.n	8005342 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d10e      	bne.n	8005326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f817 	bl	800534a <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e00d      	b.n	8005342 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b09c      	sub	sp, #112	; 0x70
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	4613      	mov	r3, r2
 8005358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535a:	e0a5      	b.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	f000 80a1 	beq.w	80054a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fc fdfb 	bl	8001f60 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <UART_WaitOnFlagUntilTimeout+0x32>
 8005376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005378:	2b00      	cmp	r3, #0
 800537a:	d13e      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005390:	667b      	str	r3, [r7, #100]	; 0x64
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800539c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e6      	bne.n	800537c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	663b      	str	r3, [r7, #96]	; 0x60
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80053d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e067      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d04f      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d147      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005420:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
 8005442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3308      	adds	r3, #8
 800545a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	66bb      	str	r3, [r7, #104]	; 0x68
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005474:	623a      	str	r2, [r7, #32]
 8005476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	61bb      	str	r3, [r7, #24]
   return(result);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e010      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f43f af4a 	beq.w	800535c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3770      	adds	r7, #112	; 0x70
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	4603      	mov	r3, r0
 80054da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e4:	2b84      	cmp	r3, #132	; 0x84
 80054e6:	d005      	beq.n	80054f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	3303      	adds	r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054f4:	68fb      	ldr	r3, [r7, #12]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005506:	f001 f9c1 	bl	800688c <vTaskStartScheduler>
  
  return osOK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}

08005510 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af04      	add	r7, sp, #16
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <osThreadCreate+0x54>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01c      	beq.n	8005564 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685c      	ldr	r4, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681d      	ldr	r5, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691e      	ldr	r6, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff ffc8 	bl	80054d2 <makeFreeRtosPriority>
 8005542:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800554c:	9202      	str	r2, [sp, #8]
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	9100      	str	r1, [sp, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	4632      	mov	r2, r6
 8005556:	4629      	mov	r1, r5
 8005558:	4620      	mov	r0, r4
 800555a:	f000 ffed 	bl	8006538 <xTaskCreateStatic>
 800555e:	4603      	mov	r3, r0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	e01c      	b.n	800559e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685c      	ldr	r4, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005570:	b29e      	uxth	r6, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ffaa 	bl	80054d2 <makeFreeRtosPriority>
 800557e:	4602      	mov	r2, r0
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	9200      	str	r2, [sp, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	4632      	mov	r2, r6
 800558c:	4629      	mov	r1, r5
 800558e:	4620      	mov	r0, r4
 8005590:	f001 f82f 	bl	80065f2 <xTaskCreate>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055a8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	2001      	movs	r0, #1
 80055c0:	f000 fa69 	bl	8005a96 <xQueueCreateMutexStatic>
 80055c4:	4603      	mov	r3, r0
 80055c6:	e003      	b.n	80055d0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80055c8:	2001      	movs	r0, #1
 80055ca:	f000 fa4c 	bl	8005a66 <xQueueCreateMutex>
 80055ce:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d016      	beq.n	8005618 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d10a      	bne.n	8005606 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2203      	movs	r2, #3
 80055f6:	9200      	str	r2, [sp, #0]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2100      	movs	r1, #0
 80055fc:	2001      	movs	r0, #1
 80055fe:	f000 f947 	bl	8005890 <xQueueGenericCreateStatic>
 8005602:	4603      	mov	r3, r0
 8005604:	e023      	b.n	800564e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	461a      	mov	r2, r3
 8005610:	f000 fa5c 	bl	8005acc <xQueueCreateCountingSemaphoreStatic>
 8005614:	4603      	mov	r3, r0
 8005616:	e01a      	b.n	800564e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d110      	bne.n	8005640 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800561e:	2203      	movs	r2, #3
 8005620:	2100      	movs	r1, #0
 8005622:	2001      	movs	r0, #1
 8005624:	f000 f9ac 	bl	8005980 <xQueueGenericCreate>
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <osSemaphoreCreate+0x64>
 8005630:	2300      	movs	r3, #0
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fab2 	bl	8005ba0 <xQueueGenericSend>
      return sema;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e006      	b.n	800564e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4611      	mov	r1, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa77 	bl	8005b3a <xQueueCreateCountingSemaphore>
 800564c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f103 0208 	add.w	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f103 0208 	add.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 0208 	add.w	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	601a      	str	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d103      	bne.n	8005718 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e00c      	b.n	8005732 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3308      	adds	r3, #8
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	e002      	b.n	8005726 <vListInsert+0x2e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d2f6      	bcs.n	8005720 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6892      	ldr	r2, [r2, #8]
 8005780:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6852      	ldr	r2, [r2, #4]
 800578a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d103      	bne.n	800579e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057ea:	f001 ffb3 	bl	8007754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057fa:	fb01 f303 	mul.w	r3, r1, r3
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	3b01      	subs	r3, #1
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d114      	bne.n	800586a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01a      	beq.n	800587e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3310      	adds	r3, #16
 800584c:	4618      	mov	r0, r3
 800584e:	f001 fa6f 	bl	8006d30 <xTaskRemoveFromEventList>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d012      	beq.n	800587e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <xQueueGenericReset+0xcc>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	e009      	b.n	800587e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3310      	adds	r3, #16
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fef1 	bl	8005656 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3324      	adds	r3, #36	; 0x24
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff feec 	bl	8005656 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800587e:	f001 ff99 	bl	80077b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005882:	2301      	movs	r3, #1
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08e      	sub	sp, #56	; 0x38
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <xQueueGenericCreateStatic+0x52>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <xQueueGenericCreateStatic+0x56>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <xQueueGenericCreateStatic+0x58>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	623b      	str	r3, [r7, #32]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <xQueueGenericCreateStatic+0x7e>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <xQueueGenericCreateStatic+0x82>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <xQueueGenericCreateStatic+0x84>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	61fb      	str	r3, [r7, #28]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800592e:	2348      	movs	r3, #72	; 0x48
 8005930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b48      	cmp	r3, #72	; 0x48
 8005936:	d00a      	beq.n	800594e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	61bb      	str	r3, [r7, #24]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800594e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005962:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f83f 	bl	80059f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005978:	4618      	mov	r0, r3
 800597a:	3730      	adds	r7, #48	; 0x30
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	613b      	str	r3, [r7, #16]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3348      	adds	r3, #72	; 0x48
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 ffed 	bl	8007998 <pvPortMalloc>
 80059be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d011      	beq.n	80059ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	3348      	adds	r3, #72	; 0x48
 80059ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d8:	79fa      	ldrb	r2, [r7, #7]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f805 	bl	80059f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059ea:	69bb      	ldr	r3, [r7, #24]
	}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e002      	b.n	8005a16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a22:	2101      	movs	r1, #1
 8005a24:	69b8      	ldr	r0, [r7, #24]
 8005a26:	f7ff fecb 	bl	80057c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a2a:	bf00      	nop
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a52:	2300      	movs	r3, #0
 8005a54:	2200      	movs	r2, #0
 8005a56:	2100      	movs	r1, #0
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f8a1 	bl	8005ba0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	2300      	movs	r3, #0
 8005a76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6939      	ldr	r1, [r7, #16]
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f7ff ff7e 	bl	8005980 <xQueueGenericCreate>
 8005a84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff ffd3 	bl	8005a32 <prvInitialiseMutex>

		return xNewQueue;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b088      	sub	sp, #32
 8005a9a:	af02      	add	r7, sp, #8
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	6039      	str	r1, [r7, #0]
 8005aa0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	6939      	ldr	r1, [r7, #16]
 8005ab4:	6978      	ldr	r0, [r7, #20]
 8005ab6:	f7ff feeb 	bl	8005890 <xQueueGenericCreateStatic>
 8005aba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7ff ffb8 	bl	8005a32 <prvInitialiseMutex>

		return xNewQueue;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	61bb      	str	r3, [r7, #24]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d90a      	bls.n	8005b12 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	617b      	str	r3, [r7, #20]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b12:	2302      	movs	r3, #2
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff feb7 	bl	8005890 <xQueueGenericCreateStatic>
 8005b22:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b30:	69fb      	ldr	r3, [r7, #28]
	}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	613b      	str	r3, [r7, #16]
}
 8005b5c:	bf00      	nop
 8005b5e:	e7fe      	b.n	8005b5e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d90a      	bls.n	8005b7e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	60fb      	str	r3, [r7, #12]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b7e:	2202      	movs	r2, #2
 8005b80:	2100      	movs	r1, #0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fefc 	bl	8005980 <xQueueGenericCreate>
 8005b88:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b96:	697b      	ldr	r3, [r7, #20]
	}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <xQueueGenericSend+0x40>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <xQueueGenericSend+0x44>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <xQueueGenericSend+0x46>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <xQueueGenericSend+0x60>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d103      	bne.n	8005c0e <xQueueGenericSend+0x6e>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <xQueueGenericSend+0x72>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <xQueueGenericSend+0x74>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c2e:	f001 fa3f 	bl	80070b0 <xTaskGetSchedulerState>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <xQueueGenericSend+0x9e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <xQueueGenericSend+0xa2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <xQueueGenericSend+0xa4>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61fb      	str	r3, [r7, #28]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c5e:	f001 fd79 	bl	8007754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <xQueueGenericSend+0xd4>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d129      	bne.n	8005cc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7a:	f000 fb4d 	bl	8006318 <prvCopyDataToQueue>
 8005c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	3324      	adds	r3, #36	; 0x24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f84f 	bl	8006d30 <xTaskRemoveFromEventList>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c98:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	e00a      	b.n	8005cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cb0:	4b39      	ldr	r3, [pc, #228]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cc0:	f001 fd78 	bl	80077b4 <vPortExitCritical>
				return pdPASS;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e063      	b.n	8005d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cce:	f001 fd71 	bl	80077b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e05c      	b.n	8005d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cdc:	f107 0314 	add.w	r3, r7, #20
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 f887 	bl	8006df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cea:	f001 fd63 	bl	80077b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cee:	f000 fe37 	bl	8006960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf2:	f001 fd2f 	bl	8007754 <vPortEnterCritical>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <xQueueGenericSend+0x16c>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d103      	bne.n	8005d22 <xQueueGenericSend+0x182>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d22:	f001 fd47 	bl	80077b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 f876 	bl	8006e20 <xTaskCheckForTimeOut>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d124      	bne.n	8005d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3c:	f000 fbe4 	bl	8006508 <prvIsQueueFull>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	3310      	adds	r3, #16
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ffca 	bl	8006ce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d56:	f000 fb6f 	bl	8006438 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d5a:	f000 fe0f 	bl	800697c <xTaskResumeAll>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f af7c 	bne.w	8005c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	e772      	b.n	8005c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d7a:	f000 fb5d 	bl	8006438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d7e:	f000 fdfd 	bl	800697c <xTaskResumeAll>
 8005d82:	e76c      	b.n	8005c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d86:	f000 fb57 	bl	8006438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d8a:	f000 fdf7 	bl	800697c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b090      	sub	sp, #64	; 0x40
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x3c>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <xQueueGenericSendFromISR+0x40>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <xQueueGenericSendFromISR+0x42>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSendFromISR+0x6a>
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <xQueueGenericSendFromISR+0x6e>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueGenericSendFromISR+0x70>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	623b      	str	r3, [r7, #32]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e26:	f001 fd77 	bl	8007918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61fa      	str	r2, [r7, #28]
 8005e40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <xQueueGenericSendFromISR+0xbc>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d12f      	bne.n	8005eb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e6e:	f000 fa53 	bl	8006318 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d112      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d016      	beq.n	8005eb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 ff51 	bl	8006d30 <xTaskRemoveFromEventList>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e007      	b.n	8005eb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	b25a      	sxtb	r2, r3
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005eb6:	e001      	b.n	8005ebc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3740      	adds	r7, #64	; 0x40
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08c      	sub	sp, #48	; 0x30
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <xQueueReceive+0x30>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	623b      	str	r3, [r7, #32]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <xQueueReceive+0x3e>
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <xQueueReceive+0x42>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <xQueueReceive+0x44>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xQueueReceive+0x5e>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	61fb      	str	r3, [r7, #28]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f32:	f001 f8bd 	bl	80070b0 <xTaskGetSchedulerState>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <xQueueReceive+0x6e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <xQueueReceive+0x72>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <xQueueReceive+0x74>
 8005f46:	2300      	movs	r3, #0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xQueueReceive+0x8e>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	61bb      	str	r3, [r7, #24]
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f62:	f001 fbf7 	bl	8007754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01f      	beq.n	8005fb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f76:	f000 fa39 	bl	80063ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1e5a      	subs	r2, r3, #1
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00f      	beq.n	8005faa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fece 	bl	8006d30 <xTaskRemoveFromEventList>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f9a:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <xQueueReceive+0x1bc>)
 8005f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005faa:	f001 fc03 	bl	80077b4 <vPortExitCritical>
				return pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e069      	b.n	8006086 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d103      	bne.n	8005fc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fb8:	f001 fbfc 	bl	80077b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e062      	b.n	8006086 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fc6:	f107 0310 	add.w	r3, r7, #16
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 ff12 	bl	8006df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fd4:	f001 fbee 	bl	80077b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fd8:	f000 fcc2 	bl	8006960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fdc:	f001 fbba 	bl	8007754 <vPortEnterCritical>
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe6:	b25b      	sxtb	r3, r3
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d103      	bne.n	8005ff6 <xQueueReceive+0x122>
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ffc:	b25b      	sxtb	r3, r3
 8005ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006002:	d103      	bne.n	800600c <xQueueReceive+0x138>
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800600c:	f001 fbd2 	bl	80077b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006010:	1d3a      	adds	r2, r7, #4
 8006012:	f107 0310 	add.w	r3, r7, #16
 8006016:	4611      	mov	r1, r2
 8006018:	4618      	mov	r0, r3
 800601a:	f000 ff01 	bl	8006e20 <xTaskCheckForTimeOut>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d123      	bne.n	800606c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006026:	f000 fa59 	bl	80064dc <prvIsQueueEmpty>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d017      	beq.n	8006060 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fe55 	bl	8006ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800603e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006040:	f000 f9fa 	bl	8006438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006044:	f000 fc9a 	bl	800697c <xTaskResumeAll>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d189      	bne.n	8005f62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <xQueueReceive+0x1bc>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	e780      	b.n	8005f62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006062:	f000 f9e9 	bl	8006438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006066:	f000 fc89 	bl	800697c <xTaskResumeAll>
 800606a:	e77a      	b.n	8005f62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800606c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800606e:	f000 f9e3 	bl	8006438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006072:	f000 fc83 	bl	800697c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006078:	f000 fa30 	bl	80064dc <prvIsQueueEmpty>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	f43f af6f 	beq.w	8005f62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006084:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006086:	4618      	mov	r0, r3
 8006088:	3730      	adds	r7, #48	; 0x30
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08e      	sub	sp, #56	; 0x38
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	61fb      	str	r3, [r7, #28]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e4:	f000 ffe4 	bl	80070b0 <xTaskGetSchedulerState>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <xQueueSemaphoreTake+0x60>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <xQueueSemaphoreTake+0x64>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <xQueueSemaphoreTake+0x66>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	61bb      	str	r3, [r7, #24]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006114:	f001 fb1e 	bl	8007754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	d024      	beq.n	800616e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	1e5a      	subs	r2, r3, #1
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006134:	f001 f964 	bl	8007400 <pvTaskIncrementMutexHeldCount>
 8006138:	4602      	mov	r2, r0
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00f      	beq.n	8006166 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	3310      	adds	r3, #16
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fdf0 	bl	8006d30 <xTaskRemoveFromEventList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006156:	4b54      	ldr	r3, [pc, #336]	; (80062a8 <xQueueSemaphoreTake+0x214>)
 8006158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006166:	f001 fb25 	bl	80077b4 <vPortExitCritical>
				return pdPASS;
 800616a:	2301      	movs	r3, #1
 800616c:	e097      	b.n	800629e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d111      	bne.n	8006198 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	617b      	str	r3, [r7, #20]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006190:	f001 fb10 	bl	80077b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006194:	2300      	movs	r3, #0
 8006196:	e082      	b.n	800629e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800619e:	f107 030c 	add.w	r3, r7, #12
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fe26 	bl	8006df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061ac:	f001 fb02 	bl	80077b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061b0:	f000 fbd6 	bl	8006960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061b4:	f001 face 	bl	8007754 <vPortEnterCritical>
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061be:	b25b      	sxtb	r3, r3
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d103      	bne.n	80061ce <xQueueSemaphoreTake+0x13a>
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d4:	b25b      	sxtb	r3, r3
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d103      	bne.n	80061e4 <xQueueSemaphoreTake+0x150>
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e4:	f001 fae6 	bl	80077b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e8:	463a      	mov	r2, r7
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fe15 	bl	8006e20 <xTaskCheckForTimeOut>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d132      	bne.n	8006262 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061fe:	f000 f96d 	bl	80064dc <prvIsQueueEmpty>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d026      	beq.n	8006256 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006210:	f001 faa0 	bl	8007754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 ff67 	bl	80070ec <xTaskPriorityInherit>
 800621e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006220:	f001 fac8 	bl	80077b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fd5b 	bl	8006ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006234:	f000 f900 	bl	8006438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006238:	f000 fba0 	bl	800697c <xTaskResumeAll>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f47f af68 	bne.w	8006114 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006244:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <xQueueSemaphoreTake+0x214>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	e75e      	b.n	8006114 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006258:	f000 f8ee 	bl	8006438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800625c:	f000 fb8e 	bl	800697c <xTaskResumeAll>
 8006260:	e758      	b.n	8006114 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006264:	f000 f8e8 	bl	8006438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006268:	f000 fb88 	bl	800697c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800626c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800626e:	f000 f935 	bl	80064dc <prvIsQueueEmpty>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	f43f af4d 	beq.w	8006114 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00d      	beq.n	800629c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006280:	f001 fa68 	bl	8007754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006286:	f000 f82f 	bl	80062e8 <prvGetDisinheritPriorityAfterTimeout>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006292:	4618      	mov	r0, r3
 8006294:	f001 f826 	bl	80072e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006298:	f001 fa8c 	bl	80077b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800629c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3738      	adds	r7, #56	; 0x38
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	60fb      	str	r3, [r7, #12]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80062da:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1c3 0307 	rsb	r3, r3, #7
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e001      	b.n	800630a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800630a:	68fb      	ldr	r3, [r7, #12]
	}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10d      	bne.n	8006352 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d14d      	bne.n	80063da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 ff48 	bl	80071d8 <xTaskPriorityDisinherit>
 8006348:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	e043      	b.n	80063da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d119      	bne.n	800638c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6858      	ldr	r0, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	461a      	mov	r2, r3
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	f001 fe2d 	bl	8007fc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	441a      	add	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	d32b      	bcc.n	80063da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	e026      	b.n	80063da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68d8      	ldr	r0, [r3, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	461a      	mov	r2, r3
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	f001 fe13 	bl	8007fc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	425b      	negs	r3, r3
 80063a6:	441a      	add	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d207      	bcs.n	80063c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	425b      	negs	r3, r3
 80063c2:	441a      	add	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d105      	bne.n	80063da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063e2:	697b      	ldr	r3, [r7, #20]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	441a      	add	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	429a      	cmp	r2, r3
 8006416:	d303      	bcc.n	8006420 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68d9      	ldr	r1, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	461a      	mov	r2, r3
 800642a:	6838      	ldr	r0, [r7, #0]
 800642c:	f001 fdc9 	bl	8007fc2 <memcpy>
	}
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006440:	f001 f988 	bl	8007754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800644a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800644c:	e011      	b.n	8006472 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d012      	beq.n	800647c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fc68 	bl	8006d30 <xTaskRemoveFromEventList>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006466:	f000 fd3d 	bl	8006ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	3b01      	subs	r3, #1
 800646e:	b2db      	uxtb	r3, r3
 8006470:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dce9      	bgt.n	800644e <prvUnlockQueue+0x16>
 800647a:	e000      	b.n	800647e <prvUnlockQueue+0x46>
					break;
 800647c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	22ff      	movs	r2, #255	; 0xff
 8006482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006486:	f001 f995 	bl	80077b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800648a:	f001 f963 	bl	8007754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006494:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006496:	e011      	b.n	80064bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d012      	beq.n	80064c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3310      	adds	r3, #16
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fc43 	bl	8006d30 <xTaskRemoveFromEventList>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064b0:	f000 fd18 	bl	8006ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dce9      	bgt.n	8006498 <prvUnlockQueue+0x60>
 80064c4:	e000      	b.n	80064c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	22ff      	movs	r2, #255	; 0xff
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80064d0:	f001 f970 	bl	80077b4 <vPortExitCritical>
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064e4:	f001 f936 	bl	8007754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e001      	b.n	80064fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064fa:	f001 f95b 	bl	80077b4 <vPortExitCritical>

	return xReturn;
 80064fe:	68fb      	ldr	r3, [r7, #12]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006510:	f001 f920 	bl	8007754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	429a      	cmp	r2, r3
 800651e:	d102      	bne.n	8006526 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e001      	b.n	800652a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800652a:	f001 f943 	bl	80077b4 <vPortExitCritical>

	return xReturn;
 800652e:	68fb      	ldr	r3, [r7, #12]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af04      	add	r7, sp, #16
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xTaskCreateStatic+0x2a>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	623b      	str	r3, [r7, #32]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xTaskCreateStatic+0x46>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	61fb      	str	r3, [r7, #28]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800657e:	23b4      	movs	r3, #180	; 0xb4
 8006580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2bb4      	cmp	r3, #180	; 0xb4
 8006586:	d00a      	beq.n	800659e <xTaskCreateStatic+0x66>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	61bb      	str	r3, [r7, #24]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800659e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01e      	beq.n	80065e4 <xTaskCreateStatic+0xac>
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01b      	beq.n	80065e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065be:	2300      	movs	r3, #0
 80065c0:	9303      	str	r3, [sp, #12]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	9302      	str	r3, [sp, #8]
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f850 	bl	800667c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065de:	f000 f8eb 	bl	80067b8 <prvAddNewTaskToReadyList>
 80065e2:	e001      	b.n	80065e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065e8:	697b      	ldr	r3, [r7, #20]
	}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3728      	adds	r7, #40	; 0x28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b08c      	sub	sp, #48	; 0x30
 80065f6:	af04      	add	r7, sp, #16
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f9c6 	bl	8007998 <pvPortMalloc>
 800660c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006614:	20b4      	movs	r0, #180	; 0xb4
 8006616:	f001 f9bf 	bl	8007998 <pvPortMalloc>
 800661a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
 8006628:	e005      	b.n	8006636 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800662a:	6978      	ldr	r0, [r7, #20]
 800662c:	f001 fa80 	bl	8007b30 <vPortFree>
 8006630:	e001      	b.n	8006636 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d017      	beq.n	800666c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	2300      	movs	r3, #0
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	9302      	str	r3, [sp, #8]
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f80e 	bl	800667c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006660:	69f8      	ldr	r0, [r7, #28]
 8006662:	f000 f8a9 	bl	80067b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006666:	2301      	movs	r3, #1
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	e002      	b.n	8006672 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295
 8006670:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006672:	69bb      	ldr	r3, [r7, #24]
	}
 8006674:	4618      	mov	r0, r3
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006694:	3b01      	subs	r3, #1
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f023 0307 	bic.w	r3, r3, #7
 80066a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	617b      	str	r3, [r7, #20]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01f      	beq.n	800670a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e012      	b.n	80066f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	7819      	ldrb	r1, [r3, #0]
 80066d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	3334      	adds	r3, #52	; 0x34
 80066e0:	460a      	mov	r2, r1
 80066e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d9e9      	bls.n	80066d0 <prvInitialiseNewTask+0x54>
 80066fc:	e000      	b.n	8006700 <prvInitialiseNewTask+0x84>
			{
				break;
 80066fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006708:	e003      	b.n	8006712 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	2b06      	cmp	r3, #6
 8006716:	d901      	bls.n	800671c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006718:	2306      	movs	r3, #6
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006720:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006726:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	2200      	movs	r2, #0
 800672c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	3304      	adds	r3, #4
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe ffaf 	bl	8005696 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	3318      	adds	r3, #24
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe ffaa 	bl	8005696 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	f1c3 0207 	rsb	r2, r3, #7
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006756:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	2200      	movs	r2, #0
 8006764:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	334c      	adds	r3, #76	; 0x4c
 800676c:	2260      	movs	r2, #96	; 0x60
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f001 fc34 	bl	8007fde <memset>
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <prvInitialiseNewTask+0x130>)
 800677a:	651a      	str	r2, [r3, #80]	; 0x50
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <prvInitialiseNewTask+0x134>)
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	4a0b      	ldr	r2, [pc, #44]	; (80067b4 <prvInitialiseNewTask+0x138>)
 8006786:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	69b8      	ldr	r0, [r7, #24]
 800678e:	f000 feb1 	bl	80074f4 <pxPortInitialiseStack>
 8006792:	4602      	mov	r2, r0
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a4:	bf00      	nop
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	0800aed4 	.word	0x0800aed4
 80067b0:	0800aef4 	.word	0x0800aef4
 80067b4:	0800aeb4 	.word	0x0800aeb4

080067b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067c0:	f000 ffc8 	bl	8007754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067c4:	4b2a      	ldr	r3, [pc, #168]	; (8006870 <prvAddNewTaskToReadyList+0xb8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	4a29      	ldr	r2, [pc, #164]	; (8006870 <prvAddNewTaskToReadyList+0xb8>)
 80067cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <prvAddNewTaskToReadyList+0xbc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067d6:	4a27      	ldr	r2, [pc, #156]	; (8006874 <prvAddNewTaskToReadyList+0xbc>)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <prvAddNewTaskToReadyList+0xb8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d110      	bne.n	8006806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067e4:	f000 fba2 	bl	8006f2c <prvInitialiseTaskLists>
 80067e8:	e00d      	b.n	8006806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <prvAddNewTaskToReadyList+0xc0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067f2:	4b20      	ldr	r3, [pc, #128]	; (8006874 <prvAddNewTaskToReadyList+0xbc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d802      	bhi.n	8006806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006800:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <prvAddNewTaskToReadyList+0xbc>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006806:	4b1d      	ldr	r3, [pc, #116]	; (800687c <prvAddNewTaskToReadyList+0xc4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	4a1b      	ldr	r2, [pc, #108]	; (800687c <prvAddNewTaskToReadyList+0xc4>)
 800680e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	2201      	movs	r2, #1
 8006816:	409a      	lsls	r2, r3
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <prvAddNewTaskToReadyList+0xc8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4313      	orrs	r3, r2
 800681e:	4a18      	ldr	r2, [pc, #96]	; (8006880 <prvAddNewTaskToReadyList+0xc8>)
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <prvAddNewTaskToReadyList+0xcc>)
 8006830:	441a      	add	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7fe ff39 	bl	80056b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800683e:	f000 ffb9 	bl	80077b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <prvAddNewTaskToReadyList+0xc0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <prvAddNewTaskToReadyList+0xbc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	429a      	cmp	r2, r3
 8006856:	d207      	bcs.n	8006868 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <prvAddNewTaskToReadyList+0xd0>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200009c8 	.word	0x200009c8
 8006874:	200008c8 	.word	0x200008c8
 8006878:	200009d4 	.word	0x200009d4
 800687c:	200009e4 	.word	0x200009e4
 8006880:	200009d0 	.word	0x200009d0
 8006884:	200008cc 	.word	0x200008cc
 8006888:	e000ed04 	.word	0xe000ed04

0800688c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800689a:	463a      	mov	r2, r7
 800689c:	1d39      	adds	r1, r7, #4
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fa fb7a 	bl	8000f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	9202      	str	r2, [sp, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	2300      	movs	r3, #0
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	460a      	mov	r2, r1
 80068ba:	4921      	ldr	r1, [pc, #132]	; (8006940 <vTaskStartScheduler+0xb4>)
 80068bc:	4821      	ldr	r0, [pc, #132]	; (8006944 <vTaskStartScheduler+0xb8>)
 80068be:	f7ff fe3b 	bl	8006538 <xTaskCreateStatic>
 80068c2:	4603      	mov	r3, r0
 80068c4:	4a20      	ldr	r2, [pc, #128]	; (8006948 <vTaskStartScheduler+0xbc>)
 80068c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <vTaskStartScheduler+0xbc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e001      	b.n	80068da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d11b      	bne.n	8006918 <vTaskStartScheduler+0x8c>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	613b      	str	r3, [r7, #16]
}
 80068f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068f4:	4b15      	ldr	r3, [pc, #84]	; (800694c <vTaskStartScheduler+0xc0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	334c      	adds	r3, #76	; 0x4c
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <vTaskStartScheduler+0xc4>)
 80068fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068fe:	4b15      	ldr	r3, [pc, #84]	; (8006954 <vTaskStartScheduler+0xc8>)
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <vTaskStartScheduler+0xcc>)
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800690c:	4b13      	ldr	r3, [pc, #76]	; (800695c <vTaskStartScheduler+0xd0>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006912:	f000 fe7d 	bl	8007610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006916:	e00e      	b.n	8006936 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d10a      	bne.n	8006936 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <vTaskStartScheduler+0xa8>
}
 8006936:	bf00      	nop
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	0800ae60 	.word	0x0800ae60
 8006944:	08006efd 	.word	0x08006efd
 8006948:	200009ec 	.word	0x200009ec
 800694c:	200008c8 	.word	0x200008c8
 8006950:	20000010 	.word	0x20000010
 8006954:	200009e8 	.word	0x200009e8
 8006958:	200009d4 	.word	0x200009d4
 800695c:	200009cc 	.word	0x200009cc

08006960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <vTaskSuspendAll+0x18>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a03      	ldr	r2, [pc, #12]	; (8006978 <vTaskSuspendAll+0x18>)
 800696c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	200009f0 	.word	0x200009f0

0800697c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800698a:	4b41      	ldr	r3, [pc, #260]	; (8006a90 <xTaskResumeAll+0x114>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	603b      	str	r3, [r7, #0]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069a8:	f000 fed4 	bl	8007754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069ac:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <xTaskResumeAll+0x114>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	4a37      	ldr	r2, [pc, #220]	; (8006a90 <xTaskResumeAll+0x114>)
 80069b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b6:	4b36      	ldr	r3, [pc, #216]	; (8006a90 <xTaskResumeAll+0x114>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d161      	bne.n	8006a82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069be:	4b35      	ldr	r3, [pc, #212]	; (8006a94 <xTaskResumeAll+0x118>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d05d      	beq.n	8006a82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c6:	e02e      	b.n	8006a26 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c8:	4b33      	ldr	r3, [pc, #204]	; (8006a98 <xTaskResumeAll+0x11c>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3318      	adds	r3, #24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe fec8 	bl	800576a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3304      	adds	r3, #4
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fec3 	bl	800576a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2201      	movs	r2, #1
 80069ea:	409a      	lsls	r2, r3
 80069ec:	4b2b      	ldr	r3, [pc, #172]	; (8006a9c <xTaskResumeAll+0x120>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <xTaskResumeAll+0x120>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <xTaskResumeAll+0x124>)
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f7fe fe4f 	bl	80056b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a16:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <xTaskResumeAll+0x128>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a20:	4b21      	ldr	r3, [pc, #132]	; (8006aa8 <xTaskResumeAll+0x12c>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a26:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <xTaskResumeAll+0x11c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1cc      	bne.n	80069c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a34:	f000 fb1c 	bl	8007070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a38:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <xTaskResumeAll+0x130>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a44:	f000 f836 	bl	8006ab4 <xTaskIncrementTick>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a4e:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <xTaskResumeAll+0x12c>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f1      	bne.n	8006a44 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a60:	4b12      	ldr	r3, [pc, #72]	; (8006aac <xTaskResumeAll+0x130>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <xTaskResumeAll+0x12c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <xTaskResumeAll+0x134>)
 8006a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a82:	f000 fe97 	bl	80077b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006a86:	68bb      	ldr	r3, [r7, #8]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200009f0 	.word	0x200009f0
 8006a94:	200009c8 	.word	0x200009c8
 8006a98:	20000988 	.word	0x20000988
 8006a9c:	200009d0 	.word	0x200009d0
 8006aa0:	200008cc 	.word	0x200008cc
 8006aa4:	200008c8 	.word	0x200008c8
 8006aa8:	200009dc 	.word	0x200009dc
 8006aac:	200009d8 	.word	0x200009d8
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006abe:	4b4e      	ldr	r3, [pc, #312]	; (8006bf8 <xTaskIncrementTick+0x144>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 808e 	bne.w	8006be4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ac8:	4b4c      	ldr	r3, [pc, #304]	; (8006bfc <xTaskIncrementTick+0x148>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ad0:	4a4a      	ldr	r2, [pc, #296]	; (8006bfc <xTaskIncrementTick+0x148>)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d120      	bne.n	8006b1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006adc:	4b48      	ldr	r3, [pc, #288]	; (8006c00 <xTaskIncrementTick+0x14c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <xTaskIncrementTick+0x48>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	603b      	str	r3, [r7, #0]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xTaskIncrementTick+0x46>
 8006afc:	4b40      	ldr	r3, [pc, #256]	; (8006c00 <xTaskIncrementTick+0x14c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	4b40      	ldr	r3, [pc, #256]	; (8006c04 <xTaskIncrementTick+0x150>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3e      	ldr	r2, [pc, #248]	; (8006c00 <xTaskIncrementTick+0x14c>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4a3e      	ldr	r2, [pc, #248]	; (8006c04 <xTaskIncrementTick+0x150>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	4b3d      	ldr	r3, [pc, #244]	; (8006c08 <xTaskIncrementTick+0x154>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a3c      	ldr	r2, [pc, #240]	; (8006c08 <xTaskIncrementTick+0x154>)
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	f000 faa9 	bl	8007070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <xTaskIncrementTick+0x158>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d348      	bcc.n	8006bba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b28:	4b35      	ldr	r3, [pc, #212]	; (8006c00 <xTaskIncrementTick+0x14c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b32:	4b36      	ldr	r3, [pc, #216]	; (8006c0c <xTaskIncrementTick+0x158>)
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	601a      	str	r2, [r3, #0]
					break;
 8006b3a:	e03e      	b.n	8006bba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b3c:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <xTaskIncrementTick+0x14c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d203      	bcs.n	8006b5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b54:	4a2d      	ldr	r2, [pc, #180]	; (8006c0c <xTaskIncrementTick+0x158>)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b5a:	e02e      	b.n	8006bba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fe02 	bl	800576a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fdf9 	bl	800576a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	4b23      	ldr	r3, [pc, #140]	; (8006c10 <xTaskIncrementTick+0x15c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	4a22      	ldr	r2, [pc, #136]	; (8006c10 <xTaskIncrementTick+0x15c>)
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <xTaskIncrementTick+0x160>)
 8006b98:	441a      	add	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fe fd85 	bl	80056b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <xTaskIncrementTick+0x164>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d3b9      	bcc.n	8006b28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb8:	e7b6      	b.n	8006b28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bba:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <xTaskIncrementTick+0x164>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	4914      	ldr	r1, [pc, #80]	; (8006c14 <xTaskIncrementTick+0x160>)
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d901      	bls.n	8006bd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <xTaskIncrementTick+0x168>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bde:	2301      	movs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e004      	b.n	8006bee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <xTaskIncrementTick+0x16c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	4a0d      	ldr	r2, [pc, #52]	; (8006c20 <xTaskIncrementTick+0x16c>)
 8006bec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bee:	697b      	ldr	r3, [r7, #20]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	200009f0 	.word	0x200009f0
 8006bfc:	200009cc 	.word	0x200009cc
 8006c00:	20000980 	.word	0x20000980
 8006c04:	20000984 	.word	0x20000984
 8006c08:	200009e0 	.word	0x200009e0
 8006c0c:	200009e8 	.word	0x200009e8
 8006c10:	200009d0 	.word	0x200009d0
 8006c14:	200008cc 	.word	0x200008cc
 8006c18:	200008c8 	.word	0x200008c8
 8006c1c:	200009dc 	.word	0x200009dc
 8006c20:	200009d8 	.word	0x200009d8

08006c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c2a:	4b29      	ldr	r3, [pc, #164]	; (8006cd0 <vTaskSwitchContext+0xac>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c32:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <vTaskSwitchContext+0xb0>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c38:	e044      	b.n	8006cc4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <vTaskSwitchContext+0xb0>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c40:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <vTaskSwitchContext+0xb4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	fab3 f383 	clz	r3, r3
 8006c4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	f1c3 031f 	rsb	r3, r3, #31
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	4921      	ldr	r1, [pc, #132]	; (8006cdc <vTaskSwitchContext+0xb8>)
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	607b      	str	r3, [r7, #4]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <vTaskSwitchContext+0x5a>
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4a14      	ldr	r2, [pc, #80]	; (8006cdc <vTaskSwitchContext+0xb8>)
 8006c8c:	4413      	add	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d104      	bne.n	8006cb0 <vTaskSwitchContext+0x8c>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <vTaskSwitchContext+0xbc>)
 8006cb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <vTaskSwitchContext+0xbc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	334c      	adds	r3, #76	; 0x4c
 8006cc0:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <vTaskSwitchContext+0xc0>)
 8006cc2:	6013      	str	r3, [r2, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	200009f0 	.word	0x200009f0
 8006cd4:	200009dc 	.word	0x200009dc
 8006cd8:	200009d0 	.word	0x200009d0
 8006cdc:	200008cc 	.word	0x200008cc
 8006ce0:	200008c8 	.word	0x200008c8
 8006ce4:	20000010 	.word	0x20000010

08006ce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <vTaskPlaceOnEventList+0x44>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3318      	adds	r3, #24
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fe fcee 	bl	80056f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	6838      	ldr	r0, [r7, #0]
 8006d20:	f000 fb82 	bl	8007428 <prvAddCurrentTaskToDelayedList>
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	200008c8 	.word	0x200008c8

08006d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3318      	adds	r3, #24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fd02 	bl	800576a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d66:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <xTaskRemoveFromEventList+0xac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d11c      	bne.n	8006da8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fcf9 	bl	800576a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <xTaskRemoveFromEventList+0xb0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	4a16      	ldr	r2, [pc, #88]	; (8006de0 <xTaskRemoveFromEventList+0xb0>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <xTaskRemoveFromEventList+0xb4>)
 8006d98:	441a      	add	r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe fc85 	bl	80056b0 <vListInsertEnd>
 8006da6:	e005      	b.n	8006db4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	3318      	adds	r3, #24
 8006dac:	4619      	mov	r1, r3
 8006dae:	480e      	ldr	r0, [pc, #56]	; (8006de8 <xTaskRemoveFromEventList+0xb8>)
 8006db0:	f7fe fc7e 	bl	80056b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <xTaskRemoveFromEventList+0xbc>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d905      	bls.n	8006dce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <xTaskRemoveFromEventList+0xc0>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e001      	b.n	8006dd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dd2:	697b      	ldr	r3, [r7, #20]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200009f0 	.word	0x200009f0
 8006de0:	200009d0 	.word	0x200009d0
 8006de4:	200008cc 	.word	0x200008cc
 8006de8:	20000988 	.word	0x20000988
 8006dec:	200008c8 	.word	0x200008c8
 8006df0:	200009dc 	.word	0x200009dc

08006df4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <vTaskInternalSetTimeOutState+0x24>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <vTaskInternalSetTimeOutState+0x28>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	605a      	str	r2, [r3, #4]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	200009e0 	.word	0x200009e0
 8006e1c:	200009cc 	.word	0x200009cc

08006e20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	613b      	str	r3, [r7, #16]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60fb      	str	r3, [r7, #12]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e62:	f000 fc77 	bl	8007754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <xTaskCheckForTimeOut+0xbc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d102      	bne.n	8006e86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	e023      	b.n	8006ece <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <xTaskCheckForTimeOut+0xc0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d007      	beq.n	8006ea2 <xTaskCheckForTimeOut+0x82>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d302      	bcc.n	8006ea2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e015      	b.n	8006ece <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d20b      	bcs.n	8006ec4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff9b 	bl	8006df4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e004      	b.n	8006ece <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ece:	f000 fc71 	bl	80077b4 <vPortExitCritical>

	return xReturn;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3720      	adds	r7, #32
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	200009cc 	.word	0x200009cc
 8006ee0:	200009e0 	.word	0x200009e0

08006ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <vTaskMissedYield+0x14>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	200009dc 	.word	0x200009dc

08006efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f04:	f000 f852 	bl	8006fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <prvIdleTask+0x28>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d9f9      	bls.n	8006f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <prvIdleTask+0x2c>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f20:	e7f0      	b.n	8006f04 <prvIdleTask+0x8>
 8006f22:	bf00      	nop
 8006f24:	200008cc 	.word	0x200008cc
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	e00c      	b.n	8006f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4a12      	ldr	r2, [pc, #72]	; (8006f8c <prvInitialiseTaskLists+0x60>)
 8006f44:	4413      	add	r3, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fb85 	bl	8005656 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b06      	cmp	r3, #6
 8006f56:	d9ef      	bls.n	8006f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f58:	480d      	ldr	r0, [pc, #52]	; (8006f90 <prvInitialiseTaskLists+0x64>)
 8006f5a:	f7fe fb7c 	bl	8005656 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f5e:	480d      	ldr	r0, [pc, #52]	; (8006f94 <prvInitialiseTaskLists+0x68>)
 8006f60:	f7fe fb79 	bl	8005656 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f64:	480c      	ldr	r0, [pc, #48]	; (8006f98 <prvInitialiseTaskLists+0x6c>)
 8006f66:	f7fe fb76 	bl	8005656 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f6a:	480c      	ldr	r0, [pc, #48]	; (8006f9c <prvInitialiseTaskLists+0x70>)
 8006f6c:	f7fe fb73 	bl	8005656 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f70:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <prvInitialiseTaskLists+0x74>)
 8006f72:	f7fe fb70 	bl	8005656 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <prvInitialiseTaskLists+0x78>)
 8006f78:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <prvInitialiseTaskLists+0x64>)
 8006f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <prvInitialiseTaskLists+0x7c>)
 8006f7e:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <prvInitialiseTaskLists+0x68>)
 8006f80:	601a      	str	r2, [r3, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200008cc 	.word	0x200008cc
 8006f90:	20000958 	.word	0x20000958
 8006f94:	2000096c 	.word	0x2000096c
 8006f98:	20000988 	.word	0x20000988
 8006f9c:	2000099c 	.word	0x2000099c
 8006fa0:	200009b4 	.word	0x200009b4
 8006fa4:	20000980 	.word	0x20000980
 8006fa8:	20000984 	.word	0x20000984

08006fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb2:	e019      	b.n	8006fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fb4:	f000 fbce 	bl	8007754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <prvCheckTasksWaitingTermination+0x50>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fbd0 	bl	800576a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <prvCheckTasksWaitingTermination+0x54>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <prvCheckTasksWaitingTermination+0x54>)
 8006fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <prvCheckTasksWaitingTermination+0x58>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <prvCheckTasksWaitingTermination+0x58>)
 8006fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fde:	f000 fbe9 	bl	80077b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f810 	bl	8007008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <prvCheckTasksWaitingTermination+0x58>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e1      	bne.n	8006fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2000099c 	.word	0x2000099c
 8007000:	200009c8 	.word	0x200009c8
 8007004:	200009b0 	.word	0x200009b0

08007008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	334c      	adds	r3, #76	; 0x4c
 8007014:	4618      	mov	r0, r3
 8007016:	f001 f8a5 	bl	8008164 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d108      	bne.n	8007036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fd81 	bl	8007b30 <vPortFree>
				vPortFree( pxTCB );
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fd7e 	bl	8007b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007034:	e018      	b.n	8007068 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800703c:	2b01      	cmp	r3, #1
 800703e:	d103      	bne.n	8007048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fd75 	bl	8007b30 <vPortFree>
	}
 8007046:	e00f      	b.n	8007068 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800704e:	2b02      	cmp	r3, #2
 8007050:	d00a      	beq.n	8007068 <prvDeleteTCB+0x60>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <prvDeleteTCB+0x5e>
	}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvResetNextTaskUnblockTime+0x38>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <prvResetNextTaskUnblockTime+0x3c>)
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007088:	e008      	b.n	800709c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <prvResetNextTaskUnblockTime+0x38>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4a04      	ldr	r2, [pc, #16]	; (80070ac <prvResetNextTaskUnblockTime+0x3c>)
 800709a:	6013      	str	r3, [r2, #0]
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20000980 	.word	0x20000980
 80070ac:	200009e8 	.word	0x200009e8

080070b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <xTaskGetSchedulerState+0x34>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070be:	2301      	movs	r3, #1
 80070c0:	607b      	str	r3, [r7, #4]
 80070c2:	e008      	b.n	80070d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c4:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <xTaskGetSchedulerState+0x38>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070cc:	2302      	movs	r3, #2
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	e001      	b.n	80070d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070d2:	2300      	movs	r3, #0
 80070d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070d6:	687b      	ldr	r3, [r7, #4]
	}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	200009d4 	.word	0x200009d4
 80070e8:	200009f0 	.word	0x200009f0

080070ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d05e      	beq.n	80071c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007106:	4b31      	ldr	r3, [pc, #196]	; (80071cc <xTaskPriorityInherit+0xe0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	429a      	cmp	r2, r3
 800710e:	d24e      	bcs.n	80071ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	db06      	blt.n	8007126 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007118:	4b2c      	ldr	r3, [pc, #176]	; (80071cc <xTaskPriorityInherit+0xe0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	f1c3 0207 	rsb	r2, r3, #7
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <xTaskPriorityInherit+0xe4>)
 8007138:	4413      	add	r3, r2
 800713a:	4299      	cmp	r1, r3
 800713c:	d12f      	bne.n	800719e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3304      	adds	r3, #4
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fb11 	bl	800576a <uxListRemove>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	2201      	movs	r2, #1
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	43da      	mvns	r2, r3
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <xTaskPriorityInherit+0xe8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4013      	ands	r3, r2
 8007160:	4a1c      	ldr	r2, [pc, #112]	; (80071d4 <xTaskPriorityInherit+0xe8>)
 8007162:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007164:	4b19      	ldr	r3, [pc, #100]	; (80071cc <xTaskPriorityInherit+0xe0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	2201      	movs	r2, #1
 8007174:	409a      	lsls	r2, r3
 8007176:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <xTaskPriorityInherit+0xe8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	4a15      	ldr	r2, [pc, #84]	; (80071d4 <xTaskPriorityInherit+0xe8>)
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4a10      	ldr	r2, [pc, #64]	; (80071d0 <xTaskPriorityInherit+0xe4>)
 800718e:	441a      	add	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f7fe fa8a 	bl	80056b0 <vListInsertEnd>
 800719c:	e004      	b.n	80071a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <xTaskPriorityInherit+0xe0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e008      	b.n	80071c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <xTaskPriorityInherit+0xe0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d201      	bcs.n	80071c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071c0:	68fb      	ldr	r3, [r7, #12]
	}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	200008c8 	.word	0x200008c8
 80071d0:	200008cc 	.word	0x200008cc
 80071d4:	200009d0 	.word	0x200009d0

080071d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d06e      	beq.n	80072cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071ee:	4b3a      	ldr	r3, [pc, #232]	; (80072d8 <xTaskPriorityDisinherit+0x100>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d00a      	beq.n	800720e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60fb      	str	r3, [r7, #12]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60bb      	str	r3, [r7, #8]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007230:	1e5a      	subs	r2, r3, #1
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	429a      	cmp	r2, r3
 8007240:	d044      	beq.n	80072cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007246:	2b00      	cmp	r3, #0
 8007248:	d140      	bne.n	80072cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	3304      	adds	r3, #4
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fa8b 	bl	800576a <uxListRemove>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d115      	bne.n	8007286 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	491f      	ldr	r1, [pc, #124]	; (80072dc <xTaskPriorityDisinherit+0x104>)
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xTaskPriorityDisinherit+0xae>
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	2201      	movs	r2, #1
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	43da      	mvns	r2, r3
 800727c:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <xTaskPriorityDisinherit+0x108>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4013      	ands	r3, r2
 8007282:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <xTaskPriorityDisinherit+0x108>)
 8007284:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	f1c3 0207 	rsb	r2, r3, #7
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	2201      	movs	r2, #1
 80072a0:	409a      	lsls	r2, r3
 80072a2:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <xTaskPriorityDisinherit+0x108>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	4a0d      	ldr	r2, [pc, #52]	; (80072e0 <xTaskPriorityDisinherit+0x108>)
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4a08      	ldr	r2, [pc, #32]	; (80072dc <xTaskPriorityDisinherit+0x104>)
 80072ba:	441a      	add	r2, r3
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f7fe f9f4 	bl	80056b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072cc:	697b      	ldr	r3, [r7, #20]
	}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200008c8 	.word	0x200008c8
 80072dc:	200008cc 	.word	0x200008cc
 80072e0:	200009d0 	.word	0x200009d0

080072e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d077      	beq.n	80073ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	60fb      	str	r3, [r7, #12]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d902      	bls.n	800732a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e002      	b.n	8007330 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	429a      	cmp	r2, r3
 8007338:	d058      	beq.n	80073ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	429a      	cmp	r2, r3
 8007342:	d153      	bne.n	80073ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007344:	4b2b      	ldr	r3, [pc, #172]	; (80073f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	429a      	cmp	r2, r3
 800734c:	d10a      	bne.n	8007364 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	db04      	blt.n	8007382 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f1c3 0207 	rsb	r2, r3, #7
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	6959      	ldr	r1, [r3, #20]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007392:	4413      	add	r3, r2
 8007394:	4299      	cmp	r1, r3
 8007396:	d129      	bne.n	80073ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	3304      	adds	r3, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe f9e4 	bl	800576a <uxListRemove>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	2201      	movs	r2, #1
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	43da      	mvns	r2, r3
 80073b4:	4b11      	ldr	r3, [pc, #68]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4013      	ands	r3, r2
 80073ba:	4a10      	ldr	r2, [pc, #64]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	2201      	movs	r2, #1
 80073c4:	409a      	lsls	r2, r3
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	4a0b      	ldr	r2, [pc, #44]	; (80073fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4a06      	ldr	r2, [pc, #24]	; (80073f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80073de:	441a      	add	r2, r3
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fe f962 	bl	80056b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ec:	bf00      	nop
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	200008c8 	.word	0x200008c8
 80073f8:	200008cc 	.word	0x200008cc
 80073fc:	200009d0 	.word	0x200009d0

08007400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007404:	4b07      	ldr	r3, [pc, #28]	; (8007424 <pvTaskIncrementMutexHeldCount+0x24>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <pvTaskIncrementMutexHeldCount+0x24>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007412:	3201      	adds	r2, #1
 8007414:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007416:	4b03      	ldr	r3, [pc, #12]	; (8007424 <pvTaskIncrementMutexHeldCount+0x24>)
 8007418:	681b      	ldr	r3, [r3, #0]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	200008c8 	.word	0x200008c8

08007428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007432:	4b29      	ldr	r3, [pc, #164]	; (80074d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007438:	4b28      	ldr	r3, [pc, #160]	; (80074dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3304      	adds	r3, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f993 	bl	800576a <uxListRemove>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800744a:	4b24      	ldr	r3, [pc, #144]	; (80074dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	2201      	movs	r2, #1
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43da      	mvns	r2, r3
 8007458:	4b21      	ldr	r3, [pc, #132]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4013      	ands	r3, r2
 800745e:	4a20      	ldr	r2, [pc, #128]	; (80074e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d10a      	bne.n	8007480 <prvAddCurrentTaskToDelayedList+0x58>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007470:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3304      	adds	r3, #4
 8007476:	4619      	mov	r1, r3
 8007478:	481a      	ldr	r0, [pc, #104]	; (80074e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800747a:	f7fe f919 	bl	80056b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800747e:	e026      	b.n	80074ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4413      	add	r3, r2
 8007486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007488:	4b14      	ldr	r3, [pc, #80]	; (80074dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	429a      	cmp	r2, r3
 8007496:	d209      	bcs.n	80074ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007498:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7fe f927 	bl	80056f8 <vListInsert>
}
 80074aa:	e010      	b.n	80074ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe f91d 	bl	80056f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d202      	bcs.n	80074ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6013      	str	r3, [r2, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200009cc 	.word	0x200009cc
 80074dc:	200008c8 	.word	0x200008c8
 80074e0:	200009d0 	.word	0x200009d0
 80074e4:	200009b4 	.word	0x200009b4
 80074e8:	20000984 	.word	0x20000984
 80074ec:	20000980 	.word	0x20000980
 80074f0:	200009e8 	.word	0x200009e8

080074f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3b04      	subs	r3, #4
 8007504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800750c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3b04      	subs	r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3b04      	subs	r3, #4
 8007522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007524:	4a0c      	ldr	r2, [pc, #48]	; (8007558 <pxPortInitialiseStack+0x64>)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3b14      	subs	r3, #20
 800752e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b04      	subs	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f06f 0202 	mvn.w	r2, #2
 8007542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3b20      	subs	r3, #32
 8007548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800754a:	68fb      	ldr	r3, [r7, #12]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	0800755d 	.word	0x0800755d

0800755c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <prvTaskExitError+0x54>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d00a      	beq.n	8007586 <prvTaskExitError+0x2a>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <prvTaskExitError+0x28>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60bb      	str	r3, [r7, #8]
}
 8007598:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800759a:	bf00      	nop
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0fc      	beq.n	800759c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	2000000c 	.word	0x2000000c
	...

080075c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pxCurrentTCBConst2>)
 80075c2:	6819      	ldr	r1, [r3, #0]
 80075c4:	6808      	ldr	r0, [r1, #0]
 80075c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	f380 8809 	msr	PSP, r0
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f380 8811 	msr	BASEPRI, r0
 80075da:	4770      	bx	lr
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst2>:
 80075e0:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <prvPortStartFirstTask+0x24>)
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	6800      	ldr	r0, [r0, #0]
 80075ee:	f380 8808 	msr	MSP, r0
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f380 8814 	msr	CONTROL, r0
 80075fa:	b662      	cpsie	i
 80075fc:	b661      	cpsie	f
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	df00      	svc	0
 8007608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800760a:	bf00      	nop
 800760c:	e000ed08 	.word	0xe000ed08

08007610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007616:	4b46      	ldr	r3, [pc, #280]	; (8007730 <xPortStartScheduler+0x120>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a46      	ldr	r2, [pc, #280]	; (8007734 <xPortStartScheduler+0x124>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10a      	bne.n	8007636 <xPortStartScheduler+0x26>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	613b      	str	r3, [r7, #16]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007636:	4b3e      	ldr	r3, [pc, #248]	; (8007730 <xPortStartScheduler+0x120>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <xPortStartScheduler+0x128>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d10a      	bne.n	8007656 <xPortStartScheduler+0x46>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007656:	4b39      	ldr	r3, [pc, #228]	; (800773c <xPortStartScheduler+0x12c>)
 8007658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007678:	b2da      	uxtb	r2, r3
 800767a:	4b31      	ldr	r3, [pc, #196]	; (8007740 <xPortStartScheduler+0x130>)
 800767c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <xPortStartScheduler+0x134>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007684:	e009      	b.n	800769a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007686:	4b2f      	ldr	r3, [pc, #188]	; (8007744 <xPortStartScheduler+0x134>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3b01      	subs	r3, #1
 800768c:	4a2d      	ldr	r2, [pc, #180]	; (8007744 <xPortStartScheduler+0x134>)
 800768e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	b2db      	uxtb	r3, r3
 8007698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a2:	2b80      	cmp	r3, #128	; 0x80
 80076a4:	d0ef      	beq.n	8007686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <xPortStartScheduler+0x134>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f1c3 0307 	rsb	r3, r3, #7
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d00a      	beq.n	80076c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60bb      	str	r3, [r7, #8]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076c8:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <xPortStartScheduler+0x134>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <xPortStartScheduler+0x134>)
 80076d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076d2:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <xPortStartScheduler+0x134>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076da:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <xPortStartScheduler+0x134>)
 80076dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <xPortStartScheduler+0x138>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <xPortStartScheduler+0x138>)
 80076ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <xPortStartScheduler+0x138>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a14      	ldr	r2, [pc, #80]	; (8007748 <xPortStartScheduler+0x138>)
 80076f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076fe:	f000 f8dd 	bl	80078bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <xPortStartScheduler+0x13c>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007708:	f000 f8fc 	bl	8007904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <xPortStartScheduler+0x140>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0f      	ldr	r2, [pc, #60]	; (8007750 <xPortStartScheduler+0x140>)
 8007712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007718:	f7ff ff66 	bl	80075e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800771c:	f7ff fa82 	bl	8006c24 <vTaskSwitchContext>
	prvTaskExitError();
 8007720:	f7ff ff1c 	bl	800755c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	e000ed00 	.word	0xe000ed00
 8007734:	410fc271 	.word	0x410fc271
 8007738:	410fc270 	.word	0x410fc270
 800773c:	e000e400 	.word	0xe000e400
 8007740:	200009f4 	.word	0x200009f4
 8007744:	200009f8 	.word	0x200009f8
 8007748:	e000ed20 	.word	0xe000ed20
 800774c:	2000000c 	.word	0x2000000c
 8007750:	e000ef34 	.word	0xe000ef34

08007754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	607b      	str	r3, [r7, #4]
}
 800776c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <vPortEnterCritical+0x58>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <vPortEnterCritical+0x58>)
 8007776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <vPortEnterCritical+0x58>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10f      	bne.n	80077a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <vPortEnterCritical+0x5c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vPortEnterCritical+0x4a>
	}
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2000000c 	.word	0x2000000c
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <vPortExitCritical+0x50>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <vPortExitCritical+0x24>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	607b      	str	r3, [r7, #4]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <vPortExitCritical+0x50>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3b01      	subs	r3, #1
 80077de:	4a09      	ldr	r2, [pc, #36]	; (8007804 <vPortExitCritical+0x50>)
 80077e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <vPortExitCritical+0x50>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <vPortExitCritical+0x42>
 80077ea:	2300      	movs	r3, #0
 80077ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	f383 8811 	msr	BASEPRI, r3
}
 80077f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	2000000c 	.word	0x2000000c
	...

08007810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007810:	f3ef 8009 	mrs	r0, PSP
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <pxCurrentTCBConst>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	f01e 0f10 	tst.w	lr, #16
 8007820:	bf08      	it	eq
 8007822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	6010      	str	r0, [r2, #0]
 800782c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007834:	f380 8811 	msr	BASEPRI, r0
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f7ff f9f0 	bl	8006c24 <vTaskSwitchContext>
 8007844:	f04f 0000 	mov.w	r0, #0
 8007848:	f380 8811 	msr	BASEPRI, r0
 800784c:	bc09      	pop	{r0, r3}
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007856:	f01e 0f10 	tst.w	lr, #16
 800785a:	bf08      	it	eq
 800785c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007860:	f380 8809 	msr	PSP, r0
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst>:
 8007870:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	607b      	str	r3, [r7, #4]
}
 8007890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007892:	f7ff f90f 	bl	8006ab4 <xTaskIncrementTick>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <SysTick_Handler+0x40>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f383 8811 	msr	BASEPRI, r3
}
 80078ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <vPortSetupTimerInterrupt+0x38>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <vPortSetupTimerInterrupt+0x3c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <vPortSetupTimerInterrupt+0x40>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vPortSetupTimerInterrupt+0x44>)
 80078da:	3b01      	subs	r3, #1
 80078dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078de:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	e000e010 	.word	0xe000e010
 80078f4:	e000e018 	.word	0xe000e018
 80078f8:	20000000 	.word	0x20000000
 80078fc:	10624dd3 	.word	0x10624dd3
 8007900:	e000e014 	.word	0xe000e014

08007904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007914 <vPortEnableVFP+0x10>
 8007908:	6801      	ldr	r1, [r0, #0]
 800790a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800790e:	6001      	str	r1, [r0, #0]
 8007910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007912:	bf00      	nop
 8007914:	e000ed88 	.word	0xe000ed88

08007918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800791e:	f3ef 8305 	mrs	r3, IPSR
 8007922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b0f      	cmp	r3, #15
 8007928:	d914      	bls.n	8007954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800792a:	4a17      	ldr	r2, [pc, #92]	; (8007988 <vPortValidateInterruptPriority+0x70>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007934:	4b15      	ldr	r3, [pc, #84]	; (800798c <vPortValidateInterruptPriority+0x74>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	7afa      	ldrb	r2, [r7, #11]
 800793a:	429a      	cmp	r2, r3
 800793c:	d20a      	bcs.n	8007954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	607b      	str	r3, [r7, #4]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <vPortValidateInterruptPriority+0x78>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800795c:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <vPortValidateInterruptPriority+0x7c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d90a      	bls.n	800797a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	603b      	str	r3, [r7, #0]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <vPortValidateInterruptPriority+0x60>
	}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	e000e3f0 	.word	0xe000e3f0
 800798c:	200009f4 	.word	0x200009f4
 8007990:	e000ed0c 	.word	0xe000ed0c
 8007994:	200009f8 	.word	0x200009f8

08007998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079a4:	f7fe ffdc 	bl	8006960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079a8:	4b5b      	ldr	r3, [pc, #364]	; (8007b18 <pvPortMalloc+0x180>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079b0:	f000 f920 	bl	8007bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079b4:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <pvPortMalloc+0x184>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8093 	bne.w	8007ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01d      	beq.n	8007a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079c8:	2208      	movs	r2, #8
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d014      	beq.n	8007a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f023 0307 	bic.w	r3, r3, #7
 80079e0:	3308      	adds	r3, #8
 80079e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <pvPortMalloc+0x6c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	617b      	str	r3, [r7, #20]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d06e      	beq.n	8007ae8 <pvPortMalloc+0x150>
 8007a0a:	4b45      	ldr	r3, [pc, #276]	; (8007b20 <pvPortMalloc+0x188>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d869      	bhi.n	8007ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a14:	4b43      	ldr	r3, [pc, #268]	; (8007b24 <pvPortMalloc+0x18c>)
 8007a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a18:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <pvPortMalloc+0x18c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a1e:	e004      	b.n	8007a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d903      	bls.n	8007a3c <pvPortMalloc+0xa4>
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f1      	bne.n	8007a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a3c:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <pvPortMalloc+0x180>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d050      	beq.n	8007ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	4413      	add	r3, r2
 8007a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	2308      	movs	r3, #8
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d91f      	bls.n	8007aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <pvPortMalloc+0xf8>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	613b      	str	r3, [r7, #16]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007aa2:	69b8      	ldr	r0, [r7, #24]
 8007aa4:	f000 f908 	bl	8007cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007aa8:	4b1d      	ldr	r3, [pc, #116]	; (8007b20 <pvPortMalloc+0x188>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <pvPortMalloc+0x188>)
 8007ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <pvPortMalloc+0x188>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <pvPortMalloc+0x190>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d203      	bcs.n	8007aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ac2:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <pvPortMalloc+0x188>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <pvPortMalloc+0x190>)
 8007ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <pvPortMalloc+0x184>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <pvPortMalloc+0x194>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <pvPortMalloc+0x194>)
 8007ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ae8:	f7fe ff48 	bl	800697c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <pvPortMalloc+0x174>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60fb      	str	r3, [r7, #12]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <pvPortMalloc+0x172>
	return pvReturn;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3728      	adds	r7, #40	; 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20003114 	.word	0x20003114
 8007b1c:	20003128 	.word	0x20003128
 8007b20:	20003118 	.word	0x20003118
 8007b24:	2000310c 	.word	0x2000310c
 8007b28:	2000311c 	.word	0x2000311c
 8007b2c:	20003120 	.word	0x20003120

08007b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d04d      	beq.n	8007bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b42:	2308      	movs	r3, #8
 8007b44:	425b      	negs	r3, r3
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	4b24      	ldr	r3, [pc, #144]	; (8007be8 <vPortFree+0xb8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <vPortFree+0x44>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60fb      	str	r3, [r7, #12]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <vPortFree+0x62>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60bb      	str	r3, [r7, #8]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <vPortFree+0xb8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01e      	beq.n	8007bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11a      	bne.n	8007bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <vPortFree+0xb8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bb8:	f7fe fed2 	bl	8006960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <vPortFree+0xbc>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <vPortFree+0xbc>)
 8007bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bca:	6938      	ldr	r0, [r7, #16]
 8007bcc:	f000 f874 	bl	8007cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <vPortFree+0xc0>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <vPortFree+0xc0>)
 8007bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bda:	f7fe fecf 	bl	800697c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bde:	bf00      	nop
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20003128 	.word	0x20003128
 8007bec:	20003118 	.word	0x20003118
 8007bf0:	20003124 	.word	0x20003124

08007bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bfa:	f242 7310 	movw	r3, #10000	; 0x2710
 8007bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <prvHeapInit+0xac>)
 8007c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3307      	adds	r3, #7
 8007c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <prvHeapInit+0xac>)
 8007c24:	4413      	add	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <prvHeapInit+0xb0>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <prvHeapInit+0xb0>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c40:	2208      	movs	r2, #8
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a15      	ldr	r2, [pc, #84]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c74:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <prvHeapInit+0xb4>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <prvHeapInit+0xb8>)
 8007c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <prvHeapInit+0xbc>)
 8007c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <prvHeapInit+0xc0>)
 8007c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	200009fc 	.word	0x200009fc
 8007ca4:	2000310c 	.word	0x2000310c
 8007ca8:	20003114 	.word	0x20003114
 8007cac:	2000311c 	.word	0x2000311c
 8007cb0:	20003118 	.word	0x20003118
 8007cb4:	20003128 	.word	0x20003128

08007cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cc0:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <prvInsertBlockIntoFreeList+0xac>)
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e002      	b.n	8007ccc <prvInsertBlockIntoFreeList+0x14>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d8f7      	bhi.n	8007cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d108      	bne.n	8007cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	441a      	add	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d118      	bne.n	8007d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <prvInsertBlockIntoFreeList+0xb0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d00d      	beq.n	8007d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	441a      	add	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e008      	b.n	8007d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d36:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <prvInsertBlockIntoFreeList+0xb0>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	e003      	b.n	8007d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d002      	beq.n	8007d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000310c 	.word	0x2000310c
 8007d68:	20003114 	.word	0x20003114

08007d6c <atof>:
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	f001 b8d9 	b.w	8008f24 <strtod>

08007d72 <atoi>:
 8007d72:	220a      	movs	r2, #10
 8007d74:	2100      	movs	r1, #0
 8007d76:	f001 b963 	b.w	8009040 <strtol>
	...

08007d7c <__errno>:
 8007d7c:	4b01      	ldr	r3, [pc, #4]	; (8007d84 <__errno+0x8>)
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20000010 	.word	0x20000010

08007d88 <std>:
 8007d88:	2300      	movs	r3, #0
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d96:	6083      	str	r3, [r0, #8]
 8007d98:	8181      	strh	r1, [r0, #12]
 8007d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d9c:	81c2      	strh	r2, [r0, #14]
 8007d9e:	6183      	str	r3, [r0, #24]
 8007da0:	4619      	mov	r1, r3
 8007da2:	2208      	movs	r2, #8
 8007da4:	305c      	adds	r0, #92	; 0x5c
 8007da6:	f000 f91a 	bl	8007fde <memset>
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <std+0x38>)
 8007dac:	6263      	str	r3, [r4, #36]	; 0x24
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <std+0x3c>)
 8007db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <std+0x40>)
 8007db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <std+0x44>)
 8007db8:	6224      	str	r4, [r4, #32]
 8007dba:	6323      	str	r3, [r4, #48]	; 0x30
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	0800823d 	.word	0x0800823d
 8007dc4:	0800825f 	.word	0x0800825f
 8007dc8:	08008297 	.word	0x08008297
 8007dcc:	080082bb 	.word	0x080082bb

08007dd0 <_cleanup_r>:
 8007dd0:	4901      	ldr	r1, [pc, #4]	; (8007dd8 <_cleanup_r+0x8>)
 8007dd2:	f000 b8af 	b.w	8007f34 <_fwalk_reent>
 8007dd6:	bf00      	nop
 8007dd8:	080091a5 	.word	0x080091a5

08007ddc <__sfmoreglue>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	2268      	movs	r2, #104	; 0x68
 8007de0:	1e4d      	subs	r5, r1, #1
 8007de2:	4355      	muls	r5, r2
 8007de4:	460e      	mov	r6, r1
 8007de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dea:	f000 f921 	bl	8008030 <_malloc_r>
 8007dee:	4604      	mov	r4, r0
 8007df0:	b140      	cbz	r0, 8007e04 <__sfmoreglue+0x28>
 8007df2:	2100      	movs	r1, #0
 8007df4:	e9c0 1600 	strd	r1, r6, [r0]
 8007df8:	300c      	adds	r0, #12
 8007dfa:	60a0      	str	r0, [r4, #8]
 8007dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e00:	f000 f8ed 	bl	8007fde <memset>
 8007e04:	4620      	mov	r0, r4
 8007e06:	bd70      	pop	{r4, r5, r6, pc}

08007e08 <__sfp_lock_acquire>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sfp_lock_acquire+0x8>)
 8007e0a:	f000 b8d8 	b.w	8007fbe <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	2000312d 	.word	0x2000312d

08007e14 <__sfp_lock_release>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sfp_lock_release+0x8>)
 8007e16:	f000 b8d3 	b.w	8007fc0 <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	2000312d 	.word	0x2000312d

08007e20 <__sinit_lock_acquire>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sinit_lock_acquire+0x8>)
 8007e22:	f000 b8cc 	b.w	8007fbe <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	2000312e 	.word	0x2000312e

08007e2c <__sinit_lock_release>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sinit_lock_release+0x8>)
 8007e2e:	f000 b8c7 	b.w	8007fc0 <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	2000312e 	.word	0x2000312e

08007e38 <__sinit>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f7ff fff0 	bl	8007e20 <__sinit_lock_acquire>
 8007e40:	69a3      	ldr	r3, [r4, #24]
 8007e42:	b11b      	cbz	r3, 8007e4c <__sinit+0x14>
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	f7ff bff0 	b.w	8007e2c <__sinit_lock_release>
 8007e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e50:	6523      	str	r3, [r4, #80]	; 0x50
 8007e52:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <__sinit+0x68>)
 8007e54:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <__sinit+0x6c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	bf04      	itt	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	61a3      	streq	r3, [r4, #24]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f820 	bl	8007ea8 <__sfp>
 8007e68:	6060      	str	r0, [r4, #4]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f81c 	bl	8007ea8 <__sfp>
 8007e70:	60a0      	str	r0, [r4, #8]
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f818 	bl	8007ea8 <__sfp>
 8007e78:	2200      	movs	r2, #0
 8007e7a:	60e0      	str	r0, [r4, #12]
 8007e7c:	2104      	movs	r1, #4
 8007e7e:	6860      	ldr	r0, [r4, #4]
 8007e80:	f7ff ff82 	bl	8007d88 <std>
 8007e84:	68a0      	ldr	r0, [r4, #8]
 8007e86:	2201      	movs	r2, #1
 8007e88:	2109      	movs	r1, #9
 8007e8a:	f7ff ff7d 	bl	8007d88 <std>
 8007e8e:	68e0      	ldr	r0, [r4, #12]
 8007e90:	2202      	movs	r2, #2
 8007e92:	2112      	movs	r1, #18
 8007e94:	f7ff ff78 	bl	8007d88 <std>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61a3      	str	r3, [r4, #24]
 8007e9c:	e7d2      	b.n	8007e44 <__sinit+0xc>
 8007e9e:	bf00      	nop
 8007ea0:	0800af14 	.word	0x0800af14
 8007ea4:	08007dd1 	.word	0x08007dd1

08007ea8 <__sfp>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f7ff ffac 	bl	8007e08 <__sfp_lock_acquire>
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <__sfp+0x84>)
 8007eb2:	681e      	ldr	r6, [r3, #0]
 8007eb4:	69b3      	ldr	r3, [r6, #24]
 8007eb6:	b913      	cbnz	r3, 8007ebe <__sfp+0x16>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff ffbd 	bl	8007e38 <__sinit>
 8007ebe:	3648      	adds	r6, #72	; 0x48
 8007ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	d503      	bpl.n	8007ed0 <__sfp+0x28>
 8007ec8:	6833      	ldr	r3, [r6, #0]
 8007eca:	b30b      	cbz	r3, 8007f10 <__sfp+0x68>
 8007ecc:	6836      	ldr	r6, [r6, #0]
 8007ece:	e7f7      	b.n	8007ec0 <__sfp+0x18>
 8007ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ed4:	b9d5      	cbnz	r5, 8007f0c <__sfp+0x64>
 8007ed6:	4b16      	ldr	r3, [pc, #88]	; (8007f30 <__sfp+0x88>)
 8007ed8:	60e3      	str	r3, [r4, #12]
 8007eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ede:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee0:	f000 f86c 	bl	8007fbc <__retarget_lock_init_recursive>
 8007ee4:	f7ff ff96 	bl	8007e14 <__sfp_lock_release>
 8007ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ef0:	6025      	str	r5, [r4, #0]
 8007ef2:	61a5      	str	r5, [r4, #24]
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007efc:	f000 f86f 	bl	8007fde <memset>
 8007f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f08:	4620      	mov	r0, r4
 8007f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0c:	3468      	adds	r4, #104	; 0x68
 8007f0e:	e7d9      	b.n	8007ec4 <__sfp+0x1c>
 8007f10:	2104      	movs	r1, #4
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7ff ff62 	bl	8007ddc <__sfmoreglue>
 8007f18:	4604      	mov	r4, r0
 8007f1a:	6030      	str	r0, [r6, #0]
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1d5      	bne.n	8007ecc <__sfp+0x24>
 8007f20:	f7ff ff78 	bl	8007e14 <__sfp_lock_release>
 8007f24:	230c      	movs	r3, #12
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	e7ee      	b.n	8007f08 <__sfp+0x60>
 8007f2a:	bf00      	nop
 8007f2c:	0800af14 	.word	0x0800af14
 8007f30:	ffff0001 	.word	0xffff0001

08007f34 <_fwalk_reent>:
 8007f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	4606      	mov	r6, r0
 8007f3a:	4688      	mov	r8, r1
 8007f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f40:	2700      	movs	r7, #0
 8007f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f46:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4a:	d505      	bpl.n	8007f58 <_fwalk_reent+0x24>
 8007f4c:	6824      	ldr	r4, [r4, #0]
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d1f7      	bne.n	8007f42 <_fwalk_reent+0xe>
 8007f52:	4638      	mov	r0, r7
 8007f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d907      	bls.n	8007f6e <_fwalk_reent+0x3a>
 8007f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f62:	3301      	adds	r3, #1
 8007f64:	d003      	beq.n	8007f6e <_fwalk_reent+0x3a>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4630      	mov	r0, r6
 8007f6a:	47c0      	blx	r8
 8007f6c:	4307      	orrs	r7, r0
 8007f6e:	3568      	adds	r5, #104	; 0x68
 8007f70:	e7e9      	b.n	8007f46 <_fwalk_reent+0x12>
	...

08007f74 <__libc_init_array>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	4d0d      	ldr	r5, [pc, #52]	; (8007fac <__libc_init_array+0x38>)
 8007f78:	4c0d      	ldr	r4, [pc, #52]	; (8007fb0 <__libc_init_array+0x3c>)
 8007f7a:	1b64      	subs	r4, r4, r5
 8007f7c:	10a4      	asrs	r4, r4, #2
 8007f7e:	2600      	movs	r6, #0
 8007f80:	42a6      	cmp	r6, r4
 8007f82:	d109      	bne.n	8007f98 <__libc_init_array+0x24>
 8007f84:	4d0b      	ldr	r5, [pc, #44]	; (8007fb4 <__libc_init_array+0x40>)
 8007f86:	4c0c      	ldr	r4, [pc, #48]	; (8007fb8 <__libc_init_array+0x44>)
 8007f88:	f002 ff04 	bl	800ad94 <_init>
 8007f8c:	1b64      	subs	r4, r4, r5
 8007f8e:	10a4      	asrs	r4, r4, #2
 8007f90:	2600      	movs	r6, #0
 8007f92:	42a6      	cmp	r6, r4
 8007f94:	d105      	bne.n	8007fa2 <__libc_init_array+0x2e>
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9c:	4798      	blx	r3
 8007f9e:	3601      	adds	r6, #1
 8007fa0:	e7ee      	b.n	8007f80 <__libc_init_array+0xc>
 8007fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa6:	4798      	blx	r3
 8007fa8:	3601      	adds	r6, #1
 8007faa:	e7f2      	b.n	8007f92 <__libc_init_array+0x1e>
 8007fac:	0800b2ec 	.word	0x0800b2ec
 8007fb0:	0800b2ec 	.word	0x0800b2ec
 8007fb4:	0800b2ec 	.word	0x0800b2ec
 8007fb8:	0800b2f0 	.word	0x0800b2f0

08007fbc <__retarget_lock_init_recursive>:
 8007fbc:	4770      	bx	lr

08007fbe <__retarget_lock_acquire_recursive>:
 8007fbe:	4770      	bx	lr

08007fc0 <__retarget_lock_release_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <memcpy>:
 8007fc2:	440a      	add	r2, r1
 8007fc4:	4291      	cmp	r1, r2
 8007fc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fca:	d100      	bne.n	8007fce <memcpy+0xc>
 8007fcc:	4770      	bx	lr
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fd8:	4291      	cmp	r1, r2
 8007fda:	d1f9      	bne.n	8007fd0 <memcpy+0xe>
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <memset>:
 8007fde:	4402      	add	r2, r0
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d100      	bne.n	8007fe8 <memset+0xa>
 8007fe6:	4770      	bx	lr
 8007fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fec:	e7f9      	b.n	8007fe2 <memset+0x4>
	...

08007ff0 <sbrk_aligned>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4e0e      	ldr	r6, [pc, #56]	; (800802c <sbrk_aligned+0x3c>)
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	6831      	ldr	r1, [r6, #0]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b911      	cbnz	r1, 8008002 <sbrk_aligned+0x12>
 8007ffc:	f000 f90e 	bl	800821c <_sbrk_r>
 8008000:	6030      	str	r0, [r6, #0]
 8008002:	4621      	mov	r1, r4
 8008004:	4628      	mov	r0, r5
 8008006:	f000 f909 	bl	800821c <_sbrk_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d00a      	beq.n	8008024 <sbrk_aligned+0x34>
 800800e:	1cc4      	adds	r4, r0, #3
 8008010:	f024 0403 	bic.w	r4, r4, #3
 8008014:	42a0      	cmp	r0, r4
 8008016:	d007      	beq.n	8008028 <sbrk_aligned+0x38>
 8008018:	1a21      	subs	r1, r4, r0
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f8fe 	bl	800821c <_sbrk_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d101      	bne.n	8008028 <sbrk_aligned+0x38>
 8008024:	f04f 34ff 	mov.w	r4, #4294967295
 8008028:	4620      	mov	r0, r4
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	20003134 	.word	0x20003134

08008030 <_malloc_r>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	1ccd      	adds	r5, r1, #3
 8008036:	f025 0503 	bic.w	r5, r5, #3
 800803a:	3508      	adds	r5, #8
 800803c:	2d0c      	cmp	r5, #12
 800803e:	bf38      	it	cc
 8008040:	250c      	movcc	r5, #12
 8008042:	2d00      	cmp	r5, #0
 8008044:	4607      	mov	r7, r0
 8008046:	db01      	blt.n	800804c <_malloc_r+0x1c>
 8008048:	42a9      	cmp	r1, r5
 800804a:	d905      	bls.n	8008058 <_malloc_r+0x28>
 800804c:	230c      	movs	r3, #12
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	2600      	movs	r6, #0
 8008052:	4630      	mov	r0, r6
 8008054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008058:	4e2e      	ldr	r6, [pc, #184]	; (8008114 <_malloc_r+0xe4>)
 800805a:	f001 fc73 	bl	8009944 <__malloc_lock>
 800805e:	6833      	ldr	r3, [r6, #0]
 8008060:	461c      	mov	r4, r3
 8008062:	bb34      	cbnz	r4, 80080b2 <_malloc_r+0x82>
 8008064:	4629      	mov	r1, r5
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff ffc2 	bl	8007ff0 <sbrk_aligned>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	4604      	mov	r4, r0
 8008070:	d14d      	bne.n	800810e <_malloc_r+0xde>
 8008072:	6834      	ldr	r4, [r6, #0]
 8008074:	4626      	mov	r6, r4
 8008076:	2e00      	cmp	r6, #0
 8008078:	d140      	bne.n	80080fc <_malloc_r+0xcc>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	4631      	mov	r1, r6
 800807e:	4638      	mov	r0, r7
 8008080:	eb04 0803 	add.w	r8, r4, r3
 8008084:	f000 f8ca 	bl	800821c <_sbrk_r>
 8008088:	4580      	cmp	r8, r0
 800808a:	d13a      	bne.n	8008102 <_malloc_r+0xd2>
 800808c:	6821      	ldr	r1, [r4, #0]
 800808e:	3503      	adds	r5, #3
 8008090:	1a6d      	subs	r5, r5, r1
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	4629      	mov	r1, r5
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ffa5 	bl	8007ff0 <sbrk_aligned>
 80080a6:	3001      	adds	r0, #1
 80080a8:	d02b      	beq.n	8008102 <_malloc_r+0xd2>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	442b      	add	r3, r5
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	e00e      	b.n	80080d0 <_malloc_r+0xa0>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	1b52      	subs	r2, r2, r5
 80080b6:	d41e      	bmi.n	80080f6 <_malloc_r+0xc6>
 80080b8:	2a0b      	cmp	r2, #11
 80080ba:	d916      	bls.n	80080ea <_malloc_r+0xba>
 80080bc:	1961      	adds	r1, r4, r5
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6025      	str	r5, [r4, #0]
 80080c2:	bf18      	it	ne
 80080c4:	6059      	strne	r1, [r3, #4]
 80080c6:	6863      	ldr	r3, [r4, #4]
 80080c8:	bf08      	it	eq
 80080ca:	6031      	streq	r1, [r6, #0]
 80080cc:	5162      	str	r2, [r4, r5]
 80080ce:	604b      	str	r3, [r1, #4]
 80080d0:	4638      	mov	r0, r7
 80080d2:	f104 060b 	add.w	r6, r4, #11
 80080d6:	f001 fc3b 	bl	8009950 <__malloc_unlock>
 80080da:	f026 0607 	bic.w	r6, r6, #7
 80080de:	1d23      	adds	r3, r4, #4
 80080e0:	1af2      	subs	r2, r6, r3
 80080e2:	d0b6      	beq.n	8008052 <_malloc_r+0x22>
 80080e4:	1b9b      	subs	r3, r3, r6
 80080e6:	50a3      	str	r3, [r4, r2]
 80080e8:	e7b3      	b.n	8008052 <_malloc_r+0x22>
 80080ea:	6862      	ldr	r2, [r4, #4]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	bf0c      	ite	eq
 80080f0:	6032      	streq	r2, [r6, #0]
 80080f2:	605a      	strne	r2, [r3, #4]
 80080f4:	e7ec      	b.n	80080d0 <_malloc_r+0xa0>
 80080f6:	4623      	mov	r3, r4
 80080f8:	6864      	ldr	r4, [r4, #4]
 80080fa:	e7b2      	b.n	8008062 <_malloc_r+0x32>
 80080fc:	4634      	mov	r4, r6
 80080fe:	6876      	ldr	r6, [r6, #4]
 8008100:	e7b9      	b.n	8008076 <_malloc_r+0x46>
 8008102:	230c      	movs	r3, #12
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	4638      	mov	r0, r7
 8008108:	f001 fc22 	bl	8009950 <__malloc_unlock>
 800810c:	e7a1      	b.n	8008052 <_malloc_r+0x22>
 800810e:	6025      	str	r5, [r4, #0]
 8008110:	e7de      	b.n	80080d0 <_malloc_r+0xa0>
 8008112:	bf00      	nop
 8008114:	20003130 	.word	0x20003130

08008118 <iprintf>:
 8008118:	b40f      	push	{r0, r1, r2, r3}
 800811a:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <iprintf+0x2c>)
 800811c:	b513      	push	{r0, r1, r4, lr}
 800811e:	681c      	ldr	r4, [r3, #0]
 8008120:	b124      	cbz	r4, 800812c <iprintf+0x14>
 8008122:	69a3      	ldr	r3, [r4, #24]
 8008124:	b913      	cbnz	r3, 800812c <iprintf+0x14>
 8008126:	4620      	mov	r0, r4
 8008128:	f7ff fe86 	bl	8007e38 <__sinit>
 800812c:	ab05      	add	r3, sp, #20
 800812e:	9a04      	ldr	r2, [sp, #16]
 8008130:	68a1      	ldr	r1, [r4, #8]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	4620      	mov	r0, r4
 8008136:	f002 f95f 	bl	800a3f8 <_vfiprintf_r>
 800813a:	b002      	add	sp, #8
 800813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008140:	b004      	add	sp, #16
 8008142:	4770      	bx	lr
 8008144:	20000010 	.word	0x20000010

08008148 <cleanup_glue>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	460c      	mov	r4, r1
 800814c:	6809      	ldr	r1, [r1, #0]
 800814e:	4605      	mov	r5, r0
 8008150:	b109      	cbz	r1, 8008156 <cleanup_glue+0xe>
 8008152:	f7ff fff9 	bl	8008148 <cleanup_glue>
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800815e:	f002 b8d5 	b.w	800a30c <_free_r>
	...

08008164 <_reclaim_reent>:
 8008164:	4b2c      	ldr	r3, [pc, #176]	; (8008218 <_reclaim_reent+0xb4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4283      	cmp	r3, r0
 800816a:	b570      	push	{r4, r5, r6, lr}
 800816c:	4604      	mov	r4, r0
 800816e:	d051      	beq.n	8008214 <_reclaim_reent+0xb0>
 8008170:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008172:	b143      	cbz	r3, 8008186 <_reclaim_reent+0x22>
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d14a      	bne.n	8008210 <_reclaim_reent+0xac>
 800817a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	b111      	cbz	r1, 8008186 <_reclaim_reent+0x22>
 8008180:	4620      	mov	r0, r4
 8008182:	f002 f8c3 	bl	800a30c <_free_r>
 8008186:	6961      	ldr	r1, [r4, #20]
 8008188:	b111      	cbz	r1, 8008190 <_reclaim_reent+0x2c>
 800818a:	4620      	mov	r0, r4
 800818c:	f002 f8be 	bl	800a30c <_free_r>
 8008190:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008192:	b111      	cbz	r1, 800819a <_reclaim_reent+0x36>
 8008194:	4620      	mov	r0, r4
 8008196:	f002 f8b9 	bl	800a30c <_free_r>
 800819a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800819c:	b111      	cbz	r1, 80081a4 <_reclaim_reent+0x40>
 800819e:	4620      	mov	r0, r4
 80081a0:	f002 f8b4 	bl	800a30c <_free_r>
 80081a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80081a6:	b111      	cbz	r1, 80081ae <_reclaim_reent+0x4a>
 80081a8:	4620      	mov	r0, r4
 80081aa:	f002 f8af 	bl	800a30c <_free_r>
 80081ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80081b0:	b111      	cbz	r1, 80081b8 <_reclaim_reent+0x54>
 80081b2:	4620      	mov	r0, r4
 80081b4:	f002 f8aa 	bl	800a30c <_free_r>
 80081b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081ba:	b111      	cbz	r1, 80081c2 <_reclaim_reent+0x5e>
 80081bc:	4620      	mov	r0, r4
 80081be:	f002 f8a5 	bl	800a30c <_free_r>
 80081c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80081c4:	b111      	cbz	r1, 80081cc <_reclaim_reent+0x68>
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 f8a0 	bl	800a30c <_free_r>
 80081cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ce:	b111      	cbz	r1, 80081d6 <_reclaim_reent+0x72>
 80081d0:	4620      	mov	r0, r4
 80081d2:	f002 f89b 	bl	800a30c <_free_r>
 80081d6:	69a3      	ldr	r3, [r4, #24]
 80081d8:	b1e3      	cbz	r3, 8008214 <_reclaim_reent+0xb0>
 80081da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081dc:	4620      	mov	r0, r4
 80081de:	4798      	blx	r3
 80081e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081e2:	b1b9      	cbz	r1, 8008214 <_reclaim_reent+0xb0>
 80081e4:	4620      	mov	r0, r4
 80081e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081ea:	f7ff bfad 	b.w	8008148 <cleanup_glue>
 80081ee:	5949      	ldr	r1, [r1, r5]
 80081f0:	b941      	cbnz	r1, 8008204 <_reclaim_reent+0xa0>
 80081f2:	3504      	adds	r5, #4
 80081f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f6:	2d80      	cmp	r5, #128	; 0x80
 80081f8:	68d9      	ldr	r1, [r3, #12]
 80081fa:	d1f8      	bne.n	80081ee <_reclaim_reent+0x8a>
 80081fc:	4620      	mov	r0, r4
 80081fe:	f002 f885 	bl	800a30c <_free_r>
 8008202:	e7ba      	b.n	800817a <_reclaim_reent+0x16>
 8008204:	680e      	ldr	r6, [r1, #0]
 8008206:	4620      	mov	r0, r4
 8008208:	f002 f880 	bl	800a30c <_free_r>
 800820c:	4631      	mov	r1, r6
 800820e:	e7ef      	b.n	80081f0 <_reclaim_reent+0x8c>
 8008210:	2500      	movs	r5, #0
 8008212:	e7ef      	b.n	80081f4 <_reclaim_reent+0x90>
 8008214:	bd70      	pop	{r4, r5, r6, pc}
 8008216:	bf00      	nop
 8008218:	20000010 	.word	0x20000010

0800821c <_sbrk_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_sbrk_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7f9 fdfc 	bl	8001e24 <_sbrk>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_sbrk_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_sbrk_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20003138 	.word	0x20003138

0800823c <__sread>:
 800823c:	b510      	push	{r4, lr}
 800823e:	460c      	mov	r4, r1
 8008240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008244:	f002 fb9c 	bl	800a980 <_read_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	bfab      	itete	ge
 800824c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800824e:	89a3      	ldrhlt	r3, [r4, #12]
 8008250:	181b      	addge	r3, r3, r0
 8008252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008256:	bfac      	ite	ge
 8008258:	6563      	strge	r3, [r4, #84]	; 0x54
 800825a:	81a3      	strhlt	r3, [r4, #12]
 800825c:	bd10      	pop	{r4, pc}

0800825e <__swrite>:
 800825e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	461f      	mov	r7, r3
 8008264:	898b      	ldrh	r3, [r1, #12]
 8008266:	05db      	lsls	r3, r3, #23
 8008268:	4605      	mov	r5, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4616      	mov	r6, r2
 800826e:	d505      	bpl.n	800827c <__swrite+0x1e>
 8008270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008274:	2302      	movs	r3, #2
 8008276:	2200      	movs	r2, #0
 8008278:	f001 fb40 	bl	80098fc <_lseek_r>
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	4632      	mov	r2, r6
 800828a:	463b      	mov	r3, r7
 800828c:	4628      	mov	r0, r5
 800828e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	f000 bedf 	b.w	8009054 <_write_r>

08008296 <__sseek>:
 8008296:	b510      	push	{r4, lr}
 8008298:	460c      	mov	r4, r1
 800829a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829e:	f001 fb2d 	bl	80098fc <_lseek_r>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	bf15      	itete	ne
 80082a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80082aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082b2:	81a3      	strheq	r3, [r4, #12]
 80082b4:	bf18      	it	ne
 80082b6:	81a3      	strhne	r3, [r4, #12]
 80082b8:	bd10      	pop	{r4, pc}

080082ba <__sclose>:
 80082ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082be:	f000 bedb 	b.w	8009078 <_close_r>

080082c2 <strchr>:
 80082c2:	b2c9      	uxtb	r1, r1
 80082c4:	4603      	mov	r3, r0
 80082c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ca:	b11a      	cbz	r2, 80082d4 <strchr+0x12>
 80082cc:	428a      	cmp	r2, r1
 80082ce:	d1f9      	bne.n	80082c4 <strchr+0x2>
 80082d0:	4618      	mov	r0, r3
 80082d2:	4770      	bx	lr
 80082d4:	2900      	cmp	r1, #0
 80082d6:	bf18      	it	ne
 80082d8:	2300      	movne	r3, #0
 80082da:	e7f9      	b.n	80082d0 <strchr+0xe>

080082dc <sulp>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	4604      	mov	r4, r0
 80082e0:	460d      	mov	r5, r1
 80082e2:	ec45 4b10 	vmov	d0, r4, r5
 80082e6:	4616      	mov	r6, r2
 80082e8:	f001 feaa 	bl	800a040 <__ulp>
 80082ec:	ec51 0b10 	vmov	r0, r1, d0
 80082f0:	b17e      	cbz	r6, 8008312 <sulp+0x36>
 80082f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dd09      	ble.n	8008312 <sulp+0x36>
 80082fe:	051b      	lsls	r3, r3, #20
 8008300:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008304:	2400      	movs	r4, #0
 8008306:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800830a:	4622      	mov	r2, r4
 800830c:	462b      	mov	r3, r5
 800830e:	f7f8 f983 	bl	8000618 <__aeabi_dmul>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	0000      	movs	r0, r0
	...

08008318 <_strtod_l>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	ed2d 8b02 	vpush	{d8}
 8008320:	b09d      	sub	sp, #116	; 0x74
 8008322:	461f      	mov	r7, r3
 8008324:	2300      	movs	r3, #0
 8008326:	9318      	str	r3, [sp, #96]	; 0x60
 8008328:	4ba2      	ldr	r3, [pc, #648]	; (80085b4 <_strtod_l+0x29c>)
 800832a:	9213      	str	r2, [sp, #76]	; 0x4c
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	4604      	mov	r4, r0
 8008332:	4618      	mov	r0, r3
 8008334:	4688      	mov	r8, r1
 8008336:	f7f7 ff55 	bl	80001e4 <strlen>
 800833a:	f04f 0a00 	mov.w	sl, #0
 800833e:	4605      	mov	r5, r0
 8008340:	f04f 0b00 	mov.w	fp, #0
 8008344:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	2a2b      	cmp	r2, #43	; 0x2b
 800834e:	d04e      	beq.n	80083ee <_strtod_l+0xd6>
 8008350:	d83b      	bhi.n	80083ca <_strtod_l+0xb2>
 8008352:	2a0d      	cmp	r2, #13
 8008354:	d834      	bhi.n	80083c0 <_strtod_l+0xa8>
 8008356:	2a08      	cmp	r2, #8
 8008358:	d834      	bhi.n	80083c4 <_strtod_l+0xac>
 800835a:	2a00      	cmp	r2, #0
 800835c:	d03e      	beq.n	80083dc <_strtod_l+0xc4>
 800835e:	2300      	movs	r3, #0
 8008360:	930a      	str	r3, [sp, #40]	; 0x28
 8008362:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008364:	7833      	ldrb	r3, [r6, #0]
 8008366:	2b30      	cmp	r3, #48	; 0x30
 8008368:	f040 80b0 	bne.w	80084cc <_strtod_l+0x1b4>
 800836c:	7873      	ldrb	r3, [r6, #1]
 800836e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008372:	2b58      	cmp	r3, #88	; 0x58
 8008374:	d168      	bne.n	8008448 <_strtod_l+0x130>
 8008376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	ab18      	add	r3, sp, #96	; 0x60
 800837c:	9702      	str	r7, [sp, #8]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4a8d      	ldr	r2, [pc, #564]	; (80085b8 <_strtod_l+0x2a0>)
 8008382:	ab19      	add	r3, sp, #100	; 0x64
 8008384:	a917      	add	r1, sp, #92	; 0x5c
 8008386:	4620      	mov	r0, r4
 8008388:	f000 ffb0 	bl	80092ec <__gethex>
 800838c:	f010 0707 	ands.w	r7, r0, #7
 8008390:	4605      	mov	r5, r0
 8008392:	d005      	beq.n	80083a0 <_strtod_l+0x88>
 8008394:	2f06      	cmp	r7, #6
 8008396:	d12c      	bne.n	80083f2 <_strtod_l+0xda>
 8008398:	3601      	adds	r6, #1
 800839a:	2300      	movs	r3, #0
 800839c:	9617      	str	r6, [sp, #92]	; 0x5c
 800839e:	930a      	str	r3, [sp, #40]	; 0x28
 80083a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f040 8590 	bne.w	8008ec8 <_strtod_l+0xbb0>
 80083a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083aa:	b1eb      	cbz	r3, 80083e8 <_strtod_l+0xd0>
 80083ac:	4652      	mov	r2, sl
 80083ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083b2:	ec43 2b10 	vmov	d0, r2, r3
 80083b6:	b01d      	add	sp, #116	; 0x74
 80083b8:	ecbd 8b02 	vpop	{d8}
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	2a20      	cmp	r2, #32
 80083c2:	d1cc      	bne.n	800835e <_strtod_l+0x46>
 80083c4:	3301      	adds	r3, #1
 80083c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80083c8:	e7be      	b.n	8008348 <_strtod_l+0x30>
 80083ca:	2a2d      	cmp	r2, #45	; 0x2d
 80083cc:	d1c7      	bne.n	800835e <_strtod_l+0x46>
 80083ce:	2201      	movs	r2, #1
 80083d0:	920a      	str	r2, [sp, #40]	; 0x28
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1c2      	bne.n	8008362 <_strtod_l+0x4a>
 80083dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 856e 	bne.w	8008ec4 <_strtod_l+0xbac>
 80083e8:	4652      	mov	r2, sl
 80083ea:	465b      	mov	r3, fp
 80083ec:	e7e1      	b.n	80083b2 <_strtod_l+0x9a>
 80083ee:	2200      	movs	r2, #0
 80083f0:	e7ee      	b.n	80083d0 <_strtod_l+0xb8>
 80083f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083f4:	b13a      	cbz	r2, 8008406 <_strtod_l+0xee>
 80083f6:	2135      	movs	r1, #53	; 0x35
 80083f8:	a81a      	add	r0, sp, #104	; 0x68
 80083fa:	f001 ff2c 	bl	800a256 <__copybits>
 80083fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008400:	4620      	mov	r0, r4
 8008402:	f001 faeb 	bl	80099dc <_Bfree>
 8008406:	3f01      	subs	r7, #1
 8008408:	2f04      	cmp	r7, #4
 800840a:	d806      	bhi.n	800841a <_strtod_l+0x102>
 800840c:	e8df f007 	tbb	[pc, r7]
 8008410:	1714030a 	.word	0x1714030a
 8008414:	0a          	.byte	0x0a
 8008415:	00          	.byte	0x00
 8008416:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800841a:	0728      	lsls	r0, r5, #28
 800841c:	d5c0      	bpl.n	80083a0 <_strtod_l+0x88>
 800841e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008422:	e7bd      	b.n	80083a0 <_strtod_l+0x88>
 8008424:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008428:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800842a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800842e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008432:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008436:	e7f0      	b.n	800841a <_strtod_l+0x102>
 8008438:	f8df b180 	ldr.w	fp, [pc, #384]	; 80085bc <_strtod_l+0x2a4>
 800843c:	e7ed      	b.n	800841a <_strtod_l+0x102>
 800843e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008442:	f04f 3aff 	mov.w	sl, #4294967295
 8008446:	e7e8      	b.n	800841a <_strtod_l+0x102>
 8008448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	9217      	str	r2, [sp, #92]	; 0x5c
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	2b30      	cmp	r3, #48	; 0x30
 8008452:	d0f9      	beq.n	8008448 <_strtod_l+0x130>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d0a3      	beq.n	80083a0 <_strtod_l+0x88>
 8008458:	2301      	movs	r3, #1
 800845a:	f04f 0900 	mov.w	r9, #0
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	f8cd 901c 	str.w	r9, [sp, #28]
 8008468:	464f      	mov	r7, r9
 800846a:	220a      	movs	r2, #10
 800846c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800846e:	7806      	ldrb	r6, [r0, #0]
 8008470:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008474:	b2d9      	uxtb	r1, r3
 8008476:	2909      	cmp	r1, #9
 8008478:	d92a      	bls.n	80084d0 <_strtod_l+0x1b8>
 800847a:	9905      	ldr	r1, [sp, #20]
 800847c:	462a      	mov	r2, r5
 800847e:	f002 fa9b 	bl	800a9b8 <strncmp>
 8008482:	b398      	cbz	r0, 80084ec <_strtod_l+0x1d4>
 8008484:	2000      	movs	r0, #0
 8008486:	4632      	mov	r2, r6
 8008488:	463d      	mov	r5, r7
 800848a:	9005      	str	r0, [sp, #20]
 800848c:	4603      	mov	r3, r0
 800848e:	2a65      	cmp	r2, #101	; 0x65
 8008490:	d001      	beq.n	8008496 <_strtod_l+0x17e>
 8008492:	2a45      	cmp	r2, #69	; 0x45
 8008494:	d118      	bne.n	80084c8 <_strtod_l+0x1b0>
 8008496:	b91d      	cbnz	r5, 80084a0 <_strtod_l+0x188>
 8008498:	9a04      	ldr	r2, [sp, #16]
 800849a:	4302      	orrs	r2, r0
 800849c:	d09e      	beq.n	80083dc <_strtod_l+0xc4>
 800849e:	2500      	movs	r5, #0
 80084a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80084a4:	f108 0201 	add.w	r2, r8, #1
 80084a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80084aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80084ae:	2a2b      	cmp	r2, #43	; 0x2b
 80084b0:	d075      	beq.n	800859e <_strtod_l+0x286>
 80084b2:	2a2d      	cmp	r2, #45	; 0x2d
 80084b4:	d07b      	beq.n	80085ae <_strtod_l+0x296>
 80084b6:	f04f 0c00 	mov.w	ip, #0
 80084ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80084be:	2909      	cmp	r1, #9
 80084c0:	f240 8082 	bls.w	80085c8 <_strtod_l+0x2b0>
 80084c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084c8:	2600      	movs	r6, #0
 80084ca:	e09d      	b.n	8008608 <_strtod_l+0x2f0>
 80084cc:	2300      	movs	r3, #0
 80084ce:	e7c4      	b.n	800845a <_strtod_l+0x142>
 80084d0:	2f08      	cmp	r7, #8
 80084d2:	bfd8      	it	le
 80084d4:	9907      	ldrle	r1, [sp, #28]
 80084d6:	f100 0001 	add.w	r0, r0, #1
 80084da:	bfda      	itte	le
 80084dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80084e0:	9307      	strle	r3, [sp, #28]
 80084e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80084e6:	3701      	adds	r7, #1
 80084e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80084ea:	e7bf      	b.n	800846c <_strtod_l+0x154>
 80084ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084ee:	195a      	adds	r2, r3, r5
 80084f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80084f2:	5d5a      	ldrb	r2, [r3, r5]
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	d037      	beq.n	8008568 <_strtod_l+0x250>
 80084f8:	9005      	str	r0, [sp, #20]
 80084fa:	463d      	mov	r5, r7
 80084fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008500:	2b09      	cmp	r3, #9
 8008502:	d912      	bls.n	800852a <_strtod_l+0x212>
 8008504:	2301      	movs	r3, #1
 8008506:	e7c2      	b.n	800848e <_strtod_l+0x176>
 8008508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	9217      	str	r2, [sp, #92]	; 0x5c
 800850e:	785a      	ldrb	r2, [r3, #1]
 8008510:	3001      	adds	r0, #1
 8008512:	2a30      	cmp	r2, #48	; 0x30
 8008514:	d0f8      	beq.n	8008508 <_strtod_l+0x1f0>
 8008516:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800851a:	2b08      	cmp	r3, #8
 800851c:	f200 84d9 	bhi.w	8008ed2 <_strtod_l+0xbba>
 8008520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008522:	9005      	str	r0, [sp, #20]
 8008524:	2000      	movs	r0, #0
 8008526:	9308      	str	r3, [sp, #32]
 8008528:	4605      	mov	r5, r0
 800852a:	3a30      	subs	r2, #48	; 0x30
 800852c:	f100 0301 	add.w	r3, r0, #1
 8008530:	d014      	beq.n	800855c <_strtod_l+0x244>
 8008532:	9905      	ldr	r1, [sp, #20]
 8008534:	4419      	add	r1, r3
 8008536:	9105      	str	r1, [sp, #20]
 8008538:	462b      	mov	r3, r5
 800853a:	eb00 0e05 	add.w	lr, r0, r5
 800853e:	210a      	movs	r1, #10
 8008540:	4573      	cmp	r3, lr
 8008542:	d113      	bne.n	800856c <_strtod_l+0x254>
 8008544:	182b      	adds	r3, r5, r0
 8008546:	2b08      	cmp	r3, #8
 8008548:	f105 0501 	add.w	r5, r5, #1
 800854c:	4405      	add	r5, r0
 800854e:	dc1c      	bgt.n	800858a <_strtod_l+0x272>
 8008550:	9907      	ldr	r1, [sp, #28]
 8008552:	230a      	movs	r3, #10
 8008554:	fb03 2301 	mla	r3, r3, r1, r2
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	2300      	movs	r3, #0
 800855c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800855e:	1c51      	adds	r1, r2, #1
 8008560:	9117      	str	r1, [sp, #92]	; 0x5c
 8008562:	7852      	ldrb	r2, [r2, #1]
 8008564:	4618      	mov	r0, r3
 8008566:	e7c9      	b.n	80084fc <_strtod_l+0x1e4>
 8008568:	4638      	mov	r0, r7
 800856a:	e7d2      	b.n	8008512 <_strtod_l+0x1fa>
 800856c:	2b08      	cmp	r3, #8
 800856e:	dc04      	bgt.n	800857a <_strtod_l+0x262>
 8008570:	9e07      	ldr	r6, [sp, #28]
 8008572:	434e      	muls	r6, r1
 8008574:	9607      	str	r6, [sp, #28]
 8008576:	3301      	adds	r3, #1
 8008578:	e7e2      	b.n	8008540 <_strtod_l+0x228>
 800857a:	f103 0c01 	add.w	ip, r3, #1
 800857e:	f1bc 0f10 	cmp.w	ip, #16
 8008582:	bfd8      	it	le
 8008584:	fb01 f909 	mulle.w	r9, r1, r9
 8008588:	e7f5      	b.n	8008576 <_strtod_l+0x25e>
 800858a:	2d10      	cmp	r5, #16
 800858c:	bfdc      	itt	le
 800858e:	230a      	movle	r3, #10
 8008590:	fb03 2909 	mlale	r9, r3, r9, r2
 8008594:	e7e1      	b.n	800855a <_strtod_l+0x242>
 8008596:	2300      	movs	r3, #0
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	2301      	movs	r3, #1
 800859c:	e77c      	b.n	8008498 <_strtod_l+0x180>
 800859e:	f04f 0c00 	mov.w	ip, #0
 80085a2:	f108 0202 	add.w	r2, r8, #2
 80085a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80085a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80085ac:	e785      	b.n	80084ba <_strtod_l+0x1a2>
 80085ae:	f04f 0c01 	mov.w	ip, #1
 80085b2:	e7f6      	b.n	80085a2 <_strtod_l+0x28a>
 80085b4:	0800b0f0 	.word	0x0800b0f0
 80085b8:	0800af24 	.word	0x0800af24
 80085bc:	7ff00000 	.word	0x7ff00000
 80085c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085c2:	1c51      	adds	r1, r2, #1
 80085c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80085c6:	7852      	ldrb	r2, [r2, #1]
 80085c8:	2a30      	cmp	r2, #48	; 0x30
 80085ca:	d0f9      	beq.n	80085c0 <_strtod_l+0x2a8>
 80085cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80085d0:	2908      	cmp	r1, #8
 80085d2:	f63f af79 	bhi.w	80084c8 <_strtod_l+0x1b0>
 80085d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80085da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085dc:	9206      	str	r2, [sp, #24]
 80085de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085e0:	1c51      	adds	r1, r2, #1
 80085e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80085e4:	7852      	ldrb	r2, [r2, #1]
 80085e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80085ea:	2e09      	cmp	r6, #9
 80085ec:	d937      	bls.n	800865e <_strtod_l+0x346>
 80085ee:	9e06      	ldr	r6, [sp, #24]
 80085f0:	1b89      	subs	r1, r1, r6
 80085f2:	2908      	cmp	r1, #8
 80085f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80085f8:	dc02      	bgt.n	8008600 <_strtod_l+0x2e8>
 80085fa:	4576      	cmp	r6, lr
 80085fc:	bfa8      	it	ge
 80085fe:	4676      	movge	r6, lr
 8008600:	f1bc 0f00 	cmp.w	ip, #0
 8008604:	d000      	beq.n	8008608 <_strtod_l+0x2f0>
 8008606:	4276      	negs	r6, r6
 8008608:	2d00      	cmp	r5, #0
 800860a:	d14d      	bne.n	80086a8 <_strtod_l+0x390>
 800860c:	9904      	ldr	r1, [sp, #16]
 800860e:	4301      	orrs	r1, r0
 8008610:	f47f aec6 	bne.w	80083a0 <_strtod_l+0x88>
 8008614:	2b00      	cmp	r3, #0
 8008616:	f47f aee1 	bne.w	80083dc <_strtod_l+0xc4>
 800861a:	2a69      	cmp	r2, #105	; 0x69
 800861c:	d027      	beq.n	800866e <_strtod_l+0x356>
 800861e:	dc24      	bgt.n	800866a <_strtod_l+0x352>
 8008620:	2a49      	cmp	r2, #73	; 0x49
 8008622:	d024      	beq.n	800866e <_strtod_l+0x356>
 8008624:	2a4e      	cmp	r2, #78	; 0x4e
 8008626:	f47f aed9 	bne.w	80083dc <_strtod_l+0xc4>
 800862a:	499f      	ldr	r1, [pc, #636]	; (80088a8 <_strtod_l+0x590>)
 800862c:	a817      	add	r0, sp, #92	; 0x5c
 800862e:	f001 f8b5 	bl	800979c <__match>
 8008632:	2800      	cmp	r0, #0
 8008634:	f43f aed2 	beq.w	80083dc <_strtod_l+0xc4>
 8008638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b28      	cmp	r3, #40	; 0x28
 800863e:	d12d      	bne.n	800869c <_strtod_l+0x384>
 8008640:	499a      	ldr	r1, [pc, #616]	; (80088ac <_strtod_l+0x594>)
 8008642:	aa1a      	add	r2, sp, #104	; 0x68
 8008644:	a817      	add	r0, sp, #92	; 0x5c
 8008646:	f001 f8bd 	bl	80097c4 <__hexnan>
 800864a:	2805      	cmp	r0, #5
 800864c:	d126      	bne.n	800869c <_strtod_l+0x384>
 800864e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008650:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008654:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008658:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800865c:	e6a0      	b.n	80083a0 <_strtod_l+0x88>
 800865e:	210a      	movs	r1, #10
 8008660:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008664:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008668:	e7b9      	b.n	80085de <_strtod_l+0x2c6>
 800866a:	2a6e      	cmp	r2, #110	; 0x6e
 800866c:	e7db      	b.n	8008626 <_strtod_l+0x30e>
 800866e:	4990      	ldr	r1, [pc, #576]	; (80088b0 <_strtod_l+0x598>)
 8008670:	a817      	add	r0, sp, #92	; 0x5c
 8008672:	f001 f893 	bl	800979c <__match>
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aeb0 	beq.w	80083dc <_strtod_l+0xc4>
 800867c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800867e:	498d      	ldr	r1, [pc, #564]	; (80088b4 <_strtod_l+0x59c>)
 8008680:	3b01      	subs	r3, #1
 8008682:	a817      	add	r0, sp, #92	; 0x5c
 8008684:	9317      	str	r3, [sp, #92]	; 0x5c
 8008686:	f001 f889 	bl	800979c <__match>
 800868a:	b910      	cbnz	r0, 8008692 <_strtod_l+0x37a>
 800868c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800868e:	3301      	adds	r3, #1
 8008690:	9317      	str	r3, [sp, #92]	; 0x5c
 8008692:	f8df b230 	ldr.w	fp, [pc, #560]	; 80088c4 <_strtod_l+0x5ac>
 8008696:	f04f 0a00 	mov.w	sl, #0
 800869a:	e681      	b.n	80083a0 <_strtod_l+0x88>
 800869c:	4886      	ldr	r0, [pc, #536]	; (80088b8 <_strtod_l+0x5a0>)
 800869e:	f002 f983 	bl	800a9a8 <nan>
 80086a2:	ec5b ab10 	vmov	sl, fp, d0
 80086a6:	e67b      	b.n	80083a0 <_strtod_l+0x88>
 80086a8:	9b05      	ldr	r3, [sp, #20]
 80086aa:	9807      	ldr	r0, [sp, #28]
 80086ac:	1af3      	subs	r3, r6, r3
 80086ae:	2f00      	cmp	r7, #0
 80086b0:	bf08      	it	eq
 80086b2:	462f      	moveq	r7, r5
 80086b4:	2d10      	cmp	r5, #16
 80086b6:	9306      	str	r3, [sp, #24]
 80086b8:	46a8      	mov	r8, r5
 80086ba:	bfa8      	it	ge
 80086bc:	f04f 0810 	movge.w	r8, #16
 80086c0:	f7f7 ff30 	bl	8000524 <__aeabi_ui2d>
 80086c4:	2d09      	cmp	r5, #9
 80086c6:	4682      	mov	sl, r0
 80086c8:	468b      	mov	fp, r1
 80086ca:	dd13      	ble.n	80086f4 <_strtod_l+0x3dc>
 80086cc:	4b7b      	ldr	r3, [pc, #492]	; (80088bc <_strtod_l+0x5a4>)
 80086ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80086d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80086d6:	f7f7 ff9f 	bl	8000618 <__aeabi_dmul>
 80086da:	4682      	mov	sl, r0
 80086dc:	4648      	mov	r0, r9
 80086de:	468b      	mov	fp, r1
 80086e0:	f7f7 ff20 	bl	8000524 <__aeabi_ui2d>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	f7f7 fdde 	bl	80002ac <__adddf3>
 80086f0:	4682      	mov	sl, r0
 80086f2:	468b      	mov	fp, r1
 80086f4:	2d0f      	cmp	r5, #15
 80086f6:	dc38      	bgt.n	800876a <_strtod_l+0x452>
 80086f8:	9b06      	ldr	r3, [sp, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f43f ae50 	beq.w	80083a0 <_strtod_l+0x88>
 8008700:	dd24      	ble.n	800874c <_strtod_l+0x434>
 8008702:	2b16      	cmp	r3, #22
 8008704:	dc0b      	bgt.n	800871e <_strtod_l+0x406>
 8008706:	496d      	ldr	r1, [pc, #436]	; (80088bc <_strtod_l+0x5a4>)
 8008708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800870c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008710:	4652      	mov	r2, sl
 8008712:	465b      	mov	r3, fp
 8008714:	f7f7 ff80 	bl	8000618 <__aeabi_dmul>
 8008718:	4682      	mov	sl, r0
 800871a:	468b      	mov	fp, r1
 800871c:	e640      	b.n	80083a0 <_strtod_l+0x88>
 800871e:	9a06      	ldr	r2, [sp, #24]
 8008720:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008724:	4293      	cmp	r3, r2
 8008726:	db20      	blt.n	800876a <_strtod_l+0x452>
 8008728:	4c64      	ldr	r4, [pc, #400]	; (80088bc <_strtod_l+0x5a4>)
 800872a:	f1c5 050f 	rsb	r5, r5, #15
 800872e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008732:	4652      	mov	r2, sl
 8008734:	465b      	mov	r3, fp
 8008736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800873a:	f7f7 ff6d 	bl	8000618 <__aeabi_dmul>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	1b5d      	subs	r5, r3, r5
 8008742:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008746:	e9d4 2300 	ldrd	r2, r3, [r4]
 800874a:	e7e3      	b.n	8008714 <_strtod_l+0x3fc>
 800874c:	9b06      	ldr	r3, [sp, #24]
 800874e:	3316      	adds	r3, #22
 8008750:	db0b      	blt.n	800876a <_strtod_l+0x452>
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	1b9e      	subs	r6, r3, r6
 8008756:	4b59      	ldr	r3, [pc, #356]	; (80088bc <_strtod_l+0x5a4>)
 8008758:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800875c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008760:	4650      	mov	r0, sl
 8008762:	4659      	mov	r1, fp
 8008764:	f7f8 f882 	bl	800086c <__aeabi_ddiv>
 8008768:	e7d6      	b.n	8008718 <_strtod_l+0x400>
 800876a:	9b06      	ldr	r3, [sp, #24]
 800876c:	eba5 0808 	sub.w	r8, r5, r8
 8008770:	4498      	add	r8, r3
 8008772:	f1b8 0f00 	cmp.w	r8, #0
 8008776:	dd74      	ble.n	8008862 <_strtod_l+0x54a>
 8008778:	f018 030f 	ands.w	r3, r8, #15
 800877c:	d00a      	beq.n	8008794 <_strtod_l+0x47c>
 800877e:	494f      	ldr	r1, [pc, #316]	; (80088bc <_strtod_l+0x5a4>)
 8008780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008784:	4652      	mov	r2, sl
 8008786:	465b      	mov	r3, fp
 8008788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878c:	f7f7 ff44 	bl	8000618 <__aeabi_dmul>
 8008790:	4682      	mov	sl, r0
 8008792:	468b      	mov	fp, r1
 8008794:	f038 080f 	bics.w	r8, r8, #15
 8008798:	d04f      	beq.n	800883a <_strtod_l+0x522>
 800879a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800879e:	dd22      	ble.n	80087e6 <_strtod_l+0x4ce>
 80087a0:	2500      	movs	r5, #0
 80087a2:	462e      	mov	r6, r5
 80087a4:	9507      	str	r5, [sp, #28]
 80087a6:	9505      	str	r5, [sp, #20]
 80087a8:	2322      	movs	r3, #34	; 0x22
 80087aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80088c4 <_strtod_l+0x5ac>
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f43f adf2 	beq.w	80083a0 <_strtod_l+0x88>
 80087bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087be:	4620      	mov	r0, r4
 80087c0:	f001 f90c 	bl	80099dc <_Bfree>
 80087c4:	9905      	ldr	r1, [sp, #20]
 80087c6:	4620      	mov	r0, r4
 80087c8:	f001 f908 	bl	80099dc <_Bfree>
 80087cc:	4631      	mov	r1, r6
 80087ce:	4620      	mov	r0, r4
 80087d0:	f001 f904 	bl	80099dc <_Bfree>
 80087d4:	9907      	ldr	r1, [sp, #28]
 80087d6:	4620      	mov	r0, r4
 80087d8:	f001 f900 	bl	80099dc <_Bfree>
 80087dc:	4629      	mov	r1, r5
 80087de:	4620      	mov	r0, r4
 80087e0:	f001 f8fc 	bl	80099dc <_Bfree>
 80087e4:	e5dc      	b.n	80083a0 <_strtod_l+0x88>
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <_strtod_l+0x5a8>)
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	2300      	movs	r3, #0
 80087ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	4699      	mov	r9, r3
 80087f6:	f1b8 0f01 	cmp.w	r8, #1
 80087fa:	dc21      	bgt.n	8008840 <_strtod_l+0x528>
 80087fc:	b10b      	cbz	r3, 8008802 <_strtod_l+0x4ea>
 80087fe:	4682      	mov	sl, r0
 8008800:	468b      	mov	fp, r1
 8008802:	4b2f      	ldr	r3, [pc, #188]	; (80088c0 <_strtod_l+0x5a8>)
 8008804:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008808:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800880c:	4652      	mov	r2, sl
 800880e:	465b      	mov	r3, fp
 8008810:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008814:	f7f7 ff00 	bl	8000618 <__aeabi_dmul>
 8008818:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <_strtod_l+0x5ac>)
 800881a:	460a      	mov	r2, r1
 800881c:	400b      	ands	r3, r1
 800881e:	492a      	ldr	r1, [pc, #168]	; (80088c8 <_strtod_l+0x5b0>)
 8008820:	428b      	cmp	r3, r1
 8008822:	4682      	mov	sl, r0
 8008824:	d8bc      	bhi.n	80087a0 <_strtod_l+0x488>
 8008826:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800882a:	428b      	cmp	r3, r1
 800882c:	bf86      	itte	hi
 800882e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80088cc <_strtod_l+0x5b4>
 8008832:	f04f 3aff 	movhi.w	sl, #4294967295
 8008836:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800883a:	2300      	movs	r3, #0
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	e084      	b.n	800894a <_strtod_l+0x632>
 8008840:	f018 0f01 	tst.w	r8, #1
 8008844:	d005      	beq.n	8008852 <_strtod_l+0x53a>
 8008846:	9b04      	ldr	r3, [sp, #16]
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f7 fee4 	bl	8000618 <__aeabi_dmul>
 8008850:	2301      	movs	r3, #1
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	3208      	adds	r2, #8
 8008856:	f109 0901 	add.w	r9, r9, #1
 800885a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800885e:	9204      	str	r2, [sp, #16]
 8008860:	e7c9      	b.n	80087f6 <_strtod_l+0x4de>
 8008862:	d0ea      	beq.n	800883a <_strtod_l+0x522>
 8008864:	f1c8 0800 	rsb	r8, r8, #0
 8008868:	f018 020f 	ands.w	r2, r8, #15
 800886c:	d00a      	beq.n	8008884 <_strtod_l+0x56c>
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <_strtod_l+0x5a4>)
 8008870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008874:	4650      	mov	r0, sl
 8008876:	4659      	mov	r1, fp
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fff6 	bl	800086c <__aeabi_ddiv>
 8008880:	4682      	mov	sl, r0
 8008882:	468b      	mov	fp, r1
 8008884:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008888:	d0d7      	beq.n	800883a <_strtod_l+0x522>
 800888a:	f1b8 0f1f 	cmp.w	r8, #31
 800888e:	dd1f      	ble.n	80088d0 <_strtod_l+0x5b8>
 8008890:	2500      	movs	r5, #0
 8008892:	462e      	mov	r6, r5
 8008894:	9507      	str	r5, [sp, #28]
 8008896:	9505      	str	r5, [sp, #20]
 8008898:	2322      	movs	r3, #34	; 0x22
 800889a:	f04f 0a00 	mov.w	sl, #0
 800889e:	f04f 0b00 	mov.w	fp, #0
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	e786      	b.n	80087b4 <_strtod_l+0x49c>
 80088a6:	bf00      	nop
 80088a8:	0800af21 	.word	0x0800af21
 80088ac:	0800af38 	.word	0x0800af38
 80088b0:	0800af18 	.word	0x0800af18
 80088b4:	0800af1b 	.word	0x0800af1b
 80088b8:	0800b2e2 	.word	0x0800b2e2
 80088bc:	0800b1a0 	.word	0x0800b1a0
 80088c0:	0800b178 	.word	0x0800b178
 80088c4:	7ff00000 	.word	0x7ff00000
 80088c8:	7ca00000 	.word	0x7ca00000
 80088cc:	7fefffff 	.word	0x7fefffff
 80088d0:	f018 0310 	ands.w	r3, r8, #16
 80088d4:	bf18      	it	ne
 80088d6:	236a      	movne	r3, #106	; 0x6a
 80088d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008c88 <_strtod_l+0x970>
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	4650      	mov	r0, sl
 80088e0:	4659      	mov	r1, fp
 80088e2:	2300      	movs	r3, #0
 80088e4:	f018 0f01 	tst.w	r8, #1
 80088e8:	d004      	beq.n	80088f4 <_strtod_l+0x5dc>
 80088ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80088ee:	f7f7 fe93 	bl	8000618 <__aeabi_dmul>
 80088f2:	2301      	movs	r3, #1
 80088f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80088f8:	f109 0908 	add.w	r9, r9, #8
 80088fc:	d1f2      	bne.n	80088e4 <_strtod_l+0x5cc>
 80088fe:	b10b      	cbz	r3, 8008904 <_strtod_l+0x5ec>
 8008900:	4682      	mov	sl, r0
 8008902:	468b      	mov	fp, r1
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	b1c3      	cbz	r3, 800893a <_strtod_l+0x622>
 8008908:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800890c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008910:	2b00      	cmp	r3, #0
 8008912:	4659      	mov	r1, fp
 8008914:	dd11      	ble.n	800893a <_strtod_l+0x622>
 8008916:	2b1f      	cmp	r3, #31
 8008918:	f340 8124 	ble.w	8008b64 <_strtod_l+0x84c>
 800891c:	2b34      	cmp	r3, #52	; 0x34
 800891e:	bfde      	ittt	le
 8008920:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008924:	f04f 33ff 	movle.w	r3, #4294967295
 8008928:	fa03 f202 	lslle.w	r2, r3, r2
 800892c:	f04f 0a00 	mov.w	sl, #0
 8008930:	bfcc      	ite	gt
 8008932:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008936:	ea02 0b01 	andle.w	fp, r2, r1
 800893a:	2200      	movs	r2, #0
 800893c:	2300      	movs	r3, #0
 800893e:	4650      	mov	r0, sl
 8008940:	4659      	mov	r1, fp
 8008942:	f7f8 f8d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008946:	2800      	cmp	r0, #0
 8008948:	d1a2      	bne.n	8008890 <_strtod_l+0x578>
 800894a:	9b07      	ldr	r3, [sp, #28]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	9908      	ldr	r1, [sp, #32]
 8008950:	462b      	mov	r3, r5
 8008952:	463a      	mov	r2, r7
 8008954:	4620      	mov	r0, r4
 8008956:	f001 f8a9 	bl	8009aac <__s2b>
 800895a:	9007      	str	r0, [sp, #28]
 800895c:	2800      	cmp	r0, #0
 800895e:	f43f af1f 	beq.w	80087a0 <_strtod_l+0x488>
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	1b9e      	subs	r6, r3, r6
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfb4      	ite	lt
 800896c:	4633      	movlt	r3, r6
 800896e:	2300      	movge	r3, #0
 8008970:	930c      	str	r3, [sp, #48]	; 0x30
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2500      	movs	r5, #0
 8008976:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800897a:	9312      	str	r3, [sp, #72]	; 0x48
 800897c:	462e      	mov	r6, r5
 800897e:	9b07      	ldr	r3, [sp, #28]
 8008980:	4620      	mov	r0, r4
 8008982:	6859      	ldr	r1, [r3, #4]
 8008984:	f000 ffea 	bl	800995c <_Balloc>
 8008988:	9005      	str	r0, [sp, #20]
 800898a:	2800      	cmp	r0, #0
 800898c:	f43f af0c 	beq.w	80087a8 <_strtod_l+0x490>
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	3202      	adds	r2, #2
 8008996:	f103 010c 	add.w	r1, r3, #12
 800899a:	0092      	lsls	r2, r2, #2
 800899c:	300c      	adds	r0, #12
 800899e:	f7ff fb10 	bl	8007fc2 <memcpy>
 80089a2:	ec4b ab10 	vmov	d0, sl, fp
 80089a6:	aa1a      	add	r2, sp, #104	; 0x68
 80089a8:	a919      	add	r1, sp, #100	; 0x64
 80089aa:	4620      	mov	r0, r4
 80089ac:	f001 fbc4 	bl	800a138 <__d2b>
 80089b0:	ec4b ab18 	vmov	d8, sl, fp
 80089b4:	9018      	str	r0, [sp, #96]	; 0x60
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f aef6 	beq.w	80087a8 <_strtod_l+0x490>
 80089bc:	2101      	movs	r1, #1
 80089be:	4620      	mov	r0, r4
 80089c0:	f001 f90e 	bl	8009be0 <__i2b>
 80089c4:	4606      	mov	r6, r0
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f aeee 	beq.w	80087a8 <_strtod_l+0x490>
 80089cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089ce:	9904      	ldr	r1, [sp, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfab      	itete	ge
 80089d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80089d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80089d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80089da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80089de:	bfac      	ite	ge
 80089e0:	eb03 0902 	addge.w	r9, r3, r2
 80089e4:	1ad7      	sublt	r7, r2, r3
 80089e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80089e8:	eba3 0801 	sub.w	r8, r3, r1
 80089ec:	4490      	add	r8, r2
 80089ee:	4ba1      	ldr	r3, [pc, #644]	; (8008c74 <_strtod_l+0x95c>)
 80089f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80089f4:	4598      	cmp	r8, r3
 80089f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089fa:	f280 80c7 	bge.w	8008b8c <_strtod_l+0x874>
 80089fe:	eba3 0308 	sub.w	r3, r3, r8
 8008a02:	2b1f      	cmp	r3, #31
 8008a04:	eba2 0203 	sub.w	r2, r2, r3
 8008a08:	f04f 0101 	mov.w	r1, #1
 8008a0c:	f300 80b1 	bgt.w	8008b72 <_strtod_l+0x85a>
 8008a10:	fa01 f303 	lsl.w	r3, r1, r3
 8008a14:	930d      	str	r3, [sp, #52]	; 0x34
 8008a16:	2300      	movs	r3, #0
 8008a18:	9308      	str	r3, [sp, #32]
 8008a1a:	eb09 0802 	add.w	r8, r9, r2
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	45c1      	cmp	r9, r8
 8008a22:	4417      	add	r7, r2
 8008a24:	441f      	add	r7, r3
 8008a26:	464b      	mov	r3, r9
 8008a28:	bfa8      	it	ge
 8008a2a:	4643      	movge	r3, r8
 8008a2c:	42bb      	cmp	r3, r7
 8008a2e:	bfa8      	it	ge
 8008a30:	463b      	movge	r3, r7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfc2      	ittt	gt
 8008a36:	eba8 0803 	subgt.w	r8, r8, r3
 8008a3a:	1aff      	subgt	r7, r7, r3
 8008a3c:	eba9 0903 	subgt.w	r9, r9, r3
 8008a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd17      	ble.n	8008a76 <_strtod_l+0x75e>
 8008a46:	4631      	mov	r1, r6
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 f988 	bl	8009d60 <__pow5mult>
 8008a50:	4606      	mov	r6, r0
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f43f aea8 	beq.w	80087a8 <_strtod_l+0x490>
 8008a58:	4601      	mov	r1, r0
 8008a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f001 f8d5 	bl	8009c0c <__multiply>
 8008a62:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f43f ae9f 	beq.w	80087a8 <_strtod_l+0x490>
 8008a6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 ffb5 	bl	80099dc <_Bfree>
 8008a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a74:	9318      	str	r3, [sp, #96]	; 0x60
 8008a76:	f1b8 0f00 	cmp.w	r8, #0
 8008a7a:	f300 808c 	bgt.w	8008b96 <_strtod_l+0x87e>
 8008a7e:	9b06      	ldr	r3, [sp, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dd08      	ble.n	8008a96 <_strtod_l+0x77e>
 8008a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a86:	9905      	ldr	r1, [sp, #20]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f001 f969 	bl	8009d60 <__pow5mult>
 8008a8e:	9005      	str	r0, [sp, #20]
 8008a90:	2800      	cmp	r0, #0
 8008a92:	f43f ae89 	beq.w	80087a8 <_strtod_l+0x490>
 8008a96:	2f00      	cmp	r7, #0
 8008a98:	dd08      	ble.n	8008aac <_strtod_l+0x794>
 8008a9a:	9905      	ldr	r1, [sp, #20]
 8008a9c:	463a      	mov	r2, r7
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f001 f9b8 	bl	8009e14 <__lshift>
 8008aa4:	9005      	str	r0, [sp, #20]
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f ae7e 	beq.w	80087a8 <_strtod_l+0x490>
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	dd08      	ble.n	8008ac4 <_strtod_l+0x7ac>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	464a      	mov	r2, r9
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f001 f9ac 	bl	8009e14 <__lshift>
 8008abc:	4606      	mov	r6, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f ae72 	beq.w	80087a8 <_strtod_l+0x490>
 8008ac4:	9a05      	ldr	r2, [sp, #20]
 8008ac6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f001 fa2f 	bl	8009f2c <__mdiff>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f43f ae69 	beq.w	80087a8 <_strtod_l+0x490>
 8008ad6:	68c3      	ldr	r3, [r0, #12]
 8008ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ada:	2300      	movs	r3, #0
 8008adc:	60c3      	str	r3, [r0, #12]
 8008ade:	4631      	mov	r1, r6
 8008ae0:	f001 fa08 	bl	8009ef4 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	da60      	bge.n	8008baa <_strtod_l+0x892>
 8008ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aea:	ea53 030a 	orrs.w	r3, r3, sl
 8008aee:	f040 8082 	bne.w	8008bf6 <_strtod_l+0x8de>
 8008af2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d17d      	bne.n	8008bf6 <_strtod_l+0x8de>
 8008afa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008afe:	0d1b      	lsrs	r3, r3, #20
 8008b00:	051b      	lsls	r3, r3, #20
 8008b02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b06:	d976      	bls.n	8008bf6 <_strtod_l+0x8de>
 8008b08:	696b      	ldr	r3, [r5, #20]
 8008b0a:	b913      	cbnz	r3, 8008b12 <_strtod_l+0x7fa>
 8008b0c:	692b      	ldr	r3, [r5, #16]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	dd71      	ble.n	8008bf6 <_strtod_l+0x8de>
 8008b12:	4629      	mov	r1, r5
 8008b14:	2201      	movs	r2, #1
 8008b16:	4620      	mov	r0, r4
 8008b18:	f001 f97c 	bl	8009e14 <__lshift>
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f001 f9e8 	bl	8009ef4 <__mcmp>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	dd66      	ble.n	8008bf6 <_strtod_l+0x8de>
 8008b28:	9904      	ldr	r1, [sp, #16]
 8008b2a:	4a53      	ldr	r2, [pc, #332]	; (8008c78 <_strtod_l+0x960>)
 8008b2c:	465b      	mov	r3, fp
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	f000 8081 	beq.w	8008c36 <_strtod_l+0x91e>
 8008b34:	ea02 010b 	and.w	r1, r2, fp
 8008b38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b3c:	dc7b      	bgt.n	8008c36 <_strtod_l+0x91e>
 8008b3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b42:	f77f aea9 	ble.w	8008898 <_strtod_l+0x580>
 8008b46:	4b4d      	ldr	r3, [pc, #308]	; (8008c7c <_strtod_l+0x964>)
 8008b48:	4650      	mov	r0, sl
 8008b4a:	4659      	mov	r1, fp
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f7f7 fd63 	bl	8000618 <__aeabi_dmul>
 8008b52:	460b      	mov	r3, r1
 8008b54:	4303      	orrs	r3, r0
 8008b56:	bf08      	it	eq
 8008b58:	2322      	moveq	r3, #34	; 0x22
 8008b5a:	4682      	mov	sl, r0
 8008b5c:	468b      	mov	fp, r1
 8008b5e:	bf08      	it	eq
 8008b60:	6023      	streq	r3, [r4, #0]
 8008b62:	e62b      	b.n	80087bc <_strtod_l+0x4a4>
 8008b64:	f04f 32ff 	mov.w	r2, #4294967295
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	ea03 0a0a 	and.w	sl, r3, sl
 8008b70:	e6e3      	b.n	800893a <_strtod_l+0x622>
 8008b72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008b76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008b7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008b7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008b82:	fa01 f308 	lsl.w	r3, r1, r8
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	910d      	str	r1, [sp, #52]	; 0x34
 8008b8a:	e746      	b.n	8008a1a <_strtod_l+0x702>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9308      	str	r3, [sp, #32]
 8008b90:	2301      	movs	r3, #1
 8008b92:	930d      	str	r3, [sp, #52]	; 0x34
 8008b94:	e741      	b.n	8008a1a <_strtod_l+0x702>
 8008b96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b98:	4642      	mov	r2, r8
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f001 f93a 	bl	8009e14 <__lshift>
 8008ba0:	9018      	str	r0, [sp, #96]	; 0x60
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	f47f af6b 	bne.w	8008a7e <_strtod_l+0x766>
 8008ba8:	e5fe      	b.n	80087a8 <_strtod_l+0x490>
 8008baa:	465f      	mov	r7, fp
 8008bac:	d16e      	bne.n	8008c8c <_strtod_l+0x974>
 8008bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bb4:	b342      	cbz	r2, 8008c08 <_strtod_l+0x8f0>
 8008bb6:	4a32      	ldr	r2, [pc, #200]	; (8008c80 <_strtod_l+0x968>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d128      	bne.n	8008c0e <_strtod_l+0x8f6>
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	4651      	mov	r1, sl
 8008bc0:	b1eb      	cbz	r3, 8008bfe <_strtod_l+0x8e6>
 8008bc2:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <_strtod_l+0x960>)
 8008bc4:	403b      	ands	r3, r7
 8008bc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bca:	f04f 32ff 	mov.w	r2, #4294967295
 8008bce:	d819      	bhi.n	8008c04 <_strtod_l+0x8ec>
 8008bd0:	0d1b      	lsrs	r3, r3, #20
 8008bd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	d117      	bne.n	8008c0e <_strtod_l+0x8f6>
 8008bde:	4b29      	ldr	r3, [pc, #164]	; (8008c84 <_strtod_l+0x96c>)
 8008be0:	429f      	cmp	r7, r3
 8008be2:	d102      	bne.n	8008bea <_strtod_l+0x8d2>
 8008be4:	3101      	adds	r1, #1
 8008be6:	f43f addf 	beq.w	80087a8 <_strtod_l+0x490>
 8008bea:	4b23      	ldr	r3, [pc, #140]	; (8008c78 <_strtod_l+0x960>)
 8008bec:	403b      	ands	r3, r7
 8008bee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008bf2:	f04f 0a00 	mov.w	sl, #0
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1a4      	bne.n	8008b46 <_strtod_l+0x82e>
 8008bfc:	e5de      	b.n	80087bc <_strtod_l+0x4a4>
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	e7ea      	b.n	8008bda <_strtod_l+0x8c2>
 8008c04:	4613      	mov	r3, r2
 8008c06:	e7e8      	b.n	8008bda <_strtod_l+0x8c2>
 8008c08:	ea53 030a 	orrs.w	r3, r3, sl
 8008c0c:	d08c      	beq.n	8008b28 <_strtod_l+0x810>
 8008c0e:	9b08      	ldr	r3, [sp, #32]
 8008c10:	b1db      	cbz	r3, 8008c4a <_strtod_l+0x932>
 8008c12:	423b      	tst	r3, r7
 8008c14:	d0ef      	beq.n	8008bf6 <_strtod_l+0x8de>
 8008c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c18:	9a04      	ldr	r2, [sp, #16]
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	b1c3      	cbz	r3, 8008c52 <_strtod_l+0x93a>
 8008c20:	f7ff fb5c 	bl	80082dc <sulp>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	ec51 0b18 	vmov	r0, r1, d8
 8008c2c:	f7f7 fb3e 	bl	80002ac <__adddf3>
 8008c30:	4682      	mov	sl, r0
 8008c32:	468b      	mov	fp, r1
 8008c34:	e7df      	b.n	8008bf6 <_strtod_l+0x8de>
 8008c36:	4013      	ands	r3, r2
 8008c38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c44:	f04f 3aff 	mov.w	sl, #4294967295
 8008c48:	e7d5      	b.n	8008bf6 <_strtod_l+0x8de>
 8008c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c4c:	ea13 0f0a 	tst.w	r3, sl
 8008c50:	e7e0      	b.n	8008c14 <_strtod_l+0x8fc>
 8008c52:	f7ff fb43 	bl	80082dc <sulp>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	ec51 0b18 	vmov	r0, r1, d8
 8008c5e:	f7f7 fb23 	bl	80002a8 <__aeabi_dsub>
 8008c62:	2200      	movs	r2, #0
 8008c64:	2300      	movs	r3, #0
 8008c66:	4682      	mov	sl, r0
 8008c68:	468b      	mov	fp, r1
 8008c6a:	f7f7 ff3d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0c1      	beq.n	8008bf6 <_strtod_l+0x8de>
 8008c72:	e611      	b.n	8008898 <_strtod_l+0x580>
 8008c74:	fffffc02 	.word	0xfffffc02
 8008c78:	7ff00000 	.word	0x7ff00000
 8008c7c:	39500000 	.word	0x39500000
 8008c80:	000fffff 	.word	0x000fffff
 8008c84:	7fefffff 	.word	0x7fefffff
 8008c88:	0800af50 	.word	0x0800af50
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f001 faae 	bl	800a1f0 <__ratio>
 8008c94:	ec59 8b10 	vmov	r8, r9, d0
 8008c98:	ee10 0a10 	vmov	r0, s0
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 ff34 	bl	8000b10 <__aeabi_dcmple>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d07a      	beq.n	8008da2 <_strtod_l+0xa8a>
 8008cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d04a      	beq.n	8008d48 <_strtod_l+0xa30>
 8008cb2:	4b95      	ldr	r3, [pc, #596]	; (8008f08 <_strtod_l+0xbf0>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008cba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008f08 <_strtod_l+0xbf0>
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	4b92      	ldr	r3, [pc, #584]	; (8008f0c <_strtod_l+0xbf4>)
 8008cc4:	403b      	ands	r3, r7
 8008cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cca:	4b91      	ldr	r3, [pc, #580]	; (8008f10 <_strtod_l+0xbf8>)
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	f040 80b0 	bne.w	8008e32 <_strtod_l+0xb1a>
 8008cd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008cda:	ec4b ab10 	vmov	d0, sl, fp
 8008cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ce2:	f001 f9ad 	bl	800a040 <__ulp>
 8008ce6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cea:	ec53 2b10 	vmov	r2, r3, d0
 8008cee:	f7f7 fc93 	bl	8000618 <__aeabi_dmul>
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	f7f7 fad9 	bl	80002ac <__adddf3>
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4983      	ldr	r1, [pc, #524]	; (8008f0c <_strtod_l+0xbf4>)
 8008cfe:	4a85      	ldr	r2, [pc, #532]	; (8008f14 <_strtod_l+0xbfc>)
 8008d00:	4019      	ands	r1, r3
 8008d02:	4291      	cmp	r1, r2
 8008d04:	4682      	mov	sl, r0
 8008d06:	d960      	bls.n	8008dca <_strtod_l+0xab2>
 8008d08:	ee18 3a90 	vmov	r3, s17
 8008d0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d104      	bne.n	8008d1e <_strtod_l+0xa06>
 8008d14:	ee18 3a10 	vmov	r3, s16
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f43f ad45 	beq.w	80087a8 <_strtod_l+0x490>
 8008d1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008f20 <_strtod_l+0xc08>
 8008d22:	f04f 3aff 	mov.w	sl, #4294967295
 8008d26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fe57 	bl	80099dc <_Bfree>
 8008d2e:	9905      	ldr	r1, [sp, #20]
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fe53 	bl	80099dc <_Bfree>
 8008d36:	4631      	mov	r1, r6
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fe4f 	bl	80099dc <_Bfree>
 8008d3e:	4629      	mov	r1, r5
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fe4b 	bl	80099dc <_Bfree>
 8008d46:	e61a      	b.n	800897e <_strtod_l+0x666>
 8008d48:	f1ba 0f00 	cmp.w	sl, #0
 8008d4c:	d11b      	bne.n	8008d86 <_strtod_l+0xa6e>
 8008d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d52:	b9f3      	cbnz	r3, 8008d92 <_strtod_l+0xa7a>
 8008d54:	4b6c      	ldr	r3, [pc, #432]	; (8008f08 <_strtod_l+0xbf0>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	4640      	mov	r0, r8
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	f7f7 fece 	bl	8000afc <__aeabi_dcmplt>
 8008d60:	b9d0      	cbnz	r0, 8008d98 <_strtod_l+0xa80>
 8008d62:	4640      	mov	r0, r8
 8008d64:	4649      	mov	r1, r9
 8008d66:	4b6c      	ldr	r3, [pc, #432]	; (8008f18 <_strtod_l+0xc00>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f7f7 fc55 	bl	8000618 <__aeabi_dmul>
 8008d6e:	4680      	mov	r8, r0
 8008d70:	4689      	mov	r9, r1
 8008d72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008d7a:	9315      	str	r3, [sp, #84]	; 0x54
 8008d7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d84:	e79d      	b.n	8008cc2 <_strtod_l+0x9aa>
 8008d86:	f1ba 0f01 	cmp.w	sl, #1
 8008d8a:	d102      	bne.n	8008d92 <_strtod_l+0xa7a>
 8008d8c:	2f00      	cmp	r7, #0
 8008d8e:	f43f ad83 	beq.w	8008898 <_strtod_l+0x580>
 8008d92:	4b62      	ldr	r3, [pc, #392]	; (8008f1c <_strtod_l+0xc04>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	e78e      	b.n	8008cb6 <_strtod_l+0x99e>
 8008d98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008f18 <_strtod_l+0xc00>
 8008d9c:	f04f 0800 	mov.w	r8, #0
 8008da0:	e7e7      	b.n	8008d72 <_strtod_l+0xa5a>
 8008da2:	4b5d      	ldr	r3, [pc, #372]	; (8008f18 <_strtod_l+0xc00>)
 8008da4:	4640      	mov	r0, r8
 8008da6:	4649      	mov	r1, r9
 8008da8:	2200      	movs	r2, #0
 8008daa:	f7f7 fc35 	bl	8000618 <__aeabi_dmul>
 8008dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db0:	4680      	mov	r8, r0
 8008db2:	4689      	mov	r9, r1
 8008db4:	b933      	cbnz	r3, 8008dc4 <_strtod_l+0xaac>
 8008db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dba:	900e      	str	r0, [sp, #56]	; 0x38
 8008dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008dc2:	e7dd      	b.n	8008d80 <_strtod_l+0xa68>
 8008dc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008dc8:	e7f9      	b.n	8008dbe <_strtod_l+0xaa6>
 8008dca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1a8      	bne.n	8008d26 <_strtod_l+0xa0e>
 8008dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dda:	0d1b      	lsrs	r3, r3, #20
 8008ddc:	051b      	lsls	r3, r3, #20
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d1a1      	bne.n	8008d26 <_strtod_l+0xa0e>
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 ff39 	bl	8000c5c <__aeabi_d2lz>
 8008dea:	f7f7 fbe7 	bl	80005bc <__aeabi_l2d>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4640      	mov	r0, r8
 8008df4:	4649      	mov	r1, r9
 8008df6:	f7f7 fa57 	bl	80002a8 <__aeabi_dsub>
 8008dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e00:	ea43 030a 	orr.w	r3, r3, sl
 8008e04:	4313      	orrs	r3, r2
 8008e06:	4680      	mov	r8, r0
 8008e08:	4689      	mov	r9, r1
 8008e0a:	d055      	beq.n	8008eb8 <_strtod_l+0xba0>
 8008e0c:	a336      	add	r3, pc, #216	; (adr r3, 8008ee8 <_strtod_l+0xbd0>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fe73 	bl	8000afc <__aeabi_dcmplt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f47f acd0 	bne.w	80087bc <_strtod_l+0x4a4>
 8008e1c:	a334      	add	r3, pc, #208	; (adr r3, 8008ef0 <_strtod_l+0xbd8>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	4640      	mov	r0, r8
 8008e24:	4649      	mov	r1, r9
 8008e26:	f7f7 fe87 	bl	8000b38 <__aeabi_dcmpgt>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f43f af7b 	beq.w	8008d26 <_strtod_l+0xa0e>
 8008e30:	e4c4      	b.n	80087bc <_strtod_l+0x4a4>
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	b333      	cbz	r3, 8008e84 <_strtod_l+0xb6c>
 8008e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e3c:	d822      	bhi.n	8008e84 <_strtod_l+0xb6c>
 8008e3e:	a32e      	add	r3, pc, #184	; (adr r3, 8008ef8 <_strtod_l+0xbe0>)
 8008e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e44:	4640      	mov	r0, r8
 8008e46:	4649      	mov	r1, r9
 8008e48:	f7f7 fe62 	bl	8000b10 <__aeabi_dcmple>
 8008e4c:	b1a0      	cbz	r0, 8008e78 <_strtod_l+0xb60>
 8008e4e:	4649      	mov	r1, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	f7f7 fe7b 	bl	8000b4c <__aeabi_d2uiz>
 8008e56:	2801      	cmp	r0, #1
 8008e58:	bf38      	it	cc
 8008e5a:	2001      	movcc	r0, #1
 8008e5c:	f7f7 fb62 	bl	8000524 <__aeabi_ui2d>
 8008e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e62:	4680      	mov	r8, r0
 8008e64:	4689      	mov	r9, r1
 8008e66:	bb23      	cbnz	r3, 8008eb2 <_strtod_l+0xb9a>
 8008e68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e6c:	9010      	str	r0, [sp, #64]	; 0x40
 8008e6e:	9311      	str	r3, [sp, #68]	; 0x44
 8008e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	9309      	str	r3, [sp, #36]	; 0x24
 8008e84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e88:	eeb0 0a48 	vmov.f32	s0, s16
 8008e8c:	eef0 0a68 	vmov.f32	s1, s17
 8008e90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e94:	f001 f8d4 	bl	800a040 <__ulp>
 8008e98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e9c:	ec53 2b10 	vmov	r2, r3, d0
 8008ea0:	f7f7 fbba 	bl	8000618 <__aeabi_dmul>
 8008ea4:	ec53 2b18 	vmov	r2, r3, d8
 8008ea8:	f7f7 fa00 	bl	80002ac <__adddf3>
 8008eac:	4682      	mov	sl, r0
 8008eae:	468b      	mov	fp, r1
 8008eb0:	e78d      	b.n	8008dce <_strtod_l+0xab6>
 8008eb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008eb6:	e7db      	b.n	8008e70 <_strtod_l+0xb58>
 8008eb8:	a311      	add	r3, pc, #68	; (adr r3, 8008f00 <_strtod_l+0xbe8>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fe1d 	bl	8000afc <__aeabi_dcmplt>
 8008ec2:	e7b2      	b.n	8008e2a <_strtod_l+0xb12>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	f7ff ba6b 	b.w	80083a8 <_strtod_l+0x90>
 8008ed2:	2a65      	cmp	r2, #101	; 0x65
 8008ed4:	f43f ab5f 	beq.w	8008596 <_strtod_l+0x27e>
 8008ed8:	2a45      	cmp	r2, #69	; 0x45
 8008eda:	f43f ab5c 	beq.w	8008596 <_strtod_l+0x27e>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f7ff bb94 	b.w	800860c <_strtod_l+0x2f4>
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	94a03595 	.word	0x94a03595
 8008eec:	3fdfffff 	.word	0x3fdfffff
 8008ef0:	35afe535 	.word	0x35afe535
 8008ef4:	3fe00000 	.word	0x3fe00000
 8008ef8:	ffc00000 	.word	0xffc00000
 8008efc:	41dfffff 	.word	0x41dfffff
 8008f00:	94a03595 	.word	0x94a03595
 8008f04:	3fcfffff 	.word	0x3fcfffff
 8008f08:	3ff00000 	.word	0x3ff00000
 8008f0c:	7ff00000 	.word	0x7ff00000
 8008f10:	7fe00000 	.word	0x7fe00000
 8008f14:	7c9fffff 	.word	0x7c9fffff
 8008f18:	3fe00000 	.word	0x3fe00000
 8008f1c:	bff00000 	.word	0xbff00000
 8008f20:	7fefffff 	.word	0x7fefffff

08008f24 <strtod>:
 8008f24:	460a      	mov	r2, r1
 8008f26:	4601      	mov	r1, r0
 8008f28:	4802      	ldr	r0, [pc, #8]	; (8008f34 <strtod+0x10>)
 8008f2a:	4b03      	ldr	r3, [pc, #12]	; (8008f38 <strtod+0x14>)
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f7ff b9f3 	b.w	8008318 <_strtod_l>
 8008f32:	bf00      	nop
 8008f34:	20000010 	.word	0x20000010
 8008f38:	20000078 	.word	0x20000078

08008f3c <_strtol_l.constprop.0>:
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f42:	d001      	beq.n	8008f48 <_strtol_l.constprop.0+0xc>
 8008f44:	2b24      	cmp	r3, #36	; 0x24
 8008f46:	d906      	bls.n	8008f56 <_strtol_l.constprop.0+0x1a>
 8008f48:	f7fe ff18 	bl	8007d7c <__errno>
 8008f4c:	2316      	movs	r3, #22
 8008f4e:	6003      	str	r3, [r0, #0]
 8008f50:	2000      	movs	r0, #0
 8008f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800903c <_strtol_l.constprop.0+0x100>
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	462e      	mov	r6, r5
 8008f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f62:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008f66:	f017 0708 	ands.w	r7, r7, #8
 8008f6a:	d1f7      	bne.n	8008f5c <_strtol_l.constprop.0+0x20>
 8008f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f6e:	d132      	bne.n	8008fd6 <_strtol_l.constprop.0+0x9a>
 8008f70:	782c      	ldrb	r4, [r5, #0]
 8008f72:	2701      	movs	r7, #1
 8008f74:	1cb5      	adds	r5, r6, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d05b      	beq.n	8009032 <_strtol_l.constprop.0+0xf6>
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d109      	bne.n	8008f92 <_strtol_l.constprop.0+0x56>
 8008f7e:	2c30      	cmp	r4, #48	; 0x30
 8008f80:	d107      	bne.n	8008f92 <_strtol_l.constprop.0+0x56>
 8008f82:	782c      	ldrb	r4, [r5, #0]
 8008f84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f88:	2c58      	cmp	r4, #88	; 0x58
 8008f8a:	d14d      	bne.n	8009028 <_strtol_l.constprop.0+0xec>
 8008f8c:	786c      	ldrb	r4, [r5, #1]
 8008f8e:	2310      	movs	r3, #16
 8008f90:	3502      	adds	r5, #2
 8008f92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f9a:	f04f 0c00 	mov.w	ip, #0
 8008f9e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fa2:	4666      	mov	r6, ip
 8008fa4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fa8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008fac:	f1be 0f09 	cmp.w	lr, #9
 8008fb0:	d816      	bhi.n	8008fe0 <_strtol_l.constprop.0+0xa4>
 8008fb2:	4674      	mov	r4, lr
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	dd24      	ble.n	8009002 <_strtol_l.constprop.0+0xc6>
 8008fb8:	f1bc 0f00 	cmp.w	ip, #0
 8008fbc:	db1e      	blt.n	8008ffc <_strtol_l.constprop.0+0xc0>
 8008fbe:	45b1      	cmp	r9, r6
 8008fc0:	d31c      	bcc.n	8008ffc <_strtol_l.constprop.0+0xc0>
 8008fc2:	d101      	bne.n	8008fc8 <_strtol_l.constprop.0+0x8c>
 8008fc4:	45a2      	cmp	sl, r4
 8008fc6:	db19      	blt.n	8008ffc <_strtol_l.constprop.0+0xc0>
 8008fc8:	fb06 4603 	mla	r6, r6, r3, r4
 8008fcc:	f04f 0c01 	mov.w	ip, #1
 8008fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd4:	e7e8      	b.n	8008fa8 <_strtol_l.constprop.0+0x6c>
 8008fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8008fd8:	bf04      	itt	eq
 8008fda:	782c      	ldrbeq	r4, [r5, #0]
 8008fdc:	1cb5      	addeq	r5, r6, #2
 8008fde:	e7ca      	b.n	8008f76 <_strtol_l.constprop.0+0x3a>
 8008fe0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008fe4:	f1be 0f19 	cmp.w	lr, #25
 8008fe8:	d801      	bhi.n	8008fee <_strtol_l.constprop.0+0xb2>
 8008fea:	3c37      	subs	r4, #55	; 0x37
 8008fec:	e7e2      	b.n	8008fb4 <_strtol_l.constprop.0+0x78>
 8008fee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008ff2:	f1be 0f19 	cmp.w	lr, #25
 8008ff6:	d804      	bhi.n	8009002 <_strtol_l.constprop.0+0xc6>
 8008ff8:	3c57      	subs	r4, #87	; 0x57
 8008ffa:	e7db      	b.n	8008fb4 <_strtol_l.constprop.0+0x78>
 8008ffc:	f04f 3cff 	mov.w	ip, #4294967295
 8009000:	e7e6      	b.n	8008fd0 <_strtol_l.constprop.0+0x94>
 8009002:	f1bc 0f00 	cmp.w	ip, #0
 8009006:	da05      	bge.n	8009014 <_strtol_l.constprop.0+0xd8>
 8009008:	2322      	movs	r3, #34	; 0x22
 800900a:	6003      	str	r3, [r0, #0]
 800900c:	4646      	mov	r6, r8
 800900e:	b942      	cbnz	r2, 8009022 <_strtol_l.constprop.0+0xe6>
 8009010:	4630      	mov	r0, r6
 8009012:	e79e      	b.n	8008f52 <_strtol_l.constprop.0+0x16>
 8009014:	b107      	cbz	r7, 8009018 <_strtol_l.constprop.0+0xdc>
 8009016:	4276      	negs	r6, r6
 8009018:	2a00      	cmp	r2, #0
 800901a:	d0f9      	beq.n	8009010 <_strtol_l.constprop.0+0xd4>
 800901c:	f1bc 0f00 	cmp.w	ip, #0
 8009020:	d000      	beq.n	8009024 <_strtol_l.constprop.0+0xe8>
 8009022:	1e69      	subs	r1, r5, #1
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	e7f3      	b.n	8009010 <_strtol_l.constprop.0+0xd4>
 8009028:	2430      	movs	r4, #48	; 0x30
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1b1      	bne.n	8008f92 <_strtol_l.constprop.0+0x56>
 800902e:	2308      	movs	r3, #8
 8009030:	e7af      	b.n	8008f92 <_strtol_l.constprop.0+0x56>
 8009032:	2c30      	cmp	r4, #48	; 0x30
 8009034:	d0a5      	beq.n	8008f82 <_strtol_l.constprop.0+0x46>
 8009036:	230a      	movs	r3, #10
 8009038:	e7ab      	b.n	8008f92 <_strtol_l.constprop.0+0x56>
 800903a:	bf00      	nop
 800903c:	0800af79 	.word	0x0800af79

08009040 <strtol>:
 8009040:	4613      	mov	r3, r2
 8009042:	460a      	mov	r2, r1
 8009044:	4601      	mov	r1, r0
 8009046:	4802      	ldr	r0, [pc, #8]	; (8009050 <strtol+0x10>)
 8009048:	6800      	ldr	r0, [r0, #0]
 800904a:	f7ff bf77 	b.w	8008f3c <_strtol_l.constprop.0>
 800904e:	bf00      	nop
 8009050:	20000010 	.word	0x20000010

08009054 <_write_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	; (8009074 <_write_r+0x20>)
 8009058:	4604      	mov	r4, r0
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	2200      	movs	r2, #0
 8009060:	602a      	str	r2, [r5, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f7f8 fe8d 	bl	8001d82 <_write>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_write_r+0x1e>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_write_r+0x1e>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20003138 	.word	0x20003138

08009078 <_close_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	; (8009094 <_close_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f8 fe99 	bl	8001dba <_close>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_close_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_close_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20003138 	.word	0x20003138

08009098 <__sflush_r>:
 8009098:	898a      	ldrh	r2, [r1, #12]
 800909a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	4605      	mov	r5, r0
 80090a0:	0710      	lsls	r0, r2, #28
 80090a2:	460c      	mov	r4, r1
 80090a4:	d458      	bmi.n	8009158 <__sflush_r+0xc0>
 80090a6:	684b      	ldr	r3, [r1, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dc05      	bgt.n	80090b8 <__sflush_r+0x20>
 80090ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dc02      	bgt.n	80090b8 <__sflush_r+0x20>
 80090b2:	2000      	movs	r0, #0
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d0f9      	beq.n	80090b2 <__sflush_r+0x1a>
 80090be:	2300      	movs	r3, #0
 80090c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090c4:	682f      	ldr	r7, [r5, #0]
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	d032      	beq.n	8009130 <__sflush_r+0x98>
 80090ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	075a      	lsls	r2, r3, #29
 80090d0:	d505      	bpl.n	80090de <__sflush_r+0x46>
 80090d2:	6863      	ldr	r3, [r4, #4]
 80090d4:	1ac0      	subs	r0, r0, r3
 80090d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090d8:	b10b      	cbz	r3, 80090de <__sflush_r+0x46>
 80090da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090dc:	1ac0      	subs	r0, r0, r3
 80090de:	2300      	movs	r3, #0
 80090e0:	4602      	mov	r2, r0
 80090e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b0      	blx	r6
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	d106      	bne.n	80090fe <__sflush_r+0x66>
 80090f0:	6829      	ldr	r1, [r5, #0]
 80090f2:	291d      	cmp	r1, #29
 80090f4:	d82c      	bhi.n	8009150 <__sflush_r+0xb8>
 80090f6:	4a2a      	ldr	r2, [pc, #168]	; (80091a0 <__sflush_r+0x108>)
 80090f8:	40ca      	lsrs	r2, r1
 80090fa:	07d6      	lsls	r6, r2, #31
 80090fc:	d528      	bpl.n	8009150 <__sflush_r+0xb8>
 80090fe:	2200      	movs	r2, #0
 8009100:	6062      	str	r2, [r4, #4]
 8009102:	04d9      	lsls	r1, r3, #19
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	6022      	str	r2, [r4, #0]
 8009108:	d504      	bpl.n	8009114 <__sflush_r+0x7c>
 800910a:	1c42      	adds	r2, r0, #1
 800910c:	d101      	bne.n	8009112 <__sflush_r+0x7a>
 800910e:	682b      	ldr	r3, [r5, #0]
 8009110:	b903      	cbnz	r3, 8009114 <__sflush_r+0x7c>
 8009112:	6560      	str	r0, [r4, #84]	; 0x54
 8009114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009116:	602f      	str	r7, [r5, #0]
 8009118:	2900      	cmp	r1, #0
 800911a:	d0ca      	beq.n	80090b2 <__sflush_r+0x1a>
 800911c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009120:	4299      	cmp	r1, r3
 8009122:	d002      	beq.n	800912a <__sflush_r+0x92>
 8009124:	4628      	mov	r0, r5
 8009126:	f001 f8f1 	bl	800a30c <_free_r>
 800912a:	2000      	movs	r0, #0
 800912c:	6360      	str	r0, [r4, #52]	; 0x34
 800912e:	e7c1      	b.n	80090b4 <__sflush_r+0x1c>
 8009130:	6a21      	ldr	r1, [r4, #32]
 8009132:	2301      	movs	r3, #1
 8009134:	4628      	mov	r0, r5
 8009136:	47b0      	blx	r6
 8009138:	1c41      	adds	r1, r0, #1
 800913a:	d1c7      	bne.n	80090cc <__sflush_r+0x34>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d0c4      	beq.n	80090cc <__sflush_r+0x34>
 8009142:	2b1d      	cmp	r3, #29
 8009144:	d001      	beq.n	800914a <__sflush_r+0xb2>
 8009146:	2b16      	cmp	r3, #22
 8009148:	d101      	bne.n	800914e <__sflush_r+0xb6>
 800914a:	602f      	str	r7, [r5, #0]
 800914c:	e7b1      	b.n	80090b2 <__sflush_r+0x1a>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	e7ad      	b.n	80090b4 <__sflush_r+0x1c>
 8009158:	690f      	ldr	r7, [r1, #16]
 800915a:	2f00      	cmp	r7, #0
 800915c:	d0a9      	beq.n	80090b2 <__sflush_r+0x1a>
 800915e:	0793      	lsls	r3, r2, #30
 8009160:	680e      	ldr	r6, [r1, #0]
 8009162:	bf08      	it	eq
 8009164:	694b      	ldreq	r3, [r1, #20]
 8009166:	600f      	str	r7, [r1, #0]
 8009168:	bf18      	it	ne
 800916a:	2300      	movne	r3, #0
 800916c:	eba6 0807 	sub.w	r8, r6, r7
 8009170:	608b      	str	r3, [r1, #8]
 8009172:	f1b8 0f00 	cmp.w	r8, #0
 8009176:	dd9c      	ble.n	80090b2 <__sflush_r+0x1a>
 8009178:	6a21      	ldr	r1, [r4, #32]
 800917a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800917c:	4643      	mov	r3, r8
 800917e:	463a      	mov	r2, r7
 8009180:	4628      	mov	r0, r5
 8009182:	47b0      	blx	r6
 8009184:	2800      	cmp	r0, #0
 8009186:	dc06      	bgt.n	8009196 <__sflush_r+0xfe>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e78e      	b.n	80090b4 <__sflush_r+0x1c>
 8009196:	4407      	add	r7, r0
 8009198:	eba8 0800 	sub.w	r8, r8, r0
 800919c:	e7e9      	b.n	8009172 <__sflush_r+0xda>
 800919e:	bf00      	nop
 80091a0:	20400001 	.word	0x20400001

080091a4 <_fflush_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	4605      	mov	r5, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b913      	cbnz	r3, 80091b4 <_fflush_r+0x10>
 80091ae:	2500      	movs	r5, #0
 80091b0:	4628      	mov	r0, r5
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	b118      	cbz	r0, 80091be <_fflush_r+0x1a>
 80091b6:	6983      	ldr	r3, [r0, #24]
 80091b8:	b90b      	cbnz	r3, 80091be <_fflush_r+0x1a>
 80091ba:	f7fe fe3d 	bl	8007e38 <__sinit>
 80091be:	4b14      	ldr	r3, [pc, #80]	; (8009210 <_fflush_r+0x6c>)
 80091c0:	429c      	cmp	r4, r3
 80091c2:	d11b      	bne.n	80091fc <_fflush_r+0x58>
 80091c4:	686c      	ldr	r4, [r5, #4]
 80091c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0ef      	beq.n	80091ae <_fflush_r+0xa>
 80091ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091d0:	07d0      	lsls	r0, r2, #31
 80091d2:	d404      	bmi.n	80091de <_fflush_r+0x3a>
 80091d4:	0599      	lsls	r1, r3, #22
 80091d6:	d402      	bmi.n	80091de <_fflush_r+0x3a>
 80091d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091da:	f7fe fef0 	bl	8007fbe <__retarget_lock_acquire_recursive>
 80091de:	4628      	mov	r0, r5
 80091e0:	4621      	mov	r1, r4
 80091e2:	f7ff ff59 	bl	8009098 <__sflush_r>
 80091e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091e8:	07da      	lsls	r2, r3, #31
 80091ea:	4605      	mov	r5, r0
 80091ec:	d4e0      	bmi.n	80091b0 <_fflush_r+0xc>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	059b      	lsls	r3, r3, #22
 80091f2:	d4dd      	bmi.n	80091b0 <_fflush_r+0xc>
 80091f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091f6:	f7fe fee3 	bl	8007fc0 <__retarget_lock_release_recursive>
 80091fa:	e7d9      	b.n	80091b0 <_fflush_r+0xc>
 80091fc:	4b05      	ldr	r3, [pc, #20]	; (8009214 <_fflush_r+0x70>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	d101      	bne.n	8009206 <_fflush_r+0x62>
 8009202:	68ac      	ldr	r4, [r5, #8]
 8009204:	e7df      	b.n	80091c6 <_fflush_r+0x22>
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <_fflush_r+0x74>)
 8009208:	429c      	cmp	r4, r3
 800920a:	bf08      	it	eq
 800920c:	68ec      	ldreq	r4, [r5, #12]
 800920e:	e7da      	b.n	80091c6 <_fflush_r+0x22>
 8009210:	0800aed4 	.word	0x0800aed4
 8009214:	0800aef4 	.word	0x0800aef4
 8009218:	0800aeb4 	.word	0x0800aeb4

0800921c <rshift>:
 800921c:	6903      	ldr	r3, [r0, #16]
 800921e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009226:	ea4f 1261 	mov.w	r2, r1, asr #5
 800922a:	f100 0414 	add.w	r4, r0, #20
 800922e:	dd45      	ble.n	80092bc <rshift+0xa0>
 8009230:	f011 011f 	ands.w	r1, r1, #31
 8009234:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009238:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800923c:	d10c      	bne.n	8009258 <rshift+0x3c>
 800923e:	f100 0710 	add.w	r7, r0, #16
 8009242:	4629      	mov	r1, r5
 8009244:	42b1      	cmp	r1, r6
 8009246:	d334      	bcc.n	80092b2 <rshift+0x96>
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	1eea      	subs	r2, r5, #3
 800924e:	4296      	cmp	r6, r2
 8009250:	bf38      	it	cc
 8009252:	2300      	movcc	r3, #0
 8009254:	4423      	add	r3, r4
 8009256:	e015      	b.n	8009284 <rshift+0x68>
 8009258:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800925c:	f1c1 0820 	rsb	r8, r1, #32
 8009260:	40cf      	lsrs	r7, r1
 8009262:	f105 0e04 	add.w	lr, r5, #4
 8009266:	46a1      	mov	r9, r4
 8009268:	4576      	cmp	r6, lr
 800926a:	46f4      	mov	ip, lr
 800926c:	d815      	bhi.n	800929a <rshift+0x7e>
 800926e:	1a9a      	subs	r2, r3, r2
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	3a04      	subs	r2, #4
 8009274:	3501      	adds	r5, #1
 8009276:	42ae      	cmp	r6, r5
 8009278:	bf38      	it	cc
 800927a:	2200      	movcc	r2, #0
 800927c:	18a3      	adds	r3, r4, r2
 800927e:	50a7      	str	r7, [r4, r2]
 8009280:	b107      	cbz	r7, 8009284 <rshift+0x68>
 8009282:	3304      	adds	r3, #4
 8009284:	1b1a      	subs	r2, r3, r4
 8009286:	42a3      	cmp	r3, r4
 8009288:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800928c:	bf08      	it	eq
 800928e:	2300      	moveq	r3, #0
 8009290:	6102      	str	r2, [r0, #16]
 8009292:	bf08      	it	eq
 8009294:	6143      	streq	r3, [r0, #20]
 8009296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929a:	f8dc c000 	ldr.w	ip, [ip]
 800929e:	fa0c fc08 	lsl.w	ip, ip, r8
 80092a2:	ea4c 0707 	orr.w	r7, ip, r7
 80092a6:	f849 7b04 	str.w	r7, [r9], #4
 80092aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ae:	40cf      	lsrs	r7, r1
 80092b0:	e7da      	b.n	8009268 <rshift+0x4c>
 80092b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ba:	e7c3      	b.n	8009244 <rshift+0x28>
 80092bc:	4623      	mov	r3, r4
 80092be:	e7e1      	b.n	8009284 <rshift+0x68>

080092c0 <__hexdig_fun>:
 80092c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	d802      	bhi.n	80092ce <__hexdig_fun+0xe>
 80092c8:	3820      	subs	r0, #32
 80092ca:	b2c0      	uxtb	r0, r0
 80092cc:	4770      	bx	lr
 80092ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d801      	bhi.n	80092da <__hexdig_fun+0x1a>
 80092d6:	3847      	subs	r0, #71	; 0x47
 80092d8:	e7f7      	b.n	80092ca <__hexdig_fun+0xa>
 80092da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d801      	bhi.n	80092e6 <__hexdig_fun+0x26>
 80092e2:	3827      	subs	r0, #39	; 0x27
 80092e4:	e7f1      	b.n	80092ca <__hexdig_fun+0xa>
 80092e6:	2000      	movs	r0, #0
 80092e8:	4770      	bx	lr
	...

080092ec <__gethex>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	ed2d 8b02 	vpush	{d8}
 80092f4:	b089      	sub	sp, #36	; 0x24
 80092f6:	ee08 0a10 	vmov	s16, r0
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	4bb4      	ldr	r3, [pc, #720]	; (80095d0 <__gethex+0x2e4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	4618      	mov	r0, r3
 8009304:	468b      	mov	fp, r1
 8009306:	4690      	mov	r8, r2
 8009308:	f7f6 ff6c 	bl	80001e4 <strlen>
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	f8db 2000 	ldr.w	r2, [fp]
 8009312:	4403      	add	r3, r0
 8009314:	4682      	mov	sl, r0
 8009316:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	1c93      	adds	r3, r2, #2
 800931e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009322:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009326:	32fe      	adds	r2, #254	; 0xfe
 8009328:	18d1      	adds	r1, r2, r3
 800932a:	461f      	mov	r7, r3
 800932c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009330:	9100      	str	r1, [sp, #0]
 8009332:	2830      	cmp	r0, #48	; 0x30
 8009334:	d0f8      	beq.n	8009328 <__gethex+0x3c>
 8009336:	f7ff ffc3 	bl	80092c0 <__hexdig_fun>
 800933a:	4604      	mov	r4, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	d13a      	bne.n	80093b6 <__gethex+0xca>
 8009340:	9901      	ldr	r1, [sp, #4]
 8009342:	4652      	mov	r2, sl
 8009344:	4638      	mov	r0, r7
 8009346:	f001 fb37 	bl	800a9b8 <strncmp>
 800934a:	4605      	mov	r5, r0
 800934c:	2800      	cmp	r0, #0
 800934e:	d168      	bne.n	8009422 <__gethex+0x136>
 8009350:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009354:	eb07 060a 	add.w	r6, r7, sl
 8009358:	f7ff ffb2 	bl	80092c0 <__hexdig_fun>
 800935c:	2800      	cmp	r0, #0
 800935e:	d062      	beq.n	8009426 <__gethex+0x13a>
 8009360:	4633      	mov	r3, r6
 8009362:	7818      	ldrb	r0, [r3, #0]
 8009364:	2830      	cmp	r0, #48	; 0x30
 8009366:	461f      	mov	r7, r3
 8009368:	f103 0301 	add.w	r3, r3, #1
 800936c:	d0f9      	beq.n	8009362 <__gethex+0x76>
 800936e:	f7ff ffa7 	bl	80092c0 <__hexdig_fun>
 8009372:	2301      	movs	r3, #1
 8009374:	fab0 f480 	clz	r4, r0
 8009378:	0964      	lsrs	r4, r4, #5
 800937a:	4635      	mov	r5, r6
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	463a      	mov	r2, r7
 8009380:	4616      	mov	r6, r2
 8009382:	3201      	adds	r2, #1
 8009384:	7830      	ldrb	r0, [r6, #0]
 8009386:	f7ff ff9b 	bl	80092c0 <__hexdig_fun>
 800938a:	2800      	cmp	r0, #0
 800938c:	d1f8      	bne.n	8009380 <__gethex+0x94>
 800938e:	9901      	ldr	r1, [sp, #4]
 8009390:	4652      	mov	r2, sl
 8009392:	4630      	mov	r0, r6
 8009394:	f001 fb10 	bl	800a9b8 <strncmp>
 8009398:	b980      	cbnz	r0, 80093bc <__gethex+0xd0>
 800939a:	b94d      	cbnz	r5, 80093b0 <__gethex+0xc4>
 800939c:	eb06 050a 	add.w	r5, r6, sl
 80093a0:	462a      	mov	r2, r5
 80093a2:	4616      	mov	r6, r2
 80093a4:	3201      	adds	r2, #1
 80093a6:	7830      	ldrb	r0, [r6, #0]
 80093a8:	f7ff ff8a 	bl	80092c0 <__hexdig_fun>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1f8      	bne.n	80093a2 <__gethex+0xb6>
 80093b0:	1bad      	subs	r5, r5, r6
 80093b2:	00ad      	lsls	r5, r5, #2
 80093b4:	e004      	b.n	80093c0 <__gethex+0xd4>
 80093b6:	2400      	movs	r4, #0
 80093b8:	4625      	mov	r5, r4
 80093ba:	e7e0      	b.n	800937e <__gethex+0x92>
 80093bc:	2d00      	cmp	r5, #0
 80093be:	d1f7      	bne.n	80093b0 <__gethex+0xc4>
 80093c0:	7833      	ldrb	r3, [r6, #0]
 80093c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093c6:	2b50      	cmp	r3, #80	; 0x50
 80093c8:	d13b      	bne.n	8009442 <__gethex+0x156>
 80093ca:	7873      	ldrb	r3, [r6, #1]
 80093cc:	2b2b      	cmp	r3, #43	; 0x2b
 80093ce:	d02c      	beq.n	800942a <__gethex+0x13e>
 80093d0:	2b2d      	cmp	r3, #45	; 0x2d
 80093d2:	d02e      	beq.n	8009432 <__gethex+0x146>
 80093d4:	1c71      	adds	r1, r6, #1
 80093d6:	f04f 0900 	mov.w	r9, #0
 80093da:	7808      	ldrb	r0, [r1, #0]
 80093dc:	f7ff ff70 	bl	80092c0 <__hexdig_fun>
 80093e0:	1e43      	subs	r3, r0, #1
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b18      	cmp	r3, #24
 80093e6:	d82c      	bhi.n	8009442 <__gethex+0x156>
 80093e8:	f1a0 0210 	sub.w	r2, r0, #16
 80093ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093f0:	f7ff ff66 	bl	80092c0 <__hexdig_fun>
 80093f4:	1e43      	subs	r3, r0, #1
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b18      	cmp	r3, #24
 80093fa:	d91d      	bls.n	8009438 <__gethex+0x14c>
 80093fc:	f1b9 0f00 	cmp.w	r9, #0
 8009400:	d000      	beq.n	8009404 <__gethex+0x118>
 8009402:	4252      	negs	r2, r2
 8009404:	4415      	add	r5, r2
 8009406:	f8cb 1000 	str.w	r1, [fp]
 800940a:	b1e4      	cbz	r4, 8009446 <__gethex+0x15a>
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bf14      	ite	ne
 8009412:	2700      	movne	r7, #0
 8009414:	2706      	moveq	r7, #6
 8009416:	4638      	mov	r0, r7
 8009418:	b009      	add	sp, #36	; 0x24
 800941a:	ecbd 8b02 	vpop	{d8}
 800941e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009422:	463e      	mov	r6, r7
 8009424:	4625      	mov	r5, r4
 8009426:	2401      	movs	r4, #1
 8009428:	e7ca      	b.n	80093c0 <__gethex+0xd4>
 800942a:	f04f 0900 	mov.w	r9, #0
 800942e:	1cb1      	adds	r1, r6, #2
 8009430:	e7d3      	b.n	80093da <__gethex+0xee>
 8009432:	f04f 0901 	mov.w	r9, #1
 8009436:	e7fa      	b.n	800942e <__gethex+0x142>
 8009438:	230a      	movs	r3, #10
 800943a:	fb03 0202 	mla	r2, r3, r2, r0
 800943e:	3a10      	subs	r2, #16
 8009440:	e7d4      	b.n	80093ec <__gethex+0x100>
 8009442:	4631      	mov	r1, r6
 8009444:	e7df      	b.n	8009406 <__gethex+0x11a>
 8009446:	1bf3      	subs	r3, r6, r7
 8009448:	3b01      	subs	r3, #1
 800944a:	4621      	mov	r1, r4
 800944c:	2b07      	cmp	r3, #7
 800944e:	dc0b      	bgt.n	8009468 <__gethex+0x17c>
 8009450:	ee18 0a10 	vmov	r0, s16
 8009454:	f000 fa82 	bl	800995c <_Balloc>
 8009458:	4604      	mov	r4, r0
 800945a:	b940      	cbnz	r0, 800946e <__gethex+0x182>
 800945c:	4b5d      	ldr	r3, [pc, #372]	; (80095d4 <__gethex+0x2e8>)
 800945e:	4602      	mov	r2, r0
 8009460:	21de      	movs	r1, #222	; 0xde
 8009462:	485d      	ldr	r0, [pc, #372]	; (80095d8 <__gethex+0x2ec>)
 8009464:	f001 fb8a 	bl	800ab7c <__assert_func>
 8009468:	3101      	adds	r1, #1
 800946a:	105b      	asrs	r3, r3, #1
 800946c:	e7ee      	b.n	800944c <__gethex+0x160>
 800946e:	f100 0914 	add.w	r9, r0, #20
 8009472:	f04f 0b00 	mov.w	fp, #0
 8009476:	f1ca 0301 	rsb	r3, sl, #1
 800947a:	f8cd 9008 	str.w	r9, [sp, #8]
 800947e:	f8cd b000 	str.w	fp, [sp]
 8009482:	9306      	str	r3, [sp, #24]
 8009484:	42b7      	cmp	r7, r6
 8009486:	d340      	bcc.n	800950a <__gethex+0x21e>
 8009488:	9802      	ldr	r0, [sp, #8]
 800948a:	9b00      	ldr	r3, [sp, #0]
 800948c:	f840 3b04 	str.w	r3, [r0], #4
 8009490:	eba0 0009 	sub.w	r0, r0, r9
 8009494:	1080      	asrs	r0, r0, #2
 8009496:	0146      	lsls	r6, r0, #5
 8009498:	6120      	str	r0, [r4, #16]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fb50 	bl	8009b40 <__hi0bits>
 80094a0:	1a30      	subs	r0, r6, r0
 80094a2:	f8d8 6000 	ldr.w	r6, [r8]
 80094a6:	42b0      	cmp	r0, r6
 80094a8:	dd63      	ble.n	8009572 <__gethex+0x286>
 80094aa:	1b87      	subs	r7, r0, r6
 80094ac:	4639      	mov	r1, r7
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 fef4 	bl	800a29c <__any_on>
 80094b4:	4682      	mov	sl, r0
 80094b6:	b1a8      	cbz	r0, 80094e4 <__gethex+0x1f8>
 80094b8:	1e7b      	subs	r3, r7, #1
 80094ba:	1159      	asrs	r1, r3, #5
 80094bc:	f003 021f 	and.w	r2, r3, #31
 80094c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094c4:	f04f 0a01 	mov.w	sl, #1
 80094c8:	fa0a f202 	lsl.w	r2, sl, r2
 80094cc:	420a      	tst	r2, r1
 80094ce:	d009      	beq.n	80094e4 <__gethex+0x1f8>
 80094d0:	4553      	cmp	r3, sl
 80094d2:	dd05      	ble.n	80094e0 <__gethex+0x1f4>
 80094d4:	1eb9      	subs	r1, r7, #2
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fee0 	bl	800a29c <__any_on>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d145      	bne.n	800956c <__gethex+0x280>
 80094e0:	f04f 0a02 	mov.w	sl, #2
 80094e4:	4639      	mov	r1, r7
 80094e6:	4620      	mov	r0, r4
 80094e8:	f7ff fe98 	bl	800921c <rshift>
 80094ec:	443d      	add	r5, r7
 80094ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094f2:	42ab      	cmp	r3, r5
 80094f4:	da4c      	bge.n	8009590 <__gethex+0x2a4>
 80094f6:	ee18 0a10 	vmov	r0, s16
 80094fa:	4621      	mov	r1, r4
 80094fc:	f000 fa6e 	bl	80099dc <_Bfree>
 8009500:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009502:	2300      	movs	r3, #0
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	27a3      	movs	r7, #163	; 0xa3
 8009508:	e785      	b.n	8009416 <__gethex+0x12a>
 800950a:	1e73      	subs	r3, r6, #1
 800950c:	9a05      	ldr	r2, [sp, #20]
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009514:	4293      	cmp	r3, r2
 8009516:	d019      	beq.n	800954c <__gethex+0x260>
 8009518:	f1bb 0f20 	cmp.w	fp, #32
 800951c:	d107      	bne.n	800952e <__gethex+0x242>
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	9a00      	ldr	r2, [sp, #0]
 8009522:	f843 2b04 	str.w	r2, [r3], #4
 8009526:	9302      	str	r3, [sp, #8]
 8009528:	2300      	movs	r3, #0
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	469b      	mov	fp, r3
 800952e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009532:	f7ff fec5 	bl	80092c0 <__hexdig_fun>
 8009536:	9b00      	ldr	r3, [sp, #0]
 8009538:	f000 000f 	and.w	r0, r0, #15
 800953c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009540:	4303      	orrs	r3, r0
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	f10b 0b04 	add.w	fp, fp, #4
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	e00d      	b.n	8009568 <__gethex+0x27c>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	9a06      	ldr	r2, [sp, #24]
 8009550:	4413      	add	r3, r2
 8009552:	42bb      	cmp	r3, r7
 8009554:	d3e0      	bcc.n	8009518 <__gethex+0x22c>
 8009556:	4618      	mov	r0, r3
 8009558:	9901      	ldr	r1, [sp, #4]
 800955a:	9307      	str	r3, [sp, #28]
 800955c:	4652      	mov	r2, sl
 800955e:	f001 fa2b 	bl	800a9b8 <strncmp>
 8009562:	9b07      	ldr	r3, [sp, #28]
 8009564:	2800      	cmp	r0, #0
 8009566:	d1d7      	bne.n	8009518 <__gethex+0x22c>
 8009568:	461e      	mov	r6, r3
 800956a:	e78b      	b.n	8009484 <__gethex+0x198>
 800956c:	f04f 0a03 	mov.w	sl, #3
 8009570:	e7b8      	b.n	80094e4 <__gethex+0x1f8>
 8009572:	da0a      	bge.n	800958a <__gethex+0x29e>
 8009574:	1a37      	subs	r7, r6, r0
 8009576:	4621      	mov	r1, r4
 8009578:	ee18 0a10 	vmov	r0, s16
 800957c:	463a      	mov	r2, r7
 800957e:	f000 fc49 	bl	8009e14 <__lshift>
 8009582:	1bed      	subs	r5, r5, r7
 8009584:	4604      	mov	r4, r0
 8009586:	f100 0914 	add.w	r9, r0, #20
 800958a:	f04f 0a00 	mov.w	sl, #0
 800958e:	e7ae      	b.n	80094ee <__gethex+0x202>
 8009590:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009594:	42a8      	cmp	r0, r5
 8009596:	dd72      	ble.n	800967e <__gethex+0x392>
 8009598:	1b45      	subs	r5, r0, r5
 800959a:	42ae      	cmp	r6, r5
 800959c:	dc36      	bgt.n	800960c <__gethex+0x320>
 800959e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d02a      	beq.n	80095fc <__gethex+0x310>
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d02c      	beq.n	8009604 <__gethex+0x318>
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d11c      	bne.n	80095e8 <__gethex+0x2fc>
 80095ae:	42ae      	cmp	r6, r5
 80095b0:	d11a      	bne.n	80095e8 <__gethex+0x2fc>
 80095b2:	2e01      	cmp	r6, #1
 80095b4:	d112      	bne.n	80095dc <__gethex+0x2f0>
 80095b6:	9a04      	ldr	r2, [sp, #16]
 80095b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	2301      	movs	r3, #1
 80095c0:	6123      	str	r3, [r4, #16]
 80095c2:	f8c9 3000 	str.w	r3, [r9]
 80095c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095c8:	2762      	movs	r7, #98	; 0x62
 80095ca:	601c      	str	r4, [r3, #0]
 80095cc:	e723      	b.n	8009416 <__gethex+0x12a>
 80095ce:	bf00      	nop
 80095d0:	0800b0f0 	.word	0x0800b0f0
 80095d4:	0800b079 	.word	0x0800b079
 80095d8:	0800b08a 	.word	0x0800b08a
 80095dc:	1e71      	subs	r1, r6, #1
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fe5c 	bl	800a29c <__any_on>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1e6      	bne.n	80095b6 <__gethex+0x2ca>
 80095e8:	ee18 0a10 	vmov	r0, s16
 80095ec:	4621      	mov	r1, r4
 80095ee:	f000 f9f5 	bl	80099dc <_Bfree>
 80095f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095f4:	2300      	movs	r3, #0
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	2750      	movs	r7, #80	; 0x50
 80095fa:	e70c      	b.n	8009416 <__gethex+0x12a>
 80095fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1f2      	bne.n	80095e8 <__gethex+0x2fc>
 8009602:	e7d8      	b.n	80095b6 <__gethex+0x2ca>
 8009604:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1d5      	bne.n	80095b6 <__gethex+0x2ca>
 800960a:	e7ed      	b.n	80095e8 <__gethex+0x2fc>
 800960c:	1e6f      	subs	r7, r5, #1
 800960e:	f1ba 0f00 	cmp.w	sl, #0
 8009612:	d131      	bne.n	8009678 <__gethex+0x38c>
 8009614:	b127      	cbz	r7, 8009620 <__gethex+0x334>
 8009616:	4639      	mov	r1, r7
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fe3f 	bl	800a29c <__any_on>
 800961e:	4682      	mov	sl, r0
 8009620:	117b      	asrs	r3, r7, #5
 8009622:	2101      	movs	r1, #1
 8009624:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009628:	f007 071f 	and.w	r7, r7, #31
 800962c:	fa01 f707 	lsl.w	r7, r1, r7
 8009630:	421f      	tst	r7, r3
 8009632:	4629      	mov	r1, r5
 8009634:	4620      	mov	r0, r4
 8009636:	bf18      	it	ne
 8009638:	f04a 0a02 	orrne.w	sl, sl, #2
 800963c:	1b76      	subs	r6, r6, r5
 800963e:	f7ff fded 	bl	800921c <rshift>
 8009642:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009646:	2702      	movs	r7, #2
 8009648:	f1ba 0f00 	cmp.w	sl, #0
 800964c:	d048      	beq.n	80096e0 <__gethex+0x3f4>
 800964e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d015      	beq.n	8009682 <__gethex+0x396>
 8009656:	2b03      	cmp	r3, #3
 8009658:	d017      	beq.n	800968a <__gethex+0x39e>
 800965a:	2b01      	cmp	r3, #1
 800965c:	d109      	bne.n	8009672 <__gethex+0x386>
 800965e:	f01a 0f02 	tst.w	sl, #2
 8009662:	d006      	beq.n	8009672 <__gethex+0x386>
 8009664:	f8d9 0000 	ldr.w	r0, [r9]
 8009668:	ea4a 0a00 	orr.w	sl, sl, r0
 800966c:	f01a 0f01 	tst.w	sl, #1
 8009670:	d10e      	bne.n	8009690 <__gethex+0x3a4>
 8009672:	f047 0710 	orr.w	r7, r7, #16
 8009676:	e033      	b.n	80096e0 <__gethex+0x3f4>
 8009678:	f04f 0a01 	mov.w	sl, #1
 800967c:	e7d0      	b.n	8009620 <__gethex+0x334>
 800967e:	2701      	movs	r7, #1
 8009680:	e7e2      	b.n	8009648 <__gethex+0x35c>
 8009682:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009684:	f1c3 0301 	rsb	r3, r3, #1
 8009688:	9315      	str	r3, [sp, #84]	; 0x54
 800968a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0f0      	beq.n	8009672 <__gethex+0x386>
 8009690:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009694:	f104 0314 	add.w	r3, r4, #20
 8009698:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800969c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096a0:	f04f 0c00 	mov.w	ip, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096ae:	d01c      	beq.n	80096ea <__gethex+0x3fe>
 80096b0:	3201      	adds	r2, #1
 80096b2:	6002      	str	r2, [r0, #0]
 80096b4:	2f02      	cmp	r7, #2
 80096b6:	f104 0314 	add.w	r3, r4, #20
 80096ba:	d13f      	bne.n	800973c <__gethex+0x450>
 80096bc:	f8d8 2000 	ldr.w	r2, [r8]
 80096c0:	3a01      	subs	r2, #1
 80096c2:	42b2      	cmp	r2, r6
 80096c4:	d10a      	bne.n	80096dc <__gethex+0x3f0>
 80096c6:	1171      	asrs	r1, r6, #5
 80096c8:	2201      	movs	r2, #1
 80096ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096ce:	f006 061f 	and.w	r6, r6, #31
 80096d2:	fa02 f606 	lsl.w	r6, r2, r6
 80096d6:	421e      	tst	r6, r3
 80096d8:	bf18      	it	ne
 80096da:	4617      	movne	r7, r2
 80096dc:	f047 0720 	orr.w	r7, r7, #32
 80096e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096e2:	601c      	str	r4, [r3, #0]
 80096e4:	9b04      	ldr	r3, [sp, #16]
 80096e6:	601d      	str	r5, [r3, #0]
 80096e8:	e695      	b.n	8009416 <__gethex+0x12a>
 80096ea:	4299      	cmp	r1, r3
 80096ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80096f0:	d8d8      	bhi.n	80096a4 <__gethex+0x3b8>
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	459b      	cmp	fp, r3
 80096f6:	db19      	blt.n	800972c <__gethex+0x440>
 80096f8:	6861      	ldr	r1, [r4, #4]
 80096fa:	ee18 0a10 	vmov	r0, s16
 80096fe:	3101      	adds	r1, #1
 8009700:	f000 f92c 	bl	800995c <_Balloc>
 8009704:	4681      	mov	r9, r0
 8009706:	b918      	cbnz	r0, 8009710 <__gethex+0x424>
 8009708:	4b1a      	ldr	r3, [pc, #104]	; (8009774 <__gethex+0x488>)
 800970a:	4602      	mov	r2, r0
 800970c:	2184      	movs	r1, #132	; 0x84
 800970e:	e6a8      	b.n	8009462 <__gethex+0x176>
 8009710:	6922      	ldr	r2, [r4, #16]
 8009712:	3202      	adds	r2, #2
 8009714:	f104 010c 	add.w	r1, r4, #12
 8009718:	0092      	lsls	r2, r2, #2
 800971a:	300c      	adds	r0, #12
 800971c:	f7fe fc51 	bl	8007fc2 <memcpy>
 8009720:	4621      	mov	r1, r4
 8009722:	ee18 0a10 	vmov	r0, s16
 8009726:	f000 f959 	bl	80099dc <_Bfree>
 800972a:	464c      	mov	r4, r9
 800972c:	6923      	ldr	r3, [r4, #16]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009734:	6122      	str	r2, [r4, #16]
 8009736:	2201      	movs	r2, #1
 8009738:	615a      	str	r2, [r3, #20]
 800973a:	e7bb      	b.n	80096b4 <__gethex+0x3c8>
 800973c:	6922      	ldr	r2, [r4, #16]
 800973e:	455a      	cmp	r2, fp
 8009740:	dd0b      	ble.n	800975a <__gethex+0x46e>
 8009742:	2101      	movs	r1, #1
 8009744:	4620      	mov	r0, r4
 8009746:	f7ff fd69 	bl	800921c <rshift>
 800974a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800974e:	3501      	adds	r5, #1
 8009750:	42ab      	cmp	r3, r5
 8009752:	f6ff aed0 	blt.w	80094f6 <__gethex+0x20a>
 8009756:	2701      	movs	r7, #1
 8009758:	e7c0      	b.n	80096dc <__gethex+0x3f0>
 800975a:	f016 061f 	ands.w	r6, r6, #31
 800975e:	d0fa      	beq.n	8009756 <__gethex+0x46a>
 8009760:	4453      	add	r3, sl
 8009762:	f1c6 0620 	rsb	r6, r6, #32
 8009766:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800976a:	f000 f9e9 	bl	8009b40 <__hi0bits>
 800976e:	42b0      	cmp	r0, r6
 8009770:	dbe7      	blt.n	8009742 <__gethex+0x456>
 8009772:	e7f0      	b.n	8009756 <__gethex+0x46a>
 8009774:	0800b079 	.word	0x0800b079

08009778 <L_shift>:
 8009778:	f1c2 0208 	rsb	r2, r2, #8
 800977c:	0092      	lsls	r2, r2, #2
 800977e:	b570      	push	{r4, r5, r6, lr}
 8009780:	f1c2 0620 	rsb	r6, r2, #32
 8009784:	6843      	ldr	r3, [r0, #4]
 8009786:	6804      	ldr	r4, [r0, #0]
 8009788:	fa03 f506 	lsl.w	r5, r3, r6
 800978c:	432c      	orrs	r4, r5
 800978e:	40d3      	lsrs	r3, r2
 8009790:	6004      	str	r4, [r0, #0]
 8009792:	f840 3f04 	str.w	r3, [r0, #4]!
 8009796:	4288      	cmp	r0, r1
 8009798:	d3f4      	bcc.n	8009784 <L_shift+0xc>
 800979a:	bd70      	pop	{r4, r5, r6, pc}

0800979c <__match>:
 800979c:	b530      	push	{r4, r5, lr}
 800979e:	6803      	ldr	r3, [r0, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a6:	b914      	cbnz	r4, 80097ae <__match+0x12>
 80097a8:	6003      	str	r3, [r0, #0]
 80097aa:	2001      	movs	r0, #1
 80097ac:	bd30      	pop	{r4, r5, pc}
 80097ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097b6:	2d19      	cmp	r5, #25
 80097b8:	bf98      	it	ls
 80097ba:	3220      	addls	r2, #32
 80097bc:	42a2      	cmp	r2, r4
 80097be:	d0f0      	beq.n	80097a2 <__match+0x6>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e7f3      	b.n	80097ac <__match+0x10>

080097c4 <__hexnan>:
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	680b      	ldr	r3, [r1, #0]
 80097ca:	115e      	asrs	r6, r3, #5
 80097cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097d0:	f013 031f 	ands.w	r3, r3, #31
 80097d4:	b087      	sub	sp, #28
 80097d6:	bf18      	it	ne
 80097d8:	3604      	addne	r6, #4
 80097da:	2500      	movs	r5, #0
 80097dc:	1f37      	subs	r7, r6, #4
 80097de:	4690      	mov	r8, r2
 80097e0:	6802      	ldr	r2, [r0, #0]
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	4682      	mov	sl, r0
 80097e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ea:	46b9      	mov	r9, r7
 80097ec:	463c      	mov	r4, r7
 80097ee:	9502      	str	r5, [sp, #8]
 80097f0:	46ab      	mov	fp, r5
 80097f2:	7851      	ldrb	r1, [r2, #1]
 80097f4:	1c53      	adds	r3, r2, #1
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	b341      	cbz	r1, 800984c <__hexnan+0x88>
 80097fa:	4608      	mov	r0, r1
 80097fc:	9205      	str	r2, [sp, #20]
 80097fe:	9104      	str	r1, [sp, #16]
 8009800:	f7ff fd5e 	bl	80092c0 <__hexdig_fun>
 8009804:	2800      	cmp	r0, #0
 8009806:	d14f      	bne.n	80098a8 <__hexnan+0xe4>
 8009808:	9904      	ldr	r1, [sp, #16]
 800980a:	9a05      	ldr	r2, [sp, #20]
 800980c:	2920      	cmp	r1, #32
 800980e:	d818      	bhi.n	8009842 <__hexnan+0x7e>
 8009810:	9b02      	ldr	r3, [sp, #8]
 8009812:	459b      	cmp	fp, r3
 8009814:	dd13      	ble.n	800983e <__hexnan+0x7a>
 8009816:	454c      	cmp	r4, r9
 8009818:	d206      	bcs.n	8009828 <__hexnan+0x64>
 800981a:	2d07      	cmp	r5, #7
 800981c:	dc04      	bgt.n	8009828 <__hexnan+0x64>
 800981e:	462a      	mov	r2, r5
 8009820:	4649      	mov	r1, r9
 8009822:	4620      	mov	r0, r4
 8009824:	f7ff ffa8 	bl	8009778 <L_shift>
 8009828:	4544      	cmp	r4, r8
 800982a:	d950      	bls.n	80098ce <__hexnan+0x10a>
 800982c:	2300      	movs	r3, #0
 800982e:	f1a4 0904 	sub.w	r9, r4, #4
 8009832:	f844 3c04 	str.w	r3, [r4, #-4]
 8009836:	f8cd b008 	str.w	fp, [sp, #8]
 800983a:	464c      	mov	r4, r9
 800983c:	461d      	mov	r5, r3
 800983e:	9a03      	ldr	r2, [sp, #12]
 8009840:	e7d7      	b.n	80097f2 <__hexnan+0x2e>
 8009842:	2929      	cmp	r1, #41	; 0x29
 8009844:	d156      	bne.n	80098f4 <__hexnan+0x130>
 8009846:	3202      	adds	r2, #2
 8009848:	f8ca 2000 	str.w	r2, [sl]
 800984c:	f1bb 0f00 	cmp.w	fp, #0
 8009850:	d050      	beq.n	80098f4 <__hexnan+0x130>
 8009852:	454c      	cmp	r4, r9
 8009854:	d206      	bcs.n	8009864 <__hexnan+0xa0>
 8009856:	2d07      	cmp	r5, #7
 8009858:	dc04      	bgt.n	8009864 <__hexnan+0xa0>
 800985a:	462a      	mov	r2, r5
 800985c:	4649      	mov	r1, r9
 800985e:	4620      	mov	r0, r4
 8009860:	f7ff ff8a 	bl	8009778 <L_shift>
 8009864:	4544      	cmp	r4, r8
 8009866:	d934      	bls.n	80098d2 <__hexnan+0x10e>
 8009868:	f1a8 0204 	sub.w	r2, r8, #4
 800986c:	4623      	mov	r3, r4
 800986e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009872:	f842 1f04 	str.w	r1, [r2, #4]!
 8009876:	429f      	cmp	r7, r3
 8009878:	d2f9      	bcs.n	800986e <__hexnan+0xaa>
 800987a:	1b3b      	subs	r3, r7, r4
 800987c:	f023 0303 	bic.w	r3, r3, #3
 8009880:	3304      	adds	r3, #4
 8009882:	3401      	adds	r4, #1
 8009884:	3e03      	subs	r6, #3
 8009886:	42b4      	cmp	r4, r6
 8009888:	bf88      	it	hi
 800988a:	2304      	movhi	r3, #4
 800988c:	4443      	add	r3, r8
 800988e:	2200      	movs	r2, #0
 8009890:	f843 2b04 	str.w	r2, [r3], #4
 8009894:	429f      	cmp	r7, r3
 8009896:	d2fb      	bcs.n	8009890 <__hexnan+0xcc>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	b91b      	cbnz	r3, 80098a4 <__hexnan+0xe0>
 800989c:	4547      	cmp	r7, r8
 800989e:	d127      	bne.n	80098f0 <__hexnan+0x12c>
 80098a0:	2301      	movs	r3, #1
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	2005      	movs	r0, #5
 80098a6:	e026      	b.n	80098f6 <__hexnan+0x132>
 80098a8:	3501      	adds	r5, #1
 80098aa:	2d08      	cmp	r5, #8
 80098ac:	f10b 0b01 	add.w	fp, fp, #1
 80098b0:	dd06      	ble.n	80098c0 <__hexnan+0xfc>
 80098b2:	4544      	cmp	r4, r8
 80098b4:	d9c3      	bls.n	800983e <__hexnan+0x7a>
 80098b6:	2300      	movs	r3, #0
 80098b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80098bc:	2501      	movs	r5, #1
 80098be:	3c04      	subs	r4, #4
 80098c0:	6822      	ldr	r2, [r4, #0]
 80098c2:	f000 000f 	and.w	r0, r0, #15
 80098c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	e7b7      	b.n	800983e <__hexnan+0x7a>
 80098ce:	2508      	movs	r5, #8
 80098d0:	e7b5      	b.n	800983e <__hexnan+0x7a>
 80098d2:	9b01      	ldr	r3, [sp, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0df      	beq.n	8009898 <__hexnan+0xd4>
 80098d8:	f04f 32ff 	mov.w	r2, #4294967295
 80098dc:	f1c3 0320 	rsb	r3, r3, #32
 80098e0:	fa22 f303 	lsr.w	r3, r2, r3
 80098e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098e8:	401a      	ands	r2, r3
 80098ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80098ee:	e7d3      	b.n	8009898 <__hexnan+0xd4>
 80098f0:	3f04      	subs	r7, #4
 80098f2:	e7d1      	b.n	8009898 <__hexnan+0xd4>
 80098f4:	2004      	movs	r0, #4
 80098f6:	b007      	add	sp, #28
 80098f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098fc <_lseek_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d07      	ldr	r5, [pc, #28]	; (800991c <_lseek_r+0x20>)
 8009900:	4604      	mov	r4, r0
 8009902:	4608      	mov	r0, r1
 8009904:	4611      	mov	r1, r2
 8009906:	2200      	movs	r2, #0
 8009908:	602a      	str	r2, [r5, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	f7f8 fa7c 	bl	8001e08 <_lseek>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_lseek_r+0x1e>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_lseek_r+0x1e>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	20003138 	.word	0x20003138

08009920 <__ascii_mbtowc>:
 8009920:	b082      	sub	sp, #8
 8009922:	b901      	cbnz	r1, 8009926 <__ascii_mbtowc+0x6>
 8009924:	a901      	add	r1, sp, #4
 8009926:	b142      	cbz	r2, 800993a <__ascii_mbtowc+0x1a>
 8009928:	b14b      	cbz	r3, 800993e <__ascii_mbtowc+0x1e>
 800992a:	7813      	ldrb	r3, [r2, #0]
 800992c:	600b      	str	r3, [r1, #0]
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	1e10      	subs	r0, r2, #0
 8009932:	bf18      	it	ne
 8009934:	2001      	movne	r0, #1
 8009936:	b002      	add	sp, #8
 8009938:	4770      	bx	lr
 800993a:	4610      	mov	r0, r2
 800993c:	e7fb      	b.n	8009936 <__ascii_mbtowc+0x16>
 800993e:	f06f 0001 	mvn.w	r0, #1
 8009942:	e7f8      	b.n	8009936 <__ascii_mbtowc+0x16>

08009944 <__malloc_lock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_lock+0x8>)
 8009946:	f7fe bb3a 	b.w	8007fbe <__retarget_lock_acquire_recursive>
 800994a:	bf00      	nop
 800994c:	2000312c 	.word	0x2000312c

08009950 <__malloc_unlock>:
 8009950:	4801      	ldr	r0, [pc, #4]	; (8009958 <__malloc_unlock+0x8>)
 8009952:	f7fe bb35 	b.w	8007fc0 <__retarget_lock_release_recursive>
 8009956:	bf00      	nop
 8009958:	2000312c 	.word	0x2000312c

0800995c <_Balloc>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009960:	4604      	mov	r4, r0
 8009962:	460d      	mov	r5, r1
 8009964:	b976      	cbnz	r6, 8009984 <_Balloc+0x28>
 8009966:	2010      	movs	r0, #16
 8009968:	f001 f99e 	bl	800aca8 <malloc>
 800996c:	4602      	mov	r2, r0
 800996e:	6260      	str	r0, [r4, #36]	; 0x24
 8009970:	b920      	cbnz	r0, 800997c <_Balloc+0x20>
 8009972:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <_Balloc+0x78>)
 8009974:	4818      	ldr	r0, [pc, #96]	; (80099d8 <_Balloc+0x7c>)
 8009976:	2166      	movs	r1, #102	; 0x66
 8009978:	f001 f900 	bl	800ab7c <__assert_func>
 800997c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009980:	6006      	str	r6, [r0, #0]
 8009982:	60c6      	str	r6, [r0, #12]
 8009984:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009986:	68f3      	ldr	r3, [r6, #12]
 8009988:	b183      	cbz	r3, 80099ac <_Balloc+0x50>
 800998a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009992:	b9b8      	cbnz	r0, 80099c4 <_Balloc+0x68>
 8009994:	2101      	movs	r1, #1
 8009996:	fa01 f605 	lsl.w	r6, r1, r5
 800999a:	1d72      	adds	r2, r6, #5
 800999c:	0092      	lsls	r2, r2, #2
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 fc9d 	bl	800a2de <_calloc_r>
 80099a4:	b160      	cbz	r0, 80099c0 <_Balloc+0x64>
 80099a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099aa:	e00e      	b.n	80099ca <_Balloc+0x6e>
 80099ac:	2221      	movs	r2, #33	; 0x21
 80099ae:	2104      	movs	r1, #4
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fc94 	bl	800a2de <_calloc_r>
 80099b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b8:	60f0      	str	r0, [r6, #12]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e4      	bne.n	800998a <_Balloc+0x2e>
 80099c0:	2000      	movs	r0, #0
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
 80099c4:	6802      	ldr	r2, [r0, #0]
 80099c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099ca:	2300      	movs	r3, #0
 80099cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099d0:	e7f7      	b.n	80099c2 <_Balloc+0x66>
 80099d2:	bf00      	nop
 80099d4:	0800b104 	.word	0x0800b104
 80099d8:	0800b11b 	.word	0x0800b11b

080099dc <_Bfree>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099e0:	4605      	mov	r5, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	b976      	cbnz	r6, 8009a04 <_Bfree+0x28>
 80099e6:	2010      	movs	r0, #16
 80099e8:	f001 f95e 	bl	800aca8 <malloc>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6268      	str	r0, [r5, #36]	; 0x24
 80099f0:	b920      	cbnz	r0, 80099fc <_Bfree+0x20>
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <_Bfree+0x3c>)
 80099f4:	4809      	ldr	r0, [pc, #36]	; (8009a1c <_Bfree+0x40>)
 80099f6:	218a      	movs	r1, #138	; 0x8a
 80099f8:	f001 f8c0 	bl	800ab7c <__assert_func>
 80099fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a00:	6006      	str	r6, [r0, #0]
 8009a02:	60c6      	str	r6, [r0, #12]
 8009a04:	b13c      	cbz	r4, 8009a16 <_Bfree+0x3a>
 8009a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a08:	6862      	ldr	r2, [r4, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a10:	6021      	str	r1, [r4, #0]
 8009a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	0800b104 	.word	0x0800b104
 8009a1c:	0800b11b 	.word	0x0800b11b

08009a20 <__multadd>:
 8009a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	690d      	ldr	r5, [r1, #16]
 8009a26:	4607      	mov	r7, r0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	461e      	mov	r6, r3
 8009a2c:	f101 0c14 	add.w	ip, r1, #20
 8009a30:	2000      	movs	r0, #0
 8009a32:	f8dc 3000 	ldr.w	r3, [ip]
 8009a36:	b299      	uxth	r1, r3
 8009a38:	fb02 6101 	mla	r1, r2, r1, r6
 8009a3c:	0c1e      	lsrs	r6, r3, #16
 8009a3e:	0c0b      	lsrs	r3, r1, #16
 8009a40:	fb02 3306 	mla	r3, r2, r6, r3
 8009a44:	b289      	uxth	r1, r1
 8009a46:	3001      	adds	r0, #1
 8009a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a4c:	4285      	cmp	r5, r0
 8009a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a56:	dcec      	bgt.n	8009a32 <__multadd+0x12>
 8009a58:	b30e      	cbz	r6, 8009a9e <__multadd+0x7e>
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	42ab      	cmp	r3, r5
 8009a5e:	dc19      	bgt.n	8009a94 <__multadd+0x74>
 8009a60:	6861      	ldr	r1, [r4, #4]
 8009a62:	4638      	mov	r0, r7
 8009a64:	3101      	adds	r1, #1
 8009a66:	f7ff ff79 	bl	800995c <_Balloc>
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	b928      	cbnz	r0, 8009a7a <__multadd+0x5a>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <__multadd+0x84>)
 8009a72:	480d      	ldr	r0, [pc, #52]	; (8009aa8 <__multadd+0x88>)
 8009a74:	21b5      	movs	r1, #181	; 0xb5
 8009a76:	f001 f881 	bl	800ab7c <__assert_func>
 8009a7a:	6922      	ldr	r2, [r4, #16]
 8009a7c:	3202      	adds	r2, #2
 8009a7e:	f104 010c 	add.w	r1, r4, #12
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	300c      	adds	r0, #12
 8009a86:	f7fe fa9c 	bl	8007fc2 <memcpy>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	f7ff ffa5 	bl	80099dc <_Bfree>
 8009a92:	4644      	mov	r4, r8
 8009a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a98:	3501      	adds	r5, #1
 8009a9a:	615e      	str	r6, [r3, #20]
 8009a9c:	6125      	str	r5, [r4, #16]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	0800b079 	.word	0x0800b079
 8009aa8:	0800b11b 	.word	0x0800b11b

08009aac <__s2b>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	4615      	mov	r5, r2
 8009ab4:	461f      	mov	r7, r3
 8009ab6:	2209      	movs	r2, #9
 8009ab8:	3308      	adds	r3, #8
 8009aba:	4606      	mov	r6, r0
 8009abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	db09      	blt.n	8009adc <__s2b+0x30>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ff47 	bl	800995c <_Balloc>
 8009ace:	b940      	cbnz	r0, 8009ae2 <__s2b+0x36>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	4b19      	ldr	r3, [pc, #100]	; (8009b38 <__s2b+0x8c>)
 8009ad4:	4819      	ldr	r0, [pc, #100]	; (8009b3c <__s2b+0x90>)
 8009ad6:	21ce      	movs	r1, #206	; 0xce
 8009ad8:	f001 f850 	bl	800ab7c <__assert_func>
 8009adc:	0052      	lsls	r2, r2, #1
 8009ade:	3101      	adds	r1, #1
 8009ae0:	e7f0      	b.n	8009ac4 <__s2b+0x18>
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	6143      	str	r3, [r0, #20]
 8009ae6:	2d09      	cmp	r5, #9
 8009ae8:	f04f 0301 	mov.w	r3, #1
 8009aec:	6103      	str	r3, [r0, #16]
 8009aee:	dd16      	ble.n	8009b1e <__s2b+0x72>
 8009af0:	f104 0909 	add.w	r9, r4, #9
 8009af4:	46c8      	mov	r8, r9
 8009af6:	442c      	add	r4, r5
 8009af8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009afc:	4601      	mov	r1, r0
 8009afe:	3b30      	subs	r3, #48	; 0x30
 8009b00:	220a      	movs	r2, #10
 8009b02:	4630      	mov	r0, r6
 8009b04:	f7ff ff8c 	bl	8009a20 <__multadd>
 8009b08:	45a0      	cmp	r8, r4
 8009b0a:	d1f5      	bne.n	8009af8 <__s2b+0x4c>
 8009b0c:	f1a5 0408 	sub.w	r4, r5, #8
 8009b10:	444c      	add	r4, r9
 8009b12:	1b2d      	subs	r5, r5, r4
 8009b14:	1963      	adds	r3, r4, r5
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	db04      	blt.n	8009b24 <__s2b+0x78>
 8009b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1e:	340a      	adds	r4, #10
 8009b20:	2509      	movs	r5, #9
 8009b22:	e7f6      	b.n	8009b12 <__s2b+0x66>
 8009b24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b28:	4601      	mov	r1, r0
 8009b2a:	3b30      	subs	r3, #48	; 0x30
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ff76 	bl	8009a20 <__multadd>
 8009b34:	e7ee      	b.n	8009b14 <__s2b+0x68>
 8009b36:	bf00      	nop
 8009b38:	0800b079 	.word	0x0800b079
 8009b3c:	0800b11b 	.word	0x0800b11b

08009b40 <__hi0bits>:
 8009b40:	0c03      	lsrs	r3, r0, #16
 8009b42:	041b      	lsls	r3, r3, #16
 8009b44:	b9d3      	cbnz	r3, 8009b7c <__hi0bits+0x3c>
 8009b46:	0400      	lsls	r0, r0, #16
 8009b48:	2310      	movs	r3, #16
 8009b4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b4e:	bf04      	itt	eq
 8009b50:	0200      	lsleq	r0, r0, #8
 8009b52:	3308      	addeq	r3, #8
 8009b54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b58:	bf04      	itt	eq
 8009b5a:	0100      	lsleq	r0, r0, #4
 8009b5c:	3304      	addeq	r3, #4
 8009b5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b62:	bf04      	itt	eq
 8009b64:	0080      	lsleq	r0, r0, #2
 8009b66:	3302      	addeq	r3, #2
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	db05      	blt.n	8009b78 <__hi0bits+0x38>
 8009b6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b70:	f103 0301 	add.w	r3, r3, #1
 8009b74:	bf08      	it	eq
 8009b76:	2320      	moveq	r3, #32
 8009b78:	4618      	mov	r0, r3
 8009b7a:	4770      	bx	lr
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	e7e4      	b.n	8009b4a <__hi0bits+0xa>

08009b80 <__lo0bits>:
 8009b80:	6803      	ldr	r3, [r0, #0]
 8009b82:	f013 0207 	ands.w	r2, r3, #7
 8009b86:	4601      	mov	r1, r0
 8009b88:	d00b      	beq.n	8009ba2 <__lo0bits+0x22>
 8009b8a:	07da      	lsls	r2, r3, #31
 8009b8c:	d423      	bmi.n	8009bd6 <__lo0bits+0x56>
 8009b8e:	0798      	lsls	r0, r3, #30
 8009b90:	bf49      	itett	mi
 8009b92:	085b      	lsrmi	r3, r3, #1
 8009b94:	089b      	lsrpl	r3, r3, #2
 8009b96:	2001      	movmi	r0, #1
 8009b98:	600b      	strmi	r3, [r1, #0]
 8009b9a:	bf5c      	itt	pl
 8009b9c:	600b      	strpl	r3, [r1, #0]
 8009b9e:	2002      	movpl	r0, #2
 8009ba0:	4770      	bx	lr
 8009ba2:	b298      	uxth	r0, r3
 8009ba4:	b9a8      	cbnz	r0, 8009bd2 <__lo0bits+0x52>
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	2010      	movs	r0, #16
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	b90a      	cbnz	r2, 8009bb2 <__lo0bits+0x32>
 8009bae:	3008      	adds	r0, #8
 8009bb0:	0a1b      	lsrs	r3, r3, #8
 8009bb2:	071a      	lsls	r2, r3, #28
 8009bb4:	bf04      	itt	eq
 8009bb6:	091b      	lsreq	r3, r3, #4
 8009bb8:	3004      	addeq	r0, #4
 8009bba:	079a      	lsls	r2, r3, #30
 8009bbc:	bf04      	itt	eq
 8009bbe:	089b      	lsreq	r3, r3, #2
 8009bc0:	3002      	addeq	r0, #2
 8009bc2:	07da      	lsls	r2, r3, #31
 8009bc4:	d403      	bmi.n	8009bce <__lo0bits+0x4e>
 8009bc6:	085b      	lsrs	r3, r3, #1
 8009bc8:	f100 0001 	add.w	r0, r0, #1
 8009bcc:	d005      	beq.n	8009bda <__lo0bits+0x5a>
 8009bce:	600b      	str	r3, [r1, #0]
 8009bd0:	4770      	bx	lr
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	e7e9      	b.n	8009baa <__lo0bits+0x2a>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	4770      	bx	lr
 8009bda:	2020      	movs	r0, #32
 8009bdc:	4770      	bx	lr
	...

08009be0 <__i2b>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	460c      	mov	r4, r1
 8009be4:	2101      	movs	r1, #1
 8009be6:	f7ff feb9 	bl	800995c <_Balloc>
 8009bea:	4602      	mov	r2, r0
 8009bec:	b928      	cbnz	r0, 8009bfa <__i2b+0x1a>
 8009bee:	4b05      	ldr	r3, [pc, #20]	; (8009c04 <__i2b+0x24>)
 8009bf0:	4805      	ldr	r0, [pc, #20]	; (8009c08 <__i2b+0x28>)
 8009bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bf6:	f000 ffc1 	bl	800ab7c <__assert_func>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	6144      	str	r4, [r0, #20]
 8009bfe:	6103      	str	r3, [r0, #16]
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	bf00      	nop
 8009c04:	0800b079 	.word	0x0800b079
 8009c08:	0800b11b 	.word	0x0800b11b

08009c0c <__multiply>:
 8009c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	4691      	mov	r9, r2
 8009c12:	690a      	ldr	r2, [r1, #16]
 8009c14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	bfb8      	it	lt
 8009c1c:	460b      	movlt	r3, r1
 8009c1e:	460c      	mov	r4, r1
 8009c20:	bfbc      	itt	lt
 8009c22:	464c      	movlt	r4, r9
 8009c24:	4699      	movlt	r9, r3
 8009c26:	6927      	ldr	r7, [r4, #16]
 8009c28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c2c:	68a3      	ldr	r3, [r4, #8]
 8009c2e:	6861      	ldr	r1, [r4, #4]
 8009c30:	eb07 060a 	add.w	r6, r7, sl
 8009c34:	42b3      	cmp	r3, r6
 8009c36:	b085      	sub	sp, #20
 8009c38:	bfb8      	it	lt
 8009c3a:	3101      	addlt	r1, #1
 8009c3c:	f7ff fe8e 	bl	800995c <_Balloc>
 8009c40:	b930      	cbnz	r0, 8009c50 <__multiply+0x44>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4b44      	ldr	r3, [pc, #272]	; (8009d58 <__multiply+0x14c>)
 8009c46:	4845      	ldr	r0, [pc, #276]	; (8009d5c <__multiply+0x150>)
 8009c48:	f240 115d 	movw	r1, #349	; 0x15d
 8009c4c:	f000 ff96 	bl	800ab7c <__assert_func>
 8009c50:	f100 0514 	add.w	r5, r0, #20
 8009c54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c58:	462b      	mov	r3, r5
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4543      	cmp	r3, r8
 8009c5e:	d321      	bcc.n	8009ca4 <__multiply+0x98>
 8009c60:	f104 0314 	add.w	r3, r4, #20
 8009c64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c68:	f109 0314 	add.w	r3, r9, #20
 8009c6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c70:	9202      	str	r2, [sp, #8]
 8009c72:	1b3a      	subs	r2, r7, r4
 8009c74:	3a15      	subs	r2, #21
 8009c76:	f022 0203 	bic.w	r2, r2, #3
 8009c7a:	3204      	adds	r2, #4
 8009c7c:	f104 0115 	add.w	r1, r4, #21
 8009c80:	428f      	cmp	r7, r1
 8009c82:	bf38      	it	cc
 8009c84:	2204      	movcc	r2, #4
 8009c86:	9201      	str	r2, [sp, #4]
 8009c88:	9a02      	ldr	r2, [sp, #8]
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d80c      	bhi.n	8009caa <__multiply+0x9e>
 8009c90:	2e00      	cmp	r6, #0
 8009c92:	dd03      	ble.n	8009c9c <__multiply+0x90>
 8009c94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d05a      	beq.n	8009d52 <__multiply+0x146>
 8009c9c:	6106      	str	r6, [r0, #16]
 8009c9e:	b005      	add	sp, #20
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	f843 2b04 	str.w	r2, [r3], #4
 8009ca8:	e7d8      	b.n	8009c5c <__multiply+0x50>
 8009caa:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cae:	f1ba 0f00 	cmp.w	sl, #0
 8009cb2:	d024      	beq.n	8009cfe <__multiply+0xf2>
 8009cb4:	f104 0e14 	add.w	lr, r4, #20
 8009cb8:	46a9      	mov	r9, r5
 8009cba:	f04f 0c00 	mov.w	ip, #0
 8009cbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cc2:	f8d9 1000 	ldr.w	r1, [r9]
 8009cc6:	fa1f fb82 	uxth.w	fp, r2
 8009cca:	b289      	uxth	r1, r1
 8009ccc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cd8:	4461      	add	r1, ip
 8009cda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cde:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ce6:	b289      	uxth	r1, r1
 8009ce8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cec:	4577      	cmp	r7, lr
 8009cee:	f849 1b04 	str.w	r1, [r9], #4
 8009cf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cf6:	d8e2      	bhi.n	8009cbe <__multiply+0xb2>
 8009cf8:	9a01      	ldr	r2, [sp, #4]
 8009cfa:	f845 c002 	str.w	ip, [r5, r2]
 8009cfe:	9a03      	ldr	r2, [sp, #12]
 8009d00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d04:	3304      	adds	r3, #4
 8009d06:	f1b9 0f00 	cmp.w	r9, #0
 8009d0a:	d020      	beq.n	8009d4e <__multiply+0x142>
 8009d0c:	6829      	ldr	r1, [r5, #0]
 8009d0e:	f104 0c14 	add.w	ip, r4, #20
 8009d12:	46ae      	mov	lr, r5
 8009d14:	f04f 0a00 	mov.w	sl, #0
 8009d18:	f8bc b000 	ldrh.w	fp, [ip]
 8009d1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d20:	fb09 220b 	mla	r2, r9, fp, r2
 8009d24:	4492      	add	sl, r2
 8009d26:	b289      	uxth	r1, r1
 8009d28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d2c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d34:	f8be 1000 	ldrh.w	r1, [lr]
 8009d38:	0c12      	lsrs	r2, r2, #16
 8009d3a:	fb09 1102 	mla	r1, r9, r2, r1
 8009d3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d42:	4567      	cmp	r7, ip
 8009d44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d48:	d8e6      	bhi.n	8009d18 <__multiply+0x10c>
 8009d4a:	9a01      	ldr	r2, [sp, #4]
 8009d4c:	50a9      	str	r1, [r5, r2]
 8009d4e:	3504      	adds	r5, #4
 8009d50:	e79a      	b.n	8009c88 <__multiply+0x7c>
 8009d52:	3e01      	subs	r6, #1
 8009d54:	e79c      	b.n	8009c90 <__multiply+0x84>
 8009d56:	bf00      	nop
 8009d58:	0800b079 	.word	0x0800b079
 8009d5c:	0800b11b 	.word	0x0800b11b

08009d60 <__pow5mult>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4615      	mov	r5, r2
 8009d66:	f012 0203 	ands.w	r2, r2, #3
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	d007      	beq.n	8009d80 <__pow5mult+0x20>
 8009d70:	4c25      	ldr	r4, [pc, #148]	; (8009e08 <__pow5mult+0xa8>)
 8009d72:	3a01      	subs	r2, #1
 8009d74:	2300      	movs	r3, #0
 8009d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d7a:	f7ff fe51 	bl	8009a20 <__multadd>
 8009d7e:	4607      	mov	r7, r0
 8009d80:	10ad      	asrs	r5, r5, #2
 8009d82:	d03d      	beq.n	8009e00 <__pow5mult+0xa0>
 8009d84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d86:	b97c      	cbnz	r4, 8009da8 <__pow5mult+0x48>
 8009d88:	2010      	movs	r0, #16
 8009d8a:	f000 ff8d 	bl	800aca8 <malloc>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6270      	str	r0, [r6, #36]	; 0x24
 8009d92:	b928      	cbnz	r0, 8009da0 <__pow5mult+0x40>
 8009d94:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <__pow5mult+0xac>)
 8009d96:	481e      	ldr	r0, [pc, #120]	; (8009e10 <__pow5mult+0xb0>)
 8009d98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d9c:	f000 feee 	bl	800ab7c <__assert_func>
 8009da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009da4:	6004      	str	r4, [r0, #0]
 8009da6:	60c4      	str	r4, [r0, #12]
 8009da8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009db0:	b94c      	cbnz	r4, 8009dc6 <__pow5mult+0x66>
 8009db2:	f240 2171 	movw	r1, #625	; 0x271
 8009db6:	4630      	mov	r0, r6
 8009db8:	f7ff ff12 	bl	8009be0 <__i2b>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	6003      	str	r3, [r0, #0]
 8009dc6:	f04f 0900 	mov.w	r9, #0
 8009dca:	07eb      	lsls	r3, r5, #31
 8009dcc:	d50a      	bpl.n	8009de4 <__pow5mult+0x84>
 8009dce:	4639      	mov	r1, r7
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ff1a 	bl	8009c0c <__multiply>
 8009dd8:	4639      	mov	r1, r7
 8009dda:	4680      	mov	r8, r0
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff fdfd 	bl	80099dc <_Bfree>
 8009de2:	4647      	mov	r7, r8
 8009de4:	106d      	asrs	r5, r5, #1
 8009de6:	d00b      	beq.n	8009e00 <__pow5mult+0xa0>
 8009de8:	6820      	ldr	r0, [r4, #0]
 8009dea:	b938      	cbnz	r0, 8009dfc <__pow5mult+0x9c>
 8009dec:	4622      	mov	r2, r4
 8009dee:	4621      	mov	r1, r4
 8009df0:	4630      	mov	r0, r6
 8009df2:	f7ff ff0b 	bl	8009c0c <__multiply>
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	f8c0 9000 	str.w	r9, [r0]
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	e7e4      	b.n	8009dca <__pow5mult+0x6a>
 8009e00:	4638      	mov	r0, r7
 8009e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e06:	bf00      	nop
 8009e08:	0800b268 	.word	0x0800b268
 8009e0c:	0800b104 	.word	0x0800b104
 8009e10:	0800b11b 	.word	0x0800b11b

08009e14 <__lshift>:
 8009e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	460c      	mov	r4, r1
 8009e1a:	6849      	ldr	r1, [r1, #4]
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	4607      	mov	r7, r0
 8009e26:	4691      	mov	r9, r2
 8009e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e2c:	f108 0601 	add.w	r6, r8, #1
 8009e30:	42b3      	cmp	r3, r6
 8009e32:	db0b      	blt.n	8009e4c <__lshift+0x38>
 8009e34:	4638      	mov	r0, r7
 8009e36:	f7ff fd91 	bl	800995c <_Balloc>
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	b948      	cbnz	r0, 8009e52 <__lshift+0x3e>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	4b2a      	ldr	r3, [pc, #168]	; (8009eec <__lshift+0xd8>)
 8009e42:	482b      	ldr	r0, [pc, #172]	; (8009ef0 <__lshift+0xdc>)
 8009e44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e48:	f000 fe98 	bl	800ab7c <__assert_func>
 8009e4c:	3101      	adds	r1, #1
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	e7ee      	b.n	8009e30 <__lshift+0x1c>
 8009e52:	2300      	movs	r3, #0
 8009e54:	f100 0114 	add.w	r1, r0, #20
 8009e58:	f100 0210 	add.w	r2, r0, #16
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	4553      	cmp	r3, sl
 8009e60:	db37      	blt.n	8009ed2 <__lshift+0xbe>
 8009e62:	6920      	ldr	r0, [r4, #16]
 8009e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e68:	f104 0314 	add.w	r3, r4, #20
 8009e6c:	f019 091f 	ands.w	r9, r9, #31
 8009e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e78:	d02f      	beq.n	8009eda <__lshift+0xc6>
 8009e7a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e7e:	468a      	mov	sl, r1
 8009e80:	f04f 0c00 	mov.w	ip, #0
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	fa02 f209 	lsl.w	r2, r2, r9
 8009e8a:	ea42 020c 	orr.w	r2, r2, ip
 8009e8e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e96:	4298      	cmp	r0, r3
 8009e98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e9c:	d8f2      	bhi.n	8009e84 <__lshift+0x70>
 8009e9e:	1b03      	subs	r3, r0, r4
 8009ea0:	3b15      	subs	r3, #21
 8009ea2:	f023 0303 	bic.w	r3, r3, #3
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	f104 0215 	add.w	r2, r4, #21
 8009eac:	4290      	cmp	r0, r2
 8009eae:	bf38      	it	cc
 8009eb0:	2304      	movcc	r3, #4
 8009eb2:	f841 c003 	str.w	ip, [r1, r3]
 8009eb6:	f1bc 0f00 	cmp.w	ip, #0
 8009eba:	d001      	beq.n	8009ec0 <__lshift+0xac>
 8009ebc:	f108 0602 	add.w	r6, r8, #2
 8009ec0:	3e01      	subs	r6, #1
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	612e      	str	r6, [r5, #16]
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	f7ff fd88 	bl	80099dc <_Bfree>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	e7c1      	b.n	8009e5e <__lshift+0x4a>
 8009eda:	3904      	subs	r1, #4
 8009edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	d8f9      	bhi.n	8009edc <__lshift+0xc8>
 8009ee8:	e7ea      	b.n	8009ec0 <__lshift+0xac>
 8009eea:	bf00      	nop
 8009eec:	0800b079 	.word	0x0800b079
 8009ef0:	0800b11b 	.word	0x0800b11b

08009ef4 <__mcmp>:
 8009ef4:	b530      	push	{r4, r5, lr}
 8009ef6:	6902      	ldr	r2, [r0, #16]
 8009ef8:	690c      	ldr	r4, [r1, #16]
 8009efa:	1b12      	subs	r2, r2, r4
 8009efc:	d10e      	bne.n	8009f1c <__mcmp+0x28>
 8009efe:	f100 0314 	add.w	r3, r0, #20
 8009f02:	3114      	adds	r1, #20
 8009f04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f14:	42a5      	cmp	r5, r4
 8009f16:	d003      	beq.n	8009f20 <__mcmp+0x2c>
 8009f18:	d305      	bcc.n	8009f26 <__mcmp+0x32>
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	bd30      	pop	{r4, r5, pc}
 8009f20:	4283      	cmp	r3, r0
 8009f22:	d3f3      	bcc.n	8009f0c <__mcmp+0x18>
 8009f24:	e7fa      	b.n	8009f1c <__mcmp+0x28>
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	e7f7      	b.n	8009f1c <__mcmp+0x28>

08009f2c <__mdiff>:
 8009f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	460c      	mov	r4, r1
 8009f32:	4606      	mov	r6, r0
 8009f34:	4611      	mov	r1, r2
 8009f36:	4620      	mov	r0, r4
 8009f38:	4690      	mov	r8, r2
 8009f3a:	f7ff ffdb 	bl	8009ef4 <__mcmp>
 8009f3e:	1e05      	subs	r5, r0, #0
 8009f40:	d110      	bne.n	8009f64 <__mdiff+0x38>
 8009f42:	4629      	mov	r1, r5
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff fd09 	bl	800995c <_Balloc>
 8009f4a:	b930      	cbnz	r0, 8009f5a <__mdiff+0x2e>
 8009f4c:	4b3a      	ldr	r3, [pc, #232]	; (800a038 <__mdiff+0x10c>)
 8009f4e:	4602      	mov	r2, r0
 8009f50:	f240 2132 	movw	r1, #562	; 0x232
 8009f54:	4839      	ldr	r0, [pc, #228]	; (800a03c <__mdiff+0x110>)
 8009f56:	f000 fe11 	bl	800ab7c <__assert_func>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	bfa4      	itt	ge
 8009f66:	4643      	movge	r3, r8
 8009f68:	46a0      	movge	r8, r4
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f70:	bfa6      	itte	ge
 8009f72:	461c      	movge	r4, r3
 8009f74:	2500      	movge	r5, #0
 8009f76:	2501      	movlt	r5, #1
 8009f78:	f7ff fcf0 	bl	800995c <_Balloc>
 8009f7c:	b920      	cbnz	r0, 8009f88 <__mdiff+0x5c>
 8009f7e:	4b2e      	ldr	r3, [pc, #184]	; (800a038 <__mdiff+0x10c>)
 8009f80:	4602      	mov	r2, r0
 8009f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f86:	e7e5      	b.n	8009f54 <__mdiff+0x28>
 8009f88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f8c:	6926      	ldr	r6, [r4, #16]
 8009f8e:	60c5      	str	r5, [r0, #12]
 8009f90:	f104 0914 	add.w	r9, r4, #20
 8009f94:	f108 0514 	add.w	r5, r8, #20
 8009f98:	f100 0e14 	add.w	lr, r0, #20
 8009f9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fa4:	f108 0210 	add.w	r2, r8, #16
 8009fa8:	46f2      	mov	sl, lr
 8009faa:	2100      	movs	r1, #0
 8009fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fb4:	fa1f f883 	uxth.w	r8, r3
 8009fb8:	fa11 f18b 	uxtah	r1, r1, fp
 8009fbc:	0c1b      	lsrs	r3, r3, #16
 8009fbe:	eba1 0808 	sub.w	r8, r1, r8
 8009fc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fca:	fa1f f888 	uxth.w	r8, r8
 8009fce:	1419      	asrs	r1, r3, #16
 8009fd0:	454e      	cmp	r6, r9
 8009fd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fd6:	f84a 3b04 	str.w	r3, [sl], #4
 8009fda:	d8e7      	bhi.n	8009fac <__mdiff+0x80>
 8009fdc:	1b33      	subs	r3, r6, r4
 8009fde:	3b15      	subs	r3, #21
 8009fe0:	f023 0303 	bic.w	r3, r3, #3
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	3415      	adds	r4, #21
 8009fe8:	42a6      	cmp	r6, r4
 8009fea:	bf38      	it	cc
 8009fec:	2304      	movcc	r3, #4
 8009fee:	441d      	add	r5, r3
 8009ff0:	4473      	add	r3, lr
 8009ff2:	469e      	mov	lr, r3
 8009ff4:	462e      	mov	r6, r5
 8009ff6:	4566      	cmp	r6, ip
 8009ff8:	d30e      	bcc.n	800a018 <__mdiff+0xec>
 8009ffa:	f10c 0203 	add.w	r2, ip, #3
 8009ffe:	1b52      	subs	r2, r2, r5
 800a000:	f022 0203 	bic.w	r2, r2, #3
 800a004:	3d03      	subs	r5, #3
 800a006:	45ac      	cmp	ip, r5
 800a008:	bf38      	it	cc
 800a00a:	2200      	movcc	r2, #0
 800a00c:	441a      	add	r2, r3
 800a00e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a012:	b17b      	cbz	r3, 800a034 <__mdiff+0x108>
 800a014:	6107      	str	r7, [r0, #16]
 800a016:	e7a3      	b.n	8009f60 <__mdiff+0x34>
 800a018:	f856 8b04 	ldr.w	r8, [r6], #4
 800a01c:	fa11 f288 	uxtah	r2, r1, r8
 800a020:	1414      	asrs	r4, r2, #16
 800a022:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a026:	b292      	uxth	r2, r2
 800a028:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a02c:	f84e 2b04 	str.w	r2, [lr], #4
 800a030:	1421      	asrs	r1, r4, #16
 800a032:	e7e0      	b.n	8009ff6 <__mdiff+0xca>
 800a034:	3f01      	subs	r7, #1
 800a036:	e7ea      	b.n	800a00e <__mdiff+0xe2>
 800a038:	0800b079 	.word	0x0800b079
 800a03c:	0800b11b 	.word	0x0800b11b

0800a040 <__ulp>:
 800a040:	b082      	sub	sp, #8
 800a042:	ed8d 0b00 	vstr	d0, [sp]
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	4912      	ldr	r1, [pc, #72]	; (800a094 <__ulp+0x54>)
 800a04a:	4019      	ands	r1, r3
 800a04c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a050:	2900      	cmp	r1, #0
 800a052:	dd05      	ble.n	800a060 <__ulp+0x20>
 800a054:	2200      	movs	r2, #0
 800a056:	460b      	mov	r3, r1
 800a058:	ec43 2b10 	vmov	d0, r2, r3
 800a05c:	b002      	add	sp, #8
 800a05e:	4770      	bx	lr
 800a060:	4249      	negs	r1, r1
 800a062:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a066:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a06a:	f04f 0200 	mov.w	r2, #0
 800a06e:	f04f 0300 	mov.w	r3, #0
 800a072:	da04      	bge.n	800a07e <__ulp+0x3e>
 800a074:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a078:	fa41 f300 	asr.w	r3, r1, r0
 800a07c:	e7ec      	b.n	800a058 <__ulp+0x18>
 800a07e:	f1a0 0114 	sub.w	r1, r0, #20
 800a082:	291e      	cmp	r1, #30
 800a084:	bfda      	itte	le
 800a086:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a08a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a08e:	2101      	movgt	r1, #1
 800a090:	460a      	mov	r2, r1
 800a092:	e7e1      	b.n	800a058 <__ulp+0x18>
 800a094:	7ff00000 	.word	0x7ff00000

0800a098 <__b2d>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	6905      	ldr	r5, [r0, #16]
 800a09c:	f100 0714 	add.w	r7, r0, #20
 800a0a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a0a4:	1f2e      	subs	r6, r5, #4
 800a0a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff fd48 	bl	8009b40 <__hi0bits>
 800a0b0:	f1c0 0320 	rsb	r3, r0, #32
 800a0b4:	280a      	cmp	r0, #10
 800a0b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a134 <__b2d+0x9c>
 800a0ba:	600b      	str	r3, [r1, #0]
 800a0bc:	dc14      	bgt.n	800a0e8 <__b2d+0x50>
 800a0be:	f1c0 0e0b 	rsb	lr, r0, #11
 800a0c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a0c6:	42b7      	cmp	r7, r6
 800a0c8:	ea41 030c 	orr.w	r3, r1, ip
 800a0cc:	bf34      	ite	cc
 800a0ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0d2:	2100      	movcs	r1, #0
 800a0d4:	3015      	adds	r0, #21
 800a0d6:	fa04 f000 	lsl.w	r0, r4, r0
 800a0da:	fa21 f10e 	lsr.w	r1, r1, lr
 800a0de:	ea40 0201 	orr.w	r2, r0, r1
 800a0e2:	ec43 2b10 	vmov	d0, r2, r3
 800a0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e8:	42b7      	cmp	r7, r6
 800a0ea:	bf3a      	itte	cc
 800a0ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0f4:	2100      	movcs	r1, #0
 800a0f6:	380b      	subs	r0, #11
 800a0f8:	d017      	beq.n	800a12a <__b2d+0x92>
 800a0fa:	f1c0 0c20 	rsb	ip, r0, #32
 800a0fe:	fa04 f500 	lsl.w	r5, r4, r0
 800a102:	42be      	cmp	r6, r7
 800a104:	fa21 f40c 	lsr.w	r4, r1, ip
 800a108:	ea45 0504 	orr.w	r5, r5, r4
 800a10c:	bf8c      	ite	hi
 800a10e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a112:	2400      	movls	r4, #0
 800a114:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a118:	fa01 f000 	lsl.w	r0, r1, r0
 800a11c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a120:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a124:	ea40 0204 	orr.w	r2, r0, r4
 800a128:	e7db      	b.n	800a0e2 <__b2d+0x4a>
 800a12a:	ea44 030c 	orr.w	r3, r4, ip
 800a12e:	460a      	mov	r2, r1
 800a130:	e7d7      	b.n	800a0e2 <__b2d+0x4a>
 800a132:	bf00      	nop
 800a134:	3ff00000 	.word	0x3ff00000

0800a138 <__d2b>:
 800a138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	4689      	mov	r9, r1
 800a13e:	2101      	movs	r1, #1
 800a140:	ec57 6b10 	vmov	r6, r7, d0
 800a144:	4690      	mov	r8, r2
 800a146:	f7ff fc09 	bl	800995c <_Balloc>
 800a14a:	4604      	mov	r4, r0
 800a14c:	b930      	cbnz	r0, 800a15c <__d2b+0x24>
 800a14e:	4602      	mov	r2, r0
 800a150:	4b25      	ldr	r3, [pc, #148]	; (800a1e8 <__d2b+0xb0>)
 800a152:	4826      	ldr	r0, [pc, #152]	; (800a1ec <__d2b+0xb4>)
 800a154:	f240 310a 	movw	r1, #778	; 0x30a
 800a158:	f000 fd10 	bl	800ab7c <__assert_func>
 800a15c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a164:	bb35      	cbnz	r5, 800a1b4 <__d2b+0x7c>
 800a166:	2e00      	cmp	r6, #0
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	d028      	beq.n	800a1be <__d2b+0x86>
 800a16c:	4668      	mov	r0, sp
 800a16e:	9600      	str	r6, [sp, #0]
 800a170:	f7ff fd06 	bl	8009b80 <__lo0bits>
 800a174:	9900      	ldr	r1, [sp, #0]
 800a176:	b300      	cbz	r0, 800a1ba <__d2b+0x82>
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	f1c0 0320 	rsb	r3, r0, #32
 800a17e:	fa02 f303 	lsl.w	r3, r2, r3
 800a182:	430b      	orrs	r3, r1
 800a184:	40c2      	lsrs	r2, r0
 800a186:	6163      	str	r3, [r4, #20]
 800a188:	9201      	str	r2, [sp, #4]
 800a18a:	9b01      	ldr	r3, [sp, #4]
 800a18c:	61a3      	str	r3, [r4, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bf14      	ite	ne
 800a192:	2202      	movne	r2, #2
 800a194:	2201      	moveq	r2, #1
 800a196:	6122      	str	r2, [r4, #16]
 800a198:	b1d5      	cbz	r5, 800a1d0 <__d2b+0x98>
 800a19a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a19e:	4405      	add	r5, r0
 800a1a0:	f8c9 5000 	str.w	r5, [r9]
 800a1a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1a8:	f8c8 0000 	str.w	r0, [r8]
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	b003      	add	sp, #12
 800a1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1b8:	e7d5      	b.n	800a166 <__d2b+0x2e>
 800a1ba:	6161      	str	r1, [r4, #20]
 800a1bc:	e7e5      	b.n	800a18a <__d2b+0x52>
 800a1be:	a801      	add	r0, sp, #4
 800a1c0:	f7ff fcde 	bl	8009b80 <__lo0bits>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	6163      	str	r3, [r4, #20]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	6122      	str	r2, [r4, #16]
 800a1cc:	3020      	adds	r0, #32
 800a1ce:	e7e3      	b.n	800a198 <__d2b+0x60>
 800a1d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1d8:	f8c9 0000 	str.w	r0, [r9]
 800a1dc:	6918      	ldr	r0, [r3, #16]
 800a1de:	f7ff fcaf 	bl	8009b40 <__hi0bits>
 800a1e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1e6:	e7df      	b.n	800a1a8 <__d2b+0x70>
 800a1e8:	0800b079 	.word	0x0800b079
 800a1ec:	0800b11b 	.word	0x0800b11b

0800a1f0 <__ratio>:
 800a1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	4688      	mov	r8, r1
 800a1f6:	4669      	mov	r1, sp
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	f7ff ff4d 	bl	800a098 <__b2d>
 800a1fe:	a901      	add	r1, sp, #4
 800a200:	4640      	mov	r0, r8
 800a202:	ec55 4b10 	vmov	r4, r5, d0
 800a206:	f7ff ff47 	bl	800a098 <__b2d>
 800a20a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a20e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a212:	eba3 0c02 	sub.w	ip, r3, r2
 800a216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a220:	ec51 0b10 	vmov	r0, r1, d0
 800a224:	2b00      	cmp	r3, #0
 800a226:	bfd6      	itet	le
 800a228:	460a      	movle	r2, r1
 800a22a:	462a      	movgt	r2, r5
 800a22c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a230:	468b      	mov	fp, r1
 800a232:	462f      	mov	r7, r5
 800a234:	bfd4      	ite	le
 800a236:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a23a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a23e:	4620      	mov	r0, r4
 800a240:	ee10 2a10 	vmov	r2, s0
 800a244:	465b      	mov	r3, fp
 800a246:	4639      	mov	r1, r7
 800a248:	f7f6 fb10 	bl	800086c <__aeabi_ddiv>
 800a24c:	ec41 0b10 	vmov	d0, r0, r1
 800a250:	b003      	add	sp, #12
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a256 <__copybits>:
 800a256:	3901      	subs	r1, #1
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	1149      	asrs	r1, r1, #5
 800a25c:	6914      	ldr	r4, [r2, #16]
 800a25e:	3101      	adds	r1, #1
 800a260:	f102 0314 	add.w	r3, r2, #20
 800a264:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a268:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a26c:	1f05      	subs	r5, r0, #4
 800a26e:	42a3      	cmp	r3, r4
 800a270:	d30c      	bcc.n	800a28c <__copybits+0x36>
 800a272:	1aa3      	subs	r3, r4, r2
 800a274:	3b11      	subs	r3, #17
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	3211      	adds	r2, #17
 800a27c:	42a2      	cmp	r2, r4
 800a27e:	bf88      	it	hi
 800a280:	2300      	movhi	r3, #0
 800a282:	4418      	add	r0, r3
 800a284:	2300      	movs	r3, #0
 800a286:	4288      	cmp	r0, r1
 800a288:	d305      	bcc.n	800a296 <__copybits+0x40>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a290:	f845 6f04 	str.w	r6, [r5, #4]!
 800a294:	e7eb      	b.n	800a26e <__copybits+0x18>
 800a296:	f840 3b04 	str.w	r3, [r0], #4
 800a29a:	e7f4      	b.n	800a286 <__copybits+0x30>

0800a29c <__any_on>:
 800a29c:	f100 0214 	add.w	r2, r0, #20
 800a2a0:	6900      	ldr	r0, [r0, #16]
 800a2a2:	114b      	asrs	r3, r1, #5
 800a2a4:	4298      	cmp	r0, r3
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	db11      	blt.n	800a2ce <__any_on+0x32>
 800a2aa:	dd0a      	ble.n	800a2c2 <__any_on+0x26>
 800a2ac:	f011 011f 	ands.w	r1, r1, #31
 800a2b0:	d007      	beq.n	800a2c2 <__any_on+0x26>
 800a2b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2b6:	fa24 f001 	lsr.w	r0, r4, r1
 800a2ba:	fa00 f101 	lsl.w	r1, r0, r1
 800a2be:	428c      	cmp	r4, r1
 800a2c0:	d10b      	bne.n	800a2da <__any_on+0x3e>
 800a2c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d803      	bhi.n	800a2d2 <__any_on+0x36>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	e7f7      	b.n	800a2c2 <__any_on+0x26>
 800a2d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2d6:	2900      	cmp	r1, #0
 800a2d8:	d0f5      	beq.n	800a2c6 <__any_on+0x2a>
 800a2da:	2001      	movs	r0, #1
 800a2dc:	e7f6      	b.n	800a2cc <__any_on+0x30>

0800a2de <_calloc_r>:
 800a2de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2e0:	fba1 2402 	umull	r2, r4, r1, r2
 800a2e4:	b94c      	cbnz	r4, 800a2fa <_calloc_r+0x1c>
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	9201      	str	r2, [sp, #4]
 800a2ea:	f7fd fea1 	bl	8008030 <_malloc_r>
 800a2ee:	9a01      	ldr	r2, [sp, #4]
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	b930      	cbnz	r0, 800a302 <_calloc_r+0x24>
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	b003      	add	sp, #12
 800a2f8:	bd30      	pop	{r4, r5, pc}
 800a2fa:	220c      	movs	r2, #12
 800a2fc:	6002      	str	r2, [r0, #0]
 800a2fe:	2500      	movs	r5, #0
 800a300:	e7f8      	b.n	800a2f4 <_calloc_r+0x16>
 800a302:	4621      	mov	r1, r4
 800a304:	f7fd fe6b 	bl	8007fde <memset>
 800a308:	e7f4      	b.n	800a2f4 <_calloc_r+0x16>
	...

0800a30c <_free_r>:
 800a30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30e:	2900      	cmp	r1, #0
 800a310:	d044      	beq.n	800a39c <_free_r+0x90>
 800a312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a316:	9001      	str	r0, [sp, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f1a1 0404 	sub.w	r4, r1, #4
 800a31e:	bfb8      	it	lt
 800a320:	18e4      	addlt	r4, r4, r3
 800a322:	f7ff fb0f 	bl	8009944 <__malloc_lock>
 800a326:	4a1e      	ldr	r2, [pc, #120]	; (800a3a0 <_free_r+0x94>)
 800a328:	9801      	ldr	r0, [sp, #4]
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	b933      	cbnz	r3, 800a33c <_free_r+0x30>
 800a32e:	6063      	str	r3, [r4, #4]
 800a330:	6014      	str	r4, [r2, #0]
 800a332:	b003      	add	sp, #12
 800a334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a338:	f7ff bb0a 	b.w	8009950 <__malloc_unlock>
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	d908      	bls.n	800a352 <_free_r+0x46>
 800a340:	6825      	ldr	r5, [r4, #0]
 800a342:	1961      	adds	r1, r4, r5
 800a344:	428b      	cmp	r3, r1
 800a346:	bf01      	itttt	eq
 800a348:	6819      	ldreq	r1, [r3, #0]
 800a34a:	685b      	ldreq	r3, [r3, #4]
 800a34c:	1949      	addeq	r1, r1, r5
 800a34e:	6021      	streq	r1, [r4, #0]
 800a350:	e7ed      	b.n	800a32e <_free_r+0x22>
 800a352:	461a      	mov	r2, r3
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	b10b      	cbz	r3, 800a35c <_free_r+0x50>
 800a358:	42a3      	cmp	r3, r4
 800a35a:	d9fa      	bls.n	800a352 <_free_r+0x46>
 800a35c:	6811      	ldr	r1, [r2, #0]
 800a35e:	1855      	adds	r5, r2, r1
 800a360:	42a5      	cmp	r5, r4
 800a362:	d10b      	bne.n	800a37c <_free_r+0x70>
 800a364:	6824      	ldr	r4, [r4, #0]
 800a366:	4421      	add	r1, r4
 800a368:	1854      	adds	r4, r2, r1
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	6011      	str	r1, [r2, #0]
 800a36e:	d1e0      	bne.n	800a332 <_free_r+0x26>
 800a370:	681c      	ldr	r4, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	6053      	str	r3, [r2, #4]
 800a376:	4421      	add	r1, r4
 800a378:	6011      	str	r1, [r2, #0]
 800a37a:	e7da      	b.n	800a332 <_free_r+0x26>
 800a37c:	d902      	bls.n	800a384 <_free_r+0x78>
 800a37e:	230c      	movs	r3, #12
 800a380:	6003      	str	r3, [r0, #0]
 800a382:	e7d6      	b.n	800a332 <_free_r+0x26>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	1961      	adds	r1, r4, r5
 800a388:	428b      	cmp	r3, r1
 800a38a:	bf04      	itt	eq
 800a38c:	6819      	ldreq	r1, [r3, #0]
 800a38e:	685b      	ldreq	r3, [r3, #4]
 800a390:	6063      	str	r3, [r4, #4]
 800a392:	bf04      	itt	eq
 800a394:	1949      	addeq	r1, r1, r5
 800a396:	6021      	streq	r1, [r4, #0]
 800a398:	6054      	str	r4, [r2, #4]
 800a39a:	e7ca      	b.n	800a332 <_free_r+0x26>
 800a39c:	b003      	add	sp, #12
 800a39e:	bd30      	pop	{r4, r5, pc}
 800a3a0:	20003130 	.word	0x20003130

0800a3a4 <__sfputc_r>:
 800a3a4:	6893      	ldr	r3, [r2, #8]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	b410      	push	{r4}
 800a3ac:	6093      	str	r3, [r2, #8]
 800a3ae:	da08      	bge.n	800a3c2 <__sfputc_r+0x1e>
 800a3b0:	6994      	ldr	r4, [r2, #24]
 800a3b2:	42a3      	cmp	r3, r4
 800a3b4:	db01      	blt.n	800a3ba <__sfputc_r+0x16>
 800a3b6:	290a      	cmp	r1, #10
 800a3b8:	d103      	bne.n	800a3c2 <__sfputc_r+0x1e>
 800a3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3be:	f000 bb0f 	b.w	800a9e0 <__swbuf_r>
 800a3c2:	6813      	ldr	r3, [r2, #0]
 800a3c4:	1c58      	adds	r0, r3, #1
 800a3c6:	6010      	str	r0, [r2, #0]
 800a3c8:	7019      	strb	r1, [r3, #0]
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <__sfputs_r>:
 800a3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	18d5      	adds	r5, r2, r3
 800a3dc:	42ac      	cmp	r4, r5
 800a3de:	d101      	bne.n	800a3e4 <__sfputs_r+0x12>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e007      	b.n	800a3f4 <__sfputs_r+0x22>
 800a3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e8:	463a      	mov	r2, r7
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ffda 	bl	800a3a4 <__sfputc_r>
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	d1f3      	bne.n	800a3dc <__sfputs_r+0xa>
 800a3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3f8 <_vfiprintf_r>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	b09d      	sub	sp, #116	; 0x74
 800a400:	4614      	mov	r4, r2
 800a402:	4698      	mov	r8, r3
 800a404:	4606      	mov	r6, r0
 800a406:	b118      	cbz	r0, 800a410 <_vfiprintf_r+0x18>
 800a408:	6983      	ldr	r3, [r0, #24]
 800a40a:	b90b      	cbnz	r3, 800a410 <_vfiprintf_r+0x18>
 800a40c:	f7fd fd14 	bl	8007e38 <__sinit>
 800a410:	4b89      	ldr	r3, [pc, #548]	; (800a638 <_vfiprintf_r+0x240>)
 800a412:	429d      	cmp	r5, r3
 800a414:	d11b      	bne.n	800a44e <_vfiprintf_r+0x56>
 800a416:	6875      	ldr	r5, [r6, #4]
 800a418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a41a:	07d9      	lsls	r1, r3, #31
 800a41c:	d405      	bmi.n	800a42a <_vfiprintf_r+0x32>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	059a      	lsls	r2, r3, #22
 800a422:	d402      	bmi.n	800a42a <_vfiprintf_r+0x32>
 800a424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a426:	f7fd fdca 	bl	8007fbe <__retarget_lock_acquire_recursive>
 800a42a:	89ab      	ldrh	r3, [r5, #12]
 800a42c:	071b      	lsls	r3, r3, #28
 800a42e:	d501      	bpl.n	800a434 <_vfiprintf_r+0x3c>
 800a430:	692b      	ldr	r3, [r5, #16]
 800a432:	b9eb      	cbnz	r3, 800a470 <_vfiprintf_r+0x78>
 800a434:	4629      	mov	r1, r5
 800a436:	4630      	mov	r0, r6
 800a438:	f000 fb32 	bl	800aaa0 <__swsetup_r>
 800a43c:	b1c0      	cbz	r0, 800a470 <_vfiprintf_r+0x78>
 800a43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a440:	07dc      	lsls	r4, r3, #31
 800a442:	d50e      	bpl.n	800a462 <_vfiprintf_r+0x6a>
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	b01d      	add	sp, #116	; 0x74
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	4b7b      	ldr	r3, [pc, #492]	; (800a63c <_vfiprintf_r+0x244>)
 800a450:	429d      	cmp	r5, r3
 800a452:	d101      	bne.n	800a458 <_vfiprintf_r+0x60>
 800a454:	68b5      	ldr	r5, [r6, #8]
 800a456:	e7df      	b.n	800a418 <_vfiprintf_r+0x20>
 800a458:	4b79      	ldr	r3, [pc, #484]	; (800a640 <_vfiprintf_r+0x248>)
 800a45a:	429d      	cmp	r5, r3
 800a45c:	bf08      	it	eq
 800a45e:	68f5      	ldreq	r5, [r6, #12]
 800a460:	e7da      	b.n	800a418 <_vfiprintf_r+0x20>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	0598      	lsls	r0, r3, #22
 800a466:	d4ed      	bmi.n	800a444 <_vfiprintf_r+0x4c>
 800a468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a46a:	f7fd fda9 	bl	8007fc0 <__retarget_lock_release_recursive>
 800a46e:	e7e9      	b.n	800a444 <_vfiprintf_r+0x4c>
 800a470:	2300      	movs	r3, #0
 800a472:	9309      	str	r3, [sp, #36]	; 0x24
 800a474:	2320      	movs	r3, #32
 800a476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a47a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a47e:	2330      	movs	r3, #48	; 0x30
 800a480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a644 <_vfiprintf_r+0x24c>
 800a484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a488:	f04f 0901 	mov.w	r9, #1
 800a48c:	4623      	mov	r3, r4
 800a48e:	469a      	mov	sl, r3
 800a490:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a494:	b10a      	cbz	r2, 800a49a <_vfiprintf_r+0xa2>
 800a496:	2a25      	cmp	r2, #37	; 0x25
 800a498:	d1f9      	bne.n	800a48e <_vfiprintf_r+0x96>
 800a49a:	ebba 0b04 	subs.w	fp, sl, r4
 800a49e:	d00b      	beq.n	800a4b8 <_vfiprintf_r+0xc0>
 800a4a0:	465b      	mov	r3, fp
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7ff ff93 	bl	800a3d2 <__sfputs_r>
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	f000 80aa 	beq.w	800a606 <_vfiprintf_r+0x20e>
 800a4b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b4:	445a      	add	r2, fp
 800a4b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 80a2 	beq.w	800a606 <_vfiprintf_r+0x20e>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4cc:	f10a 0a01 	add.w	sl, sl, #1
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	9307      	str	r3, [sp, #28]
 800a4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4d8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4da:	4654      	mov	r4, sl
 800a4dc:	2205      	movs	r2, #5
 800a4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e2:	4858      	ldr	r0, [pc, #352]	; (800a644 <_vfiprintf_r+0x24c>)
 800a4e4:	f7f5 fe8c 	bl	8000200 <memchr>
 800a4e8:	9a04      	ldr	r2, [sp, #16]
 800a4ea:	b9d8      	cbnz	r0, 800a524 <_vfiprintf_r+0x12c>
 800a4ec:	06d1      	lsls	r1, r2, #27
 800a4ee:	bf44      	itt	mi
 800a4f0:	2320      	movmi	r3, #32
 800a4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f6:	0713      	lsls	r3, r2, #28
 800a4f8:	bf44      	itt	mi
 800a4fa:	232b      	movmi	r3, #43	; 0x2b
 800a4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a500:	f89a 3000 	ldrb.w	r3, [sl]
 800a504:	2b2a      	cmp	r3, #42	; 0x2a
 800a506:	d015      	beq.n	800a534 <_vfiprintf_r+0x13c>
 800a508:	9a07      	ldr	r2, [sp, #28]
 800a50a:	4654      	mov	r4, sl
 800a50c:	2000      	movs	r0, #0
 800a50e:	f04f 0c0a 	mov.w	ip, #10
 800a512:	4621      	mov	r1, r4
 800a514:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a518:	3b30      	subs	r3, #48	; 0x30
 800a51a:	2b09      	cmp	r3, #9
 800a51c:	d94e      	bls.n	800a5bc <_vfiprintf_r+0x1c4>
 800a51e:	b1b0      	cbz	r0, 800a54e <_vfiprintf_r+0x156>
 800a520:	9207      	str	r2, [sp, #28]
 800a522:	e014      	b.n	800a54e <_vfiprintf_r+0x156>
 800a524:	eba0 0308 	sub.w	r3, r0, r8
 800a528:	fa09 f303 	lsl.w	r3, r9, r3
 800a52c:	4313      	orrs	r3, r2
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	46a2      	mov	sl, r4
 800a532:	e7d2      	b.n	800a4da <_vfiprintf_r+0xe2>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	1d19      	adds	r1, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	9103      	str	r1, [sp, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfbb      	ittet	lt
 800a540:	425b      	neglt	r3, r3
 800a542:	f042 0202 	orrlt.w	r2, r2, #2
 800a546:	9307      	strge	r3, [sp, #28]
 800a548:	9307      	strlt	r3, [sp, #28]
 800a54a:	bfb8      	it	lt
 800a54c:	9204      	strlt	r2, [sp, #16]
 800a54e:	7823      	ldrb	r3, [r4, #0]
 800a550:	2b2e      	cmp	r3, #46	; 0x2e
 800a552:	d10c      	bne.n	800a56e <_vfiprintf_r+0x176>
 800a554:	7863      	ldrb	r3, [r4, #1]
 800a556:	2b2a      	cmp	r3, #42	; 0x2a
 800a558:	d135      	bne.n	800a5c6 <_vfiprintf_r+0x1ce>
 800a55a:	9b03      	ldr	r3, [sp, #12]
 800a55c:	1d1a      	adds	r2, r3, #4
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	9203      	str	r2, [sp, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	bfb8      	it	lt
 800a566:	f04f 33ff 	movlt.w	r3, #4294967295
 800a56a:	3402      	adds	r4, #2
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a654 <_vfiprintf_r+0x25c>
 800a572:	7821      	ldrb	r1, [r4, #0]
 800a574:	2203      	movs	r2, #3
 800a576:	4650      	mov	r0, sl
 800a578:	f7f5 fe42 	bl	8000200 <memchr>
 800a57c:	b140      	cbz	r0, 800a590 <_vfiprintf_r+0x198>
 800a57e:	2340      	movs	r3, #64	; 0x40
 800a580:	eba0 000a 	sub.w	r0, r0, sl
 800a584:	fa03 f000 	lsl.w	r0, r3, r0
 800a588:	9b04      	ldr	r3, [sp, #16]
 800a58a:	4303      	orrs	r3, r0
 800a58c:	3401      	adds	r4, #1
 800a58e:	9304      	str	r3, [sp, #16]
 800a590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a594:	482c      	ldr	r0, [pc, #176]	; (800a648 <_vfiprintf_r+0x250>)
 800a596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59a:	2206      	movs	r2, #6
 800a59c:	f7f5 fe30 	bl	8000200 <memchr>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d03f      	beq.n	800a624 <_vfiprintf_r+0x22c>
 800a5a4:	4b29      	ldr	r3, [pc, #164]	; (800a64c <_vfiprintf_r+0x254>)
 800a5a6:	bb1b      	cbnz	r3, 800a5f0 <_vfiprintf_r+0x1f8>
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	3307      	adds	r3, #7
 800a5ac:	f023 0307 	bic.w	r3, r3, #7
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	9303      	str	r3, [sp, #12]
 800a5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b6:	443b      	add	r3, r7
 800a5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ba:	e767      	b.n	800a48c <_vfiprintf_r+0x94>
 800a5bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	e7a5      	b.n	800a512 <_vfiprintf_r+0x11a>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	3401      	adds	r4, #1
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	f04f 0c0a 	mov.w	ip, #10
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d8:	3a30      	subs	r2, #48	; 0x30
 800a5da:	2a09      	cmp	r2, #9
 800a5dc:	d903      	bls.n	800a5e6 <_vfiprintf_r+0x1ee>
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0c5      	beq.n	800a56e <_vfiprintf_r+0x176>
 800a5e2:	9105      	str	r1, [sp, #20]
 800a5e4:	e7c3      	b.n	800a56e <_vfiprintf_r+0x176>
 800a5e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e7f0      	b.n	800a5d2 <_vfiprintf_r+0x1da>
 800a5f0:	ab03      	add	r3, sp, #12
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	4b16      	ldr	r3, [pc, #88]	; (800a650 <_vfiprintf_r+0x258>)
 800a5f8:	a904      	add	r1, sp, #16
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f3af 8000 	nop.w
 800a600:	4607      	mov	r7, r0
 800a602:	1c78      	adds	r0, r7, #1
 800a604:	d1d6      	bne.n	800a5b4 <_vfiprintf_r+0x1bc>
 800a606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a608:	07d9      	lsls	r1, r3, #31
 800a60a:	d405      	bmi.n	800a618 <_vfiprintf_r+0x220>
 800a60c:	89ab      	ldrh	r3, [r5, #12]
 800a60e:	059a      	lsls	r2, r3, #22
 800a610:	d402      	bmi.n	800a618 <_vfiprintf_r+0x220>
 800a612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a614:	f7fd fcd4 	bl	8007fc0 <__retarget_lock_release_recursive>
 800a618:	89ab      	ldrh	r3, [r5, #12]
 800a61a:	065b      	lsls	r3, r3, #25
 800a61c:	f53f af12 	bmi.w	800a444 <_vfiprintf_r+0x4c>
 800a620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a622:	e711      	b.n	800a448 <_vfiprintf_r+0x50>
 800a624:	ab03      	add	r3, sp, #12
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	462a      	mov	r2, r5
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <_vfiprintf_r+0x258>)
 800a62c:	a904      	add	r1, sp, #16
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f880 	bl	800a734 <_printf_i>
 800a634:	e7e4      	b.n	800a600 <_vfiprintf_r+0x208>
 800a636:	bf00      	nop
 800a638:	0800aed4 	.word	0x0800aed4
 800a63c:	0800aef4 	.word	0x0800aef4
 800a640:	0800aeb4 	.word	0x0800aeb4
 800a644:	0800b274 	.word	0x0800b274
 800a648:	0800b27e 	.word	0x0800b27e
 800a64c:	00000000 	.word	0x00000000
 800a650:	0800a3d3 	.word	0x0800a3d3
 800a654:	0800b27a 	.word	0x0800b27a

0800a658 <_printf_common>:
 800a658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65c:	4616      	mov	r6, r2
 800a65e:	4699      	mov	r9, r3
 800a660:	688a      	ldr	r2, [r1, #8]
 800a662:	690b      	ldr	r3, [r1, #16]
 800a664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a668:	4293      	cmp	r3, r2
 800a66a:	bfb8      	it	lt
 800a66c:	4613      	movlt	r3, r2
 800a66e:	6033      	str	r3, [r6, #0]
 800a670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a674:	4607      	mov	r7, r0
 800a676:	460c      	mov	r4, r1
 800a678:	b10a      	cbz	r2, 800a67e <_printf_common+0x26>
 800a67a:	3301      	adds	r3, #1
 800a67c:	6033      	str	r3, [r6, #0]
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	0699      	lsls	r1, r3, #26
 800a682:	bf42      	ittt	mi
 800a684:	6833      	ldrmi	r3, [r6, #0]
 800a686:	3302      	addmi	r3, #2
 800a688:	6033      	strmi	r3, [r6, #0]
 800a68a:	6825      	ldr	r5, [r4, #0]
 800a68c:	f015 0506 	ands.w	r5, r5, #6
 800a690:	d106      	bne.n	800a6a0 <_printf_common+0x48>
 800a692:	f104 0a19 	add.w	sl, r4, #25
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	6832      	ldr	r2, [r6, #0]
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	dc26      	bgt.n	800a6ee <_printf_common+0x96>
 800a6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6a4:	1e13      	subs	r3, r2, #0
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	bf18      	it	ne
 800a6aa:	2301      	movne	r3, #1
 800a6ac:	0692      	lsls	r2, r2, #26
 800a6ae:	d42b      	bmi.n	800a708 <_printf_common+0xb0>
 800a6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	47c0      	blx	r8
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d01e      	beq.n	800a6fc <_printf_common+0xa4>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	68e5      	ldr	r5, [r4, #12]
 800a6c2:	6832      	ldr	r2, [r6, #0]
 800a6c4:	f003 0306 	and.w	r3, r3, #6
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	bf08      	it	eq
 800a6cc:	1aad      	subeq	r5, r5, r2
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	6922      	ldr	r2, [r4, #16]
 800a6d2:	bf0c      	ite	eq
 800a6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6d8:	2500      	movne	r5, #0
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	bfc4      	itt	gt
 800a6de:	1a9b      	subgt	r3, r3, r2
 800a6e0:	18ed      	addgt	r5, r5, r3
 800a6e2:	2600      	movs	r6, #0
 800a6e4:	341a      	adds	r4, #26
 800a6e6:	42b5      	cmp	r5, r6
 800a6e8:	d11a      	bne.n	800a720 <_printf_common+0xc8>
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	e008      	b.n	800a700 <_printf_common+0xa8>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	4652      	mov	r2, sl
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	47c0      	blx	r8
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d103      	bne.n	800a704 <_printf_common+0xac>
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a704:	3501      	adds	r5, #1
 800a706:	e7c6      	b.n	800a696 <_printf_common+0x3e>
 800a708:	18e1      	adds	r1, r4, r3
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	2030      	movs	r0, #48	; 0x30
 800a70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a712:	4422      	add	r2, r4
 800a714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a71c:	3302      	adds	r3, #2
 800a71e:	e7c7      	b.n	800a6b0 <_printf_common+0x58>
 800a720:	2301      	movs	r3, #1
 800a722:	4622      	mov	r2, r4
 800a724:	4649      	mov	r1, r9
 800a726:	4638      	mov	r0, r7
 800a728:	47c0      	blx	r8
 800a72a:	3001      	adds	r0, #1
 800a72c:	d0e6      	beq.n	800a6fc <_printf_common+0xa4>
 800a72e:	3601      	adds	r6, #1
 800a730:	e7d9      	b.n	800a6e6 <_printf_common+0x8e>
	...

0800a734 <_printf_i>:
 800a734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	7e0f      	ldrb	r7, [r1, #24]
 800a73a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a73c:	2f78      	cmp	r7, #120	; 0x78
 800a73e:	4691      	mov	r9, r2
 800a740:	4680      	mov	r8, r0
 800a742:	460c      	mov	r4, r1
 800a744:	469a      	mov	sl, r3
 800a746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a74a:	d807      	bhi.n	800a75c <_printf_i+0x28>
 800a74c:	2f62      	cmp	r7, #98	; 0x62
 800a74e:	d80a      	bhi.n	800a766 <_printf_i+0x32>
 800a750:	2f00      	cmp	r7, #0
 800a752:	f000 80d8 	beq.w	800a906 <_printf_i+0x1d2>
 800a756:	2f58      	cmp	r7, #88	; 0x58
 800a758:	f000 80a3 	beq.w	800a8a2 <_printf_i+0x16e>
 800a75c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a764:	e03a      	b.n	800a7dc <_printf_i+0xa8>
 800a766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a76a:	2b15      	cmp	r3, #21
 800a76c:	d8f6      	bhi.n	800a75c <_printf_i+0x28>
 800a76e:	a101      	add	r1, pc, #4	; (adr r1, 800a774 <_printf_i+0x40>)
 800a770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a774:	0800a7cd 	.word	0x0800a7cd
 800a778:	0800a7e1 	.word	0x0800a7e1
 800a77c:	0800a75d 	.word	0x0800a75d
 800a780:	0800a75d 	.word	0x0800a75d
 800a784:	0800a75d 	.word	0x0800a75d
 800a788:	0800a75d 	.word	0x0800a75d
 800a78c:	0800a7e1 	.word	0x0800a7e1
 800a790:	0800a75d 	.word	0x0800a75d
 800a794:	0800a75d 	.word	0x0800a75d
 800a798:	0800a75d 	.word	0x0800a75d
 800a79c:	0800a75d 	.word	0x0800a75d
 800a7a0:	0800a8ed 	.word	0x0800a8ed
 800a7a4:	0800a811 	.word	0x0800a811
 800a7a8:	0800a8cf 	.word	0x0800a8cf
 800a7ac:	0800a75d 	.word	0x0800a75d
 800a7b0:	0800a75d 	.word	0x0800a75d
 800a7b4:	0800a90f 	.word	0x0800a90f
 800a7b8:	0800a75d 	.word	0x0800a75d
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a75d 	.word	0x0800a75d
 800a7c4:	0800a75d 	.word	0x0800a75d
 800a7c8:	0800a8d7 	.word	0x0800a8d7
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	1d1a      	adds	r2, r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	602a      	str	r2, [r5, #0]
 800a7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e0a3      	b.n	800a928 <_printf_i+0x1f4>
 800a7e0:	6820      	ldr	r0, [r4, #0]
 800a7e2:	6829      	ldr	r1, [r5, #0]
 800a7e4:	0606      	lsls	r6, r0, #24
 800a7e6:	f101 0304 	add.w	r3, r1, #4
 800a7ea:	d50a      	bpl.n	800a802 <_printf_i+0xce>
 800a7ec:	680e      	ldr	r6, [r1, #0]
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	2e00      	cmp	r6, #0
 800a7f2:	da03      	bge.n	800a7fc <_printf_i+0xc8>
 800a7f4:	232d      	movs	r3, #45	; 0x2d
 800a7f6:	4276      	negs	r6, r6
 800a7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7fc:	485e      	ldr	r0, [pc, #376]	; (800a978 <_printf_i+0x244>)
 800a7fe:	230a      	movs	r3, #10
 800a800:	e019      	b.n	800a836 <_printf_i+0x102>
 800a802:	680e      	ldr	r6, [r1, #0]
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a80a:	bf18      	it	ne
 800a80c:	b236      	sxthne	r6, r6
 800a80e:	e7ef      	b.n	800a7f0 <_printf_i+0xbc>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	6820      	ldr	r0, [r4, #0]
 800a814:	1d19      	adds	r1, r3, #4
 800a816:	6029      	str	r1, [r5, #0]
 800a818:	0601      	lsls	r1, r0, #24
 800a81a:	d501      	bpl.n	800a820 <_printf_i+0xec>
 800a81c:	681e      	ldr	r6, [r3, #0]
 800a81e:	e002      	b.n	800a826 <_printf_i+0xf2>
 800a820:	0646      	lsls	r6, r0, #25
 800a822:	d5fb      	bpl.n	800a81c <_printf_i+0xe8>
 800a824:	881e      	ldrh	r6, [r3, #0]
 800a826:	4854      	ldr	r0, [pc, #336]	; (800a978 <_printf_i+0x244>)
 800a828:	2f6f      	cmp	r7, #111	; 0x6f
 800a82a:	bf0c      	ite	eq
 800a82c:	2308      	moveq	r3, #8
 800a82e:	230a      	movne	r3, #10
 800a830:	2100      	movs	r1, #0
 800a832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a836:	6865      	ldr	r5, [r4, #4]
 800a838:	60a5      	str	r5, [r4, #8]
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	bfa2      	ittt	ge
 800a83e:	6821      	ldrge	r1, [r4, #0]
 800a840:	f021 0104 	bicge.w	r1, r1, #4
 800a844:	6021      	strge	r1, [r4, #0]
 800a846:	b90e      	cbnz	r6, 800a84c <_printf_i+0x118>
 800a848:	2d00      	cmp	r5, #0
 800a84a:	d04d      	beq.n	800a8e8 <_printf_i+0x1b4>
 800a84c:	4615      	mov	r5, r2
 800a84e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a852:	fb03 6711 	mls	r7, r3, r1, r6
 800a856:	5dc7      	ldrb	r7, [r0, r7]
 800a858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a85c:	4637      	mov	r7, r6
 800a85e:	42bb      	cmp	r3, r7
 800a860:	460e      	mov	r6, r1
 800a862:	d9f4      	bls.n	800a84e <_printf_i+0x11a>
 800a864:	2b08      	cmp	r3, #8
 800a866:	d10b      	bne.n	800a880 <_printf_i+0x14c>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07de      	lsls	r6, r3, #31
 800a86c:	d508      	bpl.n	800a880 <_printf_i+0x14c>
 800a86e:	6923      	ldr	r3, [r4, #16]
 800a870:	6861      	ldr	r1, [r4, #4]
 800a872:	4299      	cmp	r1, r3
 800a874:	bfde      	ittt	le
 800a876:	2330      	movle	r3, #48	; 0x30
 800a878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a87c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a880:	1b52      	subs	r2, r2, r5
 800a882:	6122      	str	r2, [r4, #16]
 800a884:	f8cd a000 	str.w	sl, [sp]
 800a888:	464b      	mov	r3, r9
 800a88a:	aa03      	add	r2, sp, #12
 800a88c:	4621      	mov	r1, r4
 800a88e:	4640      	mov	r0, r8
 800a890:	f7ff fee2 	bl	800a658 <_printf_common>
 800a894:	3001      	adds	r0, #1
 800a896:	d14c      	bne.n	800a932 <_printf_i+0x1fe>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	b004      	add	sp, #16
 800a89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a2:	4835      	ldr	r0, [pc, #212]	; (800a978 <_printf_i+0x244>)
 800a8a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8a8:	6829      	ldr	r1, [r5, #0]
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8b0:	6029      	str	r1, [r5, #0]
 800a8b2:	061d      	lsls	r5, r3, #24
 800a8b4:	d514      	bpl.n	800a8e0 <_printf_i+0x1ac>
 800a8b6:	07df      	lsls	r7, r3, #31
 800a8b8:	bf44      	itt	mi
 800a8ba:	f043 0320 	orrmi.w	r3, r3, #32
 800a8be:	6023      	strmi	r3, [r4, #0]
 800a8c0:	b91e      	cbnz	r6, 800a8ca <_printf_i+0x196>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	f023 0320 	bic.w	r3, r3, #32
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	2310      	movs	r3, #16
 800a8cc:	e7b0      	b.n	800a830 <_printf_i+0xfc>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	f043 0320 	orr.w	r3, r3, #32
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	2378      	movs	r3, #120	; 0x78
 800a8d8:	4828      	ldr	r0, [pc, #160]	; (800a97c <_printf_i+0x248>)
 800a8da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8de:	e7e3      	b.n	800a8a8 <_printf_i+0x174>
 800a8e0:	0659      	lsls	r1, r3, #25
 800a8e2:	bf48      	it	mi
 800a8e4:	b2b6      	uxthmi	r6, r6
 800a8e6:	e7e6      	b.n	800a8b6 <_printf_i+0x182>
 800a8e8:	4615      	mov	r5, r2
 800a8ea:	e7bb      	b.n	800a864 <_printf_i+0x130>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	6826      	ldr	r6, [r4, #0]
 800a8f0:	6961      	ldr	r1, [r4, #20]
 800a8f2:	1d18      	adds	r0, r3, #4
 800a8f4:	6028      	str	r0, [r5, #0]
 800a8f6:	0635      	lsls	r5, r6, #24
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	d501      	bpl.n	800a900 <_printf_i+0x1cc>
 800a8fc:	6019      	str	r1, [r3, #0]
 800a8fe:	e002      	b.n	800a906 <_printf_i+0x1d2>
 800a900:	0670      	lsls	r0, r6, #25
 800a902:	d5fb      	bpl.n	800a8fc <_printf_i+0x1c8>
 800a904:	8019      	strh	r1, [r3, #0]
 800a906:	2300      	movs	r3, #0
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	4615      	mov	r5, r2
 800a90c:	e7ba      	b.n	800a884 <_printf_i+0x150>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	602a      	str	r2, [r5, #0]
 800a914:	681d      	ldr	r5, [r3, #0]
 800a916:	6862      	ldr	r2, [r4, #4]
 800a918:	2100      	movs	r1, #0
 800a91a:	4628      	mov	r0, r5
 800a91c:	f7f5 fc70 	bl	8000200 <memchr>
 800a920:	b108      	cbz	r0, 800a926 <_printf_i+0x1f2>
 800a922:	1b40      	subs	r0, r0, r5
 800a924:	6060      	str	r0, [r4, #4]
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	6123      	str	r3, [r4, #16]
 800a92a:	2300      	movs	r3, #0
 800a92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a930:	e7a8      	b.n	800a884 <_printf_i+0x150>
 800a932:	6923      	ldr	r3, [r4, #16]
 800a934:	462a      	mov	r2, r5
 800a936:	4649      	mov	r1, r9
 800a938:	4640      	mov	r0, r8
 800a93a:	47d0      	blx	sl
 800a93c:	3001      	adds	r0, #1
 800a93e:	d0ab      	beq.n	800a898 <_printf_i+0x164>
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	079b      	lsls	r3, r3, #30
 800a944:	d413      	bmi.n	800a96e <_printf_i+0x23a>
 800a946:	68e0      	ldr	r0, [r4, #12]
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	4298      	cmp	r0, r3
 800a94c:	bfb8      	it	lt
 800a94e:	4618      	movlt	r0, r3
 800a950:	e7a4      	b.n	800a89c <_printf_i+0x168>
 800a952:	2301      	movs	r3, #1
 800a954:	4632      	mov	r2, r6
 800a956:	4649      	mov	r1, r9
 800a958:	4640      	mov	r0, r8
 800a95a:	47d0      	blx	sl
 800a95c:	3001      	adds	r0, #1
 800a95e:	d09b      	beq.n	800a898 <_printf_i+0x164>
 800a960:	3501      	adds	r5, #1
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	9903      	ldr	r1, [sp, #12]
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dcf2      	bgt.n	800a952 <_printf_i+0x21e>
 800a96c:	e7eb      	b.n	800a946 <_printf_i+0x212>
 800a96e:	2500      	movs	r5, #0
 800a970:	f104 0619 	add.w	r6, r4, #25
 800a974:	e7f5      	b.n	800a962 <_printf_i+0x22e>
 800a976:	bf00      	nop
 800a978:	0800b285 	.word	0x0800b285
 800a97c:	0800b296 	.word	0x0800b296

0800a980 <_read_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d07      	ldr	r5, [pc, #28]	; (800a9a0 <_read_r+0x20>)
 800a984:	4604      	mov	r4, r0
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7f7 f9da 	bl	8001d48 <_read>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_read_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_read_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20003138 	.word	0x20003138
 800a9a4:	00000000 	.word	0x00000000

0800a9a8 <nan>:
 800a9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9b0 <nan+0x8>
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	00000000 	.word	0x00000000
 800a9b4:	7ff80000 	.word	0x7ff80000

0800a9b8 <strncmp>:
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	b17a      	cbz	r2, 800a9dc <strncmp+0x24>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	3901      	subs	r1, #1
 800a9c0:	1884      	adds	r4, r0, r2
 800a9c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a9c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9ca:	4290      	cmp	r0, r2
 800a9cc:	d101      	bne.n	800a9d2 <strncmp+0x1a>
 800a9ce:	42a3      	cmp	r3, r4
 800a9d0:	d101      	bne.n	800a9d6 <strncmp+0x1e>
 800a9d2:	1a80      	subs	r0, r0, r2
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d1f3      	bne.n	800a9c2 <strncmp+0xa>
 800a9da:	e7fa      	b.n	800a9d2 <strncmp+0x1a>
 800a9dc:	4610      	mov	r0, r2
 800a9de:	e7f9      	b.n	800a9d4 <strncmp+0x1c>

0800a9e0 <__swbuf_r>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	460e      	mov	r6, r1
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b118      	cbz	r0, 800a9f2 <__swbuf_r+0x12>
 800a9ea:	6983      	ldr	r3, [r0, #24]
 800a9ec:	b90b      	cbnz	r3, 800a9f2 <__swbuf_r+0x12>
 800a9ee:	f7fd fa23 	bl	8007e38 <__sinit>
 800a9f2:	4b21      	ldr	r3, [pc, #132]	; (800aa78 <__swbuf_r+0x98>)
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d12b      	bne.n	800aa50 <__swbuf_r+0x70>
 800a9f8:	686c      	ldr	r4, [r5, #4]
 800a9fa:	69a3      	ldr	r3, [r4, #24]
 800a9fc:	60a3      	str	r3, [r4, #8]
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	071a      	lsls	r2, r3, #28
 800aa02:	d52f      	bpl.n	800aa64 <__swbuf_r+0x84>
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	b36b      	cbz	r3, 800aa64 <__swbuf_r+0x84>
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	6820      	ldr	r0, [r4, #0]
 800aa0c:	1ac0      	subs	r0, r0, r3
 800aa0e:	6963      	ldr	r3, [r4, #20]
 800aa10:	b2f6      	uxtb	r6, r6
 800aa12:	4283      	cmp	r3, r0
 800aa14:	4637      	mov	r7, r6
 800aa16:	dc04      	bgt.n	800aa22 <__swbuf_r+0x42>
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f7fe fbc2 	bl	80091a4 <_fflush_r>
 800aa20:	bb30      	cbnz	r0, 800aa70 <__swbuf_r+0x90>
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	60a3      	str	r3, [r4, #8]
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	6022      	str	r2, [r4, #0]
 800aa2e:	701e      	strb	r6, [r3, #0]
 800aa30:	6963      	ldr	r3, [r4, #20]
 800aa32:	3001      	adds	r0, #1
 800aa34:	4283      	cmp	r3, r0
 800aa36:	d004      	beq.n	800aa42 <__swbuf_r+0x62>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	07db      	lsls	r3, r3, #31
 800aa3c:	d506      	bpl.n	800aa4c <__swbuf_r+0x6c>
 800aa3e:	2e0a      	cmp	r6, #10
 800aa40:	d104      	bne.n	800aa4c <__swbuf_r+0x6c>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f7fe fbad 	bl	80091a4 <_fflush_r>
 800aa4a:	b988      	cbnz	r0, 800aa70 <__swbuf_r+0x90>
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <__swbuf_r+0x9c>)
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d101      	bne.n	800aa5a <__swbuf_r+0x7a>
 800aa56:	68ac      	ldr	r4, [r5, #8]
 800aa58:	e7cf      	b.n	800a9fa <__swbuf_r+0x1a>
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <__swbuf_r+0xa0>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	bf08      	it	eq
 800aa60:	68ec      	ldreq	r4, [r5, #12]
 800aa62:	e7ca      	b.n	800a9fa <__swbuf_r+0x1a>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f81a 	bl	800aaa0 <__swsetup_r>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0cb      	beq.n	800aa08 <__swbuf_r+0x28>
 800aa70:	f04f 37ff 	mov.w	r7, #4294967295
 800aa74:	e7ea      	b.n	800aa4c <__swbuf_r+0x6c>
 800aa76:	bf00      	nop
 800aa78:	0800aed4 	.word	0x0800aed4
 800aa7c:	0800aef4 	.word	0x0800aef4
 800aa80:	0800aeb4 	.word	0x0800aeb4

0800aa84 <__ascii_wctomb>:
 800aa84:	b149      	cbz	r1, 800aa9a <__ascii_wctomb+0x16>
 800aa86:	2aff      	cmp	r2, #255	; 0xff
 800aa88:	bf85      	ittet	hi
 800aa8a:	238a      	movhi	r3, #138	; 0x8a
 800aa8c:	6003      	strhi	r3, [r0, #0]
 800aa8e:	700a      	strbls	r2, [r1, #0]
 800aa90:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa94:	bf98      	it	ls
 800aa96:	2001      	movls	r0, #1
 800aa98:	4770      	bx	lr
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <__swsetup_r>:
 800aaa0:	4b32      	ldr	r3, [pc, #200]	; (800ab6c <__swsetup_r+0xcc>)
 800aaa2:	b570      	push	{r4, r5, r6, lr}
 800aaa4:	681d      	ldr	r5, [r3, #0]
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	b125      	cbz	r5, 800aab6 <__swsetup_r+0x16>
 800aaac:	69ab      	ldr	r3, [r5, #24]
 800aaae:	b913      	cbnz	r3, 800aab6 <__swsetup_r+0x16>
 800aab0:	4628      	mov	r0, r5
 800aab2:	f7fd f9c1 	bl	8007e38 <__sinit>
 800aab6:	4b2e      	ldr	r3, [pc, #184]	; (800ab70 <__swsetup_r+0xd0>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	d10f      	bne.n	800aadc <__swsetup_r+0x3c>
 800aabc:	686c      	ldr	r4, [r5, #4]
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aac4:	0719      	lsls	r1, r3, #28
 800aac6:	d42c      	bmi.n	800ab22 <__swsetup_r+0x82>
 800aac8:	06dd      	lsls	r5, r3, #27
 800aaca:	d411      	bmi.n	800aaf0 <__swsetup_r+0x50>
 800aacc:	2309      	movs	r3, #9
 800aace:	6033      	str	r3, [r6, #0]
 800aad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	e03e      	b.n	800ab5a <__swsetup_r+0xba>
 800aadc:	4b25      	ldr	r3, [pc, #148]	; (800ab74 <__swsetup_r+0xd4>)
 800aade:	429c      	cmp	r4, r3
 800aae0:	d101      	bne.n	800aae6 <__swsetup_r+0x46>
 800aae2:	68ac      	ldr	r4, [r5, #8]
 800aae4:	e7eb      	b.n	800aabe <__swsetup_r+0x1e>
 800aae6:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <__swsetup_r+0xd8>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	bf08      	it	eq
 800aaec:	68ec      	ldreq	r4, [r5, #12]
 800aaee:	e7e6      	b.n	800aabe <__swsetup_r+0x1e>
 800aaf0:	0758      	lsls	r0, r3, #29
 800aaf2:	d512      	bpl.n	800ab1a <__swsetup_r+0x7a>
 800aaf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaf6:	b141      	cbz	r1, 800ab0a <__swsetup_r+0x6a>
 800aaf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aafc:	4299      	cmp	r1, r3
 800aafe:	d002      	beq.n	800ab06 <__swsetup_r+0x66>
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff fc03 	bl	800a30c <_free_r>
 800ab06:	2300      	movs	r3, #0
 800ab08:	6363      	str	r3, [r4, #52]	; 0x34
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	2300      	movs	r3, #0
 800ab14:	6063      	str	r3, [r4, #4]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f043 0308 	orr.w	r3, r3, #8
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	6923      	ldr	r3, [r4, #16]
 800ab24:	b94b      	cbnz	r3, 800ab3a <__swsetup_r+0x9a>
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab30:	d003      	beq.n	800ab3a <__swsetup_r+0x9a>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4630      	mov	r0, r6
 800ab36:	f000 f877 	bl	800ac28 <__smakebuf_r>
 800ab3a:	89a0      	ldrh	r0, [r4, #12]
 800ab3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab40:	f010 0301 	ands.w	r3, r0, #1
 800ab44:	d00a      	beq.n	800ab5c <__swsetup_r+0xbc>
 800ab46:	2300      	movs	r3, #0
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	425b      	negs	r3, r3
 800ab4e:	61a3      	str	r3, [r4, #24]
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	b943      	cbnz	r3, 800ab66 <__swsetup_r+0xc6>
 800ab54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab58:	d1ba      	bne.n	800aad0 <__swsetup_r+0x30>
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	0781      	lsls	r1, r0, #30
 800ab5e:	bf58      	it	pl
 800ab60:	6963      	ldrpl	r3, [r4, #20]
 800ab62:	60a3      	str	r3, [r4, #8]
 800ab64:	e7f4      	b.n	800ab50 <__swsetup_r+0xb0>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e7f7      	b.n	800ab5a <__swsetup_r+0xba>
 800ab6a:	bf00      	nop
 800ab6c:	20000010 	.word	0x20000010
 800ab70:	0800aed4 	.word	0x0800aed4
 800ab74:	0800aef4 	.word	0x0800aef4
 800ab78:	0800aeb4 	.word	0x0800aeb4

0800ab7c <__assert_func>:
 800ab7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab7e:	4614      	mov	r4, r2
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <__assert_func+0x2c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4605      	mov	r5, r0
 800ab88:	68d8      	ldr	r0, [r3, #12]
 800ab8a:	b14c      	cbz	r4, 800aba0 <__assert_func+0x24>
 800ab8c:	4b07      	ldr	r3, [pc, #28]	; (800abac <__assert_func+0x30>)
 800ab8e:	9100      	str	r1, [sp, #0]
 800ab90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab94:	4906      	ldr	r1, [pc, #24]	; (800abb0 <__assert_func+0x34>)
 800ab96:	462b      	mov	r3, r5
 800ab98:	f000 f80e 	bl	800abb8 <fiprintf>
 800ab9c:	f000 f88c 	bl	800acb8 <abort>
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <__assert_func+0x38>)
 800aba2:	461c      	mov	r4, r3
 800aba4:	e7f3      	b.n	800ab8e <__assert_func+0x12>
 800aba6:	bf00      	nop
 800aba8:	20000010 	.word	0x20000010
 800abac:	0800b2a7 	.word	0x0800b2a7
 800abb0:	0800b2b4 	.word	0x0800b2b4
 800abb4:	0800b2e2 	.word	0x0800b2e2

0800abb8 <fiprintf>:
 800abb8:	b40e      	push	{r1, r2, r3}
 800abba:	b503      	push	{r0, r1, lr}
 800abbc:	4601      	mov	r1, r0
 800abbe:	ab03      	add	r3, sp, #12
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <fiprintf+0x20>)
 800abc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc6:	6800      	ldr	r0, [r0, #0]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	f7ff fc15 	bl	800a3f8 <_vfiprintf_r>
 800abce:	b002      	add	sp, #8
 800abd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd4:	b003      	add	sp, #12
 800abd6:	4770      	bx	lr
 800abd8:	20000010 	.word	0x20000010

0800abdc <__swhatbuf_r>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	460e      	mov	r6, r1
 800abe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe4:	2900      	cmp	r1, #0
 800abe6:	b096      	sub	sp, #88	; 0x58
 800abe8:	4614      	mov	r4, r2
 800abea:	461d      	mov	r5, r3
 800abec:	da08      	bge.n	800ac00 <__swhatbuf_r+0x24>
 800abee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	602a      	str	r2, [r5, #0]
 800abf6:	061a      	lsls	r2, r3, #24
 800abf8:	d410      	bmi.n	800ac1c <__swhatbuf_r+0x40>
 800abfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abfe:	e00e      	b.n	800ac1e <__swhatbuf_r+0x42>
 800ac00:	466a      	mov	r2, sp
 800ac02:	f000 f861 	bl	800acc8 <_fstat_r>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	dbf1      	blt.n	800abee <__swhatbuf_r+0x12>
 800ac0a:	9a01      	ldr	r2, [sp, #4]
 800ac0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac14:	425a      	negs	r2, r3
 800ac16:	415a      	adcs	r2, r3
 800ac18:	602a      	str	r2, [r5, #0]
 800ac1a:	e7ee      	b.n	800abfa <__swhatbuf_r+0x1e>
 800ac1c:	2340      	movs	r3, #64	; 0x40
 800ac1e:	2000      	movs	r0, #0
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	b016      	add	sp, #88	; 0x58
 800ac24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac28 <__smakebuf_r>:
 800ac28:	898b      	ldrh	r3, [r1, #12]
 800ac2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac2c:	079d      	lsls	r5, r3, #30
 800ac2e:	4606      	mov	r6, r0
 800ac30:	460c      	mov	r4, r1
 800ac32:	d507      	bpl.n	800ac44 <__smakebuf_r+0x1c>
 800ac34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	6123      	str	r3, [r4, #16]
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	6163      	str	r3, [r4, #20]
 800ac40:	b002      	add	sp, #8
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	ab01      	add	r3, sp, #4
 800ac46:	466a      	mov	r2, sp
 800ac48:	f7ff ffc8 	bl	800abdc <__swhatbuf_r>
 800ac4c:	9900      	ldr	r1, [sp, #0]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	4630      	mov	r0, r6
 800ac52:	f7fd f9ed 	bl	8008030 <_malloc_r>
 800ac56:	b948      	cbnz	r0, 800ac6c <__smakebuf_r+0x44>
 800ac58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5c:	059a      	lsls	r2, r3, #22
 800ac5e:	d4ef      	bmi.n	800ac40 <__smakebuf_r+0x18>
 800ac60:	f023 0303 	bic.w	r3, r3, #3
 800ac64:	f043 0302 	orr.w	r3, r3, #2
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	e7e3      	b.n	800ac34 <__smakebuf_r+0xc>
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <__smakebuf_r+0x7c>)
 800ac6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	6020      	str	r0, [r4, #0]
 800ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	6163      	str	r3, [r4, #20]
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	6120      	str	r0, [r4, #16]
 800ac82:	b15b      	cbz	r3, 800ac9c <__smakebuf_r+0x74>
 800ac84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac88:	4630      	mov	r0, r6
 800ac8a:	f000 f82f 	bl	800acec <_isatty_r>
 800ac8e:	b128      	cbz	r0, 800ac9c <__smakebuf_r+0x74>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f023 0303 	bic.w	r3, r3, #3
 800ac96:	f043 0301 	orr.w	r3, r3, #1
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	89a0      	ldrh	r0, [r4, #12]
 800ac9e:	4305      	orrs	r5, r0
 800aca0:	81a5      	strh	r5, [r4, #12]
 800aca2:	e7cd      	b.n	800ac40 <__smakebuf_r+0x18>
 800aca4:	08007dd1 	.word	0x08007dd1

0800aca8 <malloc>:
 800aca8:	4b02      	ldr	r3, [pc, #8]	; (800acb4 <malloc+0xc>)
 800acaa:	4601      	mov	r1, r0
 800acac:	6818      	ldr	r0, [r3, #0]
 800acae:	f7fd b9bf 	b.w	8008030 <_malloc_r>
 800acb2:	bf00      	nop
 800acb4:	20000010 	.word	0x20000010

0800acb8 <abort>:
 800acb8:	b508      	push	{r3, lr}
 800acba:	2006      	movs	r0, #6
 800acbc:	f000 f84e 	bl	800ad5c <raise>
 800acc0:	2001      	movs	r0, #1
 800acc2:	f7f7 f837 	bl	8001d34 <_exit>
	...

0800acc8 <_fstat_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d07      	ldr	r5, [pc, #28]	; (800ace8 <_fstat_r+0x20>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f7f7 f87c 	bl	8001dd2 <_fstat>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d102      	bne.n	800ace4 <_fstat_r+0x1c>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b103      	cbz	r3, 800ace4 <_fstat_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	20003138 	.word	0x20003138

0800acec <_isatty_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d06      	ldr	r5, [pc, #24]	; (800ad08 <_isatty_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	f7f7 f87b 	bl	8001df2 <_isatty>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_isatty_r+0x1a>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_isatty_r+0x1a>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20003138 	.word	0x20003138

0800ad0c <_raise_r>:
 800ad0c:	291f      	cmp	r1, #31
 800ad0e:	b538      	push	{r3, r4, r5, lr}
 800ad10:	4604      	mov	r4, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	d904      	bls.n	800ad20 <_raise_r+0x14>
 800ad16:	2316      	movs	r3, #22
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad22:	b112      	cbz	r2, 800ad2a <_raise_r+0x1e>
 800ad24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad28:	b94b      	cbnz	r3, 800ad3e <_raise_r+0x32>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 f830 	bl	800ad90 <_getpid_r>
 800ad30:	462a      	mov	r2, r5
 800ad32:	4601      	mov	r1, r0
 800ad34:	4620      	mov	r0, r4
 800ad36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad3a:	f000 b817 	b.w	800ad6c <_kill_r>
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d00a      	beq.n	800ad58 <_raise_r+0x4c>
 800ad42:	1c59      	adds	r1, r3, #1
 800ad44:	d103      	bne.n	800ad4e <_raise_r+0x42>
 800ad46:	2316      	movs	r3, #22
 800ad48:	6003      	str	r3, [r0, #0]
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	e7e7      	b.n	800ad1e <_raise_r+0x12>
 800ad4e:	2400      	movs	r4, #0
 800ad50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad54:	4628      	mov	r0, r5
 800ad56:	4798      	blx	r3
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e7e0      	b.n	800ad1e <_raise_r+0x12>

0800ad5c <raise>:
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <raise+0xc>)
 800ad5e:	4601      	mov	r1, r0
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f7ff bfd3 	b.w	800ad0c <_raise_r>
 800ad66:	bf00      	nop
 800ad68:	20000010 	.word	0x20000010

0800ad6c <_kill_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_kill_r+0x20>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f7f6 ffcb 	bl	8001d14 <_kill>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	d102      	bne.n	800ad88 <_kill_r+0x1c>
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	b103      	cbz	r3, 800ad88 <_kill_r+0x1c>
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20003138 	.word	0x20003138

0800ad90 <_getpid_r>:
 800ad90:	f7f6 bfb8 	b.w	8001d04 <_getpid>

0800ad94 <_init>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_fini>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr
