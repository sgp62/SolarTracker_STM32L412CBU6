
SolarTracker_STM32L412CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080088a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fbc  20000074  08008918  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003030  08008918  00023030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca70  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a61  00000000  00000000  0003cb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00040578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00041d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e020  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa88  00000000  00000000  000613f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b81d3  00000000  00000000  0007be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013404b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  0013409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086e0 	.word	0x080086e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080086e0 	.word	0x080086e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b098      	sub	sp, #96	; 0x60
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 ff40 	bl	8001452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f895 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f98d 	bl	80008f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005da:	f000 f8e7 	bl	80007ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005de:	f000 f929 	bl	8000834 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f957 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 12, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	210c      	movs	r1, #12
 80005ea:	2025      	movs	r0, #37	; 0x25
 80005ec:	f001 f822 	bl	8001634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80005f0:	2025      	movs	r0, #37	; 0x25
 80005f2:	f001 f83b 	bl	800166c <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80005f6:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <main+0x108>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <main+0x108>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000602:	2003      	movs	r0, #3
 8000604:	f001 f80b 	bl	800161e <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of spi_mutex */
  osMutexDef(spi_mutex);
 8000608:	2300      	movs	r3, #0
 800060a:	65bb      	str	r3, [r7, #88]	; 0x58
 800060c:	2300      	movs	r3, #0
 800060e:	65fb      	str	r3, [r7, #92]	; 0x5c
  spi_mutexHandle = osMutexCreate(osMutex(spi_mutex));
 8000610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fbfd 	bl	8004e14 <osMutexCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <main+0x10c>)
 800061e:	6013      	str	r3, [r2, #0]
//  osSemaphoreDef(external_sem);
//  external_semHandle = osSemaphoreCreate(osSemaphore(external_sem), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  spi_semHandle = xSemaphoreCreateCounting( 1, 0 );
 8000620:	2100      	movs	r1, #0
 8000622:	2001      	movs	r0, #1
 8000624:	f004 fe48 	bl	80052b8 <xQueueCreateCountingSemaphore>
 8000628:	4603      	mov	r3, r0
 800062a:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <main+0x110>)
 800062c:	6013      	str	r3, [r2, #0]
  uart_semHandle = xSemaphoreCreateCounting( 1, 1 );
 800062e:	2101      	movs	r1, #1
 8000630:	2001      	movs	r0, #1
 8000632:	f004 fe41 	bl	80052b8 <xQueueCreateCountingSemaphore>
 8000636:	4603      	mov	r3, r0
 8000638:	4a28      	ldr	r2, [pc, #160]	; (80006dc <main+0x114>)
 800063a:	6013      	str	r3, [r2, #0]
  external_semHandle = xSemaphoreCreateCounting( 1, 0 );
 800063c:	2100      	movs	r1, #0
 800063e:	2001      	movs	r0, #1
 8000640:	f004 fe3a 	bl	80052b8 <xQueueCreateCountingSemaphore>
 8000644:	4603      	mov	r3, r0
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <main+0x118>)
 8000648:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 800064a:	2200      	movs	r2, #0
 800064c:	2164      	movs	r1, #100	; 0x64
 800064e:	2002      	movs	r0, #2
 8000650:	f004 fd8c 	bl	800516c <xQueueGenericCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <main+0x11c>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart1Task */
  osThreadDef(uart1Task, Startuart1Task, osPriorityHigh, 0, 512);
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <main+0x120>)
 800065c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1TaskHandle = osThreadCreate(osThread(uart1Task), NULL);
 800066e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fb81 	bl	8004d7c <osThreadCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <main+0x124>)
 800067e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart2Task */
  osThreadDef(uart2Task, Startuart2Task, osPriorityNormal, 0, 512);
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <main+0x128>)
 8000682:	f107 0420 	add.w	r4, r7, #32
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart2TaskHandle = osThreadCreate(osThread(uart2Task), NULL);
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fb6e 	bl	8004d7c <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <main+0x12c>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi1Task */
  osThreadDef(spi1Task, startspi1Task, osPriorityNormal, 0, 512);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <main+0x130>)
 80006a8:	1d3c      	adds	r4, r7, #4
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spi1TaskHandle = osThreadCreate(osThread(spi1Task), NULL);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fb5d 	bl	8004d7c <osThreadCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <main+0x134>)
 80006c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c8:	f004 fb51 	bl	8004d6e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <main+0x104>
 80006ce:	bf00      	nop
 80006d0:	40013800 	.word	0x40013800
 80006d4:	20000530 	.word	0x20000530
 80006d8:	20000534 	.word	0x20000534
 80006dc:	20000538 	.word	0x20000538
 80006e0:	2000053c 	.word	0x2000053c
 80006e4:	2000060c 	.word	0x2000060c
 80006e8:	0800871c 	.word	0x0800871c
 80006ec:	20000524 	.word	0x20000524
 80006f0:	08008738 	.word	0x08008738
 80006f4:	20000528 	.word	0x20000528
 80006f8:	08008754 	.word	0x08008754
 80006fc:	2000052c 	.word	0x2000052c

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2244      	movs	r2, #68	; 0x44
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f8dd 	bl	80078ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000722:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000726:	f001 f9b1 	bl	8001a8c <HAL_PWREx_ControlVoltageScaling>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000730:	f000 fc16 	bl	8000f60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000734:	f001 f98c 	bl	8001a50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <SystemClock_Config+0xa8>)
 800073a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800073e:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <SystemClock_Config+0xa8>)
 8000740:	f023 0318 	bic.w	r3, r3, #24
 8000744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000748:	2314      	movs	r3, #20
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000758:	2360      	movs	r3, #96	; 0x60
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f9e7 	bl	8001b38 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000770:	f000 fbf6 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fe35 	bl	80023fc <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000798:	f000 fbe2 	bl	8000f60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800079c:	f002 fa0a 	bl	8002bb4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007a0:	bf00      	nop
 80007a2:	3758      	adds	r7, #88	; 0x58
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_SPI1_Init+0x80>)
 80007b2:	4a1f      	ldr	r2, [pc, #124]	; (8000830 <MX_SPI1_Init+0x84>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_SPI1_Init+0x80>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_SPI1_Init+0x80>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_SPI1_Init+0x80>)
 80007c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_SPI1_Init+0x80>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI1_Init+0x80>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI1_Init+0x80>)
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_SPI1_Init+0x80>)
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI1_Init+0x80>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI1_Init+0x80>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_SPI1_Init+0x80>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI1_Init+0x80>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_SPI1_Init+0x80>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI1_Init+0x80>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_SPI1_Init+0x80>)
 800080c:	f002 f9e2 	bl	8002bd4 <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fba3 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SSM;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_SPI1_Init+0x84>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <MX_SPI1_Init+0x84>)
 8000820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000824:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003b8 	.word	0x200003b8
 8000830:	40013000 	.word	0x40013000

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART1_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART1_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART1_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000878:	f003 fd76 	bl	8004368 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 fb6d 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000041c 	.word	0x2000041c
 8000890:	40013800 	.word	0x40013800

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART2_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART2_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d8:	f003 fd46 	bl	8004368 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 fb3d 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200004a0 	.word	0x200004a0
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <MX_GPIO_Init+0xe8>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_GPIO_Init+0xe8>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a27      	ldr	r2, [pc, #156]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_GPIO_Init+0xe8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2103      	movs	r1, #3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f001 f849 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f240 1101 	movw	r1, #257	; 0x101
 8000964:	481e      	ldr	r0, [pc, #120]	; (80009e0 <MX_GPIO_Init+0xec>)
 8000966:	f001 f843 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096a:	2303      	movs	r3, #3
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 fec2 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000988:	f240 1301 	movw	r3, #257	; 0x101
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_GPIO_Init+0xec>)
 80009a2:	f000 feb3 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b2:	2302      	movs	r3, #2
 80009b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_GPIO_Init+0xec>)
 80009be:	f000 fea5 	bl	800170c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2028      	movs	r0, #40	; 0x28
 80009c8:	f000 fe34 	bl	8001634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009cc:	2028      	movs	r0, #40	; 0x28
 80009ce:	f000 fe4d 	bl	800166c <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000400 	.word	0x48000400

080009e4 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 80009fc:	2208      	movs	r2, #8
 80009fe:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 8000a0e:	2204      	movs	r2, #4
 8000a10:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d036      	beq.n	8000a9e <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <USART1_IRQHandler+0xc4>)
 8000a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b0d      	cmp	r3, #13
 8000a3c:	d002      	beq.n	8000a44 <USART1_IRQHandler+0x60>
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b0a      	cmp	r3, #10
 8000a42:	d119      	bne.n	8000a78 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d028      	beq.n	8000a9e <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	4916      	ldr	r1, [pc, #88]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a54:	600a      	str	r2, [r1, #0]
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <USART1_IRQHandler+0xcc>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <USART1_IRQHandler+0xd0>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	463a      	mov	r2, r7
 8000a62:	2300      	movs	r3, #0
 8000a64:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <USART1_IRQHandler+0xcc>)
 8000a66:	f004 fd59 	bl	800551c <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <USART1_IRQHandler+0xd4>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 8000a76:	e012      	b.n	8000a9e <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b24      	cmp	r3, #36	; 0x24
 8000a7c:	d003      	beq.n	8000a86 <USART1_IRQHandler+0xa2>
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2bc8      	cmp	r3, #200	; 0xc8
 8000a84:	d102      	bne.n	8000a8c <USART1_IRQHandler+0xa8>
				rx_index = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4906      	ldr	r1, [pc, #24]	; (8000aac <USART1_IRQHandler+0xc8>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <USART1_IRQHandler+0xcc>)
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8000a9c:	e7ff      	b.n	8000a9e <USART1_IRQHandler+0xba>
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	20000610 	.word	0x20000610
 8000ab0:	20000614 	.word	0x20000614
 8000ab4:	2000060c 	.word	0x2000060c
 8000ab8:	20000344 	.word	0x20000344

08000abc <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_11)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000acc:	d105      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  xSemaphoreGiveFromISR(external_semHandle, NULL);
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 fdbc 	bl	8005652 <xQueueGiveFromISR>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000053c 	.word	0x2000053c

08000ae8 <Startuart1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startuart1Task */
void Startuart1Task(void const * argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	static int spi_gps_read_addr = 0;
	static SerialBuffer gps_ext_buffer;
	static int statusbuf[8];
	int num_messages = 500; //Number of FRAM messages for offset 72B -> 256KB storage =
 8000af0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000af4:	60bb      	str	r3, [r7, #8]
	//Code used for external UART write, reading SPI data
  /* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <Startuart1Task+0xcc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f04f 31ff 	mov.w	r1, #4294967295
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 ff14 	bl	800592c <xQueueSemaphoreTake>
		//Take both semaphores to keep other tasks from running (might be unnecessary bc higher priority)
		//xSemaphoreTake(uart_semHandle, portMAX_DELAY);
		//xSemaphoreTake(spi_semHandle, portMAX_DELAY);
		USART_GPS->CR1 &= ~(USART_CR1_RXNEIE); // Disable UART Interrupt
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <Startuart1Task+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <Startuart1Task+0xd0>)
 8000b0a:	f023 0320 	bic.w	r3, r3, #32
 8000b0e:	6013      	str	r3, [r2, #0]
		spi_gps_read_addr = 0;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <Startuart1Task+0xd4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < num_messages; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e03f      	b.n	8000b9c <Startuart1Task+0xb4>

			//Read NMEA_LEN bytes of data
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <Startuart1Task+0xd8>)
 8000b22:	f000 ff65 	bl	80019f0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4926      	ldr	r1, [pc, #152]	; (8000bc4 <Startuart1Task+0xdc>)
 8000b2c:	4826      	ldr	r0, [pc, #152]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b2e:	f002 f8f4 	bl	8002d1a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_gps_read_addr, 2, 100);
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	2202      	movs	r2, #2
 8000b36:	4921      	ldr	r1, [pc, #132]	; (8000bbc <Startuart1Task+0xd4>)
 8000b38:	4823      	ldr	r0, [pc, #140]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b3a:	f002 f8ee 	bl	8002d1a <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, (uint8_t *)&gps_ext_buffer.Buffer, NMEA_LEN, 100);
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	2248      	movs	r2, #72	; 0x48
 8000b42:	4922      	ldr	r1, [pc, #136]	; (8000bcc <Startuart1Task+0xe4>)
 8000b44:	4820      	ldr	r0, [pc, #128]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b46:	f002 fa56 	bl	8002ff6 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	481c      	ldr	r0, [pc, #112]	; (8000bc0 <Startuart1Task+0xd8>)
 8000b50:	f000 ff4e 	bl	80019f0 <HAL_GPIO_WritePin>

			spi_gps_read_addr += NMEA_LEN; //Increase offset to read next data value
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <Startuart1Task+0xd4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3348      	adds	r3, #72	; 0x48
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <Startuart1Task+0xd4>)
 8000b5c:	6013      	str	r3, [r2, #0]

			// Read status register
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2101      	movs	r1, #1
 8000b62:	4817      	ldr	r0, [pc, #92]	; (8000bc0 <Startuart1Task+0xd8>)
 8000b64:	f000 ff44 	bl	80019f0 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4918      	ldr	r1, [pc, #96]	; (8000bd0 <Startuart1Task+0xe8>)
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b70:	f002 f8d3 	bl	8002d1a <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi1, (uint8_t *)statusbuf, 1, 100);
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2201      	movs	r2, #1
 8000b78:	4916      	ldr	r1, [pc, #88]	; (8000bd4 <Startuart1Task+0xec>)
 8000b7a:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <Startuart1Task+0xe0>)
 8000b7c:	f002 fa3b 	bl	8002ff6 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <Startuart1Task+0xd8>)
 8000b86:	f000 ff33 	bl	80019f0 <HAL_GPIO_WritePin>

			//Write NMEA message to external UART
			HAL_UART_Transmit(&huart1, (uint8_t*)&gps_ext_buffer.Buffer, NMEA_LEN, 100);
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	2248      	movs	r2, #72	; 0x48
 8000b8e:	490f      	ldr	r1, [pc, #60]	; (8000bcc <Startuart1Task+0xe4>)
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <Startuart1Task+0xf0>)
 8000b92:	f003 fc37 	bl	8004404 <HAL_UART_Transmit>
		for(int i = 0; i < num_messages; i++){
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbbb      	blt.n	8000b1c <Startuart1Task+0x34>
		}

		//Let other tasks continue running
		USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable UART Interrupt
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <Startuart1Task+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <Startuart1Task+0xd0>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(external_semHandle, portMAX_DELAY);
 8000bb0:	e7a1      	b.n	8000af6 <Startuart1Task+0xe>
 8000bb2:	bf00      	nop
 8000bb4:	2000053c 	.word	0x2000053c
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	200006e0 	.word	0x200006e0
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	080087ad 	.word	0x080087ad
 8000bc8:	200003b8 	.word	0x200003b8
 8000bcc:	200006e4 	.word	0x200006e4
 8000bd0:	080087b0 	.word	0x080087b0
 8000bd4:	20000748 	.word	0x20000748
 8000bd8:	2000041c 	.word	0x2000041c

08000bdc <Startuart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startuart2Task */
void Startuart2Task(void const * argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	float latitude, longitude;

	char* message_id, *time, *data_valid, *raw_latitude, *raw_longitude, *latdir, *longdir;

	//Set RF Switch to 0 for internal antenna:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	4827      	ldr	r0, [pc, #156]	; (8000c88 <Startuart2Task+0xac>)
 8000bec:	f000 ff00 	bl	80019f0 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <Startuart2Task+0xb0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 ffa5 	bl	8005b44 <uxQueueMessagesWaitingFromISR>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f7      	beq.n	8000bf0 <Startuart2Task+0x14>
	  {


		  xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <Startuart2Task+0xb0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4922      	ldr	r1, [pc, #136]	; (8000c90 <Startuart2Task+0xb4>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fdaf 	bl	800576c <xQueueReceive>
		  //Fill and check header
		  for(int c = 0; c < 6; c++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e00b      	b.n	8000c2c <Startuart2Task+0x50>
			  nmea_header[c] = SerialBufferReceived.Buffer[c];
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <Startuart2Task+0xb4>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	7819      	ldrb	r1, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <Startuart2Task+0xb8>)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	460a      	mov	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
		  for(int c = 0; c < 6; c++){
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b05      	cmp	r3, #5
 8000c30:	ddf0      	ble.n	8000c14 <Startuart2Task+0x38>
		  }
		  if(!strcmp(nmea_header, "$GPRMC")){
 8000c32:	4919      	ldr	r1, [pc, #100]	; (8000c98 <Startuart2Task+0xbc>)
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <Startuart2Task+0xb8>)
 8000c36:	f7ff facb 	bl	80001d0 <strcmp>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11f      	bne.n	8000c80 <Startuart2Task+0xa4>
			  if(SerialBufferReceived.Buffer[18] == 'V'){
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <Startuart2Task+0xb4>)
 8000c42:	7c9b      	ldrb	r3, [r3, #18]
 8000c44:	2b56      	cmp	r3, #86	; 0x56
 8000c46:	d11b      	bne.n	8000c80 <Startuart2Task+0xa4>
				  //No fix, turn on LED
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f000 fece 	bl	80019f0 <HAL_GPIO_WritePin>
//
//				  latitude = GpsToDecimalDegrees(raw_latitude, *latdir);
//				  longitude = GpsToDecimalDegrees(raw_longitude, *longdir);


				  if(tim1_counter > 1000){ //Post SPI write semaphore every 1s there is a valid message
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <Startuart2Task+0xc0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c5c:	d910      	bls.n	8000c80 <Startuart2Task+0xa4>
					  xSemaphoreGive(spi_semHandle);
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <Startuart2Task+0xc4>)
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	f004 fb5a 	bl	8005320 <xQueueGenericSend>
					  tim1_counter = 0;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <Startuart2Task+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
					  xSemaphoreTake(uart_semHandle, portMAX_DELAY); //Wait until SPI is posted
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <Startuart2Task+0xc8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 fe56 	bl	800592c <xQueueSemaphoreTake>
				  }
			  }
		  }
		  got_nmea=0;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <Startuart2Task+0xcc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000c86:	e7b3      	b.n	8000bf0 <Startuart2Task+0x14>
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	2000060c 	.word	0x2000060c
 8000c90:	20000540 	.word	0x20000540
 8000c94:	20000348 	.word	0x20000348
 8000c98:	08008770 	.word	0x08008770
 8000c9c:	20000608 	.word	0x20000608
 8000ca0:	20000534 	.word	0x20000534
 8000ca4:	20000538 	.word	0x20000538
 8000ca8:	20000344 	.word	0x20000344

08000cac <startspi1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startspi1Task */
void startspi1Task(void const * argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startspi1Task */
	HAL_StatusTypeDef response = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]

	//SPI Initialization **************************
	//Write CS Pin high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2101      	movs	r1, #1
 8000cbc:	488d      	ldr	r0, [pc, #564]	; (8000ef4 <startspi1Task+0x248>)
 8000cbe:	f000 fe97 	bl	80019f0 <HAL_GPIO_WritePin>
	// Enable write enable latch (allow write operations)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	488b      	ldr	r0, [pc, #556]	; (8000ef4 <startspi1Task+0x248>)
 8000cc8:	f000 fe92 	bl	80019f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4989      	ldr	r1, [pc, #548]	; (8000ef8 <startspi1Task+0x24c>)
 8000cd2:	488a      	ldr	r0, [pc, #552]	; (8000efc <startspi1Task+0x250>)
 8000cd4:	f002 f821 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4885      	ldr	r0, [pc, #532]	; (8000ef4 <startspi1Task+0x248>)
 8000cde:	f000 fe87 	bl	80019f0 <HAL_GPIO_WritePin>

	// Test bytes to write to EEPROM
	spi_mout_buf[0] = 0xAB;
 8000ce2:	4b87      	ldr	r3, [pc, #540]	; (8000f00 <startspi1Task+0x254>)
 8000ce4:	22ab      	movs	r2, #171	; 0xab
 8000ce6:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0xCD;
 8000ce8:	4b85      	ldr	r3, [pc, #532]	; (8000f00 <startspi1Task+0x254>)
 8000cea:	22cd      	movs	r2, #205	; 0xcd
 8000cec:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0xEF;
 8000cee:	4b84      	ldr	r3, [pc, #528]	; (8000f00 <startspi1Task+0x254>)
 8000cf0:	22ef      	movs	r2, #239	; 0xef
 8000cf2:	709a      	strb	r2, [r3, #2]

	// Write 3 bytes starting at given address
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	487e      	ldr	r0, [pc, #504]	; (8000ef4 <startspi1Task+0x248>)
 8000cfa:	f000 fe79 	bl	80019f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	2201      	movs	r2, #1
 8000d02:	4980      	ldr	r1, [pc, #512]	; (8000f04 <startspi1Task+0x258>)
 8000d04:	487d      	ldr	r0, [pc, #500]	; (8000efc <startspi1Task+0x250>)
 8000d06:	f002 f808 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	497e      	ldr	r1, [pc, #504]	; (8000f08 <startspi1Task+0x25c>)
 8000d10:	487a      	ldr	r0, [pc, #488]	; (8000efc <startspi1Task+0x250>)
 8000d12:	f002 f802 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 8000d16:	2364      	movs	r3, #100	; 0x64
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4979      	ldr	r1, [pc, #484]	; (8000f00 <startspi1Task+0x254>)
 8000d1c:	4877      	ldr	r0, [pc, #476]	; (8000efc <startspi1Task+0x250>)
 8000d1e:	f001 fffc 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	4873      	ldr	r0, [pc, #460]	; (8000ef4 <startspi1Task+0x248>)
 8000d28:	f000 fe62 	bl	80019f0 <HAL_GPIO_WritePin>
	//IO Driver for output pin enable

	// Clear buffer
	spi_mout_buf[0] = 0;
 8000d2c:	4b74      	ldr	r3, [pc, #464]	; (8000f00 <startspi1Task+0x254>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	spi_mout_buf[1] = 0;
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <startspi1Task+0x254>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	705a      	strb	r2, [r3, #1]
	spi_mout_buf[2] = 0;
 8000d38:	4b71      	ldr	r3, [pc, #452]	; (8000f00 <startspi1Task+0x254>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	709a      	strb	r2, [r3, #2]

	// Wait until WIP bit is cleared
	spi_wip = 1;
 8000d3e:	4b73      	ldr	r3, [pc, #460]	; (8000f0c <startspi1Task+0x260>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 8000d44:	e02d      	b.n	8000da2 <startspi1Task+0xf6>
	{
	 // Read status register
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	486a      	ldr	r0, [pc, #424]	; (8000ef4 <startspi1Task+0x248>)
 8000d4c:	f000 fe50 	bl	80019f0 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	2201      	movs	r2, #1
 8000d54:	496e      	ldr	r1, [pc, #440]	; (8000f10 <startspi1Task+0x264>)
 8000d56:	4869      	ldr	r0, [pc, #420]	; (8000efc <startspi1Task+0x250>)
 8000d58:	f001 ffdf 	bl	8002d1a <HAL_SPI_Transmit>
	 response = HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4967      	ldr	r1, [pc, #412]	; (8000f00 <startspi1Task+0x254>)
 8000d62:	4866      	ldr	r0, [pc, #408]	; (8000efc <startspi1Task+0x250>)
 8000d64:	f002 f947 	bl	8002ff6 <HAL_SPI_Receive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
	 if (response == HAL_OK) {
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <startspi1Task+0xd4>
	  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <startspi1Task+0x254>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4866      	ldr	r0, [pc, #408]	; (8000f14 <startspi1Task+0x268>)
 8000d7a:	f006 fe45 	bl	8007a08 <iprintf>
 8000d7e:	e004      	b.n	8000d8a <startspi1Task+0xde>
	 } else {
	  printf("Got error response as %d\r\n", response);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4864      	ldr	r0, [pc, #400]	; (8000f18 <startspi1Task+0x26c>)
 8000d86:	f006 fe3f 	bl	8007a08 <iprintf>
	 }
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4859      	ldr	r0, [pc, #356]	; (8000ef4 <startspi1Task+0x248>)
 8000d90:	f000 fe2e 	bl	80019f0 <HAL_GPIO_WritePin>

	 // Mask out WIP bit
	 spi_wip = spi_mout_buf[0] & 0b00000001;
 8000d94:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <startspi1Task+0x254>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b5b      	ldr	r3, [pc, #364]	; (8000f0c <startspi1Task+0x260>)
 8000da0:	701a      	strb	r2, [r3, #0]
	while (spi_wip)
 8000da2:	4b5a      	ldr	r3, [pc, #360]	; (8000f0c <startspi1Task+0x260>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1cd      	bne.n	8000d46 <startspi1Task+0x9a>
	}

	// Read the 3 bytes back
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2101      	movs	r1, #1
 8000dae:	4851      	ldr	r0, [pc, #324]	; (8000ef4 <startspi1Task+0x248>)
 8000db0:	f000 fe1e 	bl	80019f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	2201      	movs	r2, #1
 8000db8:	4958      	ldr	r1, [pc, #352]	; (8000f1c <startspi1Task+0x270>)
 8000dba:	4850      	ldr	r0, [pc, #320]	; (8000efc <startspi1Task+0x250>)
 8000dbc:	f001 ffad 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	4950      	ldr	r1, [pc, #320]	; (8000f08 <startspi1Task+0x25c>)
 8000dc6:	484d      	ldr	r0, [pc, #308]	; (8000efc <startspi1Task+0x250>)
 8000dc8:	f001 ffa7 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	2203      	movs	r2, #3
 8000dd0:	494b      	ldr	r1, [pc, #300]	; (8000f00 <startspi1Task+0x254>)
 8000dd2:	484a      	ldr	r0, [pc, #296]	; (8000efc <startspi1Task+0x250>)
 8000dd4:	f002 f90f 	bl	8002ff6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4845      	ldr	r0, [pc, #276]	; (8000ef4 <startspi1Task+0x248>)
 8000dde:	f000 fe07 	bl	80019f0 <HAL_GPIO_WritePin>

	// Read status register
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2101      	movs	r1, #1
 8000de6:	4843      	ldr	r0, [pc, #268]	; (8000ef4 <startspi1Task+0x248>)
 8000de8:	f000 fe02 	bl	80019f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000dec:	2364      	movs	r3, #100	; 0x64
 8000dee:	2201      	movs	r2, #1
 8000df0:	4947      	ldr	r1, [pc, #284]	; (8000f10 <startspi1Task+0x264>)
 8000df2:	4842      	ldr	r0, [pc, #264]	; (8000efc <startspi1Task+0x250>)
 8000df4:	f001 ff91 	bl	8002d1a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000df8:	2364      	movs	r3, #100	; 0x64
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4940      	ldr	r1, [pc, #256]	; (8000f00 <startspi1Task+0x254>)
 8000dfe:	483f      	ldr	r0, [pc, #252]	; (8000efc <startspi1Task+0x250>)
 8000e00:	f002 f8f9 	bl	8002ff6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2101      	movs	r1, #1
 8000e08:	483a      	ldr	r0, [pc, #232]	; (8000ef4 <startspi1Task+0x248>)
 8000e0a:	f000 fdf1 	bl	80019f0 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <startspi1Task+0x274>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f04f 31ff 	mov.w	r1, #4294967295
 8000e16:	4618      	mov	r0, r3
 8000e18:	f004 fd88 	bl	800592c <xQueueSemaphoreTake>
	  //osDelay(1);

	  //Send over SPI to FRAM
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
		//Set Write enable latch
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4834      	ldr	r0, [pc, #208]	; (8000ef4 <startspi1Task+0x248>)
 8000e22:	f000 fde5 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)&WREN, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	4933      	ldr	r1, [pc, #204]	; (8000ef8 <startspi1Task+0x24c>)
 8000e2a:	4834      	ldr	r0, [pc, #208]	; (8000efc <startspi1Task+0x250>)
 8000e2c:	f002 fc26 	bl	800367c <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2101      	movs	r1, #1
 8000e34:	482f      	ldr	r0, [pc, #188]	; (8000ef4 <startspi1Task+0x248>)
 8000e36:	f000 fddb 	bl	80019f0 <HAL_GPIO_WritePin>

		// Write 64 bytes starting at given address
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <startspi1Task+0x248>)
 8000e40:	f000 fdd6 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2201      	movs	r2, #1
 8000e48:	492e      	ldr	r1, [pc, #184]	; (8000f04 <startspi1Task+0x258>)
 8000e4a:	482c      	ldr	r0, [pc, #176]	; (8000efc <startspi1Task+0x250>)
 8000e4c:	f001 ff65 	bl	8002d1a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000e50:	2364      	movs	r3, #100	; 0x64
 8000e52:	2202      	movs	r2, #2
 8000e54:	492c      	ldr	r1, [pc, #176]	; (8000f08 <startspi1Task+0x25c>)
 8000e56:	4829      	ldr	r0, [pc, #164]	; (8000efc <startspi1Task+0x250>)
 8000e58:	f001 ff5f 	bl	8002d1a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&SerialBufferReceived.Buffer, NMEA_LEN, 100);
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	2248      	movs	r2, #72	; 0x48
 8000e60:	4930      	ldr	r1, [pc, #192]	; (8000f24 <startspi1Task+0x278>)
 8000e62:	4826      	ldr	r0, [pc, #152]	; (8000efc <startspi1Task+0x250>)
 8000e64:	f001 ff59 	bl	8002d1a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <startspi1Task+0x248>)
 8000e6e:	f000 fdbf 	bl	80019f0 <HAL_GPIO_WritePin>

		// TEST READ ECHO
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2101      	movs	r1, #1
 8000e76:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <startspi1Task+0x248>)
 8000e78:	f000 fdba 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000e7c:	2364      	movs	r3, #100	; 0x64
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4926      	ldr	r1, [pc, #152]	; (8000f1c <startspi1Task+0x270>)
 8000e82:	481e      	ldr	r0, [pc, #120]	; (8000efc <startspi1Task+0x250>)
 8000e84:	f001 ff49 	bl	8002d1a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000e88:	2364      	movs	r3, #100	; 0x64
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	491e      	ldr	r1, [pc, #120]	; (8000f08 <startspi1Task+0x25c>)
 8000e8e:	481b      	ldr	r0, [pc, #108]	; (8000efc <startspi1Task+0x250>)
 8000e90:	f001 ff43 	bl	8002d1a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t *)&test_spi_buf.Buffer, NMEA_LEN, 100);
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	2248      	movs	r2, #72	; 0x48
 8000e98:	4923      	ldr	r1, [pc, #140]	; (8000f28 <startspi1Task+0x27c>)
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <startspi1Task+0x250>)
 8000e9c:	f002 f8ab 	bl	8002ff6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <startspi1Task+0x248>)
 8000ea6:	f000 fda3 	bl	80019f0 <HAL_GPIO_WritePin>

		spi_addr += NMEA_LEN; //Offset within destination device to hold NMEA message
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <startspi1Task+0x25c>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	3348      	adds	r3, #72	; 0x48
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <startspi1Task+0x25c>)
 8000eb4:	801a      	strh	r2, [r3, #0]

		if(spi_addr > 0x7FFF) spi_addr = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <startspi1Task+0x25c>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da02      	bge.n	8000ec6 <startspi1Task+0x21a>
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <startspi1Task+0x25c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	801a      	strh	r2, [r3, #0]


		xSemaphoreGive(uart_semHandle);
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <startspi1Task+0x280>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f004 fa26 	bl	8005320 <xQueueGenericSend>

		//Blink LED to signal SPI write happened
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f000 fd88 	bl	80019f0 <HAL_GPIO_WritePin>
		vTaskDelay( 200 / portTICK_PERIOD_MS );
 8000ee0:	20c8      	movs	r0, #200	; 0xc8
 8000ee2:	f005 f91f 	bl	8006124 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2102      	movs	r1, #2
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f000 fd7f 	bl	80019f0 <HAL_GPIO_WritePin>
		xSemaphoreTake(spi_semHandle, portMAX_DELAY);
 8000ef2:	e78c      	b.n	8000e0e <startspi1Task+0x162>
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	080087af 	.word	0x080087af
 8000efc:	200003b8 	.word	0x200003b8
 8000f00:	20000350 	.word	0x20000350
 8000f04:	080087ae 	.word	0x080087ae
 8000f08:	200003b4 	.word	0x200003b4
 8000f0c:	200003b6 	.word	0x200003b6
 8000f10:	080087b0 	.word	0x080087b0
 8000f14:	08008778 	.word	0x08008778
 8000f18:	0800878c 	.word	0x0800878c
 8000f1c:	080087ad 	.word	0x080087ad
 8000f20:	20000534 	.word	0x20000534
 8000f24:	20000540 	.word	0x20000540
 8000f28:	200005a4 	.word	0x200005a4
 8000f2c:	20000538 	.word	0x20000538

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	tim1_counter++; //Incrementing at 1kHz (1000 in 1 second)
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f40:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8000f4c:	f000 fa9a 	bl	8001484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000608 	.word	0x20000608
 8000f5c:	40012c00 	.word	0x40012c00

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	f06f 0001 	mvn.w	r0, #1
 8000faa:	f000 fb43 	bl	8001634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12f      	bne.n	800103e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_SPI_MspInit+0x90>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_SPI_MspInit+0x90>)
 8000fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_SPI_MspInit+0x90>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_SPI_MspInit+0x90>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_SPI_MspInit+0x90>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_SPI_MspInit+0x90>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800100e:	2338      	movs	r3, #56	; 0x38
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101e:	2305      	movs	r3, #5
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_SPI_MspInit+0x94>)
 800102a:	f000 fb6f 	bl	800170c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2105      	movs	r1, #5
 8001032:	2023      	movs	r0, #35	; 0x23
 8001034:	f000 fafe 	bl	8001634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001038:	2023      	movs	r0, #35	; 0x23
 800103a:	f000 fb17 	bl	800166c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40013000 	.word	0x40013000
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b098      	sub	sp, #96	; 0x60
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	2234      	movs	r2, #52	; 0x34
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f006 fc2a 	bl	80078ce <memset>
  if(huart->Instance==USART1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a3e      	ldr	r2, [pc, #248]	; (8001178 <HAL_UART_MspInit+0x124>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d138      	bne.n	80010f6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fc09 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800109c:	f7ff ff60 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <HAL_UART_MspInit+0x128>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	4a35      	ldr	r2, [pc, #212]	; (800117c <HAL_UART_MspInit+0x128>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6613      	str	r3, [r2, #96]	; 0x60
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_UART_MspInit+0x128>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <HAL_UART_MspInit+0x128>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	4a2f      	ldr	r2, [pc, #188]	; (800117c <HAL_UART_MspInit+0x128>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_UART_MspInit+0x128>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e2:	2307      	movs	r3, #7
 80010e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f000 fb0c 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f4:	e03b      	b.n	800116e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_UART_MspInit+0x12c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d136      	bne.n	800116e <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fbcb 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001118:	f7ff ff22 	bl	8000f60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0x128>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_UART_MspInit+0x128>)
 8001122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001126:	6593      	str	r3, [r2, #88]	; 0x58
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x128>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x128>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_UART_MspInit+0x128>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0x128>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800114c:	230c      	movs	r3, #12
 800114e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115c:	2307      	movs	r3, #7
 800115e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f000 facf 	bl	800170c <HAL_GPIO_Init>
}
 800116e:	bf00      	nop
 8001170:	3760      	adds	r7, #96	; 0x60
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	40004400 	.word	0x40004400

08001184 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	2019      	movs	r0, #25
 800119a:	f000 fa4b 	bl	8001634 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800119e:	2019      	movs	r0, #25
 80011a0:	f000 fa64 	bl	800166c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_InitTick+0x9c>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_InitTick+0x9c>)
 80011aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ae:	6613      	str	r3, [r2, #96]	; 0x60
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_InitTick+0x9c>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011bc:	f107 0210 	add.w	r2, r7, #16
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fadc 	bl	8002784 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011cc:	f001 fac4 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80011d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	4a13      	ldr	r2, [pc, #76]	; (8001224 <HAL_InitTick+0xa0>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0c9b      	lsrs	r3, r3, #18
 80011dc:	3b01      	subs	r3, #1
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_InitTick+0xa4>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_InitTick+0xa8>)
 80011e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_InitTick+0xa4>)
 80011e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_InitTick+0xa4>)
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_InitTick+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_InitTick+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <HAL_InitTick+0xa4>)
 8001202:	f002 fe32 	bl	8003e6a <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d104      	bne.n	8001216 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <HAL_InitTick+0xa4>)
 800120e:	f002 fe8d 	bl	8003f2c <HAL_TIM_Base_Start_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	431bde83 	.word	0x431bde83
 8001228:	20000768 	.word	0x20000768
 800122c:	40012c00 	.word	0x40012c00

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001262:	f002 feb7 	bl	8003fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000768 	.word	0x20000768

08001270 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <SPI1_IRQHandler+0x10>)
 8001276:	f002 fa8f 	bl	8003798 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003b8 	.word	0x200003b8

08001284 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001288:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800128c:	f000 fbc8 	bl	8001a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00a      	b.n	80012bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012a6:	f3af 8000 	nop.w
 80012aa:	4601      	mov	r1, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf0      	blt.n	80012a6 <_read+0x12>
	}

return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e009      	b.n	80012f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf1      	blt.n	80012e0 <_write+0x12>
	}
	return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_close>:

int _close(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132e:	605a      	str	r2, [r3, #4]
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_isatty>:

int _isatty(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	return 1;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f006 f964 	bl	800766c <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000a000 	.word	0x2000a000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	200007b4 	.word	0x200007b4
 80013d8:	20003030 	.word	0x20003030

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f006 fa19 	bl	8007864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff f8c9 	bl	80005c8 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001444:	080088a4 	.word	0x080088a4
  ldr r2, =_sbss
 8001448:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800144c:	20003030 	.word	0x20003030

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>

08001452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f8de 	bl	800161e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	200f      	movs	r0, #15
 8001464:	f7ff fe8e 	bl	8001184 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fd7a 	bl	8000f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008
 80014a8:	200007b8 	.word	0x200007b8

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200007b8 	.word	0x200007b8

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff4c 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001646:	f7ff ff61 	bl	800150c <__NVIC_GetPriorityGrouping>
 800164a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	6978      	ldr	r0, [r7, #20]
 8001652:	f7ff ffb1 	bl	80015b8 <NVIC_EncodePriority>
 8001656:	4602      	mov	r2, r0
 8001658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff80 	bl	8001564 <__NVIC_SetPriority>
}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff54 	bl	8001528 <__NVIC_EnableIRQ>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d005      	beq.n	80016ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e029      	b.n	8001700 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 020e 	bic.w	r2, r2, #14
 80016ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 021c 	and.w	r2, r3, #28
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    }
  }
  return status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e14e      	b.n	80019ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8140 	beq.w	80019b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d005      	beq.n	800174c <HAL_GPIO_Init+0x40>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d130      	bne.n	80017ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001782:	2201      	movs	r2, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 0201 	and.w	r2, r3, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d017      	beq.n	80017ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d123      	bne.n	800183e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	6939      	ldr	r1, [r7, #16]
 800183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0203 	and.w	r2, r3, #3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 809a 	beq.w	80019b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6613      	str	r3, [r2, #96]	; 0x60
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 800188e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001898:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c2:	d013      	beq.n	80018ec <HAL_GPIO_Init+0x1e0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a46      	ldr	r2, [pc, #280]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_Init+0x1dc>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a45      	ldr	r2, [pc, #276]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x1d8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_Init+0x1d4>
 80018dc:	2303      	movs	r3, #3
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e0:	2307      	movs	r3, #7
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018ec:	2300      	movs	r3, #0
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018fe:	4937      	ldr	r1, [pc, #220]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001930:	4a2e      	ldr	r2, [pc, #184]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f47f aea9 	bne.w	800171c <HAL_GPIO_Init+0x10>
  }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48000800 	.word	0x48000800
 80019e8:	48000c00 	.word	0x48000c00
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f83c 	bl	8000abc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40007000 	.word	0x40007000

08001a70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40007000 	.word	0x40007000

08001a8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a9a:	d130      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa8:	d038      	beq.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2232      	movs	r2, #50	; 0x32
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad0:	e002      	b.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae4:	d102      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f2      	bne.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af8:	d110      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e00f      	b.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0a:	d007      	beq.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b14:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	20000000 	.word	0x20000000
 8001b34:	431bde83 	.word	0x431bde83

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	f000 bc4f 	b.w	80023ea <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4b97      	ldr	r3, [pc, #604]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b56:	4b95      	ldr	r3, [pc, #596]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80e6 	beq.w	8001d3a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4c>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	f040 808d 	bne.w	8001c96 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 8089 	bne.w	8001c96 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b84:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_RCC_OscConfig+0x66>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f000 bc26 	b.w	80023ea <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba2:	4b82      	ldr	r3, [pc, #520]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x80>
 8001bae:	4b7f      	ldr	r3, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb6:	e005      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8c>
 8001bb8:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d224      	bcs.n	8001c12 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fe0b 	bl	80027e8 <RCC_SetFlashLatencyFromMSIRange>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f000 bc06 	b.w	80023ea <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bde:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	496d      	ldr	r1, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	4968      	ldr	r1, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
 8001c10:	e025      	b.n	8001c5e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	4960      	ldr	r1, [pc, #384]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c30:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	495b      	ldr	r1, [pc, #364]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fdca 	bl	80027e8 <RCC_SetFlashLatencyFromMSIRange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e3c5      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5e:	f000 fccd 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b51      	ldr	r3, [pc, #324]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	4950      	ldr	r1, [pc, #320]	; (8001db0 <HAL_RCC_OscConfig+0x278>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a4e      	ldr	r2, [pc, #312]	; (8001db4 <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa7e 	bl	8001184 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d052      	beq.n	8001d38 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	e3a9      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d032      	beq.n	8001d04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a42      	ldr	r2, [pc, #264]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fbff 	bl	80014ac <HAL_GetTick>
 8001cae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fbfb 	bl	80014ac <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e392      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a35      	ldr	r2, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b33      	ldr	r3, [pc, #204]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	4930      	ldr	r1, [pc, #192]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	492b      	ldr	r1, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
 8001d02:	e01a      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fbcc 	bl	80014ac <HAL_GetTick>
 8001d14:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff fbc8 	bl	80014ac <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e35f      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1e0>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d073      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_OscConfig+0x220>
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d10e      	bne.n	8001d70 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d063      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2f4>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d15f      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e33c      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x250>
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e025      	b.n	8001dd4 <HAL_RCC_OscConfig+0x29c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d114      	bne.n	8001dbc <HAL_RCC_OscConfig+0x284>
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a02      	ldr	r2, [pc, #8]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e013      	b.n	8001dd4 <HAL_RCC_OscConfig+0x29c>
 8001dac:	40021000 	.word	0x40021000
 8001db0:	080087b4 	.word	0x080087b4
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a8e      	ldr	r2, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b8c      	ldr	r3, [pc, #560]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a8b      	ldr	r2, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb66 	bl	80014ac <HAL_GetTick>
 8001de0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fb62 	bl	80014ac <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e2f9      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x2ac>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb52 	bl	80014ac <HAL_GetTick>
 8001e08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fb4e 	bl	80014ac <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e2e5      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	4b77      	ldr	r3, [pc, #476]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d060      	beq.n	8001efc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x314>
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d116      	bne.n	8001e7a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	4b6b      	ldr	r3, [pc, #428]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x32c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e2c2      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4962      	ldr	r1, [pc, #392]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	e040      	b.n	8001efc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d023      	beq.n	8001eca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e82:	4b5e      	ldr	r3, [pc, #376]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5d      	ldr	r2, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fb0d 	bl	80014ac <HAL_GetTick>
 8001e92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fb09 	bl	80014ac <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e2a0      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea8:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	494e      	ldr	r1, [pc, #312]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e018      	b.n	8001efc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fae9 	bl	80014ac <HAL_GetTick>
 8001eda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fae5 	bl	80014ac <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e27c      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8082 	beq.w	800200e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d05f      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f18:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d037      	beq.n	8001f98 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e254      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f5a:	f7ff faa7 	bl	80014ac <HAL_GetTick>
 8001f5e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff faa3 	bl	80014ac <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e23a      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ef      	bne.n	8001f62 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	f023 0210 	bic.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fa80 	bl	80014ac <HAL_GetTick>
 8001fac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fa7c 	bl	80014ac <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e213      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x478>
 8001fd0:	e01d      	b.n	800200e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd8:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fa63 	bl	80014ac <HAL_GetTick>
 8001fe6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff fa5f 	bl	80014ac <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b11      	cmp	r3, #17
 8001ff6:	d903      	bls.n	8002000 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1f6      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
 8001ffc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	4ba9      	ldr	r3, [pc, #676]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ed      	bne.n	8001fea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80bd 	beq.w	8002196 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002022:	4ba1      	ldr	r3, [pc, #644]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10e      	bne.n	800204c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a9d      	ldr	r2, [pc, #628]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b9b      	ldr	r3, [pc, #620]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	4b97      	ldr	r3, [pc, #604]	; (80022ac <HAL_RCC_OscConfig+0x774>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d118      	bne.n	800208a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b94      	ldr	r3, [pc, #592]	; (80022ac <HAL_RCC_OscConfig+0x774>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a93      	ldr	r2, [pc, #588]	; (80022ac <HAL_RCC_OscConfig+0x774>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002064:	f7ff fa22 	bl	80014ac <HAL_GetTick>
 8002068:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7ff fa1e 	bl	80014ac <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1b5      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x774>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d02c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002096:	4b84      	ldr	r3, [pc, #528]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	497f      	ldr	r1, [pc, #508]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020bc:	4b7a      	ldr	r3, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a79      	ldr	r2, [pc, #484]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020dc:	e018      	b.n	8002110 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	4a70      	ldr	r2, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ee:	e00f      	b.n	8002110 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d016      	beq.n	8002146 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff f9c8 	bl	80014ac <HAL_GetTick>
 800211c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7ff f9c4 	bl	80014ac <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e159      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ed      	beq.n	8002120 <HAL_RCC_OscConfig+0x5e8>
 8002144:	e01d      	b.n	8002182 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff f9b1 	bl	80014ac <HAL_GetTick>
 800214a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff f9ad 	bl	80014ac <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e142      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ed      	bne.n	800214e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002172:	4b4d      	ldr	r3, [pc, #308]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	4a4b      	ldr	r2, [pc, #300]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 800217a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800217e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03c      	beq.n	800221c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021aa:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b0:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7ff f977 	bl	80014ac <HAL_GetTick>
 80021be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c2:	f7ff f973 	bl	80014ac <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e10a      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021d4:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80021d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ef      	beq.n	80021c2 <HAL_RCC_OscConfig+0x68a>
 80021e2:	e01b      	b.n	800221c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021e4:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80021e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ea:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff f95a 	bl	80014ac <HAL_GetTick>
 80021f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fc:	f7ff f956 	bl	80014ac <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0ed      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ef      	bne.n	80021fc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80e1 	beq.w	80023e8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	2b02      	cmp	r3, #2
 800222c:	f040 80b5 	bne.w	800239a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	429a      	cmp	r2, r3
 8002242:	d124      	bne.n	800228e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	3b01      	subs	r3, #1
 8002250:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d11b      	bne.n	800228e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d113      	bne.n	800228e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d109      	bne.n	800228e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d05f      	beq.n	800234e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d05a      	beq.n	800234a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_RCC_OscConfig+0x770>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a0:	f7ff f904 	bl	80014ac <HAL_GetTick>
 80022a4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	e00c      	b.n	80022c2 <HAL_RCC_OscConfig+0x78a>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f8fc 	bl	80014ac <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e093      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <HAL_RCC_OscConfig+0x8c0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022de:	3a01      	subs	r2, #1
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e8:	0212      	lsls	r2, r2, #8
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022f0:	0852      	lsrs	r2, r2, #1
 80022f2:	3a01      	subs	r2, #1
 80022f4:	0552      	lsls	r2, r2, #21
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022fc:	0852      	lsrs	r2, r2, #1
 80022fe:	3a01      	subs	r2, #1
 8002300:	0652      	lsls	r2, r2, #25
 8002302:	430a      	orrs	r2, r1
 8002304:	493b      	ldr	r1, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 8002310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002314:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 800231c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002320:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002322:	f7ff f8c3 	bl	80014ac <HAL_GetTick>
 8002326:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7ff f8bf 	bl	80014ac <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e056      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002348:	e04e      	b.n	80023e8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e04d      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d146      	bne.n	80023e8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 8002360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002364:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002366:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 800236c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002370:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002372:	f7ff f89b 	bl	80014ac <HAL_GetTick>
 8002376:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7ff f897 	bl	80014ac <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e02e      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x842>
 8002398:	e026      	b.n	80023e8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d021      	beq.n	80023e4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80023a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f87e 	bl	80014ac <HAL_GetTick>
 80023b0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff f87a 	bl	80014ac <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e011      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_RCC_OscConfig+0x8bc>)
 80023d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023dc:	f023 0303 	bic.w	r3, r3, #3
 80023e0:	60d3      	str	r3, [r2, #12]
 80023e2:	e001      	b.n	80023e8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	f99f808c 	.word	0xf99f808c

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0e7      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d910      	bls.n	8002440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b72      	ldr	r3, [pc, #456]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 0207 	bic.w	r2, r3, #7
 8002426:	4970      	ldr	r1, [pc, #448]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b6e      	ldr	r3, [pc, #440]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0cf      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b66      	ldr	r3, [pc, #408]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002458:	429a      	cmp	r2, r3
 800245a:	d908      	bls.n	800246e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4960      	ldr	r1, [pc, #384]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04c      	beq.n	8002514 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d121      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0a6      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09a      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e08e      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c2:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e086      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4943      	ldr	r1, [pc, #268]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe ffe2 	bl	80014ac <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7fe ffde 	bl	80014ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e06e      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	429a      	cmp	r2, r3
 800252e:	d208      	bcs.n	8002542 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	492b      	ldr	r1, [pc, #172]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d210      	bcs.n	8002572 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	4923      	ldr	r1, [pc, #140]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e036      	b.n	80025e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	4918      	ldr	r1, [pc, #96]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4910      	ldr	r1, [pc, #64]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b0:	f000 f824 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	490b      	ldr	r1, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1f4>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1f8>)
 80025ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1fc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fdd5 	bl	8001184 <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80025de:	7afb      	ldrb	r3, [r7, #11]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	080087b4 	.word	0x080087b4
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x34>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d121      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d11e      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800263c:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e005      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002658:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_RCC_GetSysClockFreq+0x10c>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d102      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002674:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_RCC_GetSysClockFreq+0x110>)
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e004      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d101      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002680:	4b23      	ldr	r3, [pc, #140]	; (8002710 <HAL_RCC_GetSysClockFreq+0x114>)
 8002682:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d134      	bne.n	80026f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d003      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0xac>
 80026a0:	e005      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_RCC_GetSysClockFreq+0x110>)
 80026a4:	617b      	str	r3, [r7, #20]
      break;
 80026a6:	e005      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_RCC_GetSysClockFreq+0x114>)
 80026aa:	617b      	str	r3, [r7, #20]
      break;
 80026ac:	e002      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	617b      	str	r3, [r7, #20]
      break;
 80026b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	3301      	adds	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	fb03 f202 	mul.w	r2, r3, r2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_GetSysClockFreq+0x108>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	0e5b      	lsrs	r3, r3, #25
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	3301      	adds	r3, #1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026f4:	69bb      	ldr	r3, [r7, #24]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	080087cc 	.word	0x080087cc
 800270c:	00f42400 	.word	0x00f42400
 8002710:	007a1200 	.word	0x007a1200

08002714 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_GetHCLKFreq+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002730:	f7ff fff0 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4904      	ldr	r1, [pc, #16]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	080087c4 	.word	0x080087c4

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800275c:	f7ff ffda 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0adb      	lsrs	r3, r3, #11
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	080087c4 	.word	0x080087c4

08002784 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	220f      	movs	r2, #15
 8002792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_RCC_GetClockConfig+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0207 	and.w	r2, r3, #7
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40022000 	.word	0x40022000

080027e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002800:	f7ff f936 	bl	8001a70 <HAL_PWREx_GetVoltageRange>
 8002804:	6178      	str	r0, [r7, #20]
 8002806:	e014      	b.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002820:	f7ff f926 	bl	8001a70 <HAL_PWREx_GetVoltageRange>
 8002824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002838:	d10b      	bne.n	8002852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d919      	bls.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2ba0      	cmp	r3, #160	; 0xa0
 8002844:	d902      	bls.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002846:	2302      	movs	r3, #2
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	e013      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800284c:	2301      	movs	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	e010      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d902      	bls.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002858:	2303      	movs	r3, #3
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e00a      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d102      	bne.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002864:	2302      	movs	r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	e004      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b70      	cmp	r3, #112	; 0x70
 800286e:	d101      	bne.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 0207 	bic.w	r2, r3, #7
 800287c:	4909      	ldr	r1, [pc, #36]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40022000 	.word	0x40022000

080028a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b0:	2300      	movs	r3, #0
 80028b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b4:	2300      	movs	r3, #0
 80028b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 809e 	beq.w	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ca:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a3f      	ldr	r2, [pc, #252]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
 80028ec:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f8:	2301      	movs	r3, #1
 80028fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028fc:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002908:	f7fe fdd0 	bl	80014ac <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800290e:	e009      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7fe fdcc 	bl	80014ac <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	74fb      	strb	r3, [r7, #19]
        break;
 8002922:	e005      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d15a      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002940:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01e      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	429a      	cmp	r2, r3
 8002950:	d019      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d016      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fd8c 	bl	80014ac <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	e00b      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fd88 	bl	80014ac <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d902      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	74fb      	strb	r3, [r7, #19]
            break;
 80029ae:	e006      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ec      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029da:	e009      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
 80029e0:	e006      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f0:	7c7b      	ldrb	r3, [r7, #17]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b6e      	ldr	r3, [pc, #440]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	4a6d      	ldr	r2, [pc, #436]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0e:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 0203 	bic.w	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4964      	ldr	r1, [pc, #400]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a30:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 020c 	bic.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	495c      	ldr	r1, [pc, #368]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4953      	ldr	r1, [pc, #332]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a74:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	494b      	ldr	r1, [pc, #300]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a96:	4b46      	ldr	r3, [pc, #280]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4942      	ldr	r1, [pc, #264]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	493a      	ldr	r1, [pc, #232]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002afc:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	4920      	ldr	r1, [pc, #128]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	4918      	ldr	r1, [pc, #96]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ba4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000

08002bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e095      	b.n	8002d12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf6:	d009      	beq.n	8002c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
 8002bfe:	e005      	b.n	8002c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe f9c8 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c4c:	d902      	bls.n	8002c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e002      	b.n	8002c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c62:	d007      	beq.n	8002c74 <HAL_SPI_Init+0xa0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 0204 	and.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_SPI_Transmit+0x22>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e158      	b.n	8002fee <HAL_SPI_Transmit+0x2d4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d44:	f7fe fbb2 	bl	80014ac <HAL_GetTick>
 8002d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d5e:	e13d      	b.n	8002fdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_SPI_Transmit+0x52>
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d70:	e134      	b.n	8002fdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2203      	movs	r2, #3
 8002d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dbc:	d10f      	bne.n	8002dde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d007      	beq.n	8002dfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e04:	d94b      	bls.n	8002e9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_SPI_Transmit+0xfa>
 8002e0e:	8afb      	ldrh	r3, [r7, #22]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d13e      	bne.n	8002e92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	1c9a      	adds	r2, r3, #2
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e38:	e02b      	b.n	8002e92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d112      	bne.n	8002e6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e6c:	e011      	b.n	8002e92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6e:	f7fe fb1d 	bl	80014ac <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d803      	bhi.n	8002e86 <HAL_SPI_Transmit+0x16c>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d102      	bne.n	8002e8c <HAL_SPI_Transmit+0x172>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e90:	e0a4      	b.n	8002fdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ce      	bne.n	8002e3a <HAL_SPI_Transmit+0x120>
 8002e9c:	e07c      	b.n	8002f98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_SPI_Transmit+0x192>
 8002ea6:	8afb      	ldrh	r3, [r7, #22]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d170      	bne.n	8002f8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d912      	bls.n	8002edc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b02      	subs	r3, #2
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eda:	e058      	b.n	8002f8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f02:	e044      	b.n	8002f8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d12b      	bne.n	8002f6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d912      	bls.n	8002f42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	881a      	ldrh	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b02      	subs	r3, #2
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f40:	e025      	b.n	8002f8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	7812      	ldrb	r2, [r2, #0]
 8002f4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe fa9f 	bl	80014ac <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Transmit+0x268>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Transmit+0x26e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f8c:	e026      	b.n	8002fdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1b5      	bne.n	8002f04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	6839      	ldr	r1, [r7, #0]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fedf 	bl	8003d60 <SPI_EndRxTxTransaction>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	77fb      	strb	r3, [r7, #31]
 8002fd8:	e000      	b.n	8002fdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b088      	sub	sp, #32
 8002ffa:	af02      	add	r7, sp, #8
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003012:	d112      	bne.n	800303a <HAL_SPI_Receive+0x44>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10e      	bne.n	800303a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2204      	movs	r2, #4
 8003020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f910 	bl	8003256 <HAL_SPI_TransmitReceive>
 8003036:	4603      	mov	r3, r0
 8003038:	e109      	b.n	800324e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_SPI_Receive+0x52>
 8003044:	2302      	movs	r3, #2
 8003046:	e102      	b.n	800324e <HAL_SPI_Receive+0x258>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003050:	f7fe fa2c 	bl	80014ac <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d002      	beq.n	8003068 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003066:	e0e9      	b.n	800323c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_SPI_Receive+0x7e>
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003078:	e0e0      	b.n	800323c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2204      	movs	r2, #4
 800307e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c4:	d908      	bls.n	80030d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	e007      	b.n	80030e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f0:	d10f      	bne.n	8003112 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003100:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003138:	d867      	bhi.n	800320a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800313a:	e030      	b.n	800319e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d117      	bne.n	800317a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f103 020c 	add.w	r2, r3, #12
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003178:	e011      	b.n	800319e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317a:	f7fe f997 	bl	80014ac <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d803      	bhi.n	8003192 <HAL_SPI_Receive+0x19c>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d102      	bne.n	8003198 <HAL_SPI_Receive+0x1a2>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800319c:	e04e      	b.n	800323c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1c8      	bne.n	800313c <HAL_SPI_Receive+0x146>
 80031aa:	e034      	b.n	8003216 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d115      	bne.n	80031e6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	b292      	uxth	r2, r2
 80031c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031e4:	e011      	b.n	800320a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e6:	f7fe f961 	bl	80014ac <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d803      	bhi.n	80031fe <HAL_SPI_Receive+0x208>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d102      	bne.n	8003204 <HAL_SPI_Receive+0x20e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003208:	e018      	b.n	800323c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ca      	bne.n	80031ac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fd48 	bl	8003cb0 <SPI_EndRxTransaction>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
 8003238:	e000      	b.n	800323c <HAL_SPI_Receive+0x246>
  }

error :
 800323a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800324c:	7dfb      	ldrb	r3, [r7, #23]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b08a      	sub	sp, #40	; 0x28
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003264:	2301      	movs	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_SPI_TransmitReceive+0x26>
 8003278:	2302      	movs	r3, #2
 800327a:	e1fb      	b.n	8003674 <HAL_SPI_TransmitReceive+0x41e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003284:	f7fe f912 	bl	80014ac <HAL_GetTick>
 8003288:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003290:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032a0:	7efb      	ldrb	r3, [r7, #27]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d00e      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x6e>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ac:	d106      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x66>
 80032b6:	7efb      	ldrb	r3, [r7, #27]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d003      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032c2:	e1cd      	b.n	8003660 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x80>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x80>
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032dc:	e1c0      	b.n	8003660 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d003      	beq.n	80032f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2205      	movs	r2, #5
 80032ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	887a      	ldrh	r2, [r7, #2]
 8003302:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003334:	d802      	bhi.n	800333c <HAL_SPI_TransmitReceive+0xe6>
 8003336:	8a3b      	ldrh	r3, [r7, #16]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d908      	bls.n	800334e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	e007      	b.n	800335e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d007      	beq.n	800337c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800337a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003384:	d97c      	bls.n	8003480 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x13e>
 800338e:	8a7b      	ldrh	r3, [r7, #18]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d169      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b8:	e056      	b.n	8003468 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d11b      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x1aa>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x1aa>
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d113      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11c      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x1f2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	b292      	uxth	r2, r2
 8003426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003444:	2301      	movs	r3, #1
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003448:	f7fe f830 	bl	80014ac <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003454:	429a      	cmp	r2, r3
 8003456:	d807      	bhi.n	8003468 <HAL_SPI_TransmitReceive+0x212>
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d003      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003466:	e0fb      	b.n	8003660 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1a3      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x164>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d19d      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x164>
 800347e:	e0df      	b.n	8003640 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x23a>
 8003488:	8a7b      	ldrh	r3, [r7, #18]
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 80cb 	bne.w	8003626 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d912      	bls.n	80034c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b02      	subs	r3, #2
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034be:	e0b2      	b.n	8003626 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e6:	e09e      	b.n	8003626 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d134      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x30a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02f      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x30a>
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	2b01      	cmp	r3, #1
 8003504:	d12c      	bne.n	8003560 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d912      	bls.n	8003536 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	1c9a      	adds	r2, r3, #2
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b02      	subs	r3, #2
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003534:	e012      	b.n	800355c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d148      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x3aa>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d042      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d923      	bls.n	80035ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	b292      	uxth	r2, r2
 8003592:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b02      	subs	r3, #2
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d81f      	bhi.n	80035fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	e016      	b.n	80035fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f103 020c 	add.w	r2, r3, #12
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035fc:	2301      	movs	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003600:	f7fd ff54 	bl	80014ac <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360c:	429a      	cmp	r2, r3
 800360e:	d803      	bhi.n	8003618 <HAL_SPI_TransmitReceive+0x3c2>
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d102      	bne.n	800361e <HAL_SPI_TransmitReceive+0x3c8>
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003624:	e01c      	b.n	8003660 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f af5b 	bne.w	80034e8 <HAL_SPI_TransmitReceive+0x292>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	f47f af54 	bne.w	80034e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fb8b 	bl	8003d60 <SPI_EndRxTxTransaction>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d006      	beq.n	800365e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	661a      	str	r2, [r3, #96]	; 0x60
 800365c:	e000      	b.n	8003660 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800365e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003674:	4618      	mov	r0, r3
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_SPI_Transmit_IT+0x20>
 8003698:	2302      	movs	r3, #2
 800369a:	e072      	b.n	8003782 <HAL_SPI_Transmit_IT+0x106>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_SPI_Transmit_IT+0x34>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036b4:	e060      	b.n	8003778 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036c6:	e057      	b.n	8003778 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2203      	movs	r2, #3
 80036cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800370c:	d903      	bls.n	8003716 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_SPI_Transmit_IT+0x114>)
 8003712:	651a      	str	r2, [r3, #80]	; 0x50
 8003714:	e002      	b.n	800371c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_SPI_Transmit_IT+0x118>)
 800371a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d10f      	bne.n	8003746 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003744:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003754:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d008      	beq.n	8003776 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e000      	b.n	8003778 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8003776:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003780:	7dfb      	ldrb	r3, [r7, #23]
}
 8003782:	4618      	mov	r0, r3
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	08003a31 	.word	0x08003a31
 8003794:	080039eb 	.word	0x080039eb

08003798 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10f      	bne.n	80037dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
    return;
 80037da:	e0d7      	b.n	800398c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_SPI_IRQHandler+0x66>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	09db      	lsrs	r3, r3, #7
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
    return;
 80037fc:	e0c6      	b.n	800398c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_SPI_IRQHandler+0x8c>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80b4 	beq.w	800398c <HAL_SPI_IRQHandler+0x1f4>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80ad 	beq.w	800398c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d023      	beq.n	8003886 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d011      	beq.n	800386e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	e00b      	b.n	8003886 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	693b      	ldr	r3, [r7, #16]
        return;
 8003884:	e082      	b.n	800398c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d014      	beq.n	80038bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00c      	beq.n	80038e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038cc:	f043 0208 	orr.w	r2, r3, #8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d04f      	beq.n	800398a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <HAL_SPI_IRQHandler+0x17e>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d034      	beq.n	8003980 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0203 	bic.w	r2, r2, #3
 8003924:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	2b00      	cmp	r3, #0
 800392c:	d011      	beq.n	8003952 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_SPI_IRQHandler+0x1fc>)
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fea4 	bl	8001688 <HAL_DMA_Abort_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_SPI_IRQHandler+0x1fc>)
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd fe8e 	bl	8001688 <HAL_DMA_Abort_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800397e:	e003      	b.n	8003988 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f813 	bl	80039ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003986:	e000      	b.n	800398a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003988:	bf00      	nop
    return;
 800398a:	bf00      	nop
  }
}
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	080039c1 	.word	0x080039c1

08003998 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff ffe5 	bl	80039ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9e2 	bl	8003dec <SPI_CloseTx_ISR>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f9c0 	bl	8003dec <SPI_CloseTx_ISR>
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a84:	f7fd fd12 	bl	80014ac <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a94:	f7fd fd0a 	bl	80014ac <HAL_GetTick>
 8003a98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a9a:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	0d1b      	lsrs	r3, r3, #20
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aaa:	e054      	b.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d050      	beq.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab4:	f7fd fcfa 	bl	80014ac <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d902      	bls.n	8003aca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d13d      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae2:	d111      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	d004      	beq.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d107      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b10:	d10f      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e017      	b.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d19b      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000

08003b84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b96:	f7fd fc89 	bl	80014ac <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ba6:	f7fd fc81 	bl	80014ac <HAL_GetTick>
 8003baa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bb4:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00da      	lsls	r2, r3, #3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	0d1b      	lsrs	r3, r3, #20
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bcc:	e060      	b.n	8003c90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bd4:	d107      	bne.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d050      	beq.n	8003c90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bee:	f7fd fc5d 	bl	80014ac <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d902      	bls.n	8003c04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d13d      	bne.n	8003c80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1c:	d111      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d004      	beq.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	d107      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4a:	d10f      	bne.n	8003c6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e010      	b.n	8003ca2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d196      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3728      	adds	r7, #40	; 0x28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000000 	.word	0x20000000

08003cb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc4:	d111      	bne.n	8003cea <SPI_EndRxTransaction+0x3a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cce:	d004      	beq.n	8003cda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd8:	d107      	bne.n	8003cea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff febd 	bl	8003a74 <SPI_WaitFlagStateUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e023      	b.n	8003d58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d18:	d11d      	bne.n	8003d56 <SPI_EndRxTransaction+0xa6>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	d004      	beq.n	8003d2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d113      	bne.n	8003d56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff ff22 	bl	8003b84 <SPI_WaitFifoStateUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e000      	b.n	8003d58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff ff03 	bl	8003b84 <SPI_WaitFifoStateUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e027      	b.n	8003de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff fe68 	bl	8003a74 <SPI_WaitFlagStateUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e014      	b.n	8003de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff fedc 	bl	8003b84 <SPI_WaitFifoStateUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e000      	b.n	8003de4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df4:	f7fd fb5a 	bl	80014ac <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e08:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	2164      	movs	r1, #100	; 0x64
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ffa6 	bl	8003d60 <SPI_EndRxTxTransaction>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fda9 	bl	80039ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003e5a:	e002      	b.n	8003e62 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff fd9b 	bl	8003998 <HAL_SPI_TxCpltCallback>
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e049      	b.n	8003f10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f841 	bl	8003f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f000 f9db 	bl	8004264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d001      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e03b      	b.n	8003fbc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x4e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x4e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <HAL_TIM_Base_Start_IT+0xa0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d115      	bne.n	8003fa6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d015      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x8c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d011      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	e008      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e000      	b.n	8003fba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	00010007 	.word	0x00010007

08003fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0202 	mvn.w	r2, #2
 8004000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f905 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8f7 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f908 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0204 	mvn.w	r2, #4
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8db 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8cd 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f8de 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0208 	mvn.w	r2, #8
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8b1 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8a3 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8b4 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0210 	mvn.w	r2, #16
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2208      	movs	r2, #8
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f887 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f879 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f88a 	bl	800423a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0201 	mvn.w	r2, #1
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc feec 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8de 	bl	8004340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d10e      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d107      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8d1 	bl	8004354 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d10e      	bne.n	80041de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d107      	bne.n	80041de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f838 	bl	800424e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d10e      	bne.n	800420a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d107      	bne.n	800420a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0220 	mvn.w	r2, #32
 8004202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f891 	bl	800432c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <TIM_Base_SetConfig+0xbc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x20>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a21      	ldr	r2, [pc, #132]	; (8004320 <TIM_Base_SetConfig+0xbc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0x52>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0x52>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <TIM_Base_SetConfig+0xc0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0x52>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <TIM_Base_SetConfig+0xc4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <TIM_Base_SetConfig+0xbc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0xa0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <TIM_Base_SetConfig+0xc0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0xa0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <TIM_Base_SetConfig+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d103      	bne.n	800430c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	615a      	str	r2, [r3, #20]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40014000 	.word	0x40014000
 8004328:	40014400 	.word	0x40014400

0800432c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e040      	b.n	80043fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fe62 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8c0 	bl	800452c <UART_SetConfig>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e022      	b.n	80043fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fb0e 	bl	80049e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb95 	bl	8004b24 <UART_CheckIdleState>
 80043fa:	4603      	mov	r3, r0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004418:	2b20      	cmp	r3, #32
 800441a:	f040 8082 	bne.w	8004522 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Transmit+0x26>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e07a      	b.n	8004524 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x38>
 8004438:	2302      	movs	r3, #2
 800443a:	e073      	b.n	8004524 <HAL_UART_Transmit+0x120>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2221      	movs	r2, #33	; 0x21
 8004450:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fd f82b 	bl	80014ac <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x80>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004494:	e02d      	b.n	80044f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	2180      	movs	r1, #128	; 0x80
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fb88 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e039      	b.n	8004524 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c2:	b292      	uxth	r2, r2
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e008      	b.n	80044e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	b292      	uxth	r2, r2
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1cb      	bne.n	8004496 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2140      	movs	r1, #64	; 0x40
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fb54 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e005      	b.n	8004524 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b9e      	ldr	r3, [pc, #632]	; (80047d4 <UART_SetConfig+0x2a8>)
 800455c:	4013      	ands	r3, r2
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004564:	430b      	orrs	r3, r1
 8004566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a93      	ldr	r2, [pc, #588]	; (80047d8 <UART_SetConfig+0x2ac>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	4313      	orrs	r3, r2
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a8a      	ldr	r2, [pc, #552]	; (80047dc <UART_SetConfig+0x2b0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d126      	bne.n	8004604 <UART_SetConfig+0xd8>
 80045b6:	4b8a      	ldr	r3, [pc, #552]	; (80047e0 <UART_SetConfig+0x2b4>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d81b      	bhi.n	80045fc <UART_SetConfig+0xd0>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0xa0>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045f5 	.word	0x080045f5
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e2:	e0ab      	b.n	800473c <UART_SetConfig+0x210>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e0a7      	b.n	800473c <UART_SetConfig+0x210>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e0a3      	b.n	800473c <UART_SetConfig+0x210>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e09f      	b.n	800473c <UART_SetConfig+0x210>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e09b      	b.n	800473c <UART_SetConfig+0x210>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a76      	ldr	r2, [pc, #472]	; (80047e4 <UART_SetConfig+0x2b8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d138      	bne.n	8004680 <UART_SetConfig+0x154>
 800460e:	4b74      	ldr	r3, [pc, #464]	; (80047e0 <UART_SetConfig+0x2b4>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d82d      	bhi.n	8004678 <UART_SetConfig+0x14c>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <UART_SetConfig+0xf8>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004659 	.word	0x08004659
 8004628:	08004679 	.word	0x08004679
 800462c:	08004679 	.word	0x08004679
 8004630:	08004679 	.word	0x08004679
 8004634:	08004669 	.word	0x08004669
 8004638:	08004679 	.word	0x08004679
 800463c:	08004679 	.word	0x08004679
 8004640:	08004679 	.word	0x08004679
 8004644:	08004661 	.word	0x08004661
 8004648:	08004679 	.word	0x08004679
 800464c:	08004679 	.word	0x08004679
 8004650:	08004679 	.word	0x08004679
 8004654:	08004671 	.word	0x08004671
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e06d      	b.n	800473c <UART_SetConfig+0x210>
 8004660:	2302      	movs	r3, #2
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e069      	b.n	800473c <UART_SetConfig+0x210>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e065      	b.n	800473c <UART_SetConfig+0x210>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e061      	b.n	800473c <UART_SetConfig+0x210>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e05d      	b.n	800473c <UART_SetConfig+0x210>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <UART_SetConfig+0x2bc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d125      	bne.n	80046d6 <UART_SetConfig+0x1aa>
 800468a:	4b55      	ldr	r3, [pc, #340]	; (80047e0 <UART_SetConfig+0x2b4>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d016      	beq.n	80046c6 <UART_SetConfig+0x19a>
 8004698:	2b30      	cmp	r3, #48	; 0x30
 800469a:	d818      	bhi.n	80046ce <UART_SetConfig+0x1a2>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d00a      	beq.n	80046b6 <UART_SetConfig+0x18a>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d814      	bhi.n	80046ce <UART_SetConfig+0x1a2>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <UART_SetConfig+0x182>
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d008      	beq.n	80046be <UART_SetConfig+0x192>
 80046ac:	e00f      	b.n	80046ce <UART_SetConfig+0x1a2>
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b4:	e042      	b.n	800473c <UART_SetConfig+0x210>
 80046b6:	2302      	movs	r3, #2
 80046b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046bc:	e03e      	b.n	800473c <UART_SetConfig+0x210>
 80046be:	2304      	movs	r3, #4
 80046c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c4:	e03a      	b.n	800473c <UART_SetConfig+0x210>
 80046c6:	2308      	movs	r3, #8
 80046c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046cc:	e036      	b.n	800473c <UART_SetConfig+0x210>
 80046ce:	2310      	movs	r3, #16
 80046d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d4:	e032      	b.n	800473c <UART_SetConfig+0x210>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <UART_SetConfig+0x2ac>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d12a      	bne.n	8004736 <UART_SetConfig+0x20a>
 80046e0:	4b3f      	ldr	r3, [pc, #252]	; (80047e0 <UART_SetConfig+0x2b4>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ee:	d01a      	beq.n	8004726 <UART_SetConfig+0x1fa>
 80046f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f4:	d81b      	bhi.n	800472e <UART_SetConfig+0x202>
 80046f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fa:	d00c      	beq.n	8004716 <UART_SetConfig+0x1ea>
 80046fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004700:	d815      	bhi.n	800472e <UART_SetConfig+0x202>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <UART_SetConfig+0x1e2>
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d008      	beq.n	800471e <UART_SetConfig+0x1f2>
 800470c:	e00f      	b.n	800472e <UART_SetConfig+0x202>
 800470e:	2300      	movs	r3, #0
 8004710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004714:	e012      	b.n	800473c <UART_SetConfig+0x210>
 8004716:	2302      	movs	r3, #2
 8004718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471c:	e00e      	b.n	800473c <UART_SetConfig+0x210>
 800471e:	2304      	movs	r3, #4
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004724:	e00a      	b.n	800473c <UART_SetConfig+0x210>
 8004726:	2308      	movs	r3, #8
 8004728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472c:	e006      	b.n	800473c <UART_SetConfig+0x210>
 800472e:	2310      	movs	r3, #16
 8004730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004734:	e002      	b.n	800473c <UART_SetConfig+0x210>
 8004736:	2310      	movs	r3, #16
 8004738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <UART_SetConfig+0x2ac>)
 8004742:	4293      	cmp	r3, r2
 8004744:	f040 808a 	bne.w	800485c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800474c:	2b08      	cmp	r3, #8
 800474e:	d824      	bhi.n	800479a <UART_SetConfig+0x26e>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x22c>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800477d 	.word	0x0800477d
 800475c:	0800479b 	.word	0x0800479b
 8004760:	08004785 	.word	0x08004785
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800478b 	.word	0x0800478b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	0800479b 	.word	0x0800479b
 8004774:	0800479b 	.word	0x0800479b
 8004778:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fd ffd6 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8004780:	61f8      	str	r0, [r7, #28]
        break;
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <UART_SetConfig+0x2c0>)
 8004786:	61fb      	str	r3, [r7, #28]
        break;
 8004788:	e00d      	b.n	80047a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7fd ff37 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800478e:	61f8      	str	r0, [r7, #28]
        break;
 8004790:	e009      	b.n	80047a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e005      	b.n	80047a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8109 	beq.w	80049c0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d305      	bcc.n	80047ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d912      	bls.n	80047f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d0:	e0f6      	b.n	80049c0 <UART_SetConfig+0x494>
 80047d2:	bf00      	nop
 80047d4:	efff69f3 	.word	0xefff69f3
 80047d8:	40008000 	.word	0x40008000
 80047dc:	40013800 	.word	0x40013800
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40004400 	.word	0x40004400
 80047e8:	40004800 	.word	0x40004800
 80047ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2200      	movs	r2, #0
 80047f4:	461c      	mov	r4, r3
 80047f6:	4615      	mov	r5, r2
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	022b      	lsls	r3, r5, #8
 8004802:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004806:	0222      	lsls	r2, r4, #8
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	6849      	ldr	r1, [r1, #4]
 800480c:	0849      	lsrs	r1, r1, #1
 800480e:	2000      	movs	r0, #0
 8004810:	4688      	mov	r8, r1
 8004812:	4681      	mov	r9, r0
 8004814:	eb12 0a08 	adds.w	sl, r2, r8
 8004818:	eb43 0b09 	adc.w	fp, r3, r9
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800482a:	4650      	mov	r0, sl
 800482c:	4659      	mov	r1, fp
 800482e:	f7fb fd2f 	bl	8000290 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4613      	mov	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d308      	bcc.n	8004854 <UART_SetConfig+0x328>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d204      	bcs.n	8004854 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e0b5      	b.n	80049c0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800485a:	e0b1      	b.n	80049c0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d15d      	bne.n	8004922 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800486a:	2b08      	cmp	r3, #8
 800486c:	d827      	bhi.n	80048be <UART_SetConfig+0x392>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0x348>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	080048bf 	.word	0x080048bf
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048bf 	.word	0x080048bf
 8004890:	080048bf 	.word	0x080048bf
 8004894:	080048b7 	.word	0x080048b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004898:	f7fd ff48 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 800489c:	61f8      	str	r0, [r7, #28]
        break;
 800489e:	e014      	b.n	80048ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a0:	f7fd ff5a 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80048a4:	61f8      	str	r0, [r7, #28]
        break;
 80048a6:	e010      	b.n	80048ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a8:	4b4c      	ldr	r3, [pc, #304]	; (80049dc <UART_SetConfig+0x4b0>)
 80048aa:	61fb      	str	r3, [r7, #28]
        break;
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ae:	f7fd fea5 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80048b2:	61f8      	str	r0, [r7, #28]
        break;
 80048b4:	e009      	b.n	80048ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ba:	61fb      	str	r3, [r7, #28]
        break;
 80048bc:	e005      	b.n	80048ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d077      	beq.n	80049c0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005a      	lsls	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0f      	cmp	r3, #15
 80048ea:	d916      	bls.n	800491a <UART_SetConfig+0x3ee>
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d212      	bcs.n	800491a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	b29b      	uxth	r3, r3
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b29a      	uxth	r2, r3
 800490a:	8afb      	ldrh	r3, [r7, #22]
 800490c:	4313      	orrs	r3, r2
 800490e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	8afa      	ldrh	r2, [r7, #22]
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e052      	b.n	80049c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004920:	e04e      	b.n	80049c0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004926:	2b08      	cmp	r3, #8
 8004928:	d827      	bhi.n	800497a <UART_SetConfig+0x44e>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x404>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fd feea 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8004958:	61f8      	str	r0, [r7, #28]
        break;
 800495a:	e014      	b.n	8004986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fd fefc 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8004960:	61f8      	str	r0, [r7, #28]
        break;
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <UART_SetConfig+0x4b0>)
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fd fe47 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800496e:	61f8      	str	r0, [r7, #28]
        break;
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e005      	b.n	8004986 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004984:	bf00      	nop
    }

    if (pclk != 0U)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d019      	beq.n	80049c0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085a      	lsrs	r2, r3, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	d909      	bls.n	80049ba <UART_SetConfig+0x48e>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ac:	d205      	bcs.n	80049ba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e002      	b.n	80049c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	00f42400 	.word	0x00f42400

080049e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01a      	beq.n	8004af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ade:	d10a      	bne.n	8004af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
  }
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b34:	f7fc fcba 	bl	80014ac <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10e      	bne.n	8004b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f82d 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e023      	b.n	8004bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d10e      	bne.n	8004b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f817 	bl	8004bb6 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e00d      	b.n	8004bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b09c      	sub	sp, #112	; 0x70
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc6:	e0a5      	b.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	f000 80a1 	beq.w	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fc fc6b 	bl	80014ac <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d13e      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e6      	bne.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	663b      	str	r3, [r7, #96]	; 0x60
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e067      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04f      	beq.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c82:	d147      	bne.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e6      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ce0:	623a      	str	r2, [r7, #32]
 8004ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	69f9      	ldr	r1, [r7, #28]
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e010      	b.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f43f af4a 	beq.w	8004bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3770      	adds	r7, #112	; 0x70
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	4603      	mov	r3, r0
 8004d46:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d50:	2b84      	cmp	r3, #132	; 0x84
 8004d52:	d005      	beq.n	8004d60 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3303      	adds	r3, #3
 8004d5e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d72:	f001 fa0b 	bl	800618c <vTaskStartScheduler>
  
  return osOK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af04      	add	r7, sp, #16
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <osThreadCreate+0x54>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01c      	beq.n	8004dd0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685c      	ldr	r4, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681d      	ldr	r5, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691e      	ldr	r6, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ffc8 	bl	8004d3e <makeFreeRtosPriority>
 8004dae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004db8:	9202      	str	r2, [sp, #8]
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	9100      	str	r1, [sp, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f001 f803 	bl	8005dd0 <xTaskCreateStatic>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e01c      	b.n	8004e0a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685c      	ldr	r4, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ddc:	b29e      	uxth	r6, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ffaa 	bl	8004d3e <makeFreeRtosPriority>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f107 030c 	add.w	r3, r7, #12
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	9200      	str	r2, [sp, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4632      	mov	r2, r6
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f001 f845 	bl	8005e8a <xTaskCreate>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e14 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f000 fa29 	bl	8005282 <xQueueCreateMutexStatic>
 8004e30:	4603      	mov	r3, r0
 8004e32:	e003      	b.n	8004e3c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004e34:	2001      	movs	r0, #1
 8004e36:	f000 fa0c 	bl	8005252 <xQueueCreateMutex>
 8004e3a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f103 0208 	add.w	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f103 0208 	add.w	r2, r3, #8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f103 0208 	add.w	r2, r3, #8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d103      	bne.n	8004f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e00c      	b.n	8004f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e002      	b.n	8004f14 <vListInsert+0x2e>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d2f6      	bcs.n	8004f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6892      	ldr	r2, [r2, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6852      	ldr	r2, [r2, #4]
 8004f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d103      	bne.n	8004f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1e5a      	subs	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fd6:	f002 f83d 	bl	8007054 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	441a      	add	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	3b01      	subs	r3, #1
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d114      	bne.n	8005056 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01a      	beq.n	800506a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3310      	adds	r3, #16
 8005038:	4618      	mov	r0, r3
 800503a:	f001 faf9 	bl	8006630 <xTaskRemoveFromEventList>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d012      	beq.n	800506a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <xQueueGenericReset+0xcc>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	e009      	b.n	800506a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3310      	adds	r3, #16
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fef2 	bl	8004e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3324      	adds	r3, #36	; 0x24
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff feed 	bl	8004e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800506a:	f002 f823 	bl	80070b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800506e:	2301      	movs	r3, #1
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08e      	sub	sp, #56	; 0x38
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <xQueueGenericCreateStatic+0x52>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <xQueueGenericCreateStatic+0x56>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <xQueueGenericCreateStatic+0x58>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	623b      	str	r3, [r7, #32]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <xQueueGenericCreateStatic+0x7e>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <xQueueGenericCreateStatic+0x82>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueGenericCreateStatic+0x84>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	61fb      	str	r3, [r7, #28]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800511a:	2348      	movs	r3, #72	; 0x48
 800511c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b48      	cmp	r3, #72	; 0x48
 8005122:	d00a      	beq.n	800513a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61bb      	str	r3, [r7, #24]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800513a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00d      	beq.n	8005162 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800514e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f83f 	bl	80051e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005164:	4618      	mov	r0, r3
 8005166:	3730      	adds	r7, #48	; 0x30
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3348      	adds	r3, #72	; 0x48
 80051a4:	4618      	mov	r0, r3
 80051a6:	f002 f877 	bl	8007298 <pvPortMalloc>
 80051aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d011      	beq.n	80051d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3348      	adds	r3, #72	; 0x48
 80051ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051c4:	79fa      	ldrb	r2, [r7, #7]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f805 	bl	80051e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051d6:	69bb      	ldr	r3, [r7, #24]
	}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e002      	b.n	8005202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800520e:	2101      	movs	r1, #1
 8005210:	69b8      	ldr	r0, [r7, #24]
 8005212:	f7ff fecb 	bl	8004fac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00e      	beq.n	800524a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800523e:	2300      	movs	r3, #0
 8005240:	2200      	movs	r2, #0
 8005242:	2100      	movs	r1, #0
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f86b 	bl	8005320 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005252:	b580      	push	{r7, lr}
 8005254:	b086      	sub	sp, #24
 8005256:	af00      	add	r7, sp, #0
 8005258:	4603      	mov	r3, r0
 800525a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800525c:	2301      	movs	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	461a      	mov	r2, r3
 8005268:	6939      	ldr	r1, [r7, #16]
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7ff ff7e 	bl	800516c <xQueueGenericCreate>
 8005270:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff ffd3 	bl	800521e <prvInitialiseMutex>

		return xNewQueue;
 8005278:	68fb      	ldr	r3, [r7, #12]
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005282:	b580      	push	{r7, lr}
 8005284:	b088      	sub	sp, #32
 8005286:	af02      	add	r7, sp, #8
 8005288:	4603      	mov	r3, r0
 800528a:	6039      	str	r1, [r7, #0]
 800528c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800528e:	2301      	movs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	6939      	ldr	r1, [r7, #16]
 80052a0:	6978      	ldr	r0, [r7, #20]
 80052a2:	f7ff feeb 	bl	800507c <xQueueGenericCreateStatic>
 80052a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff ffb8 	bl	800521e <prvInitialiseMutex>

		return xNewQueue;
 80052ae:	68fb      	ldr	r3, [r7, #12]
	}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90a      	bls.n	80052fc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052fc:	2202      	movs	r2, #2
 80052fe:	2100      	movs	r1, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff33 	bl	800516c <xQueueGenericCreate>
 8005306:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005314:	697b      	ldr	r3, [r7, #20]
	}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	; 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800532e:	2300      	movs	r3, #0
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueGenericSend+0x32>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <xQueueGenericSend+0x40>
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <xQueueGenericSend+0x44>
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <xQueueGenericSend+0x46>
 8005364:	2300      	movs	r3, #0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <xQueueGenericSend+0x60>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d103      	bne.n	800538e <xQueueGenericSend+0x6e>
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <xQueueGenericSend+0x72>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueGenericSend+0x74>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ae:	f001 faff 	bl	80069b0 <xTaskGetSchedulerState>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <xQueueGenericSend+0x9e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <xQueueGenericSend+0xa2>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <xQueueGenericSend+0xa4>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xQueueGenericSend+0xbe>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	61fb      	str	r3, [r7, #28]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053de:	f001 fe39 	bl	8007054 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <xQueueGenericSend+0xd4>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d129      	bne.n	8005448 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053fa:	f000 fbd9 	bl	8005bb0 <prvCopyDataToQueue>
 80053fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	3324      	adds	r3, #36	; 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f001 f90f 	bl	8006630 <xTaskRemoveFromEventList>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005418:	4b3f      	ldr	r3, [pc, #252]	; (8005518 <xQueueGenericSend+0x1f8>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	e00a      	b.n	8005440 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b39      	ldr	r3, [pc, #228]	; (8005518 <xQueueGenericSend+0x1f8>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005440:	f001 fe38 	bl	80070b4 <vPortExitCritical>
				return pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	e063      	b.n	8005510 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800544e:	f001 fe31 	bl	80070b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005452:	2300      	movs	r3, #0
 8005454:	e05c      	b.n	8005510 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800545c:	f107 0314 	add.w	r3, r7, #20
 8005460:	4618      	mov	r0, r3
 8005462:	f001 f947 	bl	80066f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005466:	2301      	movs	r3, #1
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800546a:	f001 fe23 	bl	80070b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800546e:	f000 fef7 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005472:	f001 fdef 	bl	8007054 <vPortEnterCritical>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800547c:	b25b      	sxtb	r3, r3
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d103      	bne.n	800548c <xQueueGenericSend+0x16c>
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005492:	b25b      	sxtb	r3, r3
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d103      	bne.n	80054a2 <xQueueGenericSend+0x182>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a2:	f001 fe07 	bl	80070b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054a6:	1d3a      	adds	r2, r7, #4
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 f936 	bl	8006720 <xTaskCheckForTimeOut>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d124      	bne.n	8005504 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054bc:	f000 fc70 	bl	8005da0 <prvIsQueueFull>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	3310      	adds	r3, #16
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 f88a 	bl	80065e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d6:	f000 fbfb 	bl	8005cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054da:	f000 fecf 	bl	800627c <xTaskResumeAll>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f47f af7c 	bne.w	80053de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054e6:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <xQueueGenericSend+0x1f8>)
 80054e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	e772      	b.n	80053de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054fa:	f000 fbe9 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054fe:	f000 febd 	bl	800627c <xTaskResumeAll>
 8005502:	e76c      	b.n	80053de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005506:	f000 fbe3 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800550a:	f000 feb7 	bl	800627c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800550e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005510:	4618      	mov	r0, r3
 8005512:	3738      	adds	r7, #56	; 0x38
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b090      	sub	sp, #64	; 0x40
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <xQueueGenericSendFromISR+0x3c>
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <xQueueGenericSendFromISR+0x40>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <xQueueGenericSendFromISR+0x42>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d103      	bne.n	8005586 <xQueueGenericSendFromISR+0x6a>
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <xQueueGenericSendFromISR+0x6e>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <xQueueGenericSendFromISR+0x70>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623b      	str	r3, [r7, #32]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055a6:	f001 fe37 	bl	8007218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055aa:	f3ef 8211 	mrs	r2, BASEPRI
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	61fa      	str	r2, [r7, #28]
 80055c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <xQueueGenericSendFromISR+0xbc>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d12f      	bne.n	8005638 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055ee:	f000 fadf 	bl	8005bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d112      	bne.n	8005622 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	d016      	beq.n	8005632 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	3324      	adds	r3, #36	; 0x24
 8005608:	4618      	mov	r0, r3
 800560a:	f001 f811 	bl	8006630 <xTaskRemoveFromEventList>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e007      	b.n	8005632 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005622:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005626:	3301      	adds	r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	b25a      	sxtb	r2, r3
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005632:	2301      	movs	r3, #1
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005636:	e001      	b.n	800563c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005638:	2300      	movs	r3, #0
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005646:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800564a:	4618      	mov	r0, r3
 800564c:	3740      	adds	r7, #64	; 0x40
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b08e      	sub	sp, #56	; 0x38
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10a      	bne.n	800567c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	623b      	str	r3, [r7, #32]
}
 8005678:	bf00      	nop
 800567a:	e7fe      	b.n	800567a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61fb      	str	r3, [r7, #28]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <xQueueGiveFromISR+0x58>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <xQueueGiveFromISR+0x5c>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueGiveFromISR+0x5e>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueGiveFromISR+0x78>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	61bb      	str	r3, [r7, #24]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ca:	f001 fda5 	bl	8007218 <vPortValidateInterruptPriority>
	__asm volatile
 80056ce:	f3ef 8211 	mrs	r2, BASEPRI
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	617a      	str	r2, [r7, #20]
 80056e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80056e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d22b      	bcs.n	8005752 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800570c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d112      	bne.n	800573c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	3324      	adds	r3, #36	; 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f000 ff84 	bl	8006630 <xTaskRemoveFromEventList>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e007      	b.n	800574c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800573c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005740:	3301      	adds	r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	b25a      	sxtb	r2, r3
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800574c:	2301      	movs	r3, #1
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
 8005750:	e001      	b.n	8005756 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005752:	2300      	movs	r3, #0
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f383 8811 	msr	BASEPRI, r3
}
 8005760:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005764:	4618      	mov	r0, r3
 8005766:	3738      	adds	r7, #56	; 0x38
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xQueueReceive+0x30>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	623b      	str	r3, [r7, #32]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0x3e>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <xQueueReceive+0x42>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <xQueueReceive+0x44>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueReceive+0x5e>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61fb      	str	r3, [r7, #28]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ca:	f001 f8f1 	bl	80069b0 <xTaskGetSchedulerState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <xQueueReceive+0x6e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <xQueueReceive+0x72>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueReceive+0x74>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueReceive+0x8e>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057fa:	f001 fc2b 	bl	8007054 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01f      	beq.n	800584a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f000 fa39 	bl	8005c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	3310      	adds	r3, #16
 8005826:	4618      	mov	r0, r3
 8005828:	f000 ff02 	bl	8006630 <xTaskRemoveFromEventList>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <xQueueReceive+0x1bc>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005842:	f001 fc37 	bl	80070b4 <vPortExitCritical>
				return pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	e069      	b.n	800591e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005850:	f001 fc30 	bl	80070b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005854:	2300      	movs	r3, #0
 8005856:	e062      	b.n	800591e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800585e:	f107 0310 	add.w	r3, r7, #16
 8005862:	4618      	mov	r0, r3
 8005864:	f000 ff46 	bl	80066f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800586c:	f001 fc22 	bl	80070b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005870:	f000 fcf6 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005874:	f001 fbee 	bl	8007054 <vPortEnterCritical>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d103      	bne.n	800588e <xQueueReceive+0x122>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0x138>
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a4:	f001 fc06 	bl	80070b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058a8:	1d3a      	adds	r2, r7, #4
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 ff35 	bl	8006720 <xTaskCheckForTimeOut>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d123      	bne.n	8005904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058be:	f000 fa59 	bl	8005d74 <prvIsQueueEmpty>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fe89 	bl	80065e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d8:	f000 f9fa 	bl	8005cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058dc:	f000 fcce 	bl	800627c <xTaskResumeAll>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d189      	bne.n	80057fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xQueueReceive+0x1bc>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	e780      	b.n	80057fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f000 f9e9 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058fe:	f000 fcbd 	bl	800627c <xTaskResumeAll>
 8005902:	e77a      	b.n	80057fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005906:	f000 f9e3 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800590a:	f000 fcb7 	bl	800627c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005910:	f000 fa30 	bl	8005d74 <prvIsQueueEmpty>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f43f af6f 	beq.w	80057fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800591c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800591e:	4618      	mov	r0, r3
 8005920:	3730      	adds	r7, #48	; 0x30
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08e      	sub	sp, #56	; 0x38
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005936:	2300      	movs	r3, #0
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	623b      	str	r3, [r7, #32]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	61fb      	str	r3, [r7, #28]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800597c:	f001 f818 	bl	80069b0 <xTaskGetSchedulerState>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <xQueueSemaphoreTake+0x60>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <xQueueSemaphoreTake+0x64>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <xQueueSemaphoreTake+0x66>
 8005990:	2300      	movs	r3, #0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	61bb      	str	r3, [r7, #24]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ac:	f001 fb52 	bl	8007054 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d024      	beq.n	8005a06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059cc:	f001 f998 	bl	8006d00 <pvTaskIncrementMutexHeldCount>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00f      	beq.n	80059fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	3310      	adds	r3, #16
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fe24 	bl	8006630 <xTaskRemoveFromEventList>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ee:	4b54      	ldr	r3, [pc, #336]	; (8005b40 <xQueueSemaphoreTake+0x214>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059fe:	f001 fb59 	bl	80070b4 <vPortExitCritical>
				return pdPASS;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e097      	b.n	8005b36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d111      	bne.n	8005a30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	617b      	str	r3, [r7, #20]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a28:	f001 fb44 	bl	80070b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e082      	b.n	8005b36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fe5a 	bl	80066f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a44:	f001 fb36 	bl	80070b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a48:	f000 fc0a 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4c:	f001 fb02 	bl	8007054 <vPortEnterCritical>
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d103      	bne.n	8005a66 <xQueueSemaphoreTake+0x13a>
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <xQueueSemaphoreTake+0x150>
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7c:	f001 fb1a 	bl	80070b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a80:	463a      	mov	r2, r7
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fe49 	bl	8006720 <xTaskCheckForTimeOut>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d132      	bne.n	8005afa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a96:	f000 f96d 	bl	8005d74 <prvIsQueueEmpty>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d026      	beq.n	8005aee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005aa8:	f001 fad4 	bl	8007054 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 ff9b 	bl	80069ec <xTaskPriorityInherit>
 8005ab6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ab8:	f001 fafc 	bl	80070b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	3324      	adds	r3, #36	; 0x24
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fd8f 	bl	80065e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005acc:	f000 f900 	bl	8005cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ad0:	f000 fbd4 	bl	800627c <xTaskResumeAll>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f47f af68 	bne.w	80059ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005adc:	4b18      	ldr	r3, [pc, #96]	; (8005b40 <xQueueSemaphoreTake+0x214>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	e75e      	b.n	80059ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af0:	f000 f8ee 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af4:	f000 fbc2 	bl	800627c <xTaskResumeAll>
 8005af8:	e758      	b.n	80059ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005afc:	f000 f8e8 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b00:	f000 fbbc 	bl	800627c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b06:	f000 f935 	bl	8005d74 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f43f af4d 	beq.w	80059ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00d      	beq.n	8005b34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b18:	f001 fa9c 	bl	8007054 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1e:	f000 f82f 	bl	8005b80 <prvGetDisinheritPriorityAfterTimeout>
 8005b22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 f85a 	bl	8006be4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b30:	f001 fac0 	bl	80070b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3738      	adds	r7, #56	; 0x38
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60fb      	str	r3, [r7, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b72:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b74:	4618      	mov	r0, r3
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d006      	beq.n	8005b9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1c3 0307 	rsb	r3, r3, #7
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e001      	b.n	8005ba2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10d      	bne.n	8005bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d14d      	bne.n	8005c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 ff7c 	bl	8006ad8 <xTaskPriorityDisinherit>
 8005be0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	e043      	b.n	8005c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d119      	bne.n	8005c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6858      	ldr	r0, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	f001 fe59 	bl	80078b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	441a      	add	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d32b      	bcc.n	8005c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	e026      	b.n	8005c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68d8      	ldr	r0, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	f001 fe3f 	bl	80078b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d207      	bcs.n	8005c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	425b      	negs	r3, r3
 8005c5a:	441a      	add	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d105      	bne.n	8005c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c7a:	697b      	ldr	r3, [r7, #20]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	441a      	add	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d303      	bcc.n	8005cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68d9      	ldr	r1, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6838      	ldr	r0, [r7, #0]
 8005cc4:	f001 fdf5 	bl	80078b2 <memcpy>
	}
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cd8:	f001 f9bc 	bl	8007054 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce4:	e011      	b.n	8005d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d012      	beq.n	8005d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc9c 	bl	8006630 <xTaskRemoveFromEventList>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cfe:	f000 fd71 	bl	80067e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dce9      	bgt.n	8005ce6 <prvUnlockQueue+0x16>
 8005d12:	e000      	b.n	8005d16 <prvUnlockQueue+0x46>
					break;
 8005d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 f9c9 	bl	80070b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d22:	f001 f997 	bl	8007054 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d2e:	e011      	b.n	8005d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d012      	beq.n	8005d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3310      	adds	r3, #16
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fc77 	bl	8006630 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d48:	f000 fd4c 	bl	80067e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dce9      	bgt.n	8005d30 <prvUnlockQueue+0x60>
 8005d5c:	e000      	b.n	8005d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d68:	f001 f9a4 	bl	80070b4 <vPortExitCritical>
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d7c:	f001 f96a 	bl	8007054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e001      	b.n	8005d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d92:	f001 f98f 	bl	80070b4 <vPortExitCritical>

	return xReturn;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da8:	f001 f954 	bl	8007054 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d102      	bne.n	8005dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e001      	b.n	8005dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dc2:	f001 f977 	bl	80070b4 <vPortExitCritical>

	return xReturn;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	623b      	str	r3, [r7, #32]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61fb      	str	r3, [r7, #28]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e16:	23b4      	movs	r3, #180	; 0xb4
 8005e18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2bb4      	cmp	r3, #180	; 0xb4
 8005e1e:	d00a      	beq.n	8005e36 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61bb      	str	r3, [r7, #24]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01e      	beq.n	8005e7c <xTaskCreateStatic+0xac>
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e56:	2300      	movs	r3, #0
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	9302      	str	r3, [sp, #8]
 8005e5e:	f107 0314 	add.w	r3, r7, #20
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f850 	bl	8005f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e76:	f000 f8eb 	bl	8006050 <prvAddNewTaskToReadyList>
 8005e7a:	e001      	b.n	8005e80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e80:	697b      	ldr	r3, [r7, #20]
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3728      	adds	r7, #40	; 0x28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08c      	sub	sp, #48	; 0x30
 8005e8e:	af04      	add	r7, sp, #16
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 f9fa 	bl	8007298 <pvPortMalloc>
 8005ea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eac:	20b4      	movs	r0, #180	; 0xb4
 8005eae:	f001 f9f3 	bl	8007298 <pvPortMalloc>
 8005eb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec0:	e005      	b.n	8005ece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ec2:	6978      	ldr	r0, [r7, #20]
 8005ec4:	f001 fab4 	bl	8007430 <vPortFree>
 8005ec8:	e001      	b.n	8005ece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	9302      	str	r3, [sp, #8]
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f80e 	bl	8005f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef8:	69f8      	ldr	r0, [r7, #28]
 8005efa:	f000 f8a9 	bl	8006050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005efe:	2301      	movs	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e002      	b.n	8005f0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	617b      	str	r3, [r7, #20]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01f      	beq.n	8005fa2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e012      	b.n	8005f8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	7819      	ldrb	r1, [r3, #0]
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	3334      	adds	r3, #52	; 0x34
 8005f78:	460a      	mov	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d9e9      	bls.n	8005f68 <prvInitialiseNewTask+0x54>
 8005f94:	e000      	b.n	8005f98 <prvInitialiseNewTask+0x84>
			{
				break;
 8005f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa0:	e003      	b.n	8005faa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d901      	bls.n	8005fb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe ff5a 	bl	8004e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe ff55 	bl	8004e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	f1c3 0207 	rsb	r2, r3, #7
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	334c      	adds	r3, #76	; 0x4c
 8006004:	2260      	movs	r2, #96	; 0x60
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f001 fc60 	bl	80078ce <memset>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <prvInitialiseNewTask+0x130>)
 8006012:	651a      	str	r2, [r3, #80]	; 0x50
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <prvInitialiseNewTask+0x134>)
 8006018:	655a      	str	r2, [r3, #84]	; 0x54
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	4a0b      	ldr	r2, [pc, #44]	; (800604c <prvInitialiseNewTask+0x138>)
 800601e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	69b8      	ldr	r0, [r7, #24]
 8006026:	f000 fee5 	bl	8006df4 <pxPortInitialiseStack>
 800602a:	4602      	mov	r2, r0
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800603c:	bf00      	nop
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	0800881c 	.word	0x0800881c
 8006048:	0800883c 	.word	0x0800883c
 800604c:	080087fc 	.word	0x080087fc

08006050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006058:	f000 fffc 	bl	8007054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800605c:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a29      	ldr	r2, [pc, #164]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 8006064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d110      	bne.n	800609e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800607c:	f000 fbd6 	bl	800682c <prvInitialiseTaskLists>
 8006080:	e00d      	b.n	800609e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <prvAddNewTaskToReadyList+0xc0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d802      	bhi.n	800609e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <prvAddNewTaskToReadyList+0xc4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <prvAddNewTaskToReadyList+0xc4>)
 80060a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	2201      	movs	r2, #1
 80060ae:	409a      	lsls	r2, r3
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <prvAddNewTaskToReadyList+0xc8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <prvAddNewTaskToReadyList+0xc8>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <prvAddNewTaskToReadyList+0xcc>)
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fe fee4 	bl	8004e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 ffed 	bl	80070b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvAddNewTaskToReadyList+0xc0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00e      	beq.n	8006100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d207      	bcs.n	8006100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <prvAddNewTaskToReadyList+0xd0>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200008bc 	.word	0x200008bc
 800610c:	200007bc 	.word	0x200007bc
 8006110:	200008c8 	.word	0x200008c8
 8006114:	200008d8 	.word	0x200008d8
 8006118:	200008c4 	.word	0x200008c4
 800611c:	200007c0 	.word	0x200007c0
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d017      	beq.n	8006166 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <vTaskDelay+0x60>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <vTaskDelay+0x30>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006154:	f000 f884 	bl	8006260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006158:	2100      	movs	r1, #0
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fde4 	bl	8006d28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006160:	f000 f88c 	bl	800627c <xTaskResumeAll>
 8006164:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d107      	bne.n	800617c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <vTaskDelay+0x64>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200008e4 	.word	0x200008e4
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800619a:	463a      	mov	r2, r7
 800619c:	1d39      	adds	r1, r7, #4
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa f9f6 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	9202      	str	r2, [sp, #8]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2300      	movs	r3, #0
 80061b8:	460a      	mov	r2, r1
 80061ba:	4921      	ldr	r1, [pc, #132]	; (8006240 <vTaskStartScheduler+0xb4>)
 80061bc:	4821      	ldr	r0, [pc, #132]	; (8006244 <vTaskStartScheduler+0xb8>)
 80061be:	f7ff fe07 	bl	8005dd0 <xTaskCreateStatic>
 80061c2:	4603      	mov	r3, r0
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <vTaskStartScheduler+0xbc>)
 80061c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061c8:	4b1f      	ldr	r3, [pc, #124]	; (8006248 <vTaskStartScheduler+0xbc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e001      	b.n	80061da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d11b      	bne.n	8006218 <vTaskStartScheduler+0x8c>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061f4:	4b15      	ldr	r3, [pc, #84]	; (800624c <vTaskStartScheduler+0xc0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	334c      	adds	r3, #76	; 0x4c
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <vTaskStartScheduler+0xc4>)
 80061fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061fe:	4b15      	ldr	r3, [pc, #84]	; (8006254 <vTaskStartScheduler+0xc8>)
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <vTaskStartScheduler+0xcc>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800620c:	4b13      	ldr	r3, [pc, #76]	; (800625c <vTaskStartScheduler+0xd0>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006212:	f000 fe7d 	bl	8006f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006216:	e00e      	b.n	8006236 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d10a      	bne.n	8006236 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <vTaskStartScheduler+0xa8>
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	080087a8 	.word	0x080087a8
 8006244:	080067fd 	.word	0x080067fd
 8006248:	200008e0 	.word	0x200008e0
 800624c:	200007bc 	.word	0x200007bc
 8006250:	20000010 	.word	0x20000010
 8006254:	200008dc 	.word	0x200008dc
 8006258:	200008c8 	.word	0x200008c8
 800625c:	200008c0 	.word	0x200008c0

08006260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <vTaskSuspendAll+0x18>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	4a03      	ldr	r2, [pc, #12]	; (8006278 <vTaskSuspendAll+0x18>)
 800626c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800626e:	bf00      	nop
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	200008e4 	.word	0x200008e4

0800627c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800628a:	4b41      	ldr	r3, [pc, #260]	; (8006390 <xTaskResumeAll+0x114>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	603b      	str	r3, [r7, #0]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062a8:	f000 fed4 	bl	8007054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062ac:	4b38      	ldr	r3, [pc, #224]	; (8006390 <xTaskResumeAll+0x114>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	4a37      	ldr	r2, [pc, #220]	; (8006390 <xTaskResumeAll+0x114>)
 80062b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b6:	4b36      	ldr	r3, [pc, #216]	; (8006390 <xTaskResumeAll+0x114>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d161      	bne.n	8006382 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062be:	4b35      	ldr	r3, [pc, #212]	; (8006394 <xTaskResumeAll+0x118>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05d      	beq.n	8006382 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062c6:	e02e      	b.n	8006326 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c8:	4b33      	ldr	r3, [pc, #204]	; (8006398 <xTaskResumeAll+0x11c>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3318      	adds	r3, #24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fe3f 	bl	8004f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fe3a 	bl	8004f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <xTaskResumeAll+0x120>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <xTaskResumeAll+0x120>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <xTaskResumeAll+0x124>)
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7fe fdc6 	bl	8004e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <xTaskResumeAll+0x128>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006320:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <xTaskResumeAll+0x12c>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006326:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <xTaskResumeAll+0x11c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1cc      	bne.n	80062c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006334:	f000 fb1c 	bl	8006970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006338:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <xTaskResumeAll+0x130>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006344:	f000 f836 	bl	80063b4 <xTaskIncrementTick>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <xTaskResumeAll+0x12c>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3b01      	subs	r3, #1
 8006358:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f1      	bne.n	8006344 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006360:	4b12      	ldr	r3, [pc, #72]	; (80063ac <xTaskResumeAll+0x130>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006366:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <xTaskResumeAll+0x12c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800636e:	2301      	movs	r3, #1
 8006370:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <xTaskResumeAll+0x134>)
 8006374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006382:	f000 fe97 	bl	80070b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006386:	68bb      	ldr	r3, [r7, #8]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200008e4 	.word	0x200008e4
 8006394:	200008bc 	.word	0x200008bc
 8006398:	2000087c 	.word	0x2000087c
 800639c:	200008c4 	.word	0x200008c4
 80063a0:	200007c0 	.word	0x200007c0
 80063a4:	200007bc 	.word	0x200007bc
 80063a8:	200008d0 	.word	0x200008d0
 80063ac:	200008cc 	.word	0x200008cc
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063be:	4b4e      	ldr	r3, [pc, #312]	; (80064f8 <xTaskIncrementTick+0x144>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f040 808e 	bne.w	80064e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063c8:	4b4c      	ldr	r3, [pc, #304]	; (80064fc <xTaskIncrementTick+0x148>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063d0:	4a4a      	ldr	r2, [pc, #296]	; (80064fc <xTaskIncrementTick+0x148>)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d120      	bne.n	800641e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063dc:	4b48      	ldr	r3, [pc, #288]	; (8006500 <xTaskIncrementTick+0x14c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <xTaskIncrementTick+0x48>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	603b      	str	r3, [r7, #0]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <xTaskIncrementTick+0x46>
 80063fc:	4b40      	ldr	r3, [pc, #256]	; (8006500 <xTaskIncrementTick+0x14c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	4b40      	ldr	r3, [pc, #256]	; (8006504 <xTaskIncrementTick+0x150>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3e      	ldr	r2, [pc, #248]	; (8006500 <xTaskIncrementTick+0x14c>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4a3e      	ldr	r2, [pc, #248]	; (8006504 <xTaskIncrementTick+0x150>)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	4b3d      	ldr	r3, [pc, #244]	; (8006508 <xTaskIncrementTick+0x154>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a3c      	ldr	r2, [pc, #240]	; (8006508 <xTaskIncrementTick+0x154>)
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	f000 faa9 	bl	8006970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <xTaskIncrementTick+0x158>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	429a      	cmp	r2, r3
 8006426:	d348      	bcc.n	80064ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006428:	4b35      	ldr	r3, [pc, #212]	; (8006500 <xTaskIncrementTick+0x14c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006432:	4b36      	ldr	r3, [pc, #216]	; (800650c <xTaskIncrementTick+0x158>)
 8006434:	f04f 32ff 	mov.w	r2, #4294967295
 8006438:	601a      	str	r2, [r3, #0]
					break;
 800643a:	e03e      	b.n	80064ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643c:	4b30      	ldr	r3, [pc, #192]	; (8006500 <xTaskIncrementTick+0x14c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d203      	bcs.n	800645c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006454:	4a2d      	ldr	r2, [pc, #180]	; (800650c <xTaskIncrementTick+0x158>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800645a:	e02e      	b.n	80064ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe fd79 	bl	8004f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3318      	adds	r3, #24
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe fd70 	bl	8004f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	2201      	movs	r2, #1
 800647e:	409a      	lsls	r2, r3
 8006480:	4b23      	ldr	r3, [pc, #140]	; (8006510 <xTaskIncrementTick+0x15c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4313      	orrs	r3, r2
 8006486:	4a22      	ldr	r2, [pc, #136]	; (8006510 <xTaskIncrementTick+0x15c>)
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <xTaskIncrementTick+0x160>)
 8006498:	441a      	add	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3304      	adds	r3, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f7fe fcfc 	bl	8004e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <xTaskIncrementTick+0x164>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d3b9      	bcc.n	8006428 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b8:	e7b6      	b.n	8006428 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064ba:	4b17      	ldr	r3, [pc, #92]	; (8006518 <xTaskIncrementTick+0x164>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c0:	4914      	ldr	r1, [pc, #80]	; (8006514 <xTaskIncrementTick+0x160>)
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d901      	bls.n	80064d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <xTaskIncrementTick+0x168>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80064de:	2301      	movs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e004      	b.n	80064ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <xTaskIncrementTick+0x16c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	4a0d      	ldr	r2, [pc, #52]	; (8006520 <xTaskIncrementTick+0x16c>)
 80064ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064ee:	697b      	ldr	r3, [r7, #20]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	200008e4 	.word	0x200008e4
 80064fc:	200008c0 	.word	0x200008c0
 8006500:	20000874 	.word	0x20000874
 8006504:	20000878 	.word	0x20000878
 8006508:	200008d4 	.word	0x200008d4
 800650c:	200008dc 	.word	0x200008dc
 8006510:	200008c4 	.word	0x200008c4
 8006514:	200007c0 	.word	0x200007c0
 8006518:	200007bc 	.word	0x200007bc
 800651c:	200008d0 	.word	0x200008d0
 8006520:	200008cc 	.word	0x200008cc

08006524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <vTaskSwitchContext+0xac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006532:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <vTaskSwitchContext+0xb0>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006538:	e044      	b.n	80065c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800653a:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <vTaskSwitchContext+0xb0>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <vTaskSwitchContext+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	fab3 f383 	clz	r3, r3
 800654c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	f1c3 031f 	rsb	r3, r3, #31
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	4921      	ldr	r1, [pc, #132]	; (80065dc <vTaskSwitchContext+0xb8>)
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <vTaskSwitchContext+0x5c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	607b      	str	r3, [r7, #4]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <vTaskSwitchContext+0x5a>
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <vTaskSwitchContext+0xb8>)
 800658c:	4413      	add	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3308      	adds	r3, #8
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d104      	bne.n	80065b0 <vTaskSwitchContext+0x8c>
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <vTaskSwitchContext+0xbc>)
 80065b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <vTaskSwitchContext+0xbc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	334c      	adds	r3, #76	; 0x4c
 80065c0:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <vTaskSwitchContext+0xc0>)
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	200008e4 	.word	0x200008e4
 80065d4:	200008d0 	.word	0x200008d0
 80065d8:	200008c4 	.word	0x200008c4
 80065dc:	200007c0 	.word	0x200007c0
 80065e0:	200007bc 	.word	0x200007bc
 80065e4:	20000010 	.word	0x20000010

080065e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	60fb      	str	r3, [r7, #12]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <vTaskPlaceOnEventList+0x44>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3318      	adds	r3, #24
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe fc65 	bl	8004ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800661c:	2101      	movs	r1, #1
 800661e:	6838      	ldr	r0, [r7, #0]
 8006620:	f000 fb82 	bl	8006d28 <prvAddCurrentTaskToDelayedList>
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	200007bc 	.word	0x200007bc

08006630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60fb      	str	r3, [r7, #12]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	3318      	adds	r3, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fc79 	bl	8004f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006666:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <xTaskRemoveFromEventList+0xac>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d11c      	bne.n	80066a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fc70 	bl	8004f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	2201      	movs	r2, #1
 800667e:	409a      	lsls	r2, r3
 8006680:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <xTaskRemoveFromEventList+0xb0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4313      	orrs	r3, r2
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <xTaskRemoveFromEventList+0xb0>)
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <xTaskRemoveFromEventList+0xb4>)
 8006698:	441a      	add	r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3304      	adds	r3, #4
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f7fe fbfc 	bl	8004e9e <vListInsertEnd>
 80066a6:	e005      	b.n	80066b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3318      	adds	r3, #24
 80066ac:	4619      	mov	r1, r3
 80066ae:	480e      	ldr	r0, [pc, #56]	; (80066e8 <xTaskRemoveFromEventList+0xb8>)
 80066b0:	f7fe fbf5 	bl	8004e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <xTaskRemoveFromEventList+0xbc>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d905      	bls.n	80066ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <xTaskRemoveFromEventList+0xc0>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e001      	b.n	80066d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066d2:	697b      	ldr	r3, [r7, #20]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200008e4 	.word	0x200008e4
 80066e0:	200008c4 	.word	0x200008c4
 80066e4:	200007c0 	.word	0x200007c0
 80066e8:	2000087c 	.word	0x2000087c
 80066ec:	200007bc 	.word	0x200007bc
 80066f0:	200008d0 	.word	0x200008d0

080066f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <vTaskInternalSetTimeOutState+0x24>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <vTaskInternalSetTimeOutState+0x28>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	605a      	str	r2, [r3, #4]
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	200008d4 	.word	0x200008d4
 800671c:	200008c0 	.word	0x200008c0

08006720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60fb      	str	r3, [r7, #12]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006762:	f000 fc77 	bl	8007054 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006766:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <xTaskCheckForTimeOut+0xbc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d102      	bne.n	8006786 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e023      	b.n	80067ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <xTaskCheckForTimeOut+0xc0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d007      	beq.n	80067a2 <xTaskCheckForTimeOut+0x82>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	429a      	cmp	r2, r3
 800679a:	d302      	bcc.n	80067a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800679c:	2301      	movs	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	e015      	b.n	80067ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d20b      	bcs.n	80067c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff9b 	bl	80066f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	e004      	b.n	80067ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067ca:	2301      	movs	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067ce:	f000 fc71 	bl	80070b4 <vPortExitCritical>

	return xReturn;
 80067d2:	69fb      	ldr	r3, [r7, #28]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	200008c0 	.word	0x200008c0
 80067e0:	200008d4 	.word	0x200008d4

080067e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067e8:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <vTaskMissedYield+0x14>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
}
 80067ee:	bf00      	nop
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	200008d0 	.word	0x200008d0

080067fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006804:	f000 f852 	bl	80068ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006808:	4b06      	ldr	r3, [pc, #24]	; (8006824 <prvIdleTask+0x28>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d9f9      	bls.n	8006804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <prvIdleTask+0x2c>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006820:	e7f0      	b.n	8006804 <prvIdleTask+0x8>
 8006822:	bf00      	nop
 8006824:	200007c0 	.word	0x200007c0
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	e00c      	b.n	8006852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4a12      	ldr	r2, [pc, #72]	; (800688c <prvInitialiseTaskLists+0x60>)
 8006844:	4413      	add	r3, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fafc 	bl	8004e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b06      	cmp	r3, #6
 8006856:	d9ef      	bls.n	8006838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006858:	480d      	ldr	r0, [pc, #52]	; (8006890 <prvInitialiseTaskLists+0x64>)
 800685a:	f7fe faf3 	bl	8004e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800685e:	480d      	ldr	r0, [pc, #52]	; (8006894 <prvInitialiseTaskLists+0x68>)
 8006860:	f7fe faf0 	bl	8004e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006864:	480c      	ldr	r0, [pc, #48]	; (8006898 <prvInitialiseTaskLists+0x6c>)
 8006866:	f7fe faed 	bl	8004e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800686a:	480c      	ldr	r0, [pc, #48]	; (800689c <prvInitialiseTaskLists+0x70>)
 800686c:	f7fe faea 	bl	8004e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006870:	480b      	ldr	r0, [pc, #44]	; (80068a0 <prvInitialiseTaskLists+0x74>)
 8006872:	f7fe fae7 	bl	8004e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <prvInitialiseTaskLists+0x78>)
 8006878:	4a05      	ldr	r2, [pc, #20]	; (8006890 <prvInitialiseTaskLists+0x64>)
 800687a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <prvInitialiseTaskLists+0x7c>)
 800687e:	4a05      	ldr	r2, [pc, #20]	; (8006894 <prvInitialiseTaskLists+0x68>)
 8006880:	601a      	str	r2, [r3, #0]
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200007c0 	.word	0x200007c0
 8006890:	2000084c 	.word	0x2000084c
 8006894:	20000860 	.word	0x20000860
 8006898:	2000087c 	.word	0x2000087c
 800689c:	20000890 	.word	0x20000890
 80068a0:	200008a8 	.word	0x200008a8
 80068a4:	20000874 	.word	0x20000874
 80068a8:	20000878 	.word	0x20000878

080068ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068b2:	e019      	b.n	80068e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068b4:	f000 fbce 	bl	8007054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <prvCheckTasksWaitingTermination+0x50>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe fb47 	bl	8004f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <prvCheckTasksWaitingTermination+0x54>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <prvCheckTasksWaitingTermination+0x54>)
 80068d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <prvCheckTasksWaitingTermination+0x58>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	4a0a      	ldr	r2, [pc, #40]	; (8006904 <prvCheckTasksWaitingTermination+0x58>)
 80068dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068de:	f000 fbe9 	bl	80070b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f810 	bl	8006908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <prvCheckTasksWaitingTermination+0x58>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e1      	bne.n	80068b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000890 	.word	0x20000890
 8006900:	200008bc 	.word	0x200008bc
 8006904:	200008a4 	.word	0x200008a4

08006908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	334c      	adds	r3, #76	; 0x4c
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f89d 	bl	8007a54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d108      	bne.n	8006936 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fd81 	bl	8007430 <vPortFree>
				vPortFree( pxTCB );
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fd7e 	bl	8007430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006934:	e018      	b.n	8006968 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800693c:	2b01      	cmp	r3, #1
 800693e:	d103      	bne.n	8006948 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fd75 	bl	8007430 <vPortFree>
	}
 8006946:	e00f      	b.n	8006968 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800694e:	2b02      	cmp	r3, #2
 8006950:	d00a      	beq.n	8006968 <prvDeleteTCB+0x60>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60fb      	str	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <prvDeleteTCB+0x5e>
	}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvResetNextTaskUnblockTime+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <prvResetNextTaskUnblockTime+0x3c>)
 8006982:	f04f 32ff 	mov.w	r2, #4294967295
 8006986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006988:	e008      	b.n	800699c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <prvResetNextTaskUnblockTime+0x38>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <prvResetNextTaskUnblockTime+0x3c>)
 800699a:	6013      	str	r3, [r2, #0]
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	20000874 	.word	0x20000874
 80069ac:	200008dc 	.word	0x200008dc

080069b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <xTaskGetSchedulerState+0x34>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069be:	2301      	movs	r3, #1
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	e008      	b.n	80069d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <xTaskGetSchedulerState+0x38>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069cc:	2302      	movs	r3, #2
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	e001      	b.n	80069d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069d2:	2300      	movs	r3, #0
 80069d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069d6:	687b      	ldr	r3, [r7, #4]
	}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	200008c8 	.word	0x200008c8
 80069e8:	200008e4 	.word	0x200008e4

080069ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d05e      	beq.n	8006ac0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	4b31      	ldr	r3, [pc, #196]	; (8006acc <xTaskPriorityInherit+0xe0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d24e      	bcs.n	8006aae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db06      	blt.n	8006a26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a18:	4b2c      	ldr	r3, [pc, #176]	; (8006acc <xTaskPriorityInherit+0xe0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	f1c3 0207 	rsb	r2, r3, #7
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6959      	ldr	r1, [r3, #20]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4a26      	ldr	r2, [pc, #152]	; (8006ad0 <xTaskPriorityInherit+0xe4>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	d12f      	bne.n	8006a9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fa88 	bl	8004f58 <uxListRemove>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	2201      	movs	r2, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43da      	mvns	r2, r3
 8006a5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <xTaskPriorityInherit+0xe8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	4a1c      	ldr	r2, [pc, #112]	; (8006ad4 <xTaskPriorityInherit+0xe8>)
 8006a62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <xTaskPriorityInherit+0xe0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	2201      	movs	r2, #1
 8006a74:	409a      	lsls	r2, r3
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <xTaskPriorityInherit+0xe8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <xTaskPriorityInherit+0xe8>)
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4a10      	ldr	r2, [pc, #64]	; (8006ad0 <xTaskPriorityInherit+0xe4>)
 8006a8e:	441a      	add	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f7fe fa01 	bl	8004e9e <vListInsertEnd>
 8006a9c:	e004      	b.n	8006aa8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <xTaskPriorityInherit+0xe0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e008      	b.n	8006ac0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab2:	4b06      	ldr	r3, [pc, #24]	; (8006acc <xTaskPriorityInherit+0xe0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d201      	bcs.n	8006ac0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200007bc 	.word	0x200007bc
 8006ad0:	200007c0 	.word	0x200007c0
 8006ad4:	200008c4 	.word	0x200008c4

08006ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d06e      	beq.n	8006bcc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006aee:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <xTaskPriorityDisinherit+0x100>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d00a      	beq.n	8006b0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	60fb      	str	r3, [r7, #12]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60bb      	str	r3, [r7, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b30:	1e5a      	subs	r2, r3, #1
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d044      	beq.n	8006bcc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d140      	bne.n	8006bcc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fa02 	bl	8004f58 <uxListRemove>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d115      	bne.n	8006b86 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5e:	491f      	ldr	r1, [pc, #124]	; (8006bdc <xTaskPriorityDisinherit+0x104>)
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xTaskPriorityDisinherit+0xae>
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43da      	mvns	r2, r3
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <xTaskPriorityDisinherit+0x108>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4013      	ands	r3, r2
 8006b82:	4a17      	ldr	r2, [pc, #92]	; (8006be0 <xTaskPriorityDisinherit+0x108>)
 8006b84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	f1c3 0207 	rsb	r2, r3, #7
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <xTaskPriorityDisinherit+0x108>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	4a0d      	ldr	r2, [pc, #52]	; (8006be0 <xTaskPriorityDisinherit+0x108>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <xTaskPriorityDisinherit+0x104>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe f96b 	bl	8004e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bcc:	697b      	ldr	r3, [r7, #20]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200007bc 	.word	0x200007bc
 8006bdc:	200007c0 	.word	0x200007c0
 8006be0:	200008c4 	.word	0x200008c4

08006be4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d077      	beq.n	8006cec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60fb      	str	r3, [r7, #12]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d902      	bls.n	8006c2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	e002      	b.n	8006c30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d058      	beq.n	8006cec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d153      	bne.n	8006cec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d10a      	bne.n	8006c64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60bb      	str	r3, [r7, #8]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db04      	blt.n	8006c82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f1c3 0207 	rsb	r2, r3, #7
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	6959      	ldr	r1, [r3, #20]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006c92:	4413      	add	r3, r2
 8006c94:	4299      	cmp	r1, r3
 8006c96:	d129      	bne.n	8006cec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe f95b 	bl	8004f58 <uxListRemove>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	2201      	movs	r2, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	43da      	mvns	r2, r3
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	4a10      	ldr	r2, [pc, #64]	; (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cbc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	409a      	lsls	r2, r3
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	4a0b      	ldr	r2, [pc, #44]	; (8006cfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4a06      	ldr	r2, [pc, #24]	; (8006cf8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006cde:	441a      	add	r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f7fe f8d9 	bl	8004e9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cec:	bf00      	nop
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200007bc 	.word	0x200007bc
 8006cf8:	200007c0 	.word	0x200007c0
 8006cfc:	200008c4 	.word	0x200008c4

08006d00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d004      	beq.n	8006d16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d12:	3201      	adds	r2, #1
 8006d14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d16:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d18:	681b      	ldr	r3, [r3, #0]
	}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	200007bc 	.word	0x200007bc

08006d28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d32:	4b29      	ldr	r3, [pc, #164]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d38:	4b28      	ldr	r3, [pc, #160]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe f90a 	bl	8004f58 <uxListRemove>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	2201      	movs	r2, #1
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43da      	mvns	r2, r3
 8006d58:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d10a      	bne.n	8006d80 <prvAddCurrentTaskToDelayedList+0x58>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d70:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	481a      	ldr	r0, [pc, #104]	; (8006de4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d7a:	f7fe f890 	bl	8004e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d7e:	e026      	b.n	8006dce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d88:	4b14      	ldr	r3, [pc, #80]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d209      	bcs.n	8006dac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fe f89e 	bl	8004ee6 <vListInsert>
}
 8006daa:	e010      	b.n	8006dce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dac:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7fe f894 	bl	8004ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d202      	bcs.n	8006dce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006dc8:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6013      	str	r3, [r2, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200008c0 	.word	0x200008c0
 8006ddc:	200007bc 	.word	0x200007bc
 8006de0:	200008c4 	.word	0x200008c4
 8006de4:	200008a8 	.word	0x200008a8
 8006de8:	20000878 	.word	0x20000878
 8006dec:	20000874 	.word	0x20000874
 8006df0:	200008dc 	.word	0x200008dc

08006df4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3b04      	subs	r3, #4
 8006e04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3b04      	subs	r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3b04      	subs	r3, #4
 8006e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <pxPortInitialiseStack+0x64>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3b14      	subs	r3, #20
 8006e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f06f 0202 	mvn.w	r2, #2
 8006e42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b20      	subs	r3, #32
 8006e48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	08006e5d 	.word	0x08006e5d

08006e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e66:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <prvTaskExitError+0x54>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d00a      	beq.n	8006e86 <prvTaskExitError+0x2a>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <prvTaskExitError+0x28>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60bb      	str	r3, [r7, #8]
}
 8006e98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e9a:	bf00      	nop
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0fc      	beq.n	8006e9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	2000000c 	.word	0x2000000c
	...

08006ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <pxCurrentTCBConst2>)
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	6808      	ldr	r0, [r1, #0]
 8006ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	f380 8809 	msr	PSP, r0
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f04f 0000 	mov.w	r0, #0
 8006ed6:	f380 8811 	msr	BASEPRI, r0
 8006eda:	4770      	bx	lr
 8006edc:	f3af 8000 	nop.w

08006ee0 <pxCurrentTCBConst2>:
 8006ee0:	200007bc 	.word	0x200007bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ee8:	4808      	ldr	r0, [pc, #32]	; (8006f0c <prvPortStartFirstTask+0x24>)
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	6800      	ldr	r0, [r0, #0]
 8006eee:	f380 8808 	msr	MSP, r0
 8006ef2:	f04f 0000 	mov.w	r0, #0
 8006ef6:	f380 8814 	msr	CONTROL, r0
 8006efa:	b662      	cpsie	i
 8006efc:	b661      	cpsie	f
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	df00      	svc	0
 8006f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f0a:	bf00      	nop
 8006f0c:	e000ed08 	.word	0xe000ed08

08006f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f16:	4b46      	ldr	r3, [pc, #280]	; (8007030 <xPortStartScheduler+0x120>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a46      	ldr	r2, [pc, #280]	; (8007034 <xPortStartScheduler+0x124>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10a      	bne.n	8006f36 <xPortStartScheduler+0x26>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f36:	4b3e      	ldr	r3, [pc, #248]	; (8007030 <xPortStartScheduler+0x120>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a3f      	ldr	r2, [pc, #252]	; (8007038 <xPortStartScheduler+0x128>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d10a      	bne.n	8006f56 <xPortStartScheduler+0x46>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	60fb      	str	r3, [r7, #12]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f56:	4b39      	ldr	r3, [pc, #228]	; (800703c <xPortStartScheduler+0x12c>)
 8006f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	22ff      	movs	r2, #255	; 0xff
 8006f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	4b31      	ldr	r3, [pc, #196]	; (8007040 <xPortStartScheduler+0x130>)
 8006f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <xPortStartScheduler+0x134>)
 8006f80:	2207      	movs	r2, #7
 8006f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f84:	e009      	b.n	8006f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <xPortStartScheduler+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <xPortStartScheduler+0x134>)
 8006f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b80      	cmp	r3, #128	; 0x80
 8006fa4:	d0ef      	beq.n	8006f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fa6:	4b27      	ldr	r3, [pc, #156]	; (8007044 <xPortStartScheduler+0x134>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f1c3 0307 	rsb	r3, r3, #7
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d00a      	beq.n	8006fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	60bb      	str	r3, [r7, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <xPortStartScheduler+0x134>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <xPortStartScheduler+0x134>)
 8006fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <xPortStartScheduler+0x134>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <xPortStartScheduler+0x134>)
 8006fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <xPortStartScheduler+0x138>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <xPortStartScheduler+0x138>)
 8006fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <xPortStartScheduler+0x138>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a14      	ldr	r2, [pc, #80]	; (8007048 <xPortStartScheduler+0x138>)
 8006ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ffe:	f000 f8dd 	bl	80071bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <xPortStartScheduler+0x13c>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007008:	f000 f8fc 	bl	8007204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <xPortStartScheduler+0x140>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a0f      	ldr	r2, [pc, #60]	; (8007050 <xPortStartScheduler+0x140>)
 8007012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007018:	f7ff ff66 	bl	8006ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800701c:	f7ff fa82 	bl	8006524 <vTaskSwitchContext>
	prvTaskExitError();
 8007020:	f7ff ff1c 	bl	8006e5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	e000ed00 	.word	0xe000ed00
 8007034:	410fc271 	.word	0x410fc271
 8007038:	410fc270 	.word	0x410fc270
 800703c:	e000e400 	.word	0xe000e400
 8007040:	200008e8 	.word	0x200008e8
 8007044:	200008ec 	.word	0x200008ec
 8007048:	e000ed20 	.word	0xe000ed20
 800704c:	2000000c 	.word	0x2000000c
 8007050:	e000ef34 	.word	0xe000ef34

08007054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	607b      	str	r3, [r7, #4]
}
 800706c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <vPortEnterCritical+0x58>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3301      	adds	r3, #1
 8007074:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <vPortEnterCritical+0x58>)
 8007076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <vPortEnterCritical+0x58>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10f      	bne.n	80070a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <vPortEnterCritical+0x5c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	603b      	str	r3, [r7, #0]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <vPortEnterCritical+0x4a>
	}
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	2000000c 	.word	0x2000000c
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <vPortExitCritical+0x50>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <vPortExitCritical+0x24>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	607b      	str	r3, [r7, #4]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <vPortExitCritical+0x50>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3b01      	subs	r3, #1
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <vPortExitCritical+0x50>)
 80070e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <vPortExitCritical+0x50>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <vPortExitCritical+0x42>
 80070ea:	2300      	movs	r3, #0
 80070ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f383 8811 	msr	BASEPRI, r3
}
 80070f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	2000000c 	.word	0x2000000c
	...

08007110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007110:	f3ef 8009 	mrs	r0, PSP
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4b15      	ldr	r3, [pc, #84]	; (8007170 <pxCurrentTCBConst>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	f01e 0f10 	tst.w	lr, #16
 8007120:	bf08      	it	eq
 8007122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007134:	f380 8811 	msr	BASEPRI, r0
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f7ff f9f0 	bl	8006524 <vTaskSwitchContext>
 8007144:	f04f 0000 	mov.w	r0, #0
 8007148:	f380 8811 	msr	BASEPRI, r0
 800714c:	bc09      	pop	{r0, r3}
 800714e:	6819      	ldr	r1, [r3, #0]
 8007150:	6808      	ldr	r0, [r1, #0]
 8007152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007156:	f01e 0f10 	tst.w	lr, #16
 800715a:	bf08      	it	eq
 800715c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007160:	f380 8809 	msr	PSP, r0
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst>:
 8007170:	200007bc 	.word	0x200007bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007192:	f7ff f90f 	bl	80063b4 <xTaskIncrementTick>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800719c:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <SysTick_Handler+0x40>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	2300      	movs	r3, #0
 80071a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f383 8811 	msr	BASEPRI, r3
}
 80071ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071c0:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <vPortSetupTimerInterrupt+0x34>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071c6:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <vPortSetupTimerInterrupt+0x38>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071cc:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <vPortSetupTimerInterrupt+0x3c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <vPortSetupTimerInterrupt+0x40>)
 80071d2:	fba2 2303 	umull	r2, r3, r2, r3
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <vPortSetupTimerInterrupt+0x44>)
 80071da:	3b01      	subs	r3, #1
 80071dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071de:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <vPortSetupTimerInterrupt+0x34>)
 80071e0:	2207      	movs	r2, #7
 80071e2:	601a      	str	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	e000e010 	.word	0xe000e010
 80071f4:	e000e018 	.word	0xe000e018
 80071f8:	20000000 	.word	0x20000000
 80071fc:	10624dd3 	.word	0x10624dd3
 8007200:	e000e014 	.word	0xe000e014

08007204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007214 <vPortEnableVFP+0x10>
 8007208:	6801      	ldr	r1, [r0, #0]
 800720a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800720e:	6001      	str	r1, [r0, #0]
 8007210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007212:	bf00      	nop
 8007214:	e000ed88 	.word	0xe000ed88

08007218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800721e:	f3ef 8305 	mrs	r3, IPSR
 8007222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b0f      	cmp	r3, #15
 8007228:	d914      	bls.n	8007254 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800722a:	4a17      	ldr	r2, [pc, #92]	; (8007288 <vPortValidateInterruptPriority+0x70>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007234:	4b15      	ldr	r3, [pc, #84]	; (800728c <vPortValidateInterruptPriority+0x74>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	7afa      	ldrb	r2, [r7, #11]
 800723a:	429a      	cmp	r2, r3
 800723c:	d20a      	bcs.n	8007254 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007254:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <vPortValidateInterruptPriority+0x78>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800725c:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <vPortValidateInterruptPriority+0x7c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d90a      	bls.n	800727a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	603b      	str	r3, [r7, #0]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <vPortValidateInterruptPriority+0x60>
	}
 800727a:	bf00      	nop
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	e000e3f0 	.word	0xe000e3f0
 800728c:	200008e8 	.word	0x200008e8
 8007290:	e000ed0c 	.word	0xe000ed0c
 8007294:	200008ec 	.word	0x200008ec

08007298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072a4:	f7fe ffdc 	bl	8006260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072a8:	4b5b      	ldr	r3, [pc, #364]	; (8007418 <pvPortMalloc+0x180>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072b0:	f000 f920 	bl	80074f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072b4:	4b59      	ldr	r3, [pc, #356]	; (800741c <pvPortMalloc+0x184>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f040 8093 	bne.w	80073e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01d      	beq.n	8007304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072c8:	2208      	movs	r2, #8
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d014      	beq.n	8007304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f023 0307 	bic.w	r3, r3, #7
 80072e0:	3308      	adds	r3, #8
 80072e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <pvPortMalloc+0x6c>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	617b      	str	r3, [r7, #20]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d06e      	beq.n	80073e8 <pvPortMalloc+0x150>
 800730a:	4b45      	ldr	r3, [pc, #276]	; (8007420 <pvPortMalloc+0x188>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d869      	bhi.n	80073e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007314:	4b43      	ldr	r3, [pc, #268]	; (8007424 <pvPortMalloc+0x18c>)
 8007316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007318:	4b42      	ldr	r3, [pc, #264]	; (8007424 <pvPortMalloc+0x18c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800731e:	e004      	b.n	800732a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d903      	bls.n	800733c <pvPortMalloc+0xa4>
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f1      	bne.n	8007320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800733c:	4b36      	ldr	r3, [pc, #216]	; (8007418 <pvPortMalloc+0x180>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	429a      	cmp	r2, r3
 8007344:	d050      	beq.n	80073e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2208      	movs	r2, #8
 800734c:	4413      	add	r3, r2
 800734e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	2308      	movs	r3, #8
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	429a      	cmp	r2, r3
 8007366:	d91f      	bls.n	80073a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <pvPortMalloc+0xf8>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	613b      	str	r3, [r7, #16]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073a2:	69b8      	ldr	r0, [r7, #24]
 80073a4:	f000 f908 	bl	80075b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073a8:	4b1d      	ldr	r3, [pc, #116]	; (8007420 <pvPortMalloc+0x188>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <pvPortMalloc+0x188>)
 80073b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073b6:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <pvPortMalloc+0x188>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <pvPortMalloc+0x190>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d203      	bcs.n	80073ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <pvPortMalloc+0x188>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a18      	ldr	r2, [pc, #96]	; (8007428 <pvPortMalloc+0x190>)
 80073c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <pvPortMalloc+0x184>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <pvPortMalloc+0x194>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3301      	adds	r3, #1
 80073e4:	4a11      	ldr	r2, [pc, #68]	; (800742c <pvPortMalloc+0x194>)
 80073e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073e8:	f7fe ff48 	bl	800627c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <pvPortMalloc+0x174>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	60fb      	str	r3, [r7, #12]
}
 8007408:	bf00      	nop
 800740a:	e7fe      	b.n	800740a <pvPortMalloc+0x172>
	return pvReturn;
 800740c:	69fb      	ldr	r3, [r7, #28]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3728      	adds	r7, #40	; 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20003008 	.word	0x20003008
 800741c:	2000301c 	.word	0x2000301c
 8007420:	2000300c 	.word	0x2000300c
 8007424:	20003000 	.word	0x20003000
 8007428:	20003010 	.word	0x20003010
 800742c:	20003014 	.word	0x20003014

08007430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d04d      	beq.n	80074de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007442:	2308      	movs	r3, #8
 8007444:	425b      	negs	r3, r3
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4413      	add	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <vPortFree+0xb8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4013      	ands	r3, r2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <vPortFree+0x44>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	60fb      	str	r3, [r7, #12]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <vPortFree+0x62>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60bb      	str	r3, [r7, #8]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <vPortFree+0xb8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01e      	beq.n	80074de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d11a      	bne.n	80074de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <vPortFree+0xb8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	401a      	ands	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074b8:	f7fe fed2 	bl	8006260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <vPortFree+0xbc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4413      	add	r3, r2
 80074c6:	4a09      	ldr	r2, [pc, #36]	; (80074ec <vPortFree+0xbc>)
 80074c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ca:	6938      	ldr	r0, [r7, #16]
 80074cc:	f000 f874 	bl	80075b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <vPortFree+0xc0>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3301      	adds	r3, #1
 80074d6:	4a06      	ldr	r2, [pc, #24]	; (80074f0 <vPortFree+0xc0>)
 80074d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074da:	f7fe fecf 	bl	800627c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074de:	bf00      	nop
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	2000301c 	.word	0x2000301c
 80074ec:	2000300c 	.word	0x2000300c
 80074f0:	20003018 	.word	0x20003018

080074f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80074fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007500:	4b27      	ldr	r3, [pc, #156]	; (80075a0 <prvHeapInit+0xac>)
 8007502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00c      	beq.n	8007528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3307      	adds	r3, #7
 8007512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0307 	bic.w	r3, r3, #7
 800751a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <prvHeapInit+0xac>)
 8007524:	4413      	add	r3, r2
 8007526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800752c:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <prvHeapInit+0xb0>)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007532:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <prvHeapInit+0xb0>)
 8007534:	2200      	movs	r2, #0
 8007536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007540:	2208      	movs	r2, #8
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0307 	bic.w	r3, r3, #7
 800754e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <prvHeapInit+0xb4>)
 8007554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <prvHeapInit+0xb4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2200      	movs	r2, #0
 800755c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <prvHeapInit+0xb4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <prvHeapInit+0xb4>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	4a0a      	ldr	r2, [pc, #40]	; (80075ac <prvHeapInit+0xb8>)
 8007582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	4a09      	ldr	r2, [pc, #36]	; (80075b0 <prvHeapInit+0xbc>)
 800758a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <prvHeapInit+0xc0>)
 800758e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	200008f0 	.word	0x200008f0
 80075a4:	20003000 	.word	0x20003000
 80075a8:	20003008 	.word	0x20003008
 80075ac:	20003010 	.word	0x20003010
 80075b0:	2000300c 	.word	0x2000300c
 80075b4:	2000301c 	.word	0x2000301c

080075b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075c0:	4b28      	ldr	r3, [pc, #160]	; (8007664 <prvInsertBlockIntoFreeList+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e002      	b.n	80075cc <prvInsertBlockIntoFreeList+0x14>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d8f7      	bhi.n	80075c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d108      	bne.n	80075fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	441a      	add	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	441a      	add	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d118      	bne.n	8007640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <prvInsertBlockIntoFreeList+0xb0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d00d      	beq.n	8007636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	441a      	add	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e008      	b.n	8007648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvInsertBlockIntoFreeList+0xb0>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e003      	b.n	8007648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	429a      	cmp	r2, r3
 800764e:	d002      	beq.n	8007656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007656:	bf00      	nop
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20003000 	.word	0x20003000
 8007668:	20003008 	.word	0x20003008

0800766c <__errno>:
 800766c:	4b01      	ldr	r3, [pc, #4]	; (8007674 <__errno+0x8>)
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20000010 	.word	0x20000010

08007678 <std>:
 8007678:	2300      	movs	r3, #0
 800767a:	b510      	push	{r4, lr}
 800767c:	4604      	mov	r4, r0
 800767e:	e9c0 3300 	strd	r3, r3, [r0]
 8007682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007686:	6083      	str	r3, [r0, #8]
 8007688:	8181      	strh	r1, [r0, #12]
 800768a:	6643      	str	r3, [r0, #100]	; 0x64
 800768c:	81c2      	strh	r2, [r0, #14]
 800768e:	6183      	str	r3, [r0, #24]
 8007690:	4619      	mov	r1, r3
 8007692:	2208      	movs	r2, #8
 8007694:	305c      	adds	r0, #92	; 0x5c
 8007696:	f000 f91a 	bl	80078ce <memset>
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <std+0x38>)
 800769c:	6263      	str	r3, [r4, #36]	; 0x24
 800769e:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <std+0x3c>)
 80076a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <std+0x40>)
 80076a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <std+0x44>)
 80076a8:	6224      	str	r4, [r4, #32]
 80076aa:	6323      	str	r3, [r4, #48]	; 0x30
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	bf00      	nop
 80076b0:	08007b2d 	.word	0x08007b2d
 80076b4:	08007b4f 	.word	0x08007b4f
 80076b8:	08007b87 	.word	0x08007b87
 80076bc:	08007bab 	.word	0x08007bab

080076c0 <_cleanup_r>:
 80076c0:	4901      	ldr	r1, [pc, #4]	; (80076c8 <_cleanup_r+0x8>)
 80076c2:	f000 b8af 	b.w	8007824 <_fwalk_reent>
 80076c6:	bf00      	nop
 80076c8:	08007d05 	.word	0x08007d05

080076cc <__sfmoreglue>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	2268      	movs	r2, #104	; 0x68
 80076d0:	1e4d      	subs	r5, r1, #1
 80076d2:	4355      	muls	r5, r2
 80076d4:	460e      	mov	r6, r1
 80076d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076da:	f000 f921 	bl	8007920 <_malloc_r>
 80076de:	4604      	mov	r4, r0
 80076e0:	b140      	cbz	r0, 80076f4 <__sfmoreglue+0x28>
 80076e2:	2100      	movs	r1, #0
 80076e4:	e9c0 1600 	strd	r1, r6, [r0]
 80076e8:	300c      	adds	r0, #12
 80076ea:	60a0      	str	r0, [r4, #8]
 80076ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076f0:	f000 f8ed 	bl	80078ce <memset>
 80076f4:	4620      	mov	r0, r4
 80076f6:	bd70      	pop	{r4, r5, r6, pc}

080076f8 <__sfp_lock_acquire>:
 80076f8:	4801      	ldr	r0, [pc, #4]	; (8007700 <__sfp_lock_acquire+0x8>)
 80076fa:	f000 b8d8 	b.w	80078ae <__retarget_lock_acquire_recursive>
 80076fe:	bf00      	nop
 8007700:	20003021 	.word	0x20003021

08007704 <__sfp_lock_release>:
 8007704:	4801      	ldr	r0, [pc, #4]	; (800770c <__sfp_lock_release+0x8>)
 8007706:	f000 b8d3 	b.w	80078b0 <__retarget_lock_release_recursive>
 800770a:	bf00      	nop
 800770c:	20003021 	.word	0x20003021

08007710 <__sinit_lock_acquire>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__sinit_lock_acquire+0x8>)
 8007712:	f000 b8cc 	b.w	80078ae <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	20003022 	.word	0x20003022

0800771c <__sinit_lock_release>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__sinit_lock_release+0x8>)
 800771e:	f000 b8c7 	b.w	80078b0 <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	20003022 	.word	0x20003022

08007728 <__sinit>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	f7ff fff0 	bl	8007710 <__sinit_lock_acquire>
 8007730:	69a3      	ldr	r3, [r4, #24]
 8007732:	b11b      	cbz	r3, 800773c <__sinit+0x14>
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f7ff bff0 	b.w	800771c <__sinit_lock_release>
 800773c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007740:	6523      	str	r3, [r4, #80]	; 0x50
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <__sinit+0x68>)
 8007744:	4a13      	ldr	r2, [pc, #76]	; (8007794 <__sinit+0x6c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	62a2      	str	r2, [r4, #40]	; 0x28
 800774a:	42a3      	cmp	r3, r4
 800774c:	bf04      	itt	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	61a3      	streq	r3, [r4, #24]
 8007752:	4620      	mov	r0, r4
 8007754:	f000 f820 	bl	8007798 <__sfp>
 8007758:	6060      	str	r0, [r4, #4]
 800775a:	4620      	mov	r0, r4
 800775c:	f000 f81c 	bl	8007798 <__sfp>
 8007760:	60a0      	str	r0, [r4, #8]
 8007762:	4620      	mov	r0, r4
 8007764:	f000 f818 	bl	8007798 <__sfp>
 8007768:	2200      	movs	r2, #0
 800776a:	60e0      	str	r0, [r4, #12]
 800776c:	2104      	movs	r1, #4
 800776e:	6860      	ldr	r0, [r4, #4]
 8007770:	f7ff ff82 	bl	8007678 <std>
 8007774:	68a0      	ldr	r0, [r4, #8]
 8007776:	2201      	movs	r2, #1
 8007778:	2109      	movs	r1, #9
 800777a:	f7ff ff7d 	bl	8007678 <std>
 800777e:	68e0      	ldr	r0, [r4, #12]
 8007780:	2202      	movs	r2, #2
 8007782:	2112      	movs	r1, #18
 8007784:	f7ff ff78 	bl	8007678 <std>
 8007788:	2301      	movs	r3, #1
 800778a:	61a3      	str	r3, [r4, #24]
 800778c:	e7d2      	b.n	8007734 <__sinit+0xc>
 800778e:	bf00      	nop
 8007790:	0800885c 	.word	0x0800885c
 8007794:	080076c1 	.word	0x080076c1

08007798 <__sfp>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	4607      	mov	r7, r0
 800779c:	f7ff ffac 	bl	80076f8 <__sfp_lock_acquire>
 80077a0:	4b1e      	ldr	r3, [pc, #120]	; (800781c <__sfp+0x84>)
 80077a2:	681e      	ldr	r6, [r3, #0]
 80077a4:	69b3      	ldr	r3, [r6, #24]
 80077a6:	b913      	cbnz	r3, 80077ae <__sfp+0x16>
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7ff ffbd 	bl	8007728 <__sinit>
 80077ae:	3648      	adds	r6, #72	; 0x48
 80077b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	d503      	bpl.n	80077c0 <__sfp+0x28>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	b30b      	cbz	r3, 8007800 <__sfp+0x68>
 80077bc:	6836      	ldr	r6, [r6, #0]
 80077be:	e7f7      	b.n	80077b0 <__sfp+0x18>
 80077c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077c4:	b9d5      	cbnz	r5, 80077fc <__sfp+0x64>
 80077c6:	4b16      	ldr	r3, [pc, #88]	; (8007820 <__sfp+0x88>)
 80077c8:	60e3      	str	r3, [r4, #12]
 80077ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077ce:	6665      	str	r5, [r4, #100]	; 0x64
 80077d0:	f000 f86c 	bl	80078ac <__retarget_lock_init_recursive>
 80077d4:	f7ff ff96 	bl	8007704 <__sfp_lock_release>
 80077d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077e0:	6025      	str	r5, [r4, #0]
 80077e2:	61a5      	str	r5, [r4, #24]
 80077e4:	2208      	movs	r2, #8
 80077e6:	4629      	mov	r1, r5
 80077e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077ec:	f000 f86f 	bl	80078ce <memset>
 80077f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077f8:	4620      	mov	r0, r4
 80077fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077fc:	3468      	adds	r4, #104	; 0x68
 80077fe:	e7d9      	b.n	80077b4 <__sfp+0x1c>
 8007800:	2104      	movs	r1, #4
 8007802:	4638      	mov	r0, r7
 8007804:	f7ff ff62 	bl	80076cc <__sfmoreglue>
 8007808:	4604      	mov	r4, r0
 800780a:	6030      	str	r0, [r6, #0]
 800780c:	2800      	cmp	r0, #0
 800780e:	d1d5      	bne.n	80077bc <__sfp+0x24>
 8007810:	f7ff ff78 	bl	8007704 <__sfp_lock_release>
 8007814:	230c      	movs	r3, #12
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	e7ee      	b.n	80077f8 <__sfp+0x60>
 800781a:	bf00      	nop
 800781c:	0800885c 	.word	0x0800885c
 8007820:	ffff0001 	.word	0xffff0001

08007824 <_fwalk_reent>:
 8007824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007828:	4606      	mov	r6, r0
 800782a:	4688      	mov	r8, r1
 800782c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007830:	2700      	movs	r7, #0
 8007832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007836:	f1b9 0901 	subs.w	r9, r9, #1
 800783a:	d505      	bpl.n	8007848 <_fwalk_reent+0x24>
 800783c:	6824      	ldr	r4, [r4, #0]
 800783e:	2c00      	cmp	r4, #0
 8007840:	d1f7      	bne.n	8007832 <_fwalk_reent+0xe>
 8007842:	4638      	mov	r0, r7
 8007844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007848:	89ab      	ldrh	r3, [r5, #12]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d907      	bls.n	800785e <_fwalk_reent+0x3a>
 800784e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007852:	3301      	adds	r3, #1
 8007854:	d003      	beq.n	800785e <_fwalk_reent+0x3a>
 8007856:	4629      	mov	r1, r5
 8007858:	4630      	mov	r0, r6
 800785a:	47c0      	blx	r8
 800785c:	4307      	orrs	r7, r0
 800785e:	3568      	adds	r5, #104	; 0x68
 8007860:	e7e9      	b.n	8007836 <_fwalk_reent+0x12>
	...

08007864 <__libc_init_array>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	4d0d      	ldr	r5, [pc, #52]	; (800789c <__libc_init_array+0x38>)
 8007868:	4c0d      	ldr	r4, [pc, #52]	; (80078a0 <__libc_init_array+0x3c>)
 800786a:	1b64      	subs	r4, r4, r5
 800786c:	10a4      	asrs	r4, r4, #2
 800786e:	2600      	movs	r6, #0
 8007870:	42a6      	cmp	r6, r4
 8007872:	d109      	bne.n	8007888 <__libc_init_array+0x24>
 8007874:	4d0b      	ldr	r5, [pc, #44]	; (80078a4 <__libc_init_array+0x40>)
 8007876:	4c0c      	ldr	r4, [pc, #48]	; (80078a8 <__libc_init_array+0x44>)
 8007878:	f000 ff32 	bl	80086e0 <_init>
 800787c:	1b64      	subs	r4, r4, r5
 800787e:	10a4      	asrs	r4, r4, #2
 8007880:	2600      	movs	r6, #0
 8007882:	42a6      	cmp	r6, r4
 8007884:	d105      	bne.n	8007892 <__libc_init_array+0x2e>
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	f855 3b04 	ldr.w	r3, [r5], #4
 800788c:	4798      	blx	r3
 800788e:	3601      	adds	r6, #1
 8007890:	e7ee      	b.n	8007870 <__libc_init_array+0xc>
 8007892:	f855 3b04 	ldr.w	r3, [r5], #4
 8007896:	4798      	blx	r3
 8007898:	3601      	adds	r6, #1
 800789a:	e7f2      	b.n	8007882 <__libc_init_array+0x1e>
 800789c:	0800889c 	.word	0x0800889c
 80078a0:	0800889c 	.word	0x0800889c
 80078a4:	0800889c 	.word	0x0800889c
 80078a8:	080088a0 	.word	0x080088a0

080078ac <__retarget_lock_init_recursive>:
 80078ac:	4770      	bx	lr

080078ae <__retarget_lock_acquire_recursive>:
 80078ae:	4770      	bx	lr

080078b0 <__retarget_lock_release_recursive>:
 80078b0:	4770      	bx	lr

080078b2 <memcpy>:
 80078b2:	440a      	add	r2, r1
 80078b4:	4291      	cmp	r1, r2
 80078b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ba:	d100      	bne.n	80078be <memcpy+0xc>
 80078bc:	4770      	bx	lr
 80078be:	b510      	push	{r4, lr}
 80078c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c8:	4291      	cmp	r1, r2
 80078ca:	d1f9      	bne.n	80078c0 <memcpy+0xe>
 80078cc:	bd10      	pop	{r4, pc}

080078ce <memset>:
 80078ce:	4402      	add	r2, r0
 80078d0:	4603      	mov	r3, r0
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d100      	bne.n	80078d8 <memset+0xa>
 80078d6:	4770      	bx	lr
 80078d8:	f803 1b01 	strb.w	r1, [r3], #1
 80078dc:	e7f9      	b.n	80078d2 <memset+0x4>
	...

080078e0 <sbrk_aligned>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	4e0e      	ldr	r6, [pc, #56]	; (800791c <sbrk_aligned+0x3c>)
 80078e4:	460c      	mov	r4, r1
 80078e6:	6831      	ldr	r1, [r6, #0]
 80078e8:	4605      	mov	r5, r0
 80078ea:	b911      	cbnz	r1, 80078f2 <sbrk_aligned+0x12>
 80078ec:	f000 f90e 	bl	8007b0c <_sbrk_r>
 80078f0:	6030      	str	r0, [r6, #0]
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 f909 	bl	8007b0c <_sbrk_r>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	d00a      	beq.n	8007914 <sbrk_aligned+0x34>
 80078fe:	1cc4      	adds	r4, r0, #3
 8007900:	f024 0403 	bic.w	r4, r4, #3
 8007904:	42a0      	cmp	r0, r4
 8007906:	d007      	beq.n	8007918 <sbrk_aligned+0x38>
 8007908:	1a21      	subs	r1, r4, r0
 800790a:	4628      	mov	r0, r5
 800790c:	f000 f8fe 	bl	8007b0c <_sbrk_r>
 8007910:	3001      	adds	r0, #1
 8007912:	d101      	bne.n	8007918 <sbrk_aligned+0x38>
 8007914:	f04f 34ff 	mov.w	r4, #4294967295
 8007918:	4620      	mov	r0, r4
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	20003028 	.word	0x20003028

08007920 <_malloc_r>:
 8007920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007924:	1ccd      	adds	r5, r1, #3
 8007926:	f025 0503 	bic.w	r5, r5, #3
 800792a:	3508      	adds	r5, #8
 800792c:	2d0c      	cmp	r5, #12
 800792e:	bf38      	it	cc
 8007930:	250c      	movcc	r5, #12
 8007932:	2d00      	cmp	r5, #0
 8007934:	4607      	mov	r7, r0
 8007936:	db01      	blt.n	800793c <_malloc_r+0x1c>
 8007938:	42a9      	cmp	r1, r5
 800793a:	d905      	bls.n	8007948 <_malloc_r+0x28>
 800793c:	230c      	movs	r3, #12
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	2600      	movs	r6, #0
 8007942:	4630      	mov	r0, r6
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	4e2e      	ldr	r6, [pc, #184]	; (8007a04 <_malloc_r+0xe4>)
 800794a:	f000 fa29 	bl	8007da0 <__malloc_lock>
 800794e:	6833      	ldr	r3, [r6, #0]
 8007950:	461c      	mov	r4, r3
 8007952:	bb34      	cbnz	r4, 80079a2 <_malloc_r+0x82>
 8007954:	4629      	mov	r1, r5
 8007956:	4638      	mov	r0, r7
 8007958:	f7ff ffc2 	bl	80078e0 <sbrk_aligned>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	4604      	mov	r4, r0
 8007960:	d14d      	bne.n	80079fe <_malloc_r+0xde>
 8007962:	6834      	ldr	r4, [r6, #0]
 8007964:	4626      	mov	r6, r4
 8007966:	2e00      	cmp	r6, #0
 8007968:	d140      	bne.n	80079ec <_malloc_r+0xcc>
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	4631      	mov	r1, r6
 800796e:	4638      	mov	r0, r7
 8007970:	eb04 0803 	add.w	r8, r4, r3
 8007974:	f000 f8ca 	bl	8007b0c <_sbrk_r>
 8007978:	4580      	cmp	r8, r0
 800797a:	d13a      	bne.n	80079f2 <_malloc_r+0xd2>
 800797c:	6821      	ldr	r1, [r4, #0]
 800797e:	3503      	adds	r5, #3
 8007980:	1a6d      	subs	r5, r5, r1
 8007982:	f025 0503 	bic.w	r5, r5, #3
 8007986:	3508      	adds	r5, #8
 8007988:	2d0c      	cmp	r5, #12
 800798a:	bf38      	it	cc
 800798c:	250c      	movcc	r5, #12
 800798e:	4629      	mov	r1, r5
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ffa5 	bl	80078e0 <sbrk_aligned>
 8007996:	3001      	adds	r0, #1
 8007998:	d02b      	beq.n	80079f2 <_malloc_r+0xd2>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	442b      	add	r3, r5
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	e00e      	b.n	80079c0 <_malloc_r+0xa0>
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	1b52      	subs	r2, r2, r5
 80079a6:	d41e      	bmi.n	80079e6 <_malloc_r+0xc6>
 80079a8:	2a0b      	cmp	r2, #11
 80079aa:	d916      	bls.n	80079da <_malloc_r+0xba>
 80079ac:	1961      	adds	r1, r4, r5
 80079ae:	42a3      	cmp	r3, r4
 80079b0:	6025      	str	r5, [r4, #0]
 80079b2:	bf18      	it	ne
 80079b4:	6059      	strne	r1, [r3, #4]
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	bf08      	it	eq
 80079ba:	6031      	streq	r1, [r6, #0]
 80079bc:	5162      	str	r2, [r4, r5]
 80079be:	604b      	str	r3, [r1, #4]
 80079c0:	4638      	mov	r0, r7
 80079c2:	f104 060b 	add.w	r6, r4, #11
 80079c6:	f000 f9f1 	bl	8007dac <__malloc_unlock>
 80079ca:	f026 0607 	bic.w	r6, r6, #7
 80079ce:	1d23      	adds	r3, r4, #4
 80079d0:	1af2      	subs	r2, r6, r3
 80079d2:	d0b6      	beq.n	8007942 <_malloc_r+0x22>
 80079d4:	1b9b      	subs	r3, r3, r6
 80079d6:	50a3      	str	r3, [r4, r2]
 80079d8:	e7b3      	b.n	8007942 <_malloc_r+0x22>
 80079da:	6862      	ldr	r2, [r4, #4]
 80079dc:	42a3      	cmp	r3, r4
 80079de:	bf0c      	ite	eq
 80079e0:	6032      	streq	r2, [r6, #0]
 80079e2:	605a      	strne	r2, [r3, #4]
 80079e4:	e7ec      	b.n	80079c0 <_malloc_r+0xa0>
 80079e6:	4623      	mov	r3, r4
 80079e8:	6864      	ldr	r4, [r4, #4]
 80079ea:	e7b2      	b.n	8007952 <_malloc_r+0x32>
 80079ec:	4634      	mov	r4, r6
 80079ee:	6876      	ldr	r6, [r6, #4]
 80079f0:	e7b9      	b.n	8007966 <_malloc_r+0x46>
 80079f2:	230c      	movs	r3, #12
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4638      	mov	r0, r7
 80079f8:	f000 f9d8 	bl	8007dac <__malloc_unlock>
 80079fc:	e7a1      	b.n	8007942 <_malloc_r+0x22>
 80079fe:	6025      	str	r5, [r4, #0]
 8007a00:	e7de      	b.n	80079c0 <_malloc_r+0xa0>
 8007a02:	bf00      	nop
 8007a04:	20003024 	.word	0x20003024

08007a08 <iprintf>:
 8007a08:	b40f      	push	{r0, r1, r2, r3}
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <iprintf+0x2c>)
 8007a0c:	b513      	push	{r0, r1, r4, lr}
 8007a0e:	681c      	ldr	r4, [r3, #0]
 8007a10:	b124      	cbz	r4, 8007a1c <iprintf+0x14>
 8007a12:	69a3      	ldr	r3, [r4, #24]
 8007a14:	b913      	cbnz	r3, 8007a1c <iprintf+0x14>
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7ff fe86 	bl	8007728 <__sinit>
 8007a1c:	ab05      	add	r3, sp, #20
 8007a1e:	9a04      	ldr	r2, [sp, #16]
 8007a20:	68a1      	ldr	r1, [r4, #8]
 8007a22:	9301      	str	r3, [sp, #4]
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fa3d 	bl	8007ea4 <_vfiprintf_r>
 8007a2a:	b002      	add	sp, #8
 8007a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a30:	b004      	add	sp, #16
 8007a32:	4770      	bx	lr
 8007a34:	20000010 	.word	0x20000010

08007a38 <cleanup_glue>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	6809      	ldr	r1, [r1, #0]
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b109      	cbz	r1, 8007a46 <cleanup_glue+0xe>
 8007a42:	f7ff fff9 	bl	8007a38 <cleanup_glue>
 8007a46:	4621      	mov	r1, r4
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4e:	f000 b9b3 	b.w	8007db8 <_free_r>
	...

08007a54 <_reclaim_reent>:
 8007a54:	4b2c      	ldr	r3, [pc, #176]	; (8007b08 <_reclaim_reent+0xb4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4283      	cmp	r3, r0
 8007a5a:	b570      	push	{r4, r5, r6, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	d051      	beq.n	8007b04 <_reclaim_reent+0xb0>
 8007a60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a62:	b143      	cbz	r3, 8007a76 <_reclaim_reent+0x22>
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d14a      	bne.n	8007b00 <_reclaim_reent+0xac>
 8007a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6c:	6819      	ldr	r1, [r3, #0]
 8007a6e:	b111      	cbz	r1, 8007a76 <_reclaim_reent+0x22>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f9a1 	bl	8007db8 <_free_r>
 8007a76:	6961      	ldr	r1, [r4, #20]
 8007a78:	b111      	cbz	r1, 8007a80 <_reclaim_reent+0x2c>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f99c 	bl	8007db8 <_free_r>
 8007a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a82:	b111      	cbz	r1, 8007a8a <_reclaim_reent+0x36>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f997 	bl	8007db8 <_free_r>
 8007a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a8c:	b111      	cbz	r1, 8007a94 <_reclaim_reent+0x40>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f992 	bl	8007db8 <_free_r>
 8007a94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a96:	b111      	cbz	r1, 8007a9e <_reclaim_reent+0x4a>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 f98d 	bl	8007db8 <_free_r>
 8007a9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007aa0:	b111      	cbz	r1, 8007aa8 <_reclaim_reent+0x54>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 f988 	bl	8007db8 <_free_r>
 8007aa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007aaa:	b111      	cbz	r1, 8007ab2 <_reclaim_reent+0x5e>
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 f983 	bl	8007db8 <_free_r>
 8007ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ab4:	b111      	cbz	r1, 8007abc <_reclaim_reent+0x68>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 f97e 	bl	8007db8 <_free_r>
 8007abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007abe:	b111      	cbz	r1, 8007ac6 <_reclaim_reent+0x72>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 f979 	bl	8007db8 <_free_r>
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	b1e3      	cbz	r3, 8007b04 <_reclaim_reent+0xb0>
 8007aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007acc:	4620      	mov	r0, r4
 8007ace:	4798      	blx	r3
 8007ad0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ad2:	b1b9      	cbz	r1, 8007b04 <_reclaim_reent+0xb0>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ada:	f7ff bfad 	b.w	8007a38 <cleanup_glue>
 8007ade:	5949      	ldr	r1, [r1, r5]
 8007ae0:	b941      	cbnz	r1, 8007af4 <_reclaim_reent+0xa0>
 8007ae2:	3504      	adds	r5, #4
 8007ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae6:	2d80      	cmp	r5, #128	; 0x80
 8007ae8:	68d9      	ldr	r1, [r3, #12]
 8007aea:	d1f8      	bne.n	8007ade <_reclaim_reent+0x8a>
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 f963 	bl	8007db8 <_free_r>
 8007af2:	e7ba      	b.n	8007a6a <_reclaim_reent+0x16>
 8007af4:	680e      	ldr	r6, [r1, #0]
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 f95e 	bl	8007db8 <_free_r>
 8007afc:	4631      	mov	r1, r6
 8007afe:	e7ef      	b.n	8007ae0 <_reclaim_reent+0x8c>
 8007b00:	2500      	movs	r5, #0
 8007b02:	e7ef      	b.n	8007ae4 <_reclaim_reent+0x90>
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	bf00      	nop
 8007b08:	20000010 	.word	0x20000010

08007b0c <_sbrk_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d06      	ldr	r5, [pc, #24]	; (8007b28 <_sbrk_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	f7f9 fc2a 	bl	8001370 <_sbrk>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_sbrk_r+0x1a>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_sbrk_r+0x1a>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	2000302c 	.word	0x2000302c

08007b2c <__sread>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b34:	f000 fc7a 	bl	800842c <_read_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	bfab      	itete	ge
 8007b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b40:	181b      	addge	r3, r3, r0
 8007b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b46:	bfac      	ite	ge
 8007b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b4a:	81a3      	strhlt	r3, [r4, #12]
 8007b4c:	bd10      	pop	{r4, pc}

08007b4e <__swrite>:
 8007b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b52:	461f      	mov	r7, r3
 8007b54:	898b      	ldrh	r3, [r1, #12]
 8007b56:	05db      	lsls	r3, r3, #23
 8007b58:	4605      	mov	r5, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	d505      	bpl.n	8007b6c <__swrite+0x1e>
 8007b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b64:	2302      	movs	r3, #2
 8007b66:	2200      	movs	r2, #0
 8007b68:	f000 f908 	bl	8007d7c <_lseek_r>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	4632      	mov	r2, r6
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	f000 b817 	b.w	8007bb4 <_write_r>

08007b86 <__sseek>:
 8007b86:	b510      	push	{r4, lr}
 8007b88:	460c      	mov	r4, r1
 8007b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8e:	f000 f8f5 	bl	8007d7c <_lseek_r>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	bf15      	itete	ne
 8007b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ba2:	81a3      	strheq	r3, [r4, #12]
 8007ba4:	bf18      	it	ne
 8007ba6:	81a3      	strhne	r3, [r4, #12]
 8007ba8:	bd10      	pop	{r4, pc}

08007baa <__sclose>:
 8007baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bae:	f000 b813 	b.w	8007bd8 <_close_r>
	...

08007bb4 <_write_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d07      	ldr	r5, [pc, #28]	; (8007bd4 <_write_r+0x20>)
 8007bb8:	4604      	mov	r4, r0
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7f9 fb83 	bl	80012ce <_write>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_write_r+0x1e>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_write_r+0x1e>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	2000302c 	.word	0x2000302c

08007bd8 <_close_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4d06      	ldr	r5, [pc, #24]	; (8007bf4 <_close_r+0x1c>)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4604      	mov	r4, r0
 8007be0:	4608      	mov	r0, r1
 8007be2:	602b      	str	r3, [r5, #0]
 8007be4:	f7f9 fb8f 	bl	8001306 <_close>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_close_r+0x1a>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_close_r+0x1a>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	2000302c 	.word	0x2000302c

08007bf8 <__sflush_r>:
 8007bf8:	898a      	ldrh	r2, [r1, #12]
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	4605      	mov	r5, r0
 8007c00:	0710      	lsls	r0, r2, #28
 8007c02:	460c      	mov	r4, r1
 8007c04:	d458      	bmi.n	8007cb8 <__sflush_r+0xc0>
 8007c06:	684b      	ldr	r3, [r1, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc05      	bgt.n	8007c18 <__sflush_r+0x20>
 8007c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dc02      	bgt.n	8007c18 <__sflush_r+0x20>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d0f9      	beq.n	8007c12 <__sflush_r+0x1a>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c24:	682f      	ldr	r7, [r5, #0]
 8007c26:	602b      	str	r3, [r5, #0]
 8007c28:	d032      	beq.n	8007c90 <__sflush_r+0x98>
 8007c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	075a      	lsls	r2, r3, #29
 8007c30:	d505      	bpl.n	8007c3e <__sflush_r+0x46>
 8007c32:	6863      	ldr	r3, [r4, #4]
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c38:	b10b      	cbz	r3, 8007c3e <__sflush_r+0x46>
 8007c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c3c:	1ac0      	subs	r0, r0, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4602      	mov	r2, r0
 8007c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c44:	6a21      	ldr	r1, [r4, #32]
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b0      	blx	r6
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	d106      	bne.n	8007c5e <__sflush_r+0x66>
 8007c50:	6829      	ldr	r1, [r5, #0]
 8007c52:	291d      	cmp	r1, #29
 8007c54:	d82c      	bhi.n	8007cb0 <__sflush_r+0xb8>
 8007c56:	4a2a      	ldr	r2, [pc, #168]	; (8007d00 <__sflush_r+0x108>)
 8007c58:	40ca      	lsrs	r2, r1
 8007c5a:	07d6      	lsls	r6, r2, #31
 8007c5c:	d528      	bpl.n	8007cb0 <__sflush_r+0xb8>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	6062      	str	r2, [r4, #4]
 8007c62:	04d9      	lsls	r1, r3, #19
 8007c64:	6922      	ldr	r2, [r4, #16]
 8007c66:	6022      	str	r2, [r4, #0]
 8007c68:	d504      	bpl.n	8007c74 <__sflush_r+0x7c>
 8007c6a:	1c42      	adds	r2, r0, #1
 8007c6c:	d101      	bne.n	8007c72 <__sflush_r+0x7a>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b903      	cbnz	r3, 8007c74 <__sflush_r+0x7c>
 8007c72:	6560      	str	r0, [r4, #84]	; 0x54
 8007c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c76:	602f      	str	r7, [r5, #0]
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d0ca      	beq.n	8007c12 <__sflush_r+0x1a>
 8007c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c80:	4299      	cmp	r1, r3
 8007c82:	d002      	beq.n	8007c8a <__sflush_r+0x92>
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f897 	bl	8007db8 <_free_r>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c8e:	e7c1      	b.n	8007c14 <__sflush_r+0x1c>
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	2301      	movs	r3, #1
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b0      	blx	r6
 8007c98:	1c41      	adds	r1, r0, #1
 8007c9a:	d1c7      	bne.n	8007c2c <__sflush_r+0x34>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0c4      	beq.n	8007c2c <__sflush_r+0x34>
 8007ca2:	2b1d      	cmp	r3, #29
 8007ca4:	d001      	beq.n	8007caa <__sflush_r+0xb2>
 8007ca6:	2b16      	cmp	r3, #22
 8007ca8:	d101      	bne.n	8007cae <__sflush_r+0xb6>
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	e7b1      	b.n	8007c12 <__sflush_r+0x1a>
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	e7ad      	b.n	8007c14 <__sflush_r+0x1c>
 8007cb8:	690f      	ldr	r7, [r1, #16]
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d0a9      	beq.n	8007c12 <__sflush_r+0x1a>
 8007cbe:	0793      	lsls	r3, r2, #30
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	bf08      	it	eq
 8007cc4:	694b      	ldreq	r3, [r1, #20]
 8007cc6:	600f      	str	r7, [r1, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	2300      	movne	r3, #0
 8007ccc:	eba6 0807 	sub.w	r8, r6, r7
 8007cd0:	608b      	str	r3, [r1, #8]
 8007cd2:	f1b8 0f00 	cmp.w	r8, #0
 8007cd6:	dd9c      	ble.n	8007c12 <__sflush_r+0x1a>
 8007cd8:	6a21      	ldr	r1, [r4, #32]
 8007cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cdc:	4643      	mov	r3, r8
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b0      	blx	r6
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dc06      	bgt.n	8007cf6 <__sflush_r+0xfe>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e78e      	b.n	8007c14 <__sflush_r+0x1c>
 8007cf6:	4407      	add	r7, r0
 8007cf8:	eba8 0800 	sub.w	r8, r8, r0
 8007cfc:	e7e9      	b.n	8007cd2 <__sflush_r+0xda>
 8007cfe:	bf00      	nop
 8007d00:	20400001 	.word	0x20400001

08007d04 <_fflush_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b913      	cbnz	r3, 8007d14 <_fflush_r+0x10>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	4628      	mov	r0, r5
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	b118      	cbz	r0, 8007d1e <_fflush_r+0x1a>
 8007d16:	6983      	ldr	r3, [r0, #24]
 8007d18:	b90b      	cbnz	r3, 8007d1e <_fflush_r+0x1a>
 8007d1a:	f7ff fd05 	bl	8007728 <__sinit>
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <_fflush_r+0x6c>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d11b      	bne.n	8007d5c <_fflush_r+0x58>
 8007d24:	686c      	ldr	r4, [r5, #4]
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0ef      	beq.n	8007d0e <_fflush_r+0xa>
 8007d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d30:	07d0      	lsls	r0, r2, #31
 8007d32:	d404      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d34:	0599      	lsls	r1, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3a:	f7ff fdb8 	bl	80078ae <__retarget_lock_acquire_recursive>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	4621      	mov	r1, r4
 8007d42:	f7ff ff59 	bl	8007bf8 <__sflush_r>
 8007d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d48:	07da      	lsls	r2, r3, #31
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	d4e0      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	d4dd      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f7ff fdab 	bl	80078b0 <__retarget_lock_release_recursive>
 8007d5a:	e7d9      	b.n	8007d10 <_fflush_r+0xc>
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <_fflush_r+0x70>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <_fflush_r+0x62>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7df      	b.n	8007d26 <_fflush_r+0x22>
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <_fflush_r+0x74>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7da      	b.n	8007d26 <_fflush_r+0x22>
 8007d70:	0800881c 	.word	0x0800881c
 8007d74:	0800883c 	.word	0x0800883c
 8007d78:	080087fc 	.word	0x080087fc

08007d7c <_lseek_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_lseek_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7f9 fae2 	bl	8001354 <_lseek>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_lseek_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_lseek_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2000302c 	.word	0x2000302c

08007da0 <__malloc_lock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__malloc_lock+0x8>)
 8007da2:	f7ff bd84 	b.w	80078ae <__retarget_lock_acquire_recursive>
 8007da6:	bf00      	nop
 8007da8:	20003020 	.word	0x20003020

08007dac <__malloc_unlock>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__malloc_unlock+0x8>)
 8007dae:	f7ff bd7f 	b.w	80078b0 <__retarget_lock_release_recursive>
 8007db2:	bf00      	nop
 8007db4:	20003020 	.word	0x20003020

08007db8 <_free_r>:
 8007db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d044      	beq.n	8007e48 <_free_r+0x90>
 8007dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc2:	9001      	str	r0, [sp, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dca:	bfb8      	it	lt
 8007dcc:	18e4      	addlt	r4, r4, r3
 8007dce:	f7ff ffe7 	bl	8007da0 <__malloc_lock>
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <_free_r+0x94>)
 8007dd4:	9801      	ldr	r0, [sp, #4]
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	b933      	cbnz	r3, 8007de8 <_free_r+0x30>
 8007dda:	6063      	str	r3, [r4, #4]
 8007ddc:	6014      	str	r4, [r2, #0]
 8007dde:	b003      	add	sp, #12
 8007de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007de4:	f7ff bfe2 	b.w	8007dac <__malloc_unlock>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d908      	bls.n	8007dfe <_free_r+0x46>
 8007dec:	6825      	ldr	r5, [r4, #0]
 8007dee:	1961      	adds	r1, r4, r5
 8007df0:	428b      	cmp	r3, r1
 8007df2:	bf01      	itttt	eq
 8007df4:	6819      	ldreq	r1, [r3, #0]
 8007df6:	685b      	ldreq	r3, [r3, #4]
 8007df8:	1949      	addeq	r1, r1, r5
 8007dfa:	6021      	streq	r1, [r4, #0]
 8007dfc:	e7ed      	b.n	8007dda <_free_r+0x22>
 8007dfe:	461a      	mov	r2, r3
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	b10b      	cbz	r3, 8007e08 <_free_r+0x50>
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d9fa      	bls.n	8007dfe <_free_r+0x46>
 8007e08:	6811      	ldr	r1, [r2, #0]
 8007e0a:	1855      	adds	r5, r2, r1
 8007e0c:	42a5      	cmp	r5, r4
 8007e0e:	d10b      	bne.n	8007e28 <_free_r+0x70>
 8007e10:	6824      	ldr	r4, [r4, #0]
 8007e12:	4421      	add	r1, r4
 8007e14:	1854      	adds	r4, r2, r1
 8007e16:	42a3      	cmp	r3, r4
 8007e18:	6011      	str	r1, [r2, #0]
 8007e1a:	d1e0      	bne.n	8007dde <_free_r+0x26>
 8007e1c:	681c      	ldr	r4, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	6053      	str	r3, [r2, #4]
 8007e22:	4421      	add	r1, r4
 8007e24:	6011      	str	r1, [r2, #0]
 8007e26:	e7da      	b.n	8007dde <_free_r+0x26>
 8007e28:	d902      	bls.n	8007e30 <_free_r+0x78>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	e7d6      	b.n	8007dde <_free_r+0x26>
 8007e30:	6825      	ldr	r5, [r4, #0]
 8007e32:	1961      	adds	r1, r4, r5
 8007e34:	428b      	cmp	r3, r1
 8007e36:	bf04      	itt	eq
 8007e38:	6819      	ldreq	r1, [r3, #0]
 8007e3a:	685b      	ldreq	r3, [r3, #4]
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	bf04      	itt	eq
 8007e40:	1949      	addeq	r1, r1, r5
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	6054      	str	r4, [r2, #4]
 8007e46:	e7ca      	b.n	8007dde <_free_r+0x26>
 8007e48:	b003      	add	sp, #12
 8007e4a:	bd30      	pop	{r4, r5, pc}
 8007e4c:	20003024 	.word	0x20003024

08007e50 <__sfputc_r>:
 8007e50:	6893      	ldr	r3, [r2, #8]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	b410      	push	{r4}
 8007e58:	6093      	str	r3, [r2, #8]
 8007e5a:	da08      	bge.n	8007e6e <__sfputc_r+0x1e>
 8007e5c:	6994      	ldr	r4, [r2, #24]
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	db01      	blt.n	8007e66 <__sfputc_r+0x16>
 8007e62:	290a      	cmp	r1, #10
 8007e64:	d103      	bne.n	8007e6e <__sfputc_r+0x1e>
 8007e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6a:	f000 baf1 	b.w	8008450 <__swbuf_r>
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	1c58      	adds	r0, r3, #1
 8007e72:	6010      	str	r0, [r2, #0]
 8007e74:	7019      	strb	r1, [r3, #0]
 8007e76:	4608      	mov	r0, r1
 8007e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <__sfputs_r>:
 8007e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e80:	4606      	mov	r6, r0
 8007e82:	460f      	mov	r7, r1
 8007e84:	4614      	mov	r4, r2
 8007e86:	18d5      	adds	r5, r2, r3
 8007e88:	42ac      	cmp	r4, r5
 8007e8a:	d101      	bne.n	8007e90 <__sfputs_r+0x12>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e007      	b.n	8007ea0 <__sfputs_r+0x22>
 8007e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e94:	463a      	mov	r2, r7
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ffda 	bl	8007e50 <__sfputc_r>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d1f3      	bne.n	8007e88 <__sfputs_r+0xa>
 8007ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ea4 <_vfiprintf_r>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	460d      	mov	r5, r1
 8007eaa:	b09d      	sub	sp, #116	; 0x74
 8007eac:	4614      	mov	r4, r2
 8007eae:	4698      	mov	r8, r3
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	b118      	cbz	r0, 8007ebc <_vfiprintf_r+0x18>
 8007eb4:	6983      	ldr	r3, [r0, #24]
 8007eb6:	b90b      	cbnz	r3, 8007ebc <_vfiprintf_r+0x18>
 8007eb8:	f7ff fc36 	bl	8007728 <__sinit>
 8007ebc:	4b89      	ldr	r3, [pc, #548]	; (80080e4 <_vfiprintf_r+0x240>)
 8007ebe:	429d      	cmp	r5, r3
 8007ec0:	d11b      	bne.n	8007efa <_vfiprintf_r+0x56>
 8007ec2:	6875      	ldr	r5, [r6, #4]
 8007ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ec6:	07d9      	lsls	r1, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_vfiprintf_r+0x32>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	059a      	lsls	r2, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_vfiprintf_r+0x32>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed2:	f7ff fcec 	bl	80078ae <__retarget_lock_acquire_recursive>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	071b      	lsls	r3, r3, #28
 8007eda:	d501      	bpl.n	8007ee0 <_vfiprintf_r+0x3c>
 8007edc:	692b      	ldr	r3, [r5, #16]
 8007ede:	b9eb      	cbnz	r3, 8007f1c <_vfiprintf_r+0x78>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 fb06 	bl	80084f4 <__swsetup_r>
 8007ee8:	b1c0      	cbz	r0, 8007f1c <_vfiprintf_r+0x78>
 8007eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eec:	07dc      	lsls	r4, r3, #31
 8007eee:	d50e      	bpl.n	8007f0e <_vfiprintf_r+0x6a>
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	b01d      	add	sp, #116	; 0x74
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	4b7b      	ldr	r3, [pc, #492]	; (80080e8 <_vfiprintf_r+0x244>)
 8007efc:	429d      	cmp	r5, r3
 8007efe:	d101      	bne.n	8007f04 <_vfiprintf_r+0x60>
 8007f00:	68b5      	ldr	r5, [r6, #8]
 8007f02:	e7df      	b.n	8007ec4 <_vfiprintf_r+0x20>
 8007f04:	4b79      	ldr	r3, [pc, #484]	; (80080ec <_vfiprintf_r+0x248>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	bf08      	it	eq
 8007f0a:	68f5      	ldreq	r5, [r6, #12]
 8007f0c:	e7da      	b.n	8007ec4 <_vfiprintf_r+0x20>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	0598      	lsls	r0, r3, #22
 8007f12:	d4ed      	bmi.n	8007ef0 <_vfiprintf_r+0x4c>
 8007f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f16:	f7ff fccb 	bl	80078b0 <__retarget_lock_release_recursive>
 8007f1a:	e7e9      	b.n	8007ef0 <_vfiprintf_r+0x4c>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	2320      	movs	r3, #32
 8007f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2a:	2330      	movs	r3, #48	; 0x30
 8007f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80080f0 <_vfiprintf_r+0x24c>
 8007f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f34:	f04f 0901 	mov.w	r9, #1
 8007f38:	4623      	mov	r3, r4
 8007f3a:	469a      	mov	sl, r3
 8007f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f40:	b10a      	cbz	r2, 8007f46 <_vfiprintf_r+0xa2>
 8007f42:	2a25      	cmp	r2, #37	; 0x25
 8007f44:	d1f9      	bne.n	8007f3a <_vfiprintf_r+0x96>
 8007f46:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4a:	d00b      	beq.n	8007f64 <_vfiprintf_r+0xc0>
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ff93 	bl	8007e7e <__sfputs_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f000 80aa 	beq.w	80080b2 <_vfiprintf_r+0x20e>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f60:	445a      	add	r2, fp
 8007f62:	9209      	str	r2, [sp, #36]	; 0x24
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a2 	beq.w	80080b2 <_vfiprintf_r+0x20e>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f78:	f10a 0a01 	add.w	sl, sl, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f84:	931a      	str	r3, [sp, #104]	; 0x68
 8007f86:	4654      	mov	r4, sl
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8e:	4858      	ldr	r0, [pc, #352]	; (80080f0 <_vfiprintf_r+0x24c>)
 8007f90:	f7f8 f92e 	bl	80001f0 <memchr>
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	b9d8      	cbnz	r0, 8007fd0 <_vfiprintf_r+0x12c>
 8007f98:	06d1      	lsls	r1, r2, #27
 8007f9a:	bf44      	itt	mi
 8007f9c:	2320      	movmi	r3, #32
 8007f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa2:	0713      	lsls	r3, r2, #28
 8007fa4:	bf44      	itt	mi
 8007fa6:	232b      	movmi	r3, #43	; 0x2b
 8007fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb2:	d015      	beq.n	8007fe0 <_vfiprintf_r+0x13c>
 8007fb4:	9a07      	ldr	r2, [sp, #28]
 8007fb6:	4654      	mov	r4, sl
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f04f 0c0a 	mov.w	ip, #10
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc4:	3b30      	subs	r3, #48	; 0x30
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d94e      	bls.n	8008068 <_vfiprintf_r+0x1c4>
 8007fca:	b1b0      	cbz	r0, 8007ffa <_vfiprintf_r+0x156>
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	e014      	b.n	8007ffa <_vfiprintf_r+0x156>
 8007fd0:	eba0 0308 	sub.w	r3, r0, r8
 8007fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	46a2      	mov	sl, r4
 8007fde:	e7d2      	b.n	8007f86 <_vfiprintf_r+0xe2>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	1d19      	adds	r1, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9103      	str	r1, [sp, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbb      	ittet	lt
 8007fec:	425b      	neglt	r3, r3
 8007fee:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff2:	9307      	strge	r3, [sp, #28]
 8007ff4:	9307      	strlt	r3, [sp, #28]
 8007ff6:	bfb8      	it	lt
 8007ff8:	9204      	strlt	r2, [sp, #16]
 8007ffa:	7823      	ldrb	r3, [r4, #0]
 8007ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ffe:	d10c      	bne.n	800801a <_vfiprintf_r+0x176>
 8008000:	7863      	ldrb	r3, [r4, #1]
 8008002:	2b2a      	cmp	r3, #42	; 0x2a
 8008004:	d135      	bne.n	8008072 <_vfiprintf_r+0x1ce>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d1a      	adds	r2, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9203      	str	r2, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfb8      	it	lt
 8008012:	f04f 33ff 	movlt.w	r3, #4294967295
 8008016:	3402      	adds	r4, #2
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008100 <_vfiprintf_r+0x25c>
 800801e:	7821      	ldrb	r1, [r4, #0]
 8008020:	2203      	movs	r2, #3
 8008022:	4650      	mov	r0, sl
 8008024:	f7f8 f8e4 	bl	80001f0 <memchr>
 8008028:	b140      	cbz	r0, 800803c <_vfiprintf_r+0x198>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	eba0 000a 	sub.w	r0, r0, sl
 8008030:	fa03 f000 	lsl.w	r0, r3, r0
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	4303      	orrs	r3, r0
 8008038:	3401      	adds	r4, #1
 800803a:	9304      	str	r3, [sp, #16]
 800803c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008040:	482c      	ldr	r0, [pc, #176]	; (80080f4 <_vfiprintf_r+0x250>)
 8008042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008046:	2206      	movs	r2, #6
 8008048:	f7f8 f8d2 	bl	80001f0 <memchr>
 800804c:	2800      	cmp	r0, #0
 800804e:	d03f      	beq.n	80080d0 <_vfiprintf_r+0x22c>
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <_vfiprintf_r+0x254>)
 8008052:	bb1b      	cbnz	r3, 800809c <_vfiprintf_r+0x1f8>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	3307      	adds	r3, #7
 8008058:	f023 0307 	bic.w	r3, r3, #7
 800805c:	3308      	adds	r3, #8
 800805e:	9303      	str	r3, [sp, #12]
 8008060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008062:	443b      	add	r3, r7
 8008064:	9309      	str	r3, [sp, #36]	; 0x24
 8008066:	e767      	b.n	8007f38 <_vfiprintf_r+0x94>
 8008068:	fb0c 3202 	mla	r2, ip, r2, r3
 800806c:	460c      	mov	r4, r1
 800806e:	2001      	movs	r0, #1
 8008070:	e7a5      	b.n	8007fbe <_vfiprintf_r+0x11a>
 8008072:	2300      	movs	r3, #0
 8008074:	3401      	adds	r4, #1
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	4619      	mov	r1, r3
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4620      	mov	r0, r4
 8008080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008084:	3a30      	subs	r2, #48	; 0x30
 8008086:	2a09      	cmp	r2, #9
 8008088:	d903      	bls.n	8008092 <_vfiprintf_r+0x1ee>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0c5      	beq.n	800801a <_vfiprintf_r+0x176>
 800808e:	9105      	str	r1, [sp, #20]
 8008090:	e7c3      	b.n	800801a <_vfiprintf_r+0x176>
 8008092:	fb0c 2101 	mla	r1, ip, r1, r2
 8008096:	4604      	mov	r4, r0
 8008098:	2301      	movs	r3, #1
 800809a:	e7f0      	b.n	800807e <_vfiprintf_r+0x1da>
 800809c:	ab03      	add	r3, sp, #12
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <_vfiprintf_r+0x258>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	4630      	mov	r0, r6
 80080a8:	f3af 8000 	nop.w
 80080ac:	4607      	mov	r7, r0
 80080ae:	1c78      	adds	r0, r7, #1
 80080b0:	d1d6      	bne.n	8008060 <_vfiprintf_r+0x1bc>
 80080b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b4:	07d9      	lsls	r1, r3, #31
 80080b6:	d405      	bmi.n	80080c4 <_vfiprintf_r+0x220>
 80080b8:	89ab      	ldrh	r3, [r5, #12]
 80080ba:	059a      	lsls	r2, r3, #22
 80080bc:	d402      	bmi.n	80080c4 <_vfiprintf_r+0x220>
 80080be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c0:	f7ff fbf6 	bl	80078b0 <__retarget_lock_release_recursive>
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	065b      	lsls	r3, r3, #25
 80080c8:	f53f af12 	bmi.w	8007ef0 <_vfiprintf_r+0x4c>
 80080cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ce:	e711      	b.n	8007ef4 <_vfiprintf_r+0x50>
 80080d0:	ab03      	add	r3, sp, #12
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	462a      	mov	r2, r5
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <_vfiprintf_r+0x258>)
 80080d8:	a904      	add	r1, sp, #16
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 f880 	bl	80081e0 <_printf_i>
 80080e0:	e7e4      	b.n	80080ac <_vfiprintf_r+0x208>
 80080e2:	bf00      	nop
 80080e4:	0800881c 	.word	0x0800881c
 80080e8:	0800883c 	.word	0x0800883c
 80080ec:	080087fc 	.word	0x080087fc
 80080f0:	08008860 	.word	0x08008860
 80080f4:	0800886a 	.word	0x0800886a
 80080f8:	00000000 	.word	0x00000000
 80080fc:	08007e7f 	.word	0x08007e7f
 8008100:	08008866 	.word	0x08008866

08008104 <_printf_common>:
 8008104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	4616      	mov	r6, r2
 800810a:	4699      	mov	r9, r3
 800810c:	688a      	ldr	r2, [r1, #8]
 800810e:	690b      	ldr	r3, [r1, #16]
 8008110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008114:	4293      	cmp	r3, r2
 8008116:	bfb8      	it	lt
 8008118:	4613      	movlt	r3, r2
 800811a:	6033      	str	r3, [r6, #0]
 800811c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008120:	4607      	mov	r7, r0
 8008122:	460c      	mov	r4, r1
 8008124:	b10a      	cbz	r2, 800812a <_printf_common+0x26>
 8008126:	3301      	adds	r3, #1
 8008128:	6033      	str	r3, [r6, #0]
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	0699      	lsls	r1, r3, #26
 800812e:	bf42      	ittt	mi
 8008130:	6833      	ldrmi	r3, [r6, #0]
 8008132:	3302      	addmi	r3, #2
 8008134:	6033      	strmi	r3, [r6, #0]
 8008136:	6825      	ldr	r5, [r4, #0]
 8008138:	f015 0506 	ands.w	r5, r5, #6
 800813c:	d106      	bne.n	800814c <_printf_common+0x48>
 800813e:	f104 0a19 	add.w	sl, r4, #25
 8008142:	68e3      	ldr	r3, [r4, #12]
 8008144:	6832      	ldr	r2, [r6, #0]
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	42ab      	cmp	r3, r5
 800814a:	dc26      	bgt.n	800819a <_printf_common+0x96>
 800814c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008150:	1e13      	subs	r3, r2, #0
 8008152:	6822      	ldr	r2, [r4, #0]
 8008154:	bf18      	it	ne
 8008156:	2301      	movne	r3, #1
 8008158:	0692      	lsls	r2, r2, #26
 800815a:	d42b      	bmi.n	80081b4 <_printf_common+0xb0>
 800815c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008160:	4649      	mov	r1, r9
 8008162:	4638      	mov	r0, r7
 8008164:	47c0      	blx	r8
 8008166:	3001      	adds	r0, #1
 8008168:	d01e      	beq.n	80081a8 <_printf_common+0xa4>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	68e5      	ldr	r5, [r4, #12]
 800816e:	6832      	ldr	r2, [r6, #0]
 8008170:	f003 0306 	and.w	r3, r3, #6
 8008174:	2b04      	cmp	r3, #4
 8008176:	bf08      	it	eq
 8008178:	1aad      	subeq	r5, r5, r2
 800817a:	68a3      	ldr	r3, [r4, #8]
 800817c:	6922      	ldr	r2, [r4, #16]
 800817e:	bf0c      	ite	eq
 8008180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008184:	2500      	movne	r5, #0
 8008186:	4293      	cmp	r3, r2
 8008188:	bfc4      	itt	gt
 800818a:	1a9b      	subgt	r3, r3, r2
 800818c:	18ed      	addgt	r5, r5, r3
 800818e:	2600      	movs	r6, #0
 8008190:	341a      	adds	r4, #26
 8008192:	42b5      	cmp	r5, r6
 8008194:	d11a      	bne.n	80081cc <_printf_common+0xc8>
 8008196:	2000      	movs	r0, #0
 8008198:	e008      	b.n	80081ac <_printf_common+0xa8>
 800819a:	2301      	movs	r3, #1
 800819c:	4652      	mov	r2, sl
 800819e:	4649      	mov	r1, r9
 80081a0:	4638      	mov	r0, r7
 80081a2:	47c0      	blx	r8
 80081a4:	3001      	adds	r0, #1
 80081a6:	d103      	bne.n	80081b0 <_printf_common+0xac>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b0:	3501      	adds	r5, #1
 80081b2:	e7c6      	b.n	8008142 <_printf_common+0x3e>
 80081b4:	18e1      	adds	r1, r4, r3
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	2030      	movs	r0, #48	; 0x30
 80081ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081be:	4422      	add	r2, r4
 80081c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081c8:	3302      	adds	r3, #2
 80081ca:	e7c7      	b.n	800815c <_printf_common+0x58>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4622      	mov	r2, r4
 80081d0:	4649      	mov	r1, r9
 80081d2:	4638      	mov	r0, r7
 80081d4:	47c0      	blx	r8
 80081d6:	3001      	adds	r0, #1
 80081d8:	d0e6      	beq.n	80081a8 <_printf_common+0xa4>
 80081da:	3601      	adds	r6, #1
 80081dc:	e7d9      	b.n	8008192 <_printf_common+0x8e>
	...

080081e0 <_printf_i>:
 80081e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	7e0f      	ldrb	r7, [r1, #24]
 80081e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081e8:	2f78      	cmp	r7, #120	; 0x78
 80081ea:	4691      	mov	r9, r2
 80081ec:	4680      	mov	r8, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	469a      	mov	sl, r3
 80081f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081f6:	d807      	bhi.n	8008208 <_printf_i+0x28>
 80081f8:	2f62      	cmp	r7, #98	; 0x62
 80081fa:	d80a      	bhi.n	8008212 <_printf_i+0x32>
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	f000 80d8 	beq.w	80083b2 <_printf_i+0x1d2>
 8008202:	2f58      	cmp	r7, #88	; 0x58
 8008204:	f000 80a3 	beq.w	800834e <_printf_i+0x16e>
 8008208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800820c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008210:	e03a      	b.n	8008288 <_printf_i+0xa8>
 8008212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008216:	2b15      	cmp	r3, #21
 8008218:	d8f6      	bhi.n	8008208 <_printf_i+0x28>
 800821a:	a101      	add	r1, pc, #4	; (adr r1, 8008220 <_printf_i+0x40>)
 800821c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008220:	08008279 	.word	0x08008279
 8008224:	0800828d 	.word	0x0800828d
 8008228:	08008209 	.word	0x08008209
 800822c:	08008209 	.word	0x08008209
 8008230:	08008209 	.word	0x08008209
 8008234:	08008209 	.word	0x08008209
 8008238:	0800828d 	.word	0x0800828d
 800823c:	08008209 	.word	0x08008209
 8008240:	08008209 	.word	0x08008209
 8008244:	08008209 	.word	0x08008209
 8008248:	08008209 	.word	0x08008209
 800824c:	08008399 	.word	0x08008399
 8008250:	080082bd 	.word	0x080082bd
 8008254:	0800837b 	.word	0x0800837b
 8008258:	08008209 	.word	0x08008209
 800825c:	08008209 	.word	0x08008209
 8008260:	080083bb 	.word	0x080083bb
 8008264:	08008209 	.word	0x08008209
 8008268:	080082bd 	.word	0x080082bd
 800826c:	08008209 	.word	0x08008209
 8008270:	08008209 	.word	0x08008209
 8008274:	08008383 	.word	0x08008383
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	602a      	str	r2, [r5, #0]
 8008280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008288:	2301      	movs	r3, #1
 800828a:	e0a3      	b.n	80083d4 <_printf_i+0x1f4>
 800828c:	6820      	ldr	r0, [r4, #0]
 800828e:	6829      	ldr	r1, [r5, #0]
 8008290:	0606      	lsls	r6, r0, #24
 8008292:	f101 0304 	add.w	r3, r1, #4
 8008296:	d50a      	bpl.n	80082ae <_printf_i+0xce>
 8008298:	680e      	ldr	r6, [r1, #0]
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	2e00      	cmp	r6, #0
 800829e:	da03      	bge.n	80082a8 <_printf_i+0xc8>
 80082a0:	232d      	movs	r3, #45	; 0x2d
 80082a2:	4276      	negs	r6, r6
 80082a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a8:	485e      	ldr	r0, [pc, #376]	; (8008424 <_printf_i+0x244>)
 80082aa:	230a      	movs	r3, #10
 80082ac:	e019      	b.n	80082e2 <_printf_i+0x102>
 80082ae:	680e      	ldr	r6, [r1, #0]
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082b6:	bf18      	it	ne
 80082b8:	b236      	sxthne	r6, r6
 80082ba:	e7ef      	b.n	800829c <_printf_i+0xbc>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	6820      	ldr	r0, [r4, #0]
 80082c0:	1d19      	adds	r1, r3, #4
 80082c2:	6029      	str	r1, [r5, #0]
 80082c4:	0601      	lsls	r1, r0, #24
 80082c6:	d501      	bpl.n	80082cc <_printf_i+0xec>
 80082c8:	681e      	ldr	r6, [r3, #0]
 80082ca:	e002      	b.n	80082d2 <_printf_i+0xf2>
 80082cc:	0646      	lsls	r6, r0, #25
 80082ce:	d5fb      	bpl.n	80082c8 <_printf_i+0xe8>
 80082d0:	881e      	ldrh	r6, [r3, #0]
 80082d2:	4854      	ldr	r0, [pc, #336]	; (8008424 <_printf_i+0x244>)
 80082d4:	2f6f      	cmp	r7, #111	; 0x6f
 80082d6:	bf0c      	ite	eq
 80082d8:	2308      	moveq	r3, #8
 80082da:	230a      	movne	r3, #10
 80082dc:	2100      	movs	r1, #0
 80082de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082e2:	6865      	ldr	r5, [r4, #4]
 80082e4:	60a5      	str	r5, [r4, #8]
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	bfa2      	ittt	ge
 80082ea:	6821      	ldrge	r1, [r4, #0]
 80082ec:	f021 0104 	bicge.w	r1, r1, #4
 80082f0:	6021      	strge	r1, [r4, #0]
 80082f2:	b90e      	cbnz	r6, 80082f8 <_printf_i+0x118>
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	d04d      	beq.n	8008394 <_printf_i+0x1b4>
 80082f8:	4615      	mov	r5, r2
 80082fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80082fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008302:	5dc7      	ldrb	r7, [r0, r7]
 8008304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008308:	4637      	mov	r7, r6
 800830a:	42bb      	cmp	r3, r7
 800830c:	460e      	mov	r6, r1
 800830e:	d9f4      	bls.n	80082fa <_printf_i+0x11a>
 8008310:	2b08      	cmp	r3, #8
 8008312:	d10b      	bne.n	800832c <_printf_i+0x14c>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	07de      	lsls	r6, r3, #31
 8008318:	d508      	bpl.n	800832c <_printf_i+0x14c>
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6861      	ldr	r1, [r4, #4]
 800831e:	4299      	cmp	r1, r3
 8008320:	bfde      	ittt	le
 8008322:	2330      	movle	r3, #48	; 0x30
 8008324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800832c:	1b52      	subs	r2, r2, r5
 800832e:	6122      	str	r2, [r4, #16]
 8008330:	f8cd a000 	str.w	sl, [sp]
 8008334:	464b      	mov	r3, r9
 8008336:	aa03      	add	r2, sp, #12
 8008338:	4621      	mov	r1, r4
 800833a:	4640      	mov	r0, r8
 800833c:	f7ff fee2 	bl	8008104 <_printf_common>
 8008340:	3001      	adds	r0, #1
 8008342:	d14c      	bne.n	80083de <_printf_i+0x1fe>
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	b004      	add	sp, #16
 800834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834e:	4835      	ldr	r0, [pc, #212]	; (8008424 <_printf_i+0x244>)
 8008350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008354:	6829      	ldr	r1, [r5, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	f851 6b04 	ldr.w	r6, [r1], #4
 800835c:	6029      	str	r1, [r5, #0]
 800835e:	061d      	lsls	r5, r3, #24
 8008360:	d514      	bpl.n	800838c <_printf_i+0x1ac>
 8008362:	07df      	lsls	r7, r3, #31
 8008364:	bf44      	itt	mi
 8008366:	f043 0320 	orrmi.w	r3, r3, #32
 800836a:	6023      	strmi	r3, [r4, #0]
 800836c:	b91e      	cbnz	r6, 8008376 <_printf_i+0x196>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	f023 0320 	bic.w	r3, r3, #32
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	2310      	movs	r3, #16
 8008378:	e7b0      	b.n	80082dc <_printf_i+0xfc>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f043 0320 	orr.w	r3, r3, #32
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	2378      	movs	r3, #120	; 0x78
 8008384:	4828      	ldr	r0, [pc, #160]	; (8008428 <_printf_i+0x248>)
 8008386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800838a:	e7e3      	b.n	8008354 <_printf_i+0x174>
 800838c:	0659      	lsls	r1, r3, #25
 800838e:	bf48      	it	mi
 8008390:	b2b6      	uxthmi	r6, r6
 8008392:	e7e6      	b.n	8008362 <_printf_i+0x182>
 8008394:	4615      	mov	r5, r2
 8008396:	e7bb      	b.n	8008310 <_printf_i+0x130>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	6826      	ldr	r6, [r4, #0]
 800839c:	6961      	ldr	r1, [r4, #20]
 800839e:	1d18      	adds	r0, r3, #4
 80083a0:	6028      	str	r0, [r5, #0]
 80083a2:	0635      	lsls	r5, r6, #24
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0x1cc>
 80083a8:	6019      	str	r1, [r3, #0]
 80083aa:	e002      	b.n	80083b2 <_printf_i+0x1d2>
 80083ac:	0670      	lsls	r0, r6, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0x1c8>
 80083b0:	8019      	strh	r1, [r3, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	6123      	str	r3, [r4, #16]
 80083b6:	4615      	mov	r5, r2
 80083b8:	e7ba      	b.n	8008330 <_printf_i+0x150>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	1d1a      	adds	r2, r3, #4
 80083be:	602a      	str	r2, [r5, #0]
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	6862      	ldr	r2, [r4, #4]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7f7 ff12 	bl	80001f0 <memchr>
 80083cc:	b108      	cbz	r0, 80083d2 <_printf_i+0x1f2>
 80083ce:	1b40      	subs	r0, r0, r5
 80083d0:	6060      	str	r0, [r4, #4]
 80083d2:	6863      	ldr	r3, [r4, #4]
 80083d4:	6123      	str	r3, [r4, #16]
 80083d6:	2300      	movs	r3, #0
 80083d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083dc:	e7a8      	b.n	8008330 <_printf_i+0x150>
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4649      	mov	r1, r9
 80083e4:	4640      	mov	r0, r8
 80083e6:	47d0      	blx	sl
 80083e8:	3001      	adds	r0, #1
 80083ea:	d0ab      	beq.n	8008344 <_printf_i+0x164>
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	079b      	lsls	r3, r3, #30
 80083f0:	d413      	bmi.n	800841a <_printf_i+0x23a>
 80083f2:	68e0      	ldr	r0, [r4, #12]
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	4298      	cmp	r0, r3
 80083f8:	bfb8      	it	lt
 80083fa:	4618      	movlt	r0, r3
 80083fc:	e7a4      	b.n	8008348 <_printf_i+0x168>
 80083fe:	2301      	movs	r3, #1
 8008400:	4632      	mov	r2, r6
 8008402:	4649      	mov	r1, r9
 8008404:	4640      	mov	r0, r8
 8008406:	47d0      	blx	sl
 8008408:	3001      	adds	r0, #1
 800840a:	d09b      	beq.n	8008344 <_printf_i+0x164>
 800840c:	3501      	adds	r5, #1
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	9903      	ldr	r1, [sp, #12]
 8008412:	1a5b      	subs	r3, r3, r1
 8008414:	42ab      	cmp	r3, r5
 8008416:	dcf2      	bgt.n	80083fe <_printf_i+0x21e>
 8008418:	e7eb      	b.n	80083f2 <_printf_i+0x212>
 800841a:	2500      	movs	r5, #0
 800841c:	f104 0619 	add.w	r6, r4, #25
 8008420:	e7f5      	b.n	800840e <_printf_i+0x22e>
 8008422:	bf00      	nop
 8008424:	08008871 	.word	0x08008871
 8008428:	08008882 	.word	0x08008882

0800842c <_read_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	; (800844c <_read_r+0x20>)
 8008430:	4604      	mov	r4, r0
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	2200      	movs	r2, #0
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7f8 ff2a 	bl	8001294 <_read>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_read_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_read_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	2000302c 	.word	0x2000302c

08008450 <__swbuf_r>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	460e      	mov	r6, r1
 8008454:	4614      	mov	r4, r2
 8008456:	4605      	mov	r5, r0
 8008458:	b118      	cbz	r0, 8008462 <__swbuf_r+0x12>
 800845a:	6983      	ldr	r3, [r0, #24]
 800845c:	b90b      	cbnz	r3, 8008462 <__swbuf_r+0x12>
 800845e:	f7ff f963 	bl	8007728 <__sinit>
 8008462:	4b21      	ldr	r3, [pc, #132]	; (80084e8 <__swbuf_r+0x98>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d12b      	bne.n	80084c0 <__swbuf_r+0x70>
 8008468:	686c      	ldr	r4, [r5, #4]
 800846a:	69a3      	ldr	r3, [r4, #24]
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	071a      	lsls	r2, r3, #28
 8008472:	d52f      	bpl.n	80084d4 <__swbuf_r+0x84>
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	b36b      	cbz	r3, 80084d4 <__swbuf_r+0x84>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	6820      	ldr	r0, [r4, #0]
 800847c:	1ac0      	subs	r0, r0, r3
 800847e:	6963      	ldr	r3, [r4, #20]
 8008480:	b2f6      	uxtb	r6, r6
 8008482:	4283      	cmp	r3, r0
 8008484:	4637      	mov	r7, r6
 8008486:	dc04      	bgt.n	8008492 <__swbuf_r+0x42>
 8008488:	4621      	mov	r1, r4
 800848a:	4628      	mov	r0, r5
 800848c:	f7ff fc3a 	bl	8007d04 <_fflush_r>
 8008490:	bb30      	cbnz	r0, 80084e0 <__swbuf_r+0x90>
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	3b01      	subs	r3, #1
 8008496:	60a3      	str	r3, [r4, #8]
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	6022      	str	r2, [r4, #0]
 800849e:	701e      	strb	r6, [r3, #0]
 80084a0:	6963      	ldr	r3, [r4, #20]
 80084a2:	3001      	adds	r0, #1
 80084a4:	4283      	cmp	r3, r0
 80084a6:	d004      	beq.n	80084b2 <__swbuf_r+0x62>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	07db      	lsls	r3, r3, #31
 80084ac:	d506      	bpl.n	80084bc <__swbuf_r+0x6c>
 80084ae:	2e0a      	cmp	r6, #10
 80084b0:	d104      	bne.n	80084bc <__swbuf_r+0x6c>
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f7ff fc25 	bl	8007d04 <_fflush_r>
 80084ba:	b988      	cbnz	r0, 80084e0 <__swbuf_r+0x90>
 80084bc:	4638      	mov	r0, r7
 80084be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <__swbuf_r+0x9c>)
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d101      	bne.n	80084ca <__swbuf_r+0x7a>
 80084c6:	68ac      	ldr	r4, [r5, #8]
 80084c8:	e7cf      	b.n	800846a <__swbuf_r+0x1a>
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <__swbuf_r+0xa0>)
 80084cc:	429c      	cmp	r4, r3
 80084ce:	bf08      	it	eq
 80084d0:	68ec      	ldreq	r4, [r5, #12]
 80084d2:	e7ca      	b.n	800846a <__swbuf_r+0x1a>
 80084d4:	4621      	mov	r1, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f80c 	bl	80084f4 <__swsetup_r>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d0cb      	beq.n	8008478 <__swbuf_r+0x28>
 80084e0:	f04f 37ff 	mov.w	r7, #4294967295
 80084e4:	e7ea      	b.n	80084bc <__swbuf_r+0x6c>
 80084e6:	bf00      	nop
 80084e8:	0800881c 	.word	0x0800881c
 80084ec:	0800883c 	.word	0x0800883c
 80084f0:	080087fc 	.word	0x080087fc

080084f4 <__swsetup_r>:
 80084f4:	4b32      	ldr	r3, [pc, #200]	; (80085c0 <__swsetup_r+0xcc>)
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	681d      	ldr	r5, [r3, #0]
 80084fa:	4606      	mov	r6, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	b125      	cbz	r5, 800850a <__swsetup_r+0x16>
 8008500:	69ab      	ldr	r3, [r5, #24]
 8008502:	b913      	cbnz	r3, 800850a <__swsetup_r+0x16>
 8008504:	4628      	mov	r0, r5
 8008506:	f7ff f90f 	bl	8007728 <__sinit>
 800850a:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <__swsetup_r+0xd0>)
 800850c:	429c      	cmp	r4, r3
 800850e:	d10f      	bne.n	8008530 <__swsetup_r+0x3c>
 8008510:	686c      	ldr	r4, [r5, #4]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008518:	0719      	lsls	r1, r3, #28
 800851a:	d42c      	bmi.n	8008576 <__swsetup_r+0x82>
 800851c:	06dd      	lsls	r5, r3, #27
 800851e:	d411      	bmi.n	8008544 <__swsetup_r+0x50>
 8008520:	2309      	movs	r3, #9
 8008522:	6033      	str	r3, [r6, #0]
 8008524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	e03e      	b.n	80085ae <__swsetup_r+0xba>
 8008530:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <__swsetup_r+0xd4>)
 8008532:	429c      	cmp	r4, r3
 8008534:	d101      	bne.n	800853a <__swsetup_r+0x46>
 8008536:	68ac      	ldr	r4, [r5, #8]
 8008538:	e7eb      	b.n	8008512 <__swsetup_r+0x1e>
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <__swsetup_r+0xd8>)
 800853c:	429c      	cmp	r4, r3
 800853e:	bf08      	it	eq
 8008540:	68ec      	ldreq	r4, [r5, #12]
 8008542:	e7e6      	b.n	8008512 <__swsetup_r+0x1e>
 8008544:	0758      	lsls	r0, r3, #29
 8008546:	d512      	bpl.n	800856e <__swsetup_r+0x7a>
 8008548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800854a:	b141      	cbz	r1, 800855e <__swsetup_r+0x6a>
 800854c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008550:	4299      	cmp	r1, r3
 8008552:	d002      	beq.n	800855a <__swsetup_r+0x66>
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fc2f 	bl	8007db8 <_free_r>
 800855a:	2300      	movs	r3, #0
 800855c:	6363      	str	r3, [r4, #52]	; 0x34
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	2300      	movs	r3, #0
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	f043 0308 	orr.w	r3, r3, #8
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	b94b      	cbnz	r3, 800858e <__swsetup_r+0x9a>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008584:	d003      	beq.n	800858e <__swsetup_r+0x9a>
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f847 	bl	800861c <__smakebuf_r>
 800858e:	89a0      	ldrh	r0, [r4, #12]
 8008590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008594:	f010 0301 	ands.w	r3, r0, #1
 8008598:	d00a      	beq.n	80085b0 <__swsetup_r+0xbc>
 800859a:	2300      	movs	r3, #0
 800859c:	60a3      	str	r3, [r4, #8]
 800859e:	6963      	ldr	r3, [r4, #20]
 80085a0:	425b      	negs	r3, r3
 80085a2:	61a3      	str	r3, [r4, #24]
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	b943      	cbnz	r3, 80085ba <__swsetup_r+0xc6>
 80085a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085ac:	d1ba      	bne.n	8008524 <__swsetup_r+0x30>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	0781      	lsls	r1, r0, #30
 80085b2:	bf58      	it	pl
 80085b4:	6963      	ldrpl	r3, [r4, #20]
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	e7f4      	b.n	80085a4 <__swsetup_r+0xb0>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e7f7      	b.n	80085ae <__swsetup_r+0xba>
 80085be:	bf00      	nop
 80085c0:	20000010 	.word	0x20000010
 80085c4:	0800881c 	.word	0x0800881c
 80085c8:	0800883c 	.word	0x0800883c
 80085cc:	080087fc 	.word	0x080087fc

080085d0 <__swhatbuf_r>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	460e      	mov	r6, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	2900      	cmp	r1, #0
 80085da:	b096      	sub	sp, #88	; 0x58
 80085dc:	4614      	mov	r4, r2
 80085de:	461d      	mov	r5, r3
 80085e0:	da08      	bge.n	80085f4 <__swhatbuf_r+0x24>
 80085e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	602a      	str	r2, [r5, #0]
 80085ea:	061a      	lsls	r2, r3, #24
 80085ec:	d410      	bmi.n	8008610 <__swhatbuf_r+0x40>
 80085ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f2:	e00e      	b.n	8008612 <__swhatbuf_r+0x42>
 80085f4:	466a      	mov	r2, sp
 80085f6:	f000 f851 	bl	800869c <_fstat_r>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	dbf1      	blt.n	80085e2 <__swhatbuf_r+0x12>
 80085fe:	9a01      	ldr	r2, [sp, #4]
 8008600:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008604:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008608:	425a      	negs	r2, r3
 800860a:	415a      	adcs	r2, r3
 800860c:	602a      	str	r2, [r5, #0]
 800860e:	e7ee      	b.n	80085ee <__swhatbuf_r+0x1e>
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	2000      	movs	r0, #0
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	b016      	add	sp, #88	; 0x58
 8008618:	bd70      	pop	{r4, r5, r6, pc}
	...

0800861c <__smakebuf_r>:
 800861c:	898b      	ldrh	r3, [r1, #12]
 800861e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008620:	079d      	lsls	r5, r3, #30
 8008622:	4606      	mov	r6, r0
 8008624:	460c      	mov	r4, r1
 8008626:	d507      	bpl.n	8008638 <__smakebuf_r+0x1c>
 8008628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	6123      	str	r3, [r4, #16]
 8008630:	2301      	movs	r3, #1
 8008632:	6163      	str	r3, [r4, #20]
 8008634:	b002      	add	sp, #8
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	ab01      	add	r3, sp, #4
 800863a:	466a      	mov	r2, sp
 800863c:	f7ff ffc8 	bl	80085d0 <__swhatbuf_r>
 8008640:	9900      	ldr	r1, [sp, #0]
 8008642:	4605      	mov	r5, r0
 8008644:	4630      	mov	r0, r6
 8008646:	f7ff f96b 	bl	8007920 <_malloc_r>
 800864a:	b948      	cbnz	r0, 8008660 <__smakebuf_r+0x44>
 800864c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008650:	059a      	lsls	r2, r3, #22
 8008652:	d4ef      	bmi.n	8008634 <__smakebuf_r+0x18>
 8008654:	f023 0303 	bic.w	r3, r3, #3
 8008658:	f043 0302 	orr.w	r3, r3, #2
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	e7e3      	b.n	8008628 <__smakebuf_r+0xc>
 8008660:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <__smakebuf_r+0x7c>)
 8008662:	62b3      	str	r3, [r6, #40]	; 0x28
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	6020      	str	r0, [r4, #0]
 8008668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	6163      	str	r3, [r4, #20]
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	6120      	str	r0, [r4, #16]
 8008676:	b15b      	cbz	r3, 8008690 <__smakebuf_r+0x74>
 8008678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f81f 	bl	80086c0 <_isatty_r>
 8008682:	b128      	cbz	r0, 8008690 <__smakebuf_r+0x74>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	89a0      	ldrh	r0, [r4, #12]
 8008692:	4305      	orrs	r5, r0
 8008694:	81a5      	strh	r5, [r4, #12]
 8008696:	e7cd      	b.n	8008634 <__smakebuf_r+0x18>
 8008698:	080076c1 	.word	0x080076c1

0800869c <_fstat_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	; (80086bc <_fstat_r+0x20>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7f8 fe38 	bl	800131e <_fstat>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d102      	bne.n	80086b8 <_fstat_r+0x1c>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b103      	cbz	r3, 80086b8 <_fstat_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	bf00      	nop
 80086bc:	2000302c 	.word	0x2000302c

080086c0 <_isatty_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_isatty_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f8 fe37 	bl	800133e <_isatty>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_isatty_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_isatty_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	2000302c 	.word	0x2000302c

080086e0 <_init>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr

080086ec <_fini>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr
